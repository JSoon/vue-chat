(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("../../config.js"), require("../util/longUtil"), require("../client/messageConfig"), require("../messages/mediaMessageContent"), require("../messages/messageStatus"), require("../messages/persistFlag"), require("../model/channelInfo"), require("../model/conversation"), require("../model/conversationType"), require("../model/groupInfo"), require("../model/groupMemberType"), require("../model/nullGroupInfo"), require("../model/nullUserInfo"), require("../model/userInfo"), require("../client/userSettingScope"), require("../model/conversationInfo"), require("../model/internal/friendInfo"), require("../model/NullChannelInfo"), require("../../wfc/util/base64.min"), require("../messages/message"), require("../messages/messageContentType"), require("../messages/notification/recallMessageNotification"), require("../model/chatRoomMemberInfo"), require("../model/friendRequest"), require("../model/groupMember"), require("../client/wfcEvent"), require("../model/unreadCount"), require("../model/friend"), require("../model/groupSearchResult"), require("../client/connectionStatus"), require("../model/userSettingEntry"), require("../client/errorCode"), require("../model/chatRoomInfo"), require("../model/readEntry"), require("../model/fileRecord"), require("../util/base64.min"), require("../messages/markUnreadMessageContent"), require("../model/userOnlineState"), require("../model/userClientState"), require("../model/userCustomState"), require("../model/channelMenu"), require("../messages/compositeMessageContent"));
	else if(typeof define === 'function' && define.amd)
		define(["../../config.js", "../util/longUtil", "../client/messageConfig", "../messages/mediaMessageContent", "../messages/messageStatus", "../messages/persistFlag", "../model/channelInfo", "../model/conversation", "../model/conversationType", "../model/groupInfo", "../model/groupMemberType", "../model/nullGroupInfo", "../model/nullUserInfo", "../model/userInfo", "../client/userSettingScope", "../model/conversationInfo", "../model/internal/friendInfo", "../model/NullChannelInfo", "../../wfc/util/base64.min", "../messages/message", "../messages/messageContentType", "../messages/notification/recallMessageNotification", "../model/chatRoomMemberInfo", "../model/friendRequest", "../model/groupMember", "../client/wfcEvent", "../model/unreadCount", "../model/friend", "../model/groupSearchResult", "../client/connectionStatus", "../model/userSettingEntry", "../client/errorCode", "../model/chatRoomInfo", "../model/readEntry", "../model/fileRecord", "../util/base64.min", "../messages/markUnreadMessageContent", "../model/userOnlineState", "../model/userClientState", "../model/userCustomState", "../model/channelMenu", "../messages/compositeMessageContent"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("../../config.js"), require("../util/longUtil"), require("../client/messageConfig"), require("../messages/mediaMessageContent"), require("../messages/messageStatus"), require("../messages/persistFlag"), require("../model/channelInfo"), require("../model/conversation"), require("../model/conversationType"), require("../model/groupInfo"), require("../model/groupMemberType"), require("../model/nullGroupInfo"), require("../model/nullUserInfo"), require("../model/userInfo"), require("../client/userSettingScope"), require("../model/conversationInfo"), require("../model/internal/friendInfo"), require("../model/NullChannelInfo"), require("../../wfc/util/base64.min"), require("../messages/message"), require("../messages/messageContentType"), require("../messages/notification/recallMessageNotification"), require("../model/chatRoomMemberInfo"), require("../model/friendRequest"), require("../model/groupMember"), require("../client/wfcEvent"), require("../model/unreadCount"), require("../model/friend"), require("../model/groupSearchResult"), require("../client/connectionStatus"), require("../model/userSettingEntry"), require("../client/errorCode"), require("../model/chatRoomInfo"), require("../model/readEntry"), require("../model/fileRecord"), require("../util/base64.min"), require("../messages/markUnreadMessageContent"), require("../model/userOnlineState"), require("../model/userClientState"), require("../model/userCustomState"), require("../model/channelMenu"), require("../messages/compositeMessageContent")) : factory(root["../../config.js"], root["../util/longUtil"], root["../client/messageConfig"], root["../messages/mediaMessageContent"], root["../messages/messageStatus"], root["../messages/persistFlag"], root["../model/channelInfo"], root["../model/conversation"], root["../model/conversationType"], root["../model/groupInfo"], root["../model/groupMemberType"], root["../model/nullGroupInfo"], root["../model/nullUserInfo"], root["../model/userInfo"], root["../client/userSettingScope"], root["../model/conversationInfo"], root["../model/internal/friendInfo"], root["../model/NullChannelInfo"], root["../../wfc/util/base64.min"], root["../messages/message"], root["../messages/messageContentType"], root["../messages/notification/recallMessageNotification"], root["../model/chatRoomMemberInfo"], root["../model/friendRequest"], root["../model/groupMember"], root["../client/wfcEvent"], root["../model/unreadCount"], root["../model/friend"], root["../model/groupSearchResult"], root["../client/connectionStatus"], root["../model/userSettingEntry"], root["../client/errorCode"], root["../model/chatRoomInfo"], root["../model/readEntry"], root["../model/fileRecord"], root["../util/base64.min"], root["../messages/markUnreadMessageContent"], root["../model/userOnlineState"], root["../model/userClientState"], root["../model/userCustomState"], root["../model/channelMenu"], root["../messages/compositeMessageContent"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function(__WEBPACK_EXTERNAL_MODULE__91__, __WEBPACK_EXTERNAL_MODULE__124__, __WEBPACK_EXTERNAL_MODULE__159__, __WEBPACK_EXTERNAL_MODULE__160__, __WEBPACK_EXTERNAL_MODULE__161__, __WEBPACK_EXTERNAL_MODULE__162__, __WEBPACK_EXTERNAL_MODULE__163__, __WEBPACK_EXTERNAL_MODULE__164__, __WEBPACK_EXTERNAL_MODULE__165__, __WEBPACK_EXTERNAL_MODULE__166__, __WEBPACK_EXTERNAL_MODULE__167__, __WEBPACK_EXTERNAL_MODULE__168__, __WEBPACK_EXTERNAL_MODULE__169__, __WEBPACK_EXTERNAL_MODULE__170__, __WEBPACK_EXTERNAL_MODULE__171__, __WEBPACK_EXTERNAL_MODULE__172__, __WEBPACK_EXTERNAL_MODULE__173__, __WEBPACK_EXTERNAL_MODULE__174__, __WEBPACK_EXTERNAL_MODULE__261__, __WEBPACK_EXTERNAL_MODULE__364__, __WEBPACK_EXTERNAL_MODULE__365__, __WEBPACK_EXTERNAL_MODULE__366__, __WEBPACK_EXTERNAL_MODULE__367__, __WEBPACK_EXTERNAL_MODULE__368__, __WEBPACK_EXTERNAL_MODULE__369__, __WEBPACK_EXTERNAL_MODULE__370__, __WEBPACK_EXTERNAL_MODULE__379__, __WEBPACK_EXTERNAL_MODULE__381__, __WEBPACK_EXTERNAL_MODULE__382__, __WEBPACK_EXTERNAL_MODULE__384__, __WEBPACK_EXTERNAL_MODULE__385__, __WEBPACK_EXTERNAL_MODULE__395__, __WEBPACK_EXTERNAL_MODULE__396__, __WEBPACK_EXTERNAL_MODULE__397__, __WEBPACK_EXTERNAL_MODULE__398__, __WEBPACK_EXTERNAL_MODULE__399__, __WEBPACK_EXTERNAL_MODULE__400__, __WEBPACK_EXTERNAL_MODULE__401__, __WEBPACK_EXTERNAL_MODULE__402__, __WEBPACK_EXTERNAL_MODULE__403__, __WEBPACK_EXTERNAL_MODULE__404__, __WEBPACK_EXTERNAL_MODULE__405__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 180);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory();
	}
	else {}
}(this, function () {

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {
	    /*
	     * Local polyfil of Object.create
	     */
	    var create = Object.create || (function () {
	        function F() {};

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }())

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var i = 0; i < thatSigBytes; i += 4) {
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            var r = (function (m_w) {
	                var m_w = m_w;
	                var m_z = 0x3ade68b1;
	                var mask = 0xffffffff;

	                return function () {
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
	                    var result = ((m_z << 0x10) + m_w) & mask;
	                    result /= 0x100000000;
	                    result += 0.5;
	                    return result * (Math.random() > .5 ? 1 : -1);
	                }
	            });

	            for (var i = 0, rcache; i < nBytes; i += 4) {
	                var _r = r((rcache || Math.random()) * 0x100000000);

	                rcache = _r() * 0x3ade67b7;
	                words.push((_r() * 0x100000000) | 0);
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                var processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	return CryptoJS;

}));

/***/ }),
/* 1 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.10' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var core = __webpack_require__(1);
var ctx = __webpack_require__(17);
var hide = __webpack_require__(18);
var has = __webpack_require__(22);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(23));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Cipher core components.
	 */
	CryptoJS.lib.Cipher || (function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var Base64 = C_enc.Base64;
	    var C_algo = C.algo;
	    var EvpKDF = C_algo.EvpKDF;

	    /**
	     * Abstract base cipher template.
	     *
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	     */
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {WordArray} iv The IV to use for this operation.
	         */
	        cfg: Base.extend(),

	        /**
	         * Creates this cipher in encryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createEncryptor: function (key, cfg) {
	            return this.create(this._ENC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Creates this cipher in decryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createDecryptor: function (key, cfg) {
	            return this.create(this._DEC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Initializes a newly created cipher.
	         *
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */
	        init: function (xformMode, key, cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Store transform mode and key
	            this._xformMode = xformMode;
	            this._key = key;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this cipher to its initial state.
	         *
	         * @example
	         *
	         *     cipher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-cipher logic
	            this._doReset();
	        },

	        /**
	         * Adds data to be encrypted or decrypted.
	         *
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.process('data');
	         *     var encrypted = cipher.process(wordArray);
	         */
	        process: function (dataUpdate) {
	            // Append
	            this._append(dataUpdate);

	            // Process available blocks
	            return this._process();
	        },

	        /**
	         * Finalizes the encryption or decryption process.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after final processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.finalize();
	         *     var encrypted = cipher.finalize('data');
	         *     var encrypted = cipher.finalize(wordArray);
	         */
	        finalize: function (dataUpdate) {
	            // Final data update
	            if (dataUpdate) {
	                this._append(dataUpdate);
	            }

	            // Perform concrete-cipher logic
	            var finalProcessedData = this._doFinalize();

	            return finalProcessedData;
	        },

	        keySize: 128/32,

	        ivSize: 128/32,

	        _ENC_XFORM_MODE: 1,

	        _DEC_XFORM_MODE: 2,

	        /**
	         * Creates shortcut functions to a cipher's object interface.
	         *
	         * @param {Cipher} cipher The cipher to create a helper for.
	         *
	         * @return {Object} An object with encrypt and decrypt shortcut functions.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	         */
	        _createHelper: (function () {
	            function selectCipherStrategy(key) {
	                if (typeof key == 'string') {
	                    return PasswordBasedCipher;
	                } else {
	                    return SerializableCipher;
	                }
	            }

	            return function (cipher) {
	                return {
	                    encrypt: function (message, key, cfg) {
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
	                    },

	                    decrypt: function (ciphertext, key, cfg) {
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
	                    }
	                };
	            };
	        }())
	    });

	    /**
	     * Abstract base stream cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	     */
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
	        _doFinalize: function () {
	            // Process partial blocks
	            var finalProcessedBlocks = this._process(!!'flush');

	            return finalProcessedBlocks;
	        },

	        blockSize: 1
	    });

	    /**
	     * Mode namespace.
	     */
	    var C_mode = C.mode = {};

	    /**
	     * Abstract base block cipher mode template.
	     */
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
	        /**
	         * Creates this mode for encryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	         */
	        createEncryptor: function (cipher, iv) {
	            return this.Encryptor.create(cipher, iv);
	        },

	        /**
	         * Creates this mode for decryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	         */
	        createDecryptor: function (cipher, iv) {
	            return this.Decryptor.create(cipher, iv);
	        },

	        /**
	         * Initializes a newly created mode.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	         */
	        init: function (cipher, iv) {
	            this._cipher = cipher;
	            this._iv = iv;
	        }
	    });

	    /**
	     * Cipher Block Chaining mode.
	     */
	    var CBC = C_mode.CBC = (function () {
	        /**
	         * Abstract base CBC mode.
	         */
	        var CBC = BlockCipherMode.extend();

	        /**
	         * CBC encryptor.
	         */
	        CBC.Encryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // XOR and encrypt
	                xorBlock.call(this, words, offset, blockSize);
	                cipher.encryptBlock(words, offset);

	                // Remember this block to use with next block
	                this._prevBlock = words.slice(offset, offset + blockSize);
	            }
	        });

	        /**
	         * CBC decryptor.
	         */
	        CBC.Decryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // Remember this block to use with next block
	                var thisBlock = words.slice(offset, offset + blockSize);

	                // Decrypt and XOR
	                cipher.decryptBlock(words, offset);
	                xorBlock.call(this, words, offset, blockSize);

	                // This block becomes the previous block
	                this._prevBlock = thisBlock;
	            }
	        });

	        function xorBlock(words, offset, blockSize) {
	            // Shortcut
	            var iv = this._iv;

	            // Choose mixing block
	            if (iv) {
	                var block = iv;

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            } else {
	                var block = this._prevBlock;
	            }

	            // XOR blocks
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= block[i];
	            }
	        }

	        return CBC;
	    }());

	    /**
	     * Padding namespace.
	     */
	    var C_pad = C.pad = {};

	    /**
	     * PKCS #5/7 padding strategy.
	     */
	    var Pkcs7 = C_pad.Pkcs7 = {
	        /**
	         * Pads data using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to pad.
	         * @param {number} blockSize The multiple that the data should be padded to.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	         */
	        pad: function (data, blockSize) {
	            // Shortcut
	            var blockSizeBytes = blockSize * 4;

	            // Count padding bytes
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	            // Create padding word
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

	            // Create padding
	            var paddingWords = [];
	            for (var i = 0; i < nPaddingBytes; i += 4) {
	                paddingWords.push(paddingWord);
	            }
	            var padding = WordArray.create(paddingWords, nPaddingBytes);

	            // Add padding
	            data.concat(padding);
	        },

	        /**
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to unpad.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	         */
	        unpad: function (data) {
	            // Get number of padding bytes from last byte
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	            // Remove padding
	            data.sigBytes -= nPaddingBytes;
	        }
	    };

	    /**
	     * Abstract base block cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	     */
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Mode} mode The block mode to use. Default: CBC
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	         */
	        cfg: Cipher.cfg.extend({
	            mode: CBC,
	            padding: Pkcs7
	        }),

	        reset: function () {
	            // Reset cipher
	            Cipher.reset.call(this);

	            // Shortcuts
	            var cfg = this.cfg;
	            var iv = cfg.iv;
	            var mode = cfg.mode;

	            // Reset block mode
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                var modeCreator = mode.createEncryptor;
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                var modeCreator = mode.createDecryptor;
	                // Keep at least one block in the buffer for unpadding
	                this._minBufferSize = 1;
	            }

	            if (this._mode && this._mode.__creator == modeCreator) {
	                this._mode.init(this, iv && iv.words);
	            } else {
	                this._mode = modeCreator.call(mode, this, iv && iv.words);
	                this._mode.__creator = modeCreator;
	            }
	        },

	        _doProcessBlock: function (words, offset) {
	            this._mode.processBlock(words, offset);
	        },

	        _doFinalize: function () {
	            // Shortcut
	            var padding = this.cfg.padding;

	            // Finalize
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                // Pad data
	                padding.pad(this._data, this.blockSize);

	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');

	                // Unpad data
	                padding.unpad(finalProcessedBlocks);
	            }

	            return finalProcessedBlocks;
	        },

	        blockSize: 128/32
	    });

	    /**
	     * A collection of cipher parameters.
	     *
	     * @property {WordArray} ciphertext The raw ciphertext.
	     * @property {WordArray} key The key to this ciphertext.
	     * @property {WordArray} iv The IV used in the ciphering operation.
	     * @property {WordArray} salt The salt used with a key derivation function.
	     * @property {Cipher} algorithm The cipher algorithm.
	     * @property {Mode} mode The block mode used in the ciphering operation.
	     * @property {Padding} padding The padding scheme used in the ciphering operation.
	     * @property {number} blockSize The block size of the cipher.
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */
	    var CipherParams = C_lib.CipherParams = Base.extend({
	        /**
	         * Initializes a newly created cipher params object.
	         *
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
	         */
	        init: function (cipherParams) {
	            this.mixIn(cipherParams);
	        },

	        /**
	         * Converts this cipher params object to a string.
	         *
	         * @param {Format} formatter (Optional) The formatting strategy to use.
	         *
	         * @return {string} The stringified cipher params.
	         *
	         * @throws Error If neither the formatter nor the default formatter is set.
	         *
	         * @example
	         *
	         *     var string = cipherParams + '';
	         *     var string = cipherParams.toString();
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	         */
	        toString: function (formatter) {
	            return (formatter || this.formatter).stringify(this);
	        }
	    });

	    /**
	     * Format namespace.
	     */
	    var C_format = C.format = {};

	    /**
	     * OpenSSL formatting strategy.
	     */
	    var OpenSSLFormatter = C_format.OpenSSL = {
	        /**
	         * Converts a cipher params object to an OpenSSL-compatible string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The OpenSSL-compatible string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            // Shortcuts
	            var ciphertext = cipherParams.ciphertext;
	            var salt = cipherParams.salt;

	            // Format
	            if (salt) {
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
	            } else {
	                var wordArray = ciphertext;
	            }

	            return wordArray.toString(Base64);
	        },

	        /**
	         * Converts an OpenSSL-compatible string to a cipher params object.
	         *
	         * @param {string} openSSLStr The OpenSSL-compatible string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	         */
	        parse: function (openSSLStr) {
	            // Parse base64
	            var ciphertext = Base64.parse(openSSLStr);

	            // Shortcut
	            var ciphertextWords = ciphertext.words;

	            // Test for salt
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
	                // Extract salt
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));

	                // Remove salt from ciphertext
	                ciphertextWords.splice(0, 4);
	                ciphertext.sigBytes -= 16;
	            }

	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
	        }
	    };

	    /**
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	     */
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */
	        cfg: Base.extend({
	            format: OpenSSLFormatter
	        }),

	        /**
	         * Encrypts a message.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Encrypt
	            var encryptor = cipher.createEncryptor(key, cfg);
	            var ciphertext = encryptor.finalize(message);

	            // Shortcut
	            var cipherCfg = encryptor.cfg;

	            // Create and return serializable cipher params
	            return CipherParams.create({
	                ciphertext: ciphertext,
	                key: key,
	                iv: cipherCfg.iv,
	                algorithm: cipher,
	                mode: cipherCfg.mode,
	                padding: cipherCfg.padding,
	                blockSize: cipher.blockSize,
	                formatter: cfg.format
	            });
	        },

	        /**
	         * Decrypts serialized ciphertext.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Decrypt
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

	            return plaintext;
	        },

	        /**
	         * Converts serialized ciphertext to CipherParams,
	         * else assumed CipherParams already and returns ciphertext unchanged.
	         *
	         * @param {CipherParams|string} ciphertext The ciphertext.
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	         *
	         * @return {CipherParams} The unserialized ciphertext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	         */
	        _parse: function (ciphertext, format) {
	            if (typeof ciphertext == 'string') {
	                return format.parse(ciphertext, this);
	            } else {
	                return ciphertext;
	            }
	        }
	    });

	    /**
	     * Key derivation function namespace.
	     */
	    var C_kdf = C.kdf = {};

	    /**
	     * OpenSSL key derivation function.
	     */
	    var OpenSSLKdf = C_kdf.OpenSSL = {
	        /**
	         * Derives a key and IV from a password.
	         *
	         * @param {string} password The password to derive from.
	         * @param {number} keySize The size in words of the key to generate.
	         * @param {number} ivSize The size in words of the IV to generate.
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	         */
	        execute: function (password, keySize, ivSize, salt) {
	            // Generate random salt
	            if (!salt) {
	                salt = WordArray.random(64/8);
	            }

	            // Derive key and IV
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

	            // Separate key and IV
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
	            key.sigBytes = keySize * 4;

	            // Return params
	            return CipherParams.create({ key: key, iv: iv, salt: salt });
	        }
	    };

	    /**
	     * A serializable cipher wrapper that derives the key from a password,
	     * and returns ciphertext as a serializable cipher params object.
	     */
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */
	        cfg: SerializableCipher.cfg.extend({
	            kdf: OpenSSLKdf
	        }),

	        /**
	         * Encrypts a message using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Encrypt
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

	            // Mix in derived params
	            ciphertext.mixIn(derivedParams);

	            return ciphertext;
	        },

	        /**
	         * Decrypts serialized ciphertext using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Decrypt
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

	            return plaintext;
	        }
	    });
	}());


}));

/***/ }),
/* 4 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(70)('wks');
var uid = __webpack_require__(52);
var Symbol = __webpack_require__(4).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(21)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(13);
var IE8_DOM_DEFINE = __webpack_require__(98);
var toPrimitive = __webpack_require__(67);
var dP = Object.defineProperty;

exports.f = __webpack_require__(8) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(16)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue         = __webpack_require__(35)
  , isPlainFunction = __webpack_require__(142)
  , assign          = __webpack_require__(89)
  , normalizeOpts   = __webpack_require__(143)
  , contains        = __webpack_require__(144);

var d = (module.exports = function (dscr, value/*, options*/) {
	var c, e, w, options, desc;
	if (arguments.length < 2 || typeof dscr !== "string") {
		options = value;
		value = dscr;
		dscr = null;
	} else {
		options = arguments[2];
	}
	if (isValue(dscr)) {
		c = contains.call(dscr, "c");
		e = contains.call(dscr, "e");
		w = contains.call(dscr, "w");
	} else {
		c = w = true;
		e = false;
	}

	desc = { value: value, configurable: c, enumerable: e, writable: w };
	return !options ? desc : assign(normalizeOpts(options), desc);
});

d.gs = function (dscr, get, set/*, options*/) {
	var c, e, options, desc;
	if (typeof dscr !== "string") {
		options = set;
		set = get;
		get = dscr;
		dscr = null;
	} else {
		options = arguments[3];
	}
	if (!isValue(get)) {
		get = undefined;
	} else if (!isPlainFunction(get)) {
		options = get;
		get = set = undefined;
	} else if (!isValue(set)) {
		set = undefined;
	} else if (!isPlainFunction(set)) {
		options = set;
		set = undefined;
	}
	if (isValue(dscr)) {
		c = contains.call(dscr, "c");
		e = contains.call(dscr, "e");
	} else {
		c = true;
		e = false;
	}

	desc = { get: get, set: set, configurable: c, enumerable: e };
	return !options ? desc : assign(normalizeOpts(options), desc);
};


/***/ }),
/* 12 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue = __webpack_require__(34);

module.exports = function (value) {
	if (!isValue(value)) throw new TypeError("Cannot use null or undefined");
	return value;
};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(96)
var ieee754 = __webpack_require__(181)
var isArray = __webpack_require__(97)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(12)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(37);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(9);
var createDesc = __webpack_require__(38);
module.exports = __webpack_require__(8) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(298)()
	? __webpack_require__(59).Symbol
	: __webpack_require__(299);


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);


/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 22 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(82), __webpack_require__(83));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var MD5 = C_algo.MD5;

	    /**
	     * This key derivation function is meant to conform with EVP_BytesToKey.
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	     */
	    var EvpKDF = C_algo.EvpKDF = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: MD5,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.EvpKDF.create();
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Derives a key from a password.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init hasher
	            var hasher = cfg.hasher.create();

	            // Initial values
	            var derivedKey = WordArray.create();

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                if (block) {
	                    hasher.update(block);
	                }
	                var block = hasher.update(password).finalize(salt);
	                hasher.reset();

	                // Iterations
	                for (var i = 1; i < iterations; i++) {
	                    block = hasher.finalize(block);
	                    hasher.reset();
	                }

	                derivedKey.concat(block);
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Derives a key from a password.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.EvpKDF(password, salt);
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.EvpKDF = function (password, salt, cfg) {
	        return EvpKDF.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.EvpKDF;

}));

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(47);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(48);
util.inherits = __webpack_require__(14);
/*</replacement>*/

var Readable = __webpack_require__(132);
var Writable = __webpack_require__(135);

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (fn) {
	if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
	return fn;
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(183)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(65)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(68);
var defined = __webpack_require__(64);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(64);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _from = __webpack_require__(114);

var _from2 = _interopRequireDefault(_from);

var _toConsumableArray2 = __webpack_require__(79);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2020 WildFireChat. All rights reserved.
 */

var CryptoJS = __webpack_require__(220);
var sm4 = __webpack_require__(244).sm4;

var AES_KEY = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F];
var useSM4 = false;

/**
 * 
 * @param {string | Int8Array} msg 
 * @param {string} userKey
 * @param {boolean} withDate
 * @returns {string} encrypted msg in base64 format
 */
function AESEncrypt(msg) {
    var userKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var withDate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    var key = AES_KEY;
    if (userKey.length > 0) {
        key = convertUserKey(userKey);
    }

    var msgWithTimeBytes = new Array();
    if (withDate) {
        var curhour = parseInt((new Date().getTime() / 1000 - 1514736000) / 3600);
        msgWithTimeBytes.push(curhour & 0XFF); // 会为负
        msgWithTimeBytes.push((curhour & 0XFF00) >> 8);
        msgWithTimeBytes.push((curhour & 0XFF0000) >> 16);
        msgWithTimeBytes.push(curhour >> 24);
    }

    if (typeof msg === 'string') {
        var _msgWithTimeBytes;

        (_msgWithTimeBytes = msgWithTimeBytes).push.apply(_msgWithTimeBytes, (0, _toConsumableArray3.default)(stringToBytes(msg)));
    } else {
        // msgWithTimeBytes.push(...msg);
        var tmp = (0, _from2.default)(msg);
        tmp.unshift.apply(tmp, (0, _toConsumableArray3.default)(msgWithTimeBytes));
        // msgWithTimeBytes = msgWithTimeBytes.concat(tmp)
        msgWithTimeBytes = tmp;
    }

    var msgWithTimeHexStr = bytes2HexString(msgWithTimeBytes);

    if (useSM4) {
        var _e = sm4.encrypt(msgWithTimeBytes, key, { iv: key, mode: 'cbc', padding: 'pkcs#5', output: 'array' });
        return Buffer.from(_e).toString('base64');
    } else {
        var key = CryptoJS.enc.Utf8.parse(Uint8ToStr(key));
        var e = CryptoJS.AES.encrypt(CryptoJS.enc.Hex.parse(msgWithTimeHexStr), key, { iv: key, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });
        var eb = e.toString();
        return eb;
    }
}

/**
 * 
 * @param {string} msg crypted msg in base64 format
 * @param {string} userKey
 * @param {boolean} checkTime
 * @param {boolean} withDate
 * 
 * @returns decrypted byte array
 */
function AESDecrypt(msg, userKey, checkTime) {
    var withDate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

    var aesKey = AES_KEY;
    if (userKey.length > 0) {
        aesKey = convertUserKey(userKey);
    }
    var cipherBytes;
    if (useSM4) {
        var msgBuffer = Buffer.from(msg, 'base64');
        cipherBytes = sm4.decrypt(msgBuffer, aesKey, { iv: aesKey, mode: 'cbc', padding: 'pkcs#5', output: 'array' });
    } else {
        var key = CryptoJS.enc.Utf8.parse(Uint8ToStr(aesKey));
        var value = CryptoJS.AES.decrypt(msg, key, { iv: key, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });
        var ciphertext = value.toString();
        cipherBytes = hexstring2btye(ciphertext);
    }

    if (withDate && cipherBytes.length > 4) {
        if (checkTime) {
            var hours = 0;
            hours += cipherBytes[3] && 0xFF;
            hours <<= 8;
            hours += cipherBytes[2] && 0xFF;
            hours <<= 8;
            hours += cipherBytes[1] && 0xFF;
            hours <<= 8;
            hours += cipherBytes[0] && 0xFF;
            hours <<= 8;

            var curhour = (new Date().getUTCMilliseconds() / 1000 - 1514736000) / 3600;

            if (curhour - hours > 24 && checkTime) {
                return null;
            } else {
                return cipherBytes.slice(4, cipherBytes.length);
            }
        } else {
            return cipherBytes.slice(4, cipherBytes.length);
        }
    } else {
        return cipherBytes.length > 4 ? cipherBytes : null;
    }
}

function Uint8ToStr(arr) {
    for (var i = 0, str = ''; i < arr.length; i++) {
        str += String.fromCharCode(arr[i]);
    }return str;
}

function convertUserKey(str) {
    var arr = [];
    for (var i = 0; i < str.length && i < 16; i++) {
        arr.push(str.charCodeAt(i));
    }
    return new Uint8Array(arr);
}

function StrToUint8(str) {
    for (var i = 0, arr = []; i < str.length; i++) {
        arr.push(str.charCodeAt(i));
    }
    return new Uint8Array(arr);
}

function hexstring2btye(str) {
    var pos = 0;
    var len = str.length;
    if (len % 2 != 0) {
        return null;
    }
    len /= 2;
    var hexA = new Array();
    for (var i = 0; i < len; i++) {
        var s = str.substr(pos, 2);
        var v = parseInt(s, 16);
        hexA.push(v);
        pos += 2;
    }
    return hexA;
}

function stringToBytes(str) {
    var bytes = new Array();
    var len, c;
    len = str.length;
    for (var i = 0; i < len; i++) {
        c = str.charCodeAt(i);
        if (c >= 0x010000 && c <= 0x10FFFF) {
            bytes.push(c >> 18 & 0x07 | 0xF0);
            bytes.push(c >> 12 & 0x3F | 0x80);
            bytes.push(c >> 6 & 0x3F | 0x80);
            bytes.push(c & 0x3F | 0x80);
        } else if (c >= 0x000800 && c <= 0x00FFFF) {
            bytes.push(c >> 12 & 0x0F | 0xE0);
            bytes.push(c >> 6 & 0x3F | 0x80);
            bytes.push(c & 0x3F | 0x80);
        } else if (c >= 0x000080 && c <= 0x0007FF) {
            bytes.push(c >> 6 & 0x1F | 0xC0);
            bytes.push(c & 0x3F | 0x80);
        } else {
            bytes.push(c & 0xFF);
        }
    }
    return bytes;
}

function bytes2HexString(arrBytes) {
    var str = "";
    for (var i = 0; i < arrBytes.length; i++) {
        var tmp = void 0;
        var num = arrBytes[i];
        if (num < 0) {
            //此处填坑，当byte因为符合位导致数值为负时候，需要对数据进行处理
            tmp = (255 + num + 1).toString(16);
        } else {
            tmp = num.toString(16);
        }
        if (tmp.length == 1) {
            tmp = "0" + tmp;
        }
        str += tmp;
    }
    return str;
}

function useEncryptSM4() {
    useSM4 = true;
}

module.exports.useEncryptSM4 = useEncryptSM4;

module.exports.AESEncrypt = AESEncrypt;
module.exports.AESDecrypt = AESDecrypt;
module.exports.Uint8ToStr = Uint8ToStr;

function test() {
    useSM4 = false;
    var str = "hello world!!";
    var e = AESEncrypt(str);
    var d = AESDecrypt(e, '');
    console.log('aes', e, d);

    useSM4 = true;
    e = AESEncrypt(str);
    d = AESDecrypt(e, '');
    console.log('sm4', e, d);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(16).Buffer))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * Base64 encoding strategy.
	     */
	    var Base64 = C_enc.Base64 = {
	        /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = this._map;

	            // Clamp excess bits
	            wordArray.clamp();

	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }

	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }

	            return base64Chars.join('');
	        },

	        /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */
	        parse: function (base64Str) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = this._map;
	            var reverseMap = this._reverseMap;

	            if (!reverseMap) {
	                    reverseMap = this._reverseMap = [];
	                    for (var j = 0; j < map.length; j++) {
	                        reverseMap[map.charCodeAt(j)] = j;
	                    }
	            }

	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex !== -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }

	            // Convert
	            return parseLoop(base64Str, base64StrLength, reverseMap);

	        },

	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	    };

	    function parseLoop(base64Str, base64StrLength, reverseMap) {
	      var words = [];
	      var nBytes = 0;
	      for (var i = 0; i < base64StrLength; i++) {
	          if (i % 4) {
	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
	              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
	              nBytes++;
	          }
	      }
	      return WordArray.create(words, nBytes);
	    }
	}());


	return CryptoJS.enc.Base64;

}));

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0));
	}
	else {}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working varialbes
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	return CryptoJS.MD5;

}));

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(252);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(254);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(132);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(135);
exports.Duplex = __webpack_require__(24);
exports.Transform = __webpack_require__(137);
exports.PassThrough = __webpack_require__(273);


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _undefined = __webpack_require__(277)(); // Support ES3 engines

module.exports = function (val) { return val !== _undefined && val !== null; };


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// ES3 safe
var _undefined = void 0;

module.exports = function (value) { return value !== _undefined && value !== null; };


/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),
/* 37 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(101);
var enumBugKeys = __webpack_require__(71);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 41 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(9).f;
var has = __webpack_require__(22);
var TAG = __webpack_require__(5)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(188);
var global = __webpack_require__(4);
var hide = __webpack_require__(18);
var Iterators = __webpack_require__(39);
var TO_STRING_TAG = __webpack_require__(5)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(17);
var call = __webpack_require__(104);
var isArrayIter = __webpack_require__(105);
var anObject = __webpack_require__(13);
var toLength = __webpack_require__(51);
var getIterFn = __webpack_require__(74);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(265), __esModule: true };

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = $getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  var args = [];
  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(16).Buffer))

/***/ }),
/* 49 */
/***/ (function(module, exports) {



/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(13);
var dPs = __webpack_require__(100);
var enumBugKeys = __webpack_require__(71);
var IE_PROTO = __webpack_require__(69)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(66)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(102).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(63);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 52 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 53 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(52)('meta');
var isObject = __webpack_require__(7);
var has = __webpack_require__(22);
var setDesc = __webpack_require__(9).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(21)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0));
	}
	else {}
}(this, function (CryptoJS) {

	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var X32WordArray = C_lib.WordArray;

	    /**
	     * x64 namespace.
	     */
	    var C_x64 = C.x64 = {};

	    /**
	     * A 64-bit word.
	     */
	    var X64Word = C_x64.Word = Base.extend({
	        /**
	         * Initializes a newly created 64-bit word.
	         *
	         * @param {number} high The high 32 bits.
	         * @param {number} low The low 32 bits.
	         *
	         * @example
	         *
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
	         */
	        init: function (high, low) {
	            this.high = high;
	            this.low = low;
	        }

	        /**
	         * Bitwise NOTs this word.
	         *
	         * @return {X64Word} A new x64-Word object after negating.
	         *
	         * @example
	         *
	         *     var negated = x64Word.not();
	         */
	        // not: function () {
	            // var high = ~this.high;
	            // var low = ~this.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ANDs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to AND with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ANDing.
	         *
	         * @example
	         *
	         *     var anded = x64Word.and(anotherX64Word);
	         */
	        // and: function (word) {
	            // var high = this.high & word.high;
	            // var low = this.low & word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to OR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ORing.
	         *
	         * @example
	         *
	         *     var ored = x64Word.or(anotherX64Word);
	         */
	        // or: function (word) {
	            // var high = this.high | word.high;
	            // var low = this.low | word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise XORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to XOR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after XORing.
	         *
	         * @example
	         *
	         *     var xored = x64Word.xor(anotherX64Word);
	         */
	        // xor: function (word) {
	            // var high = this.high ^ word.high;
	            // var low = this.low ^ word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the left.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftL(25);
	         */
	        // shiftL: function (n) {
	            // if (n < 32) {
	                // var high = (this.high << n) | (this.low >>> (32 - n));
	                // var low = this.low << n;
	            // } else {
	                // var high = this.low << (n - 32);
	                // var low = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the right.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftR(7);
	         */
	        // shiftR: function (n) {
	            // if (n < 32) {
	                // var low = (this.low >>> n) | (this.high << (32 - n));
	                // var high = this.high >>> n;
	            // } else {
	                // var low = this.high >>> (n - 32);
	                // var high = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Rotates this word n bits to the left.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotL(25);
	         */
	        // rotL: function (n) {
	            // return this.shiftL(n).or(this.shiftR(64 - n));
	        // },

	        /**
	         * Rotates this word n bits to the right.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotR(7);
	         */
	        // rotR: function (n) {
	            // return this.shiftR(n).or(this.shiftL(64 - n));
	        // },

	        /**
	         * Adds this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to add with this word.
	         *
	         * @return {X64Word} A new x64-Word object after adding.
	         *
	         * @example
	         *
	         *     var added = x64Word.add(anotherX64Word);
	         */
	        // add: function (word) {
	            // var low = (this.low + word.low) | 0;
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
	            // var high = (this.high + word.high + carry) | 0;

	            // return X64Word.create(high, low);
	        // }
	    });

	    /**
	     * An array of 64-bit words.
	     *
	     * @property {Array} words The array of CryptoJS.x64.Word objects.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var X64WordArray = C_x64.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create();
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ]);
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ], 10);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 8;
	            }
	        },

	        /**
	         * Converts this 64-bit word array to a 32-bit word array.
	         *
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
	         *
	         * @example
	         *
	         *     var x32WordArray = x64WordArray.toX32();
	         */
	        toX32: function () {
	            // Shortcuts
	            var x64Words = this.words;
	            var x64WordsLength = x64Words.length;

	            // Convert
	            var x32Words = [];
	            for (var i = 0; i < x64WordsLength; i++) {
	                var x64Word = x64Words[i];
	                x32Words.push(x64Word.high);
	                x32Words.push(x64Word.low);
	            }

	            return X32WordArray.create(x32Words, this.sigBytes);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {X64WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = x64WordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);

	            // Clone "words" array
	            var words = clone.words = this.words.slice(0);

	            // Clone each X64Word object
	            var wordsLength = words.length;
	            for (var i = 0; i < wordsLength; i++) {
	                words[i] = words[i].clone();
	            }

	            return clone;
	        }
	    });
	}());


	return CryptoJS;

}));

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

(function(){

    // Copyright (c) 2005  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.

    // Basic JavaScript BN library - subset useful for RSA encryption.

    // Bits per digit
    var dbits;

    // JavaScript engine analysis
    var canary = 0xdeadbeefcafe;
    var j_lm = ((canary&0xffffff)==0xefcafe);

    // (public) Constructor
    function BigInteger(a,b,c) {
      if(a != null)
        if("number" == typeof a) this.fromNumber(a,b,c);
        else if(b == null && "string" != typeof a) this.fromString(a,256);
        else this.fromString(a,b);
    }

    // return new, unset BigInteger
    function nbi() { return new BigInteger(null); }

    // am: Compute w_j += (x*this_i), propagate carries,
    // c is initial carry, returns final carry.
    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
    // We need to select the fastest one that works in this environment.

    // am1: use a single mult and divide to get the high bits,
    // max digit bits should be 26 because
    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
    function am1(i,x,w,j,c,n) {
      while(--n >= 0) {
        var v = x*this[i++]+w[j]+c;
        c = Math.floor(v/0x4000000);
        w[j++] = v&0x3ffffff;
      }
      return c;
    }
    // am2 avoids a big mult-and-extract completely.
    // Max digit bits should be <= 30 because we do bitwise ops
    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
    function am2(i,x,w,j,c,n) {
      var xl = x&0x7fff, xh = x>>15;
      while(--n >= 0) {
        var l = this[i]&0x7fff;
        var h = this[i++]>>15;
        var m = xh*l+h*xl;
        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
        w[j++] = l&0x3fffffff;
      }
      return c;
    }
    // Alternately, set max digit bits to 28 since some
    // browsers slow down when dealing with 32-bit numbers.
    function am3(i,x,w,j,c,n) {
      var xl = x&0x3fff, xh = x>>14;
      while(--n >= 0) {
        var l = this[i]&0x3fff;
        var h = this[i++]>>14;
        var m = xh*l+h*xl;
        l = xl*l+((m&0x3fff)<<14)+w[j]+c;
        c = (l>>28)+(m>>14)+xh*h;
        w[j++] = l&0xfffffff;
      }
      return c;
    }
    var inBrowser = typeof navigator !== "undefined";
    if(inBrowser && j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
      BigInteger.prototype.am = am2;
      dbits = 30;
    }
    else if(inBrowser && j_lm && (navigator.appName != "Netscape")) {
      BigInteger.prototype.am = am1;
      dbits = 26;
    }
    else { // Mozilla/Netscape seems to prefer am3
      BigInteger.prototype.am = am3;
      dbits = 28;
    }

    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = ((1<<dbits)-1);
    BigInteger.prototype.DV = (1<<dbits);

    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2,BI_FP);
    BigInteger.prototype.F1 = BI_FP-dbits;
    BigInteger.prototype.F2 = 2*dbits-BI_FP;

    // Digit conversions
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr,vv;
    rr = "0".charCodeAt(0);
    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

    function int2char(n) { return BI_RM.charAt(n); }
    function intAt(s,i) {
      var c = BI_RC[s.charCodeAt(i)];
      return (c==null)?-1:c;
    }

    // (protected) copy this to r
    function bnpCopyTo(r) {
      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
      r.t = this.t;
      r.s = this.s;
    }

    // (protected) set from integer value x, -DV <= x < DV
    function bnpFromInt(x) {
      this.t = 1;
      this.s = (x<0)?-1:0;
      if(x > 0) this[0] = x;
      else if(x < -1) this[0] = x+this.DV;
      else this.t = 0;
    }

    // return bigint initialized to value
    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

    // (protected) set from string and radix
    function bnpFromString(s,b) {
      var k;
      if(b == 16) k = 4;
      else if(b == 8) k = 3;
      else if(b == 256) k = 8; // byte array
      else if(b == 2) k = 1;
      else if(b == 32) k = 5;
      else if(b == 4) k = 2;
      else { this.fromRadix(s,b); return; }
      this.t = 0;
      this.s = 0;
      var i = s.length, mi = false, sh = 0;
      while(--i >= 0) {
        var x = (k==8)?s[i]&0xff:intAt(s,i);
        if(x < 0) {
          if(s.charAt(i) == "-") mi = true;
          continue;
        }
        mi = false;
        if(sh == 0)
          this[this.t++] = x;
        else if(sh+k > this.DB) {
          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
          this[this.t++] = (x>>(this.DB-sh));
        }
        else
          this[this.t-1] |= x<<sh;
        sh += k;
        if(sh >= this.DB) sh -= this.DB;
      }
      if(k == 8 && (s[0]&0x80) != 0) {
        this.s = -1;
        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
      }
      this.clamp();
      if(mi) BigInteger.ZERO.subTo(this,this);
    }

    // (protected) clamp off excess high words
    function bnpClamp() {
      var c = this.s&this.DM;
      while(this.t > 0 && this[this.t-1] == c) --this.t;
    }

    // (public) return string representation in given radix
    function bnToString(b) {
      if(this.s < 0) return "-"+this.negate().toString(b);
      var k;
      if(b == 16) k = 4;
      else if(b == 8) k = 3;
      else if(b == 2) k = 1;
      else if(b == 32) k = 5;
      else if(b == 4) k = 2;
      else return this.toRadix(b);
      var km = (1<<k)-1, d, m = false, r = "", i = this.t;
      var p = this.DB-(i*this.DB)%k;
      if(i-- > 0) {
        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
        while(i >= 0) {
          if(p < k) {
            d = (this[i]&((1<<p)-1))<<(k-p);
            d |= this[--i]>>(p+=this.DB-k);
          }
          else {
            d = (this[i]>>(p-=k))&km;
            if(p <= 0) { p += this.DB; --i; }
          }
          if(d > 0) m = true;
          if(m) r += int2char(d);
        }
      }
      return m?r:"0";
    }

    // (public) -this
    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

    // (public) |this|
    function bnAbs() { return (this.s<0)?this.negate():this; }

    // (public) return + if this > a, - if this < a, 0 if equal
    function bnCompareTo(a) {
      var r = this.s-a.s;
      if(r != 0) return r;
      var i = this.t;
      r = i-a.t;
      if(r != 0) return (this.s<0)?-r:r;
      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
      return 0;
    }

    // returns bit length of the integer x
    function nbits(x) {
      var r = 1, t;
      if((t=x>>>16) != 0) { x = t; r += 16; }
      if((t=x>>8) != 0) { x = t; r += 8; }
      if((t=x>>4) != 0) { x = t; r += 4; }
      if((t=x>>2) != 0) { x = t; r += 2; }
      if((t=x>>1) != 0) { x = t; r += 1; }
      return r;
    }

    // (public) return the number of bits in "this"
    function bnBitLength() {
      if(this.t <= 0) return 0;
      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
    }

    // (protected) r = this << n*DB
    function bnpDLShiftTo(n,r) {
      var i;
      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
      for(i = n-1; i >= 0; --i) r[i] = 0;
      r.t = this.t+n;
      r.s = this.s;
    }

    // (protected) r = this >> n*DB
    function bnpDRShiftTo(n,r) {
      for(var i = n; i < this.t; ++i) r[i-n] = this[i];
      r.t = Math.max(this.t-n,0);
      r.s = this.s;
    }

    // (protected) r = this << n
    function bnpLShiftTo(n,r) {
      var bs = n%this.DB;
      var cbs = this.DB-bs;
      var bm = (1<<cbs)-1;
      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
      for(i = this.t-1; i >= 0; --i) {
        r[i+ds+1] = (this[i]>>cbs)|c;
        c = (this[i]&bm)<<bs;
      }
      for(i = ds-1; i >= 0; --i) r[i] = 0;
      r[ds] = c;
      r.t = this.t+ds+1;
      r.s = this.s;
      r.clamp();
    }

    // (protected) r = this >> n
    function bnpRShiftTo(n,r) {
      r.s = this.s;
      var ds = Math.floor(n/this.DB);
      if(ds >= this.t) { r.t = 0; return; }
      var bs = n%this.DB;
      var cbs = this.DB-bs;
      var bm = (1<<bs)-1;
      r[0] = this[ds]>>bs;
      for(var i = ds+1; i < this.t; ++i) {
        r[i-ds-1] |= (this[i]&bm)<<cbs;
        r[i-ds] = this[i]>>bs;
      }
      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
      r.t = this.t-ds;
      r.clamp();
    }

    // (protected) r = this - a
    function bnpSubTo(a,r) {
      var i = 0, c = 0, m = Math.min(a.t,this.t);
      while(i < m) {
        c += this[i]-a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      if(a.t < this.t) {
        c -= a.s;
        while(i < this.t) {
          c += this[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += this.s;
      }
      else {
        c += this.s;
        while(i < a.t) {
          c -= a[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c -= a.s;
      }
      r.s = (c<0)?-1:0;
      if(c < -1) r[i++] = this.DV+c;
      else if(c > 0) r[i++] = c;
      r.t = i;
      r.clamp();
    }

    // (protected) r = this * a, r != this,a (HAC 14.12)
    // "this" should be the larger one if appropriate.
    function bnpMultiplyTo(a,r) {
      var x = this.abs(), y = a.abs();
      var i = x.t;
      r.t = i+y.t;
      while(--i >= 0) r[i] = 0;
      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
      r.s = 0;
      r.clamp();
      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
    }

    // (protected) r = this^2, r != this (HAC 14.16)
    function bnpSquareTo(r) {
      var x = this.abs();
      var i = r.t = 2*x.t;
      while(--i >= 0) r[i] = 0;
      for(i = 0; i < x.t-1; ++i) {
        var c = x.am(i,x[i],r,2*i,0,1);
        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
          r[i+x.t] -= x.DV;
          r[i+x.t+1] = 1;
        }
      }
      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
      r.s = 0;
      r.clamp();
    }

    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
    // r != q, this != m.  q or r may be null.
    function bnpDivRemTo(m,q,r) {
      var pm = m.abs();
      if(pm.t <= 0) return;
      var pt = this.abs();
      if(pt.t < pm.t) {
        if(q != null) q.fromInt(0);
        if(r != null) this.copyTo(r);
        return;
      }
      if(r == null) r = nbi();
      var y = nbi(), ts = this.s, ms = m.s;
      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus
      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
      else { pm.copyTo(y); pt.copyTo(r); }
      var ys = y.t;
      var y0 = y[ys-1];
      if(y0 == 0) return;
      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
      var i = r.t, j = i-ys, t = (q==null)?nbi():q;
      y.dlShiftTo(j,t);
      if(r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t,r);
      }
      BigInteger.ONE.dlShiftTo(ys,t);
      t.subTo(y,y);  // "negative" y so we can replace sub with am later
      while(y.t < ys) y[y.t++] = 0;
      while(--j >= 0) {
        // Estimate quotient digit
        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out
          y.dlShiftTo(j,t);
          r.subTo(t,r);
          while(r[i] < --qd) r.subTo(t,r);
        }
      }
      if(q != null) {
        r.drShiftTo(ys,q);
        if(ts != ms) BigInteger.ZERO.subTo(q,q);
      }
      r.t = ys;
      r.clamp();
      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder
      if(ts < 0) BigInteger.ZERO.subTo(r,r);
    }

    // (public) this mod a
    function bnMod(a) {
      var r = nbi();
      this.abs().divRemTo(a,null,r);
      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
      return r;
    }

    // Modular reduction using "classic" algorithm
    function Classic(m) { this.m = m; }
    function cConvert(x) {
      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
      else return x;
    }
    function cRevert(x) { return x; }
    function cReduce(x) { x.divRemTo(this.m,null,x); }
    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;

    // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
    // justification:
    //         xy == 1 (mod m)
    //         xy =  1+km
    //   xy(2-xy) = (1+km)(1-km)
    // x[y(2-xy)] = 1-k^2m^2
    // x[y(2-xy)] == 1 (mod m^2)
    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
    // JS multiply "overflows" differently from C/C++, so care is needed here.
    function bnpInvDigit() {
      if(this.t < 1) return 0;
      var x = this[0];
      if((x&1) == 0) return 0;
      var y = x&3;       // y == 1/x mod 2^2
      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4
      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8
      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16
      // last step - calculate inverse mod DV directly;
      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits
      // we really want the negative inverse, and -DV < y < DV
      return (y>0)?this.DV-y:-y;
    }

    // Montgomery reduction
    function Montgomery(m) {
      this.m = m;
      this.mp = m.invDigit();
      this.mpl = this.mp&0x7fff;
      this.mph = this.mp>>15;
      this.um = (1<<(m.DB-15))-1;
      this.mt2 = 2*m.t;
    }

    // xR mod m
    function montConvert(x) {
      var r = nbi();
      x.abs().dlShiftTo(this.m.t,r);
      r.divRemTo(this.m,null,r);
      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
      return r;
    }

    // x/R mod m
    function montRevert(x) {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }

    // x = x/R mod m (HAC 14.32)
    function montReduce(x) {
      while(x.t <= this.mt2) // pad x so am has enough room later
        x[x.t++] = 0;
      for(var i = 0; i < this.m.t; ++i) {
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i]&0x7fff;
        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i+this.m.t;
        x[j] += this.m.am(0,u0,x,i,0,this.m.t);
        // propagate carry
        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
      }
      x.clamp();
      x.drShiftTo(this.m.t,x);
      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
    }

    // r = "x^2/R mod m"; x != r
    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

    // r = "xy/R mod m"; x,y != r
    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;

    // (protected) true iff this is even
    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

    // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
    function bnpExp(e,z) {
      if(e > 0xffffffff || e < 1) return BigInteger.ONE;
      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
      g.copyTo(r);
      while(--i >= 0) {
        z.sqrTo(r,r2);
        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
        else { var t = r; r = r2; r2 = t; }
      }
      return z.revert(r);
    }

    // (public) this^e % m, 0 <= e < 2^32
    function bnModPowInt(e,m) {
      var z;
      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
      return this.exp(e,z);
    }

    // protected
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;

    // public
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;

    // "constants"
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);

    // Copyright (c) 2005-2009  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.

    // Extended JavaScript BN functions, required for RSA private ops.

    // Version 1.1: new BigInteger("0", 10) returns "proper" zero
    // Version 1.2: square() API, isProbablePrime fix

    // (public)
    function bnClone() { var r = nbi(); this.copyTo(r); return r; }

    // (public) return value as integer
    function bnIntValue() {
      if(this.s < 0) {
        if(this.t == 1) return this[0]-this.DV;
        else if(this.t == 0) return -1;
      }
      else if(this.t == 1) return this[0];
      else if(this.t == 0) return 0;
      // assumes 16 < DB < 32
      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
    }

    // (public) return value as byte
    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }

    // (public) return value as short (assumes DB>=16)
    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }

    // (protected) return x s.t. r^x < DV
    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

    // (public) 0 if this == 0, 1 if this > 0
    function bnSigNum() {
      if(this.s < 0) return -1;
      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
      else return 1;
    }

    // (protected) convert to radix string
    function bnpToRadix(b) {
      if(b == null) b = 10;
      if(this.signum() == 0 || b < 2 || b > 36) return "0";
      var cs = this.chunkSize(b);
      var a = Math.pow(b,cs);
      var d = nbv(a), y = nbi(), z = nbi(), r = "";
      this.divRemTo(d,y,z);
      while(y.signum() > 0) {
        r = (a+z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d,y,z);
      }
      return z.intValue().toString(b) + r;
    }

    // (protected) convert from radix string
    function bnpFromRadix(s,b) {
      this.fromInt(0);
      if(b == null) b = 10;
      var cs = this.chunkSize(b);
      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
      for(var i = 0; i < s.length; ++i) {
        var x = intAt(s,i);
        if(x < 0) {
          if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
          continue;
        }
        w = b*w+x;
        if(++j >= cs) {
          this.dMultiply(d);
          this.dAddOffset(w,0);
          j = 0;
          w = 0;
        }
      }
      if(j > 0) {
        this.dMultiply(Math.pow(b,j));
        this.dAddOffset(w,0);
      }
      if(mi) BigInteger.ZERO.subTo(this,this);
    }

    // (protected) alternate constructor
    function bnpFromNumber(a,b,c) {
      if("number" == typeof b) {
        // new BigInteger(int,int,RNG)
        if(a < 2) this.fromInt(1);
        else {
          this.fromNumber(a,c);
          if(!this.testBit(a-1))    // force MSB set
            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);
          if(this.isEven()) this.dAddOffset(1,0); // force odd
          while(!this.isProbablePrime(b)) {
            this.dAddOffset(2,0);
            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);
          }
        }
      }
      else {
        // new BigInteger(int,RNG)
        var x = new Array(), t = a&7;
        x.length = (a>>3)+1;
        b.nextBytes(x);
        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
        this.fromString(x,256);
      }
    }

    // (public) convert to bigendian byte array
    function bnToByteArray() {
      var i = this.t, r = new Array();
      r[0] = this.s;
      var p = this.DB-(i*this.DB)%8, d, k = 0;
      if(i-- > 0) {
        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)
          r[k++] = d|(this.s<<(this.DB-p));
        while(i >= 0) {
          if(p < 8) {
            d = (this[i]&((1<<p)-1))<<(8-p);
            d |= this[--i]>>(p+=this.DB-8);
          }
          else {
            d = (this[i]>>(p-=8))&0xff;
            if(p <= 0) { p += this.DB; --i; }
          }
          if((d&0x80) != 0) d |= -256;
          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
          if(k > 0 || d != this.s) r[k++] = d;
        }
      }
      return r;
    }

    function bnEquals(a) { return(this.compareTo(a)==0); }
    function bnMin(a) { return(this.compareTo(a)<0)?this:a; }
    function bnMax(a) { return(this.compareTo(a)>0)?this:a; }

    // (protected) r = this op a (bitwise)
    function bnpBitwiseTo(a,op,r) {
      var i, f, m = Math.min(a.t,this.t);
      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);
      if(a.t < this.t) {
        f = a.s&this.DM;
        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);
        r.t = this.t;
      }
      else {
        f = this.s&this.DM;
        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);
        r.t = a.t;
      }
      r.s = op(this.s,a.s);
      r.clamp();
    }

    // (public) this & a
    function op_and(x,y) { return x&y; }
    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

    // (public) this | a
    function op_or(x,y) { return x|y; }
    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

    // (public) this ^ a
    function op_xor(x,y) { return x^y; }
    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

    // (public) this & ~a
    function op_andnot(x,y) { return x&~y; }
    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

    // (public) ~this
    function bnNot() {
      var r = nbi();
      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];
      r.t = this.t;
      r.s = ~this.s;
      return r;
    }

    // (public) this << n
    function bnShiftLeft(n) {
      var r = nbi();
      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
      return r;
    }

    // (public) this >> n
    function bnShiftRight(n) {
      var r = nbi();
      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
      return r;
    }

    // return index of lowest 1-bit in x, x < 2^31
    function lbit(x) {
      if(x == 0) return -1;
      var r = 0;
      if((x&0xffff) == 0) { x >>= 16; r += 16; }
      if((x&0xff) == 0) { x >>= 8; r += 8; }
      if((x&0xf) == 0) { x >>= 4; r += 4; }
      if((x&3) == 0) { x >>= 2; r += 2; }
      if((x&1) == 0) ++r;
      return r;
    }

    // (public) returns index of lowest 1-bit (or -1 if none)
    function bnGetLowestSetBit() {
      for(var i = 0; i < this.t; ++i)
        if(this[i] != 0) return i*this.DB+lbit(this[i]);
      if(this.s < 0) return this.t*this.DB;
      return -1;
    }

    // return number of 1 bits in x
    function cbit(x) {
      var r = 0;
      while(x != 0) { x &= x-1; ++r; }
      return r;
    }

    // (public) return number of set bits
    function bnBitCount() {
      var r = 0, x = this.s&this.DM;
      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);
      return r;
    }

    // (public) true iff nth bit is set
    function bnTestBit(n) {
      var j = Math.floor(n/this.DB);
      if(j >= this.t) return(this.s!=0);
      return((this[j]&(1<<(n%this.DB)))!=0);
    }

    // (protected) this op (1<<n)
    function bnpChangeBit(n,op) {
      var r = BigInteger.ONE.shiftLeft(n);
      this.bitwiseTo(r,op,r);
      return r;
    }

    // (public) this | (1<<n)
    function bnSetBit(n) { return this.changeBit(n,op_or); }

    // (public) this & ~(1<<n)
    function bnClearBit(n) { return this.changeBit(n,op_andnot); }

    // (public) this ^ (1<<n)
    function bnFlipBit(n) { return this.changeBit(n,op_xor); }

    // (protected) r = this + a
    function bnpAddTo(a,r) {
      var i = 0, c = 0, m = Math.min(a.t,this.t);
      while(i < m) {
        c += this[i]+a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      if(a.t < this.t) {
        c += a.s;
        while(i < this.t) {
          c += this[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += this.s;
      }
      else {
        c += this.s;
        while(i < a.t) {
          c += a[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += a.s;
      }
      r.s = (c<0)?-1:0;
      if(c > 0) r[i++] = c;
      else if(c < -1) r[i++] = this.DV+c;
      r.t = i;
      r.clamp();
    }

    // (public) this + a
    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

    // (public) this - a
    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

    // (public) this * a
    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

    // (public) this^2
    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }

    // (public) this / a
    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

    // (public) this % a
    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

    // (public) [this/a,this%a]
    function bnDivideAndRemainder(a) {
      var q = nbi(), r = nbi();
      this.divRemTo(a,q,r);
      return new Array(q,r);
    }

    // (protected) this *= n, this >= 0, 1 < n < DV
    function bnpDMultiply(n) {
      this[this.t] = this.am(0,n-1,this,0,0,this.t);
      ++this.t;
      this.clamp();
    }

    // (protected) this += n << w words, this >= 0
    function bnpDAddOffset(n,w) {
      if(n == 0) return;
      while(this.t <= w) this[this.t++] = 0;
      this[w] += n;
      while(this[w] >= this.DV) {
        this[w] -= this.DV;
        if(++w >= this.t) this[this.t++] = 0;
        ++this[w];
      }
    }

    // A "null" reducer
    function NullExp() {}
    function nNop(x) { return x; }
    function nMulTo(x,y,r) { x.multiplyTo(y,r); }
    function nSqrTo(x,r) { x.squareTo(r); }

    NullExp.prototype.convert = nNop;
    NullExp.prototype.revert = nNop;
    NullExp.prototype.mulTo = nMulTo;
    NullExp.prototype.sqrTo = nSqrTo;

    // (public) this^e
    function bnPow(e) { return this.exp(e,new NullExp()); }

    // (protected) r = lower n words of "this * a", a.t <= n
    // "this" should be the larger one if appropriate.
    function bnpMultiplyLowerTo(a,n,r) {
      var i = Math.min(this.t+a.t,n);
      r.s = 0; // assumes a,this >= 0
      r.t = i;
      while(i > 0) r[--i] = 0;
      var j;
      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);
      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);
      r.clamp();
    }

    // (protected) r = "this * a" without lower n words, n > 0
    // "this" should be the larger one if appropriate.
    function bnpMultiplyUpperTo(a,n,r) {
      --n;
      var i = r.t = this.t+a.t-n;
      r.s = 0; // assumes a,this >= 0
      while(--i >= 0) r[i] = 0;
      for(i = Math.max(n-this.t,0); i < a.t; ++i)
        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);
      r.clamp();
      r.drShiftTo(1,r);
    }

    // Barrett modular reduction
    function Barrett(m) {
      // setup Barrett
      this.r2 = nbi();
      this.q3 = nbi();
      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
      this.mu = this.r2.divide(m);
      this.m = m;
    }

    function barrettConvert(x) {
      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
      else if(x.compareTo(this.m) < 0) return x;
      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
    }

    function barrettRevert(x) { return x; }

    // x = x mod m (HAC 14.42)
    function barrettReduce(x) {
      x.drShiftTo(this.m.t-1,this.r2);
      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
      x.subTo(this.r2,x);
      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
    }

    // r = x^2 mod m; x != r
    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

    // r = x*y mod m; x,y != r
    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

    Barrett.prototype.convert = barrettConvert;
    Barrett.prototype.revert = barrettRevert;
    Barrett.prototype.reduce = barrettReduce;
    Barrett.prototype.mulTo = barrettMulTo;
    Barrett.prototype.sqrTo = barrettSqrTo;

    // (public) this^e % m (HAC 14.85)
    function bnModPow(e,m) {
      var i = e.bitLength(), k, r = nbv(1), z;
      if(i <= 0) return r;
      else if(i < 18) k = 1;
      else if(i < 48) k = 3;
      else if(i < 144) k = 4;
      else if(i < 768) k = 5;
      else k = 6;
      if(i < 8)
        z = new Classic(m);
      else if(m.isEven())
        z = new Barrett(m);
      else
        z = new Montgomery(m);

      // precomputation
      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
      g[1] = z.convert(this);
      if(k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1],g2);
        while(n <= km) {
          g[n] = nbi();
          z.mulTo(g2,g[n-2],g[n]);
          n += 2;
        }
      }

      var j = e.t-1, w, is1 = true, r2 = nbi(), t;
      i = nbits(e[j])-1;
      while(j >= 0) {
        if(i >= k1) w = (e[j]>>(i-k1))&km;
        else {
          w = (e[j]&((1<<(i+1))-1))<<(k1-i);
          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);
        }

        n = k;
        while((w&1) == 0) { w >>= 1; --n; }
        if((i -= n) < 0) { i += this.DB; --j; }
        if(is1) {    // ret == 1, don't bother squaring or multiplying it
          g[w].copyTo(r);
          is1 = false;
        }
        else {
          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
          z.mulTo(r2,g[w],r);
        }

        while(j >= 0 && (e[j]&(1<<i)) == 0) {
          z.sqrTo(r,r2); t = r; r = r2; r2 = t;
          if(--i < 0) { i = this.DB-1; --j; }
        }
      }
      return z.revert(r);
    }

    // (public) gcd(this,a) (HAC 14.54)
    function bnGCD(a) {
      var x = (this.s<0)?this.negate():this.clone();
      var y = (a.s<0)?a.negate():a.clone();
      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
      var i = x.getLowestSetBit(), g = y.getLowestSetBit();
      if(g < 0) return x;
      if(i < g) g = i;
      if(g > 0) {
        x.rShiftTo(g,x);
        y.rShiftTo(g,y);
      }
      while(x.signum() > 0) {
        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
        if(x.compareTo(y) >= 0) {
          x.subTo(y,x);
          x.rShiftTo(1,x);
        }
        else {
          y.subTo(x,y);
          y.rShiftTo(1,y);
        }
      }
      if(g > 0) y.lShiftTo(g,y);
      return y;
    }

    // (protected) this % n, n < 2^26
    function bnpModInt(n) {
      if(n <= 0) return 0;
      var d = this.DV%n, r = (this.s<0)?n-1:0;
      if(this.t > 0)
        if(d == 0) r = this[0]%n;
        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;
      return r;
    }

    // (public) 1/this % m (HAC 14.61)
    function bnModInverse(m) {
      var ac = m.isEven();
      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
      var u = m.clone(), v = this.clone();
      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
      while(u.signum() != 0) {
        while(u.isEven()) {
          u.rShiftTo(1,u);
          if(ac) {
            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
            a.rShiftTo(1,a);
          }
          else if(!b.isEven()) b.subTo(m,b);
          b.rShiftTo(1,b);
        }
        while(v.isEven()) {
          v.rShiftTo(1,v);
          if(ac) {
            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
            c.rShiftTo(1,c);
          }
          else if(!d.isEven()) d.subTo(m,d);
          d.rShiftTo(1,d);
        }
        if(u.compareTo(v) >= 0) {
          u.subTo(v,u);
          if(ac) a.subTo(c,a);
          b.subTo(d,b);
        }
        else {
          v.subTo(u,v);
          if(ac) c.subTo(a,c);
          d.subTo(b,d);
        }
      }
      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
      if(d.compareTo(m) >= 0) return d.subtract(m);
      if(d.signum() < 0) d.addTo(m,d); else return d;
      if(d.signum() < 0) return d.add(m); else return d;
    }

    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];
    var lplim = (1<<26)/lowprimes[lowprimes.length-1];

    // (public) test primality with certainty >= 1-.5^t
    function bnIsProbablePrime(t) {
      var i, x = this.abs();
      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {
        for(i = 0; i < lowprimes.length; ++i)
          if(x[0] == lowprimes[i]) return true;
        return false;
      }
      if(x.isEven()) return false;
      i = 1;
      while(i < lowprimes.length) {
        var m = lowprimes[i], j = i+1;
        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
        m = x.modInt(m);
        while(i < j) if(m%lowprimes[i++] == 0) return false;
      }
      return x.millerRabin(t);
    }

    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
    function bnpMillerRabin(t) {
      var n1 = this.subtract(BigInteger.ONE);
      var k = n1.getLowestSetBit();
      if(k <= 0) return false;
      var r = n1.shiftRight(k);
      t = (t+1)>>1;
      if(t > lowprimes.length) t = lowprimes.length;
      var a = nbi();
      for(var i = 0; i < t; ++i) {
        //Pick bases at random, instead of starting at 2
        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);
        var y = a.modPow(r,this);
        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
          var j = 1;
          while(j++ < k && y.compareTo(n1) != 0) {
            y = y.modPowInt(2,this);
            if(y.compareTo(BigInteger.ONE) == 0) return false;
          }
          if(y.compareTo(n1) != 0) return false;
        }
      }
      return true;
    }

    // protected
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.fromNumber = bnpFromNumber;
    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
    BigInteger.prototype.changeBit = bnpChangeBit;
    BigInteger.prototype.addTo = bnpAddTo;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
    BigInteger.prototype.modInt = bnpModInt;
    BigInteger.prototype.millerRabin = bnpMillerRabin;

    // public
    BigInteger.prototype.clone = bnClone;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.byteValue = bnByteValue;
    BigInteger.prototype.shortValue = bnShortValue;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.toByteArray = bnToByteArray;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.min = bnMin;
    BigInteger.prototype.max = bnMax;
    BigInteger.prototype.and = bnAnd;
    BigInteger.prototype.or = bnOr;
    BigInteger.prototype.xor = bnXor;
    BigInteger.prototype.andNot = bnAndNot;
    BigInteger.prototype.not = bnNot;
    BigInteger.prototype.shiftLeft = bnShiftLeft;
    BigInteger.prototype.shiftRight = bnShiftRight;
    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
    BigInteger.prototype.bitCount = bnBitCount;
    BigInteger.prototype.testBit = bnTestBit;
    BigInteger.prototype.setBit = bnSetBit;
    BigInteger.prototype.clearBit = bnClearBit;
    BigInteger.prototype.flipBit = bnFlipBit;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.remainder = bnRemainder;
    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
    BigInteger.prototype.modPow = bnModPow;
    BigInteger.prototype.modInverse = bnModInverse;
    BigInteger.prototype.pow = bnPow;
    BigInteger.prototype.gcd = bnGCD;
    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

    // JSBN-specific extension
    BigInteger.prototype.square = bnSquare;

    // Expose the Barrett function
    BigInteger.prototype.Barrett = Barrett

    // BigInteger interfaces not implemented in jsbn:

    // BigInteger(int signum, byte[] magnitude)
    // double doubleValue()
    // float floatValue()
    // int hashCode()
    // long longValue()
    // static BigInteger valueOf(long val)

    // Random number generator - requires a PRNG backend, e.g. prng4.js

    // For best results, put code like
    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
    // in your main HTML document.

    var rng_state;
    var rng_pool;
    var rng_pptr;

    // Mix in a 32-bit integer into the pool
    function rng_seed_int(x) {
      rng_pool[rng_pptr++] ^= x & 255;
      rng_pool[rng_pptr++] ^= (x >> 8) & 255;
      rng_pool[rng_pptr++] ^= (x >> 16) & 255;
      rng_pool[rng_pptr++] ^= (x >> 24) & 255;
      if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;
    }

    // Mix in the current time (w/milliseconds) into the pool
    function rng_seed_time() {
      rng_seed_int(new Date().getTime());
    }

    // Initialize the pool with junk if needed.
    if(rng_pool == null) {
      rng_pool = new Array();
      rng_pptr = 0;
      var t;
      if(typeof window !== "undefined" && window.crypto) {
        if (window.crypto.getRandomValues) {
          // Use webcrypto if available
          var ua = new Uint8Array(32);
          window.crypto.getRandomValues(ua);
          for(t = 0; t < 32; ++t)
            rng_pool[rng_pptr++] = ua[t];
        }
        else if(navigator.appName == "Netscape" && navigator.appVersion < "5") {
          // Extract entropy (256 bits) from NS4 RNG if available
          var z = window.crypto.random(32);
          for(t = 0; t < z.length; ++t)
            rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
        }
      }
      while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()
        t = Math.floor(65536 * Math.random());
        rng_pool[rng_pptr++] = t >>> 8;
        rng_pool[rng_pptr++] = t & 255;
      }
      rng_pptr = 0;
      rng_seed_time();
      //rng_seed_int(window.screenX);
      //rng_seed_int(window.screenY);
    }

    function rng_get_byte() {
      if(rng_state == null) {
        rng_seed_time();
        rng_state = prng_newstate();
        rng_state.init(rng_pool);
        for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
          rng_pool[rng_pptr] = 0;
        rng_pptr = 0;
        //rng_pool = null;
      }
      // TODO: allow reseeding after first request
      return rng_state.next();
    }

    function rng_get_bytes(ba) {
      var i;
      for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();
    }

    function SecureRandom() {}

    SecureRandom.prototype.nextBytes = rng_get_bytes;

    // prng4.js - uses Arcfour as a PRNG

    function Arcfour() {
      this.i = 0;
      this.j = 0;
      this.S = new Array();
    }

    // Initialize arcfour context from key, an array of ints, each from [0..255]
    function ARC4init(key) {
      var i, j, t;
      for(i = 0; i < 256; ++i)
        this.S[i] = i;
      j = 0;
      for(i = 0; i < 256; ++i) {
        j = (j + this.S[i] + key[i % key.length]) & 255;
        t = this.S[i];
        this.S[i] = this.S[j];
        this.S[j] = t;
      }
      this.i = 0;
      this.j = 0;
    }

    function ARC4next() {
      var t;
      this.i = (this.i + 1) & 255;
      this.j = (this.j + this.S[this.i]) & 255;
      t = this.S[this.i];
      this.S[this.i] = this.S[this.j];
      this.S[this.j] = t;
      return this.S[(t + this.S[this.i]) & 255];
    }

    Arcfour.prototype.init = ARC4init;
    Arcfour.prototype.next = ARC4next;

    // Plug in your RNG constructor here
    function prng_newstate() {
      return new Arcfour();
    }

    // Pool size must be a multiple of 4 and greater than 32.
    // An array of bytes the size of the pool will be passed to init()
    var rng_psize = 256;

    if (true) {
        exports = module.exports = {
            default: BigInteger,
            BigInteger: BigInteger,
            SecureRandom: SecureRandom,
        };
    } else {}

}).call(this);


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(140)() ? Object.setPrototypeOf : __webpack_require__(141);


/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = (function () {
	if (this) return this;

	// Unexpected strict mode (may happen if e.g. bundled into ESM module), be nice

	// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis
	// In all ES5+ engines global object inherits from Object.prototype
	// (if you approached one that doesn't please report)
	Object.defineProperty(Object.prototype, "__global__", {
		get: function () { return this; },
		configurable: true
	});
	try { return __global__; }
	finally { delete Object.prototype.__global__; }
})();


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var objToString = Object.prototype.toString
  , id = objToString.call((function () { return arguments; })());

module.exports = function (value) { return objToString.call(value) === id; };


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var objToString = Object.prototype.toString, id = objToString.call("");

module.exports = function (value) {
	return (
		typeof value === "string" ||
		(value &&
			typeof value === "object" &&
			(value instanceof String || objToString.call(value) === id)) ||
		false
	);
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(182), __esModule: true };

/***/ }),
/* 63 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 64 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(36);
var $export = __webpack_require__(2);
var redefine = __webpack_require__(99);
var hide = __webpack_require__(18);
var Iterators = __webpack_require__(39);
var $iterCreate = __webpack_require__(184);
var setToStringTag = __webpack_require__(42);
var getPrototypeOf = __webpack_require__(187);
var ITERATOR = __webpack_require__(5)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7);
var document = __webpack_require__(4).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(7);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(41);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(70)('keys');
var uid = __webpack_require__(52);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(1);
var global = __webpack_require__(4);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(36) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 71 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(41);
var TAG = __webpack_require__(5)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 73 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(72);
var ITERATOR = __webpack_require__(5)('iterator');
var Iterators = __webpack_require__(39);
module.exports = __webpack_require__(1).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(37);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(18);
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};


/***/ }),
/* 77 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(205), __esModule: true };

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _from = __webpack_require__(114);

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 81 */
/***/ (function(module, exports) {

module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-1 hash algorithm.
	     */
	    var SHA1 = C_algo.SHA1 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476,
	                0xc3d2e1f0
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];

	            // Computation
	            for (var i = 0; i < 80; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	                    W[i] = (n << 1) | (n >>> 31);
	                }

	                var t = ((a << 5) | (a >>> 27)) + e + W[i];
	                if (i < 20) {
	                    t += ((b & c) | (~b & d)) + 0x5a827999;
	                } else if (i < 40) {
	                    t += (b ^ c ^ d) + 0x6ed9eba1;
	                } else if (i < 60) {
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
	                } else /* if (i < 80) */ {
	                    t += (b ^ c ^ d) - 0x359d3e2a;
	                }

	                e = d;
	                d = c;
	                c = (b << 30) | (b >>> 2);
	                b = a;
	                a = t;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */
	    C.SHA1 = Hasher._createHelper(SHA1);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	}());


	return CryptoJS.SHA1;

}));

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var C_algo = C.algo;

	    /**
	     * HMAC algorithm.
	     */
	    var HMAC = C_algo.HMAC = Base.extend({
	        /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */
	        init: function (hasher, key) {
	            // Init hasher
	            hasher = this._hasher = new hasher.init();

	            // Convert string to WordArray, else assume WordArray already
	            if (typeof key == 'string') {
	                key = Utf8.parse(key);
	            }

	            // Shortcuts
	            var hasherBlockSize = hasher.blockSize;
	            var hasherBlockSizeBytes = hasherBlockSize * 4;

	            // Allow arbitrary length keys
	            if (key.sigBytes > hasherBlockSizeBytes) {
	                key = hasher.finalize(key);
	            }

	            // Clamp excess bits
	            key.clamp();

	            // Clone key for inner and outer pads
	            var oKey = this._oKey = key.clone();
	            var iKey = this._iKey = key.clone();

	            // Shortcuts
	            var oKeyWords = oKey.words;
	            var iKeyWords = iKey.words;

	            // XOR keys with pad constants
	            for (var i = 0; i < hasherBlockSize; i++) {
	                oKeyWords[i] ^= 0x5c5c5c5c;
	                iKeyWords[i] ^= 0x36363636;
	            }
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */
	        reset: function () {
	            // Shortcut
	            var hasher = this._hasher;

	            // Reset
	            hasher.reset();
	            hasher.update(this._iKey);
	        },

	        /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            this._hasher.update(messageUpdate);

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Shortcut
	            var hasher = this._hasher;

	            // Compute HMAC
	            var innerHash = hasher.finalize(messageUpdate);
	            hasher.reset();
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

	            return hmac;
	        }
	    });
	}());


}));

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(5);


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var core = __webpack_require__(1);
var LIBRARY = __webpack_require__(36);
var wksExt = __webpack_require__(84);
var defineProperty = __webpack_require__(9).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(2);
var core = __webpack_require__(1);
var fails = __webpack_require__(21);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 87 */
/***/ (function(module, exports) {

module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue = __webpack_require__(35);

// prettier-ignore
var possibleTypes = { "object": true, "function": true, "undefined": true /* document.all */ };

module.exports = function (value) {
	if (!isValue(value)) return false;
	return hasOwnProperty.call(possibleTypes, typeof value);
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(290)() ? Object.assign : __webpack_require__(291);


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var clear    = __webpack_require__(138)
  , assign   = __webpack_require__(89)
  , callable = __webpack_require__(25)
  , value    = __webpack_require__(15)
  , d        = __webpack_require__(11)
  , autoBind = __webpack_require__(308)
  , Symbol   = __webpack_require__(19);

var defineProperty = Object.defineProperty, defineProperties = Object.defineProperties, Iterator;

module.exports = Iterator = function (list, context) {
	if (!(this instanceof Iterator)) throw new TypeError("Constructor requires 'new'");
	defineProperties(this, {
		__list__: d("w", value(list)),
		__context__: d("w", context),
		__nextIndex__: d("w", 0)
	});
	if (!context) return;
	callable(context.on);
	context.on("_add", this._onAdd);
	context.on("_delete", this._onDelete);
	context.on("_clear", this._onClear);
};

// Internal %IteratorPrototype% doesn't expose its constructor
delete Iterator.prototype.constructor;

defineProperties(
	Iterator.prototype,
	assign(
		{
			_next: d(function () {
				var i;
				if (!this.__list__) return undefined;
				if (this.__redo__) {
					i = this.__redo__.shift();
					if (i !== undefined) return i;
				}
				if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
				this._unBind();
				return undefined;
			}),
			next: d(function () {
				return this._createResult(this._next());
			}),
			_createResult: d(function (i) {
				if (i === undefined) return { done: true, value: undefined };
				return { done: false, value: this._resolve(i) };
			}),
			_resolve: d(function (i) {
				return this.__list__[i];
			}),
			_unBind: d(function () {
				this.__list__ = null;
				delete this.__redo__;
				if (!this.__context__) return;
				this.__context__.off("_add", this._onAdd);
				this.__context__.off("_delete", this._onDelete);
				this.__context__.off("_clear", this._onClear);
				this.__context__ = null;
			}),
			toString: d(function () {
				return "[object " + (this[Symbol.toStringTag] || "Object") + "]";
			})
		},
		autoBind({
			_onAdd: d(function (index) {
				if (index >= this.__nextIndex__) return;
				++this.__nextIndex__;
				if (!this.__redo__) {
					defineProperty(this, "__redo__", d("c", [index]));
					return;
				}
				this.__redo__.forEach(function (redo, i) {
					if (redo >= index) this.__redo__[i] = ++redo;
				}, this);
				this.__redo__.push(index);
			}),
			_onDelete: d(function (index) {
				var i;
				if (index >= this.__nextIndex__) return;
				--this.__nextIndex__;
				if (!this.__redo__) return;
				i = this.__redo__.indexOf(index);
				if (i !== -1) this.__redo__.splice(i, 1);
				this.__redo__.forEach(function (redo, j) {
					if (redo > index) this.__redo__[j] = --redo;
				}, this);
			}),
			_onClear: d(function () {
				if (this.__redo__) clear.call(this.__redo__);
				this.__nextIndex__ = 0;
			})
		})
	)
);

defineProperty(
	Iterator.prototype,
	Symbol.iterator,
	d(function () {
		return this;
	})
);


/***/ }),
/* 91 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__91__;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var tls = __webpack_require__(347);

function buildBuilder(mqttClient, opts) {
  var connection;
  opts.port = opts.port || 8883;
  opts.host = opts.hostname || opts.host || 'localhost';

  opts.rejectUnauthorized = opts.rejectUnauthorized !== false;

  delete opts.path;

  connection = tls.connect(opts);
  /* eslint no-use-before-define: [2, "nofunc"] */
  connection.on('secureConnect', function () {
    if (opts.rejectUnauthorized && !connection.authorized) {
      connection.emit('error', new Error('TLS not authorized'));
    } else {
      connection.removeListener('error', handleTLSerrors);
    }
  });

  function handleTLSerrors(err) {
    // How can I get verify this error is a tls error?
    if (opts.rejectUnauthorized) {
      mqttClient.emit('error', err);
    }

    // close this connection to match the behaviour of net
    // otherwise all we get is an error from the connection
    // and close event doesn't fire. This is a work around
    // to enable the reconnect code to work the same as with
    // net.createConnection
    connection.end();
  }

  connection.on('error', handleTLSerrors);
  return connection;
}

module.exports = buildBuilder;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer, process) {var stream = __webpack_require__(33)
var eos = __webpack_require__(348)
var inherits = __webpack_require__(14)
var shift = __webpack_require__(351)

var SIGNAL_FLUSH = (Buffer.from && Buffer.from !== Uint8Array.from)
  ? Buffer.from([0])
  : new Buffer([0])

var onuncork = function(self, fn) {
  if (self._corked) self.once('uncork', fn)
  else fn()
}

var autoDestroy = function (self, err) {
  if (self._autoDestroy) self.destroy(err)
}

var destroyer = function(self, end) {
  return function(err) {
    if (err) autoDestroy(self, err.message === 'premature close' ? null : err)
    else if (end && !self._ended) self.end()
  }
}

var end = function(ws, fn) {
  if (!ws) return fn()
  if (ws._writableState && ws._writableState.finished) return fn()
  if (ws._writableState) return ws.end(fn)
  ws.end()
  fn()
}

var toStreams2 = function(rs) {
  return new (stream.Readable)({objectMode:true, highWaterMark:16}).wrap(rs)
}

var Duplexify = function(writable, readable, opts) {
  if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts)
  stream.Duplex.call(this, opts)

  this._writable = null
  this._readable = null
  this._readable2 = null

  this._autoDestroy = !opts || opts.autoDestroy !== false
  this._forwardDestroy = !opts || opts.destroy !== false
  this._forwardEnd = !opts || opts.end !== false
  this._corked = 1 // start corked
  this._ondrain = null
  this._drained = false
  this._forwarding = false
  this._unwrite = null
  this._unread = null
  this._ended = false

  this.destroyed = false

  if (writable) this.setWritable(writable)
  if (readable) this.setReadable(readable)
}

inherits(Duplexify, stream.Duplex)

Duplexify.obj = function(writable, readable, opts) {
  if (!opts) opts = {}
  opts.objectMode = true
  opts.highWaterMark = 16
  return new Duplexify(writable, readable, opts)
}

Duplexify.prototype.cork = function() {
  if (++this._corked === 1) this.emit('cork')
}

Duplexify.prototype.uncork = function() {
  if (this._corked && --this._corked === 0) this.emit('uncork')
}

Duplexify.prototype.setWritable = function(writable) {
  if (this._unwrite) this._unwrite()

  if (this.destroyed) {
    if (writable && writable.destroy) writable.destroy()
    return
  }

  if (writable === null || writable === false) {
    this.end()
    return
  }

  var self = this
  var unend = eos(writable, {writable:true, readable:false}, destroyer(this, this._forwardEnd))

  var ondrain = function() {
    var ondrain = self._ondrain
    self._ondrain = null
    if (ondrain) ondrain()
  }

  var clear = function() {
    self._writable.removeListener('drain', ondrain)
    unend()
  }

  if (this._unwrite) process.nextTick(ondrain) // force a drain on stream reset to avoid livelocks

  this._writable = writable
  this._writable.on('drain', ondrain)
  this._unwrite = clear

  this.uncork() // always uncork setWritable
}

Duplexify.prototype.setReadable = function(readable) {
  if (this._unread) this._unread()

  if (this.destroyed) {
    if (readable && readable.destroy) readable.destroy()
    return
  }

  if (readable === null || readable === false) {
    this.push(null)
    this.resume()
    return
  }

  var self = this
  var unend = eos(readable, {writable:false, readable:true}, destroyer(this))

  var onreadable = function() {
    self._forward()
  }

  var onend = function() {
    self.push(null)
  }

  var clear = function() {
    self._readable2.removeListener('readable', onreadable)
    self._readable2.removeListener('end', onend)
    unend()
  }

  this._drained = true
  this._readable = readable
  this._readable2 = readable._readableState ? readable : toStreams2(readable)
  this._readable2.on('readable', onreadable)
  this._readable2.on('end', onend)
  this._unread = clear

  this._forward()
}

Duplexify.prototype._read = function() {
  this._drained = true
  this._forward()
}

Duplexify.prototype._forward = function() {
  if (this._forwarding || !this._readable2 || !this._drained) return
  this._forwarding = true

  var data

  while (this._drained && (data = shift(this._readable2)) !== null) {
    if (this.destroyed) continue
    this._drained = this.push(data)
  }

  this._forwarding = false
}

Duplexify.prototype.destroy = function(err) {
  if (this.destroyed) return
  this.destroyed = true

  var self = this
  process.nextTick(function() {
    self._destroy(err)
  })
}

Duplexify.prototype._destroy = function(err) {
  if (err) {
    var ondrain = this._ondrain
    this._ondrain = null
    if (ondrain) ondrain(err)
    else this.emit('error', err)
  }

  if (this._forwardDestroy) {
    if (this._readable && this._readable.destroy) this._readable.destroy()
    if (this._writable && this._writable.destroy) this._writable.destroy()
  }

  this.emit('close')
}

Duplexify.prototype._write = function(data, enc, cb) {
  if (this.destroyed) return cb()
  if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb))
  if (data === SIGNAL_FLUSH) return this._finish(cb)
  if (!this._writable) return cb()

  if (this._writable.write(data) === false) this._ondrain = cb
  else cb()
}

Duplexify.prototype._finish = function(cb) {
  var self = this
  this.emit('preend')
  onuncork(this, function() {
    end(self._forwardEnd && self._writable, function() {
      // haxx to not emit prefinish twice
      if (self._writableState.prefinished === false) self._writableState.prefinished = true
      self.emit('prefinish')
      onuncork(self, cb)
    })
  })
}

Duplexify.prototype.end = function(data, enc, cb) {
  if (typeof data === 'function') return this.end(null, null, data)
  if (typeof enc === 'function') return this.end(data, null, enc)
  this._ended = true
  if (data) this.write(data)
  if (!this._writableState.ending) this.write(SIGNAL_FLUSH)
  return stream.Writable.prototype.end.call(this, cb)
}

module.exports = Duplexify

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(16).Buffer, __webpack_require__(6)))

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/


var _typeof2 = __webpack_require__(32);

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = __webpack_require__(45);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var $protobuf = __webpack_require__(157);

// Common aliases
var $Reader = $protobuf.Reader,
    $Writer = $protobuf.Writer,
    $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.IMHttpWrapper = function () {

    /**
     * Properties of a IMHttpWrapper.
     * @exports IIMHttpWrapper
     * @interface IIMHttpWrapper
     * @property {string} token IMHttpWrapper token
     * @property {string} clientId IMHttpWrapper clientId
     * @property {string} request IMHttpWrapper request
     * @property {Uint8Array|null} [data] IMHttpWrapper data
     */

    /**
     * Constructs a new IMHttpWrapper.
     * @exports IMHttpWrapper
     * @classdesc Represents a IMHttpWrapper.
     * @implements IIMHttpWrapper
     * @constructor
     * @param {IIMHttpWrapper=} [properties] Properties to set
     */
    function IMHttpWrapper(properties) {
        if (properties) for (var keys = (0, _keys2.default)(properties), i = 0; i < keys.length; ++i) {
            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
    }

    /**
     * IMHttpWrapper token.
     * @member {string} token
     * @memberof IMHttpWrapper
     * @instance
     */
    IMHttpWrapper.prototype.token = "";

    /**
     * IMHttpWrapper clientId.
     * @member {string} clientId
     * @memberof IMHttpWrapper
     * @instance
     */
    IMHttpWrapper.prototype.clientId = "";

    /**
     * IMHttpWrapper request.
     * @member {string} request
     * @memberof IMHttpWrapper
     * @instance
     */
    IMHttpWrapper.prototype.request = "";

    /**
     * IMHttpWrapper data.
     * @member {Uint8Array} data
     * @memberof IMHttpWrapper
     * @instance
     */
    IMHttpWrapper.prototype.data = $util.newBuffer([]);

    /**
     * Creates a new IMHttpWrapper instance using the specified properties.
     * @function create
     * @memberof IMHttpWrapper
     * @static
     * @param {IIMHttpWrapper=} [properties] Properties to set
     * @returns {IMHttpWrapper} IMHttpWrapper instance
     */
    IMHttpWrapper.create = function create(properties) {
        return new IMHttpWrapper(properties);
    };

    /**
     * Encodes the specified IMHttpWrapper message. Does not implicitly {@link IMHttpWrapper.verify|verify} messages.
     * @function encode
     * @memberof IMHttpWrapper
     * @static
     * @param {IIMHttpWrapper} message IMHttpWrapper message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    IMHttpWrapper.encode = function encode(message, writer) {
        if (!writer) writer = $Writer.create();
        writer.uint32( /* id 1, wireType 2 =*/10).string(message.token);
        writer.uint32( /* id 2, wireType 2 =*/18).string(message.clientId);
        writer.uint32( /* id 3, wireType 2 =*/26).string(message.request);
        if (message.data != null && message.hasOwnProperty("data")) writer.uint32( /* id 4, wireType 2 =*/34).bytes(message.data);
        return writer;
    };

    /**
     * Encodes the specified IMHttpWrapper message, length delimited. Does not implicitly {@link IMHttpWrapper.verify|verify} messages.
     * @function encodeDelimited
     * @memberof IMHttpWrapper
     * @static
     * @param {IIMHttpWrapper} message IMHttpWrapper message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    IMHttpWrapper.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a IMHttpWrapper message from the specified reader or buffer.
     * @function decode
     * @memberof IMHttpWrapper
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {IMHttpWrapper} IMHttpWrapper
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    IMHttpWrapper.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.IMHttpWrapper();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.token = reader.string();
                    break;
                case 2:
                    message.clientId = reader.string();
                    break;
                case 3:
                    message.request = reader.string();
                    break;
                case 4:
                    message.data = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        if (!message.hasOwnProperty("token")) throw $util.ProtocolError("missing required 'token'", { instance: message });
        if (!message.hasOwnProperty("clientId")) throw $util.ProtocolError("missing required 'clientId'", { instance: message });
        if (!message.hasOwnProperty("request")) throw $util.ProtocolError("missing required 'request'", { instance: message });
        return message;
    };

    /**
     * Decodes a IMHttpWrapper message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof IMHttpWrapper
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {IMHttpWrapper} IMHttpWrapper
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    IMHttpWrapper.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader)) reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a IMHttpWrapper message.
     * @function verify
     * @memberof IMHttpWrapper
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    IMHttpWrapper.verify = function verify(message) {
        if ((typeof message === "undefined" ? "undefined" : (0, _typeof3.default)(message)) !== "object" || message === null) return "object expected";
        if (!$util.isString(message.token)) return "token: string expected";
        if (!$util.isString(message.clientId)) return "clientId: string expected";
        if (!$util.isString(message.request)) return "request: string expected";
        if (message.data != null && message.hasOwnProperty("data")) if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data))) return "data: buffer expected";
        return null;
    };

    /**
     * Creates a IMHttpWrapper message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof IMHttpWrapper
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {IMHttpWrapper} IMHttpWrapper
     */
    IMHttpWrapper.fromObject = function fromObject(object) {
        if (object instanceof $root.IMHttpWrapper) return object;
        var message = new $root.IMHttpWrapper();
        if (object.token != null) message.token = String(object.token);
        if (object.clientId != null) message.clientId = String(object.clientId);
        if (object.request != null) message.request = String(object.request);
        if (object.data != null) if (typeof object.data === "string") $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);else if (object.data.length) message.data = object.data;
        return message;
    };

    /**
     * Creates a plain object from a IMHttpWrapper message. Also converts values to other types if specified.
     * @function toObject
     * @memberof IMHttpWrapper
     * @static
     * @param {IMHttpWrapper} message IMHttpWrapper
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    IMHttpWrapper.toObject = function toObject(message, options) {
        if (!options) options = {};
        var object = {};
        if (options.defaults) {
            object.token = "";
            object.clientId = "";
            object.request = "";
            if (options.bytes === String) object.data = "";else {
                object.data = [];
                if (options.bytes !== Array) object.data = $util.newBuffer(object.data);
            }
        }
        if (message.token != null && message.hasOwnProperty("token")) object.token = message.token;
        if (message.clientId != null && message.hasOwnProperty("clientId")) object.clientId = message.clientId;
        if (message.request != null && message.hasOwnProperty("request")) object.request = message.request;
        if (message.data != null && message.hasOwnProperty("data")) object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        return object;
    };

    /**
     * Converts this IMHttpWrapper to JSON.
     * @function toJSON
     * @memberof IMHttpWrapper
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    IMHttpWrapper.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return IMHttpWrapper;
}();

$root.RouteRequest = function () {

    /**
     * Properties of a RouteRequest.
     * @exports IRouteRequest
     * @interface IRouteRequest
     * @property {string|null} [app] RouteRequest app
     * @property {number|null} [platform] RouteRequest platform
     * @property {number|null} [pushType] RouteRequest pushType
     * @property {string|null} [deviceName] RouteRequest deviceName
     * @property {string|null} [deviceVersion] RouteRequest deviceVersion
     * @property {string|null} [phoneName] RouteRequest phoneName
     * @property {string|null} [language] RouteRequest language
     * @property {string|null} [carrierName] RouteRequest carrierName
     * @property {string|null} [appVersion] RouteRequest appVersion
     * @property {string|null} [sdkVersion] RouteRequest sdkVersion
     * @property {string|null} [wxAppId] RouteRequest wxAppId
     * @property {string|null} [wxAppKey] RouteRequest wxAppKey
     * @property {string|null} [webAppId] RouteRequest webAppId
     * @property {string|null} [webAppKey] RouteRequest webAppKey
     * @property {string|null} [host] RouteRequest host
     */

    /**
     * Constructs a new RouteRequest.
     * @exports RouteRequest
     * @classdesc Represents a RouteRequest.
     * @implements IRouteRequest
     * @constructor
     * @param {IRouteRequest=} [properties] Properties to set
     */
    function RouteRequest(properties) {
        if (properties) for (var keys = (0, _keys2.default)(properties), i = 0; i < keys.length; ++i) {
            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
    }

    /**
     * RouteRequest app.
     * @member {string} app
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.app = "";

    /**
     * RouteRequest platform.
     * @member {number} platform
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.platform = 0;

    /**
     * RouteRequest pushType.
     * @member {number} pushType
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.pushType = 0;

    /**
     * RouteRequest deviceName.
     * @member {string} deviceName
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.deviceName = "";

    /**
     * RouteRequest deviceVersion.
     * @member {string} deviceVersion
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.deviceVersion = "";

    /**
     * RouteRequest phoneName.
     * @member {string} phoneName
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.phoneName = "";

    /**
     * RouteRequest language.
     * @member {string} language
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.language = "";

    /**
     * RouteRequest carrierName.
     * @member {string} carrierName
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.carrierName = "";

    /**
     * RouteRequest appVersion.
     * @member {string} appVersion
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.appVersion = "";

    /**
     * RouteRequest sdkVersion.
     * @member {string} sdkVersion
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.sdkVersion = "";

    /**
     * RouteRequest wxAppId.
     * @member {string} wxAppId
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.wxAppId = "";

    /**
     * RouteRequest wxAppKey.
     * @member {string} wxAppKey
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.wxAppKey = "";

    /**
     * RouteRequest webAppId.
     * @member {string} webAppId
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.webAppId = "";

    /**
     * RouteRequest webAppKey.
     * @member {string} webAppKey
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.webAppKey = "";

    /**
     * RouteRequest host.
     * @member {string} host
     * @memberof RouteRequest
     * @instance
     */
    RouteRequest.prototype.host = "";

    /**
     * Creates a new RouteRequest instance using the specified properties.
     * @function create
     * @memberof RouteRequest
     * @static
     * @param {IRouteRequest=} [properties] Properties to set
     * @returns {RouteRequest} RouteRequest instance
     */
    RouteRequest.create = function create(properties) {
        return new RouteRequest(properties);
    };

    /**
     * Encodes the specified RouteRequest message. Does not implicitly {@link RouteRequest.verify|verify} messages.
     * @function encode
     * @memberof RouteRequest
     * @static
     * @param {IRouteRequest} message RouteRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    RouteRequest.encode = function encode(message, writer) {
        if (!writer) writer = $Writer.create();
        if (message.app != null && message.hasOwnProperty("app")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.app);
        if (message.platform != null && message.hasOwnProperty("platform")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.platform);
        if (message.pushType != null && message.hasOwnProperty("pushType")) writer.uint32( /* id 3, wireType 0 =*/24).int32(message.pushType);
        if (message.deviceName != null && message.hasOwnProperty("deviceName")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.deviceName);
        if (message.deviceVersion != null && message.hasOwnProperty("deviceVersion")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.deviceVersion);
        if (message.phoneName != null && message.hasOwnProperty("phoneName")) writer.uint32( /* id 6, wireType 2 =*/50).string(message.phoneName);
        if (message.language != null && message.hasOwnProperty("language")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.language);
        if (message.carrierName != null && message.hasOwnProperty("carrierName")) writer.uint32( /* id 8, wireType 2 =*/66).string(message.carrierName);
        if (message.appVersion != null && message.hasOwnProperty("appVersion")) writer.uint32( /* id 9, wireType 2 =*/74).string(message.appVersion);
        if (message.sdkVersion != null && message.hasOwnProperty("sdkVersion")) writer.uint32( /* id 10, wireType 2 =*/82).string(message.sdkVersion);
        if (message.wxAppId != null && message.hasOwnProperty("wxAppId")) writer.uint32( /* id 11, wireType 2 =*/90).string(message.wxAppId);
        if (message.wxAppKey != null && message.hasOwnProperty("wxAppKey")) writer.uint32( /* id 12, wireType 2 =*/98).string(message.wxAppKey);
        if (message.webAppId != null && message.hasOwnProperty("webAppId")) writer.uint32( /* id 13, wireType 2 =*/106).string(message.webAppId);
        if (message.webAppKey != null && message.hasOwnProperty("webAppKey")) writer.uint32( /* id 14, wireType 2 =*/114).string(message.webAppKey);
        if (message.host != null && message.hasOwnProperty("host")) writer.uint32( /* id 15, wireType 2 =*/122).string(message.host);
        return writer;
    };

    /**
     * Encodes the specified RouteRequest message, length delimited. Does not implicitly {@link RouteRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof RouteRequest
     * @static
     * @param {IRouteRequest} message RouteRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    RouteRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a RouteRequest message from the specified reader or buffer.
     * @function decode
     * @memberof RouteRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {RouteRequest} RouteRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    RouteRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.RouteRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.app = reader.string();
                    break;
                case 2:
                    message.platform = reader.int32();
                    break;
                case 3:
                    message.pushType = reader.int32();
                    break;
                case 4:
                    message.deviceName = reader.string();
                    break;
                case 5:
                    message.deviceVersion = reader.string();
                    break;
                case 6:
                    message.phoneName = reader.string();
                    break;
                case 7:
                    message.language = reader.string();
                    break;
                case 8:
                    message.carrierName = reader.string();
                    break;
                case 9:
                    message.appVersion = reader.string();
                    break;
                case 10:
                    message.sdkVersion = reader.string();
                    break;
                case 11:
                    message.wxAppId = reader.string();
                    break;
                case 12:
                    message.wxAppKey = reader.string();
                    break;
                case 13:
                    message.webAppId = reader.string();
                    break;
                case 14:
                    message.webAppKey = reader.string();
                    break;
                case 15:
                    message.host = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    };

    /**
     * Decodes a RouteRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof RouteRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {RouteRequest} RouteRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    RouteRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader)) reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a RouteRequest message.
     * @function verify
     * @memberof RouteRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    RouteRequest.verify = function verify(message) {
        if ((typeof message === "undefined" ? "undefined" : (0, _typeof3.default)(message)) !== "object" || message === null) return "object expected";
        if (message.app != null && message.hasOwnProperty("app")) if (!$util.isString(message.app)) return "app: string expected";
        if (message.platform != null && message.hasOwnProperty("platform")) if (!$util.isInteger(message.platform)) return "platform: integer expected";
        if (message.pushType != null && message.hasOwnProperty("pushType")) if (!$util.isInteger(message.pushType)) return "pushType: integer expected";
        if (message.deviceName != null && message.hasOwnProperty("deviceName")) if (!$util.isString(message.deviceName)) return "deviceName: string expected";
        if (message.deviceVersion != null && message.hasOwnProperty("deviceVersion")) if (!$util.isString(message.deviceVersion)) return "deviceVersion: string expected";
        if (message.phoneName != null && message.hasOwnProperty("phoneName")) if (!$util.isString(message.phoneName)) return "phoneName: string expected";
        if (message.language != null && message.hasOwnProperty("language")) if (!$util.isString(message.language)) return "language: string expected";
        if (message.carrierName != null && message.hasOwnProperty("carrierName")) if (!$util.isString(message.carrierName)) return "carrierName: string expected";
        if (message.appVersion != null && message.hasOwnProperty("appVersion")) if (!$util.isString(message.appVersion)) return "appVersion: string expected";
        if (message.sdkVersion != null && message.hasOwnProperty("sdkVersion")) if (!$util.isString(message.sdkVersion)) return "sdkVersion: string expected";
        if (message.wxAppId != null && message.hasOwnProperty("wxAppId")) if (!$util.isString(message.wxAppId)) return "wxAppId: string expected";
        if (message.wxAppKey != null && message.hasOwnProperty("wxAppKey")) if (!$util.isString(message.wxAppKey)) return "wxAppKey: string expected";
        if (message.webAppId != null && message.hasOwnProperty("webAppId")) if (!$util.isString(message.webAppId)) return "webAppId: string expected";
        if (message.webAppKey != null && message.hasOwnProperty("webAppKey")) if (!$util.isString(message.webAppKey)) return "webAppKey: string expected";
        if (message.host != null && message.hasOwnProperty("host")) if (!$util.isString(message.host)) return "host: string expected";
        return null;
    };

    /**
     * Creates a RouteRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof RouteRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {RouteRequest} RouteRequest
     */
    RouteRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.RouteRequest) return object;
        var message = new $root.RouteRequest();
        if (object.app != null) message.app = String(object.app);
        if (object.platform != null) message.platform = object.platform | 0;
        if (object.pushType != null) message.pushType = object.pushType | 0;
        if (object.deviceName != null) message.deviceName = String(object.deviceName);
        if (object.deviceVersion != null) message.deviceVersion = String(object.deviceVersion);
        if (object.phoneName != null) message.phoneName = String(object.phoneName);
        if (object.language != null) message.language = String(object.language);
        if (object.carrierName != null) message.carrierName = String(object.carrierName);
        if (object.appVersion != null) message.appVersion = String(object.appVersion);
        if (object.sdkVersion != null) message.sdkVersion = String(object.sdkVersion);
        if (object.wxAppId != null) message.wxAppId = String(object.wxAppId);
        if (object.wxAppKey != null) message.wxAppKey = String(object.wxAppKey);
        if (object.webAppId != null) message.webAppId = String(object.webAppId);
        if (object.webAppKey != null) message.webAppKey = String(object.webAppKey);
        if (object.host != null) message.host = String(object.host);
        return message;
    };

    /**
     * Creates a plain object from a RouteRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof RouteRequest
     * @static
     * @param {RouteRequest} message RouteRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    RouteRequest.toObject = function toObject(message, options) {
        if (!options) options = {};
        var object = {};
        if (options.defaults) {
            object.app = "";
            object.platform = 0;
            object.pushType = 0;
            object.deviceName = "";
            object.deviceVersion = "";
            object.phoneName = "";
            object.language = "";
            object.carrierName = "";
            object.appVersion = "";
            object.sdkVersion = "";
            object.wxAppId = "";
            object.wxAppKey = "";
            object.webAppId = "";
            object.webAppKey = "";
            object.host = "";
        }
        if (message.app != null && message.hasOwnProperty("app")) object.app = message.app;
        if (message.platform != null && message.hasOwnProperty("platform")) object.platform = message.platform;
        if (message.pushType != null && message.hasOwnProperty("pushType")) object.pushType = message.pushType;
        if (message.deviceName != null && message.hasOwnProperty("deviceName")) object.deviceName = message.deviceName;
        if (message.deviceVersion != null && message.hasOwnProperty("deviceVersion")) object.deviceVersion = message.deviceVersion;
        if (message.phoneName != null && message.hasOwnProperty("phoneName")) object.phoneName = message.phoneName;
        if (message.language != null && message.hasOwnProperty("language")) object.language = message.language;
        if (message.carrierName != null && message.hasOwnProperty("carrierName")) object.carrierName = message.carrierName;
        if (message.appVersion != null && message.hasOwnProperty("appVersion")) object.appVersion = message.appVersion;
        if (message.sdkVersion != null && message.hasOwnProperty("sdkVersion")) object.sdkVersion = message.sdkVersion;
        if (message.wxAppId != null && message.hasOwnProperty("wxAppId")) object.wxAppId = message.wxAppId;
        if (message.wxAppKey != null && message.hasOwnProperty("wxAppKey")) object.wxAppKey = message.wxAppKey;
        if (message.webAppId != null && message.hasOwnProperty("webAppId")) object.webAppId = message.webAppId;
        if (message.webAppKey != null && message.hasOwnProperty("webAppKey")) object.webAppKey = message.webAppKey;
        if (message.host != null && message.hasOwnProperty("host")) object.host = message.host;
        return object;
    };

    /**
     * Converts this RouteRequest to JSON.
     * @function toJSON
     * @memberof RouteRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    RouteRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RouteRequest;
}();

$root.AddressTriple = function () {

    /**
     * Properties of an AddressTriple.
     * @exports IAddressTriple
     * @interface IAddressTriple
     * @property {string} host AddressTriple host
     * @property {number} longPort AddressTriple longPort
     * @property {number} shortPort AddressTriple shortPort
     * @property {number|null} [wssPort] AddressTriple wssPort
     */

    /**
     * Constructs a new AddressTriple.
     * @exports AddressTriple
     * @classdesc Represents an AddressTriple.
     * @implements IAddressTriple
     * @constructor
     * @param {IAddressTriple=} [properties] Properties to set
     */
    function AddressTriple(properties) {
        if (properties) for (var keys = (0, _keys2.default)(properties), i = 0; i < keys.length; ++i) {
            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
    }

    /**
     * AddressTriple host.
     * @member {string} host
     * @memberof AddressTriple
     * @instance
     */
    AddressTriple.prototype.host = "";

    /**
     * AddressTriple longPort.
     * @member {number} longPort
     * @memberof AddressTriple
     * @instance
     */
    AddressTriple.prototype.longPort = 0;

    /**
     * AddressTriple shortPort.
     * @member {number} shortPort
     * @memberof AddressTriple
     * @instance
     */
    AddressTriple.prototype.shortPort = 0;

    /**
     * AddressTriple wssPort.
     * @member {number} wssPort
     * @memberof AddressTriple
     * @instance
     */
    AddressTriple.prototype.wssPort = 0;

    /**
     * Creates a new AddressTriple instance using the specified properties.
     * @function create
     * @memberof AddressTriple
     * @static
     * @param {IAddressTriple=} [properties] Properties to set
     * @returns {AddressTriple} AddressTriple instance
     */
    AddressTriple.create = function create(properties) {
        return new AddressTriple(properties);
    };

    /**
     * Encodes the specified AddressTriple message. Does not implicitly {@link AddressTriple.verify|verify} messages.
     * @function encode
     * @memberof AddressTriple
     * @static
     * @param {IAddressTriple} message AddressTriple message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AddressTriple.encode = function encode(message, writer) {
        if (!writer) writer = $Writer.create();
        writer.uint32( /* id 1, wireType 2 =*/10).string(message.host);
        writer.uint32( /* id 2, wireType 0 =*/16).int32(message.longPort);
        writer.uint32( /* id 3, wireType 0 =*/24).int32(message.shortPort);
        if (message.wssPort != null && message.hasOwnProperty("wssPort")) writer.uint32( /* id 4, wireType 0 =*/32).int32(message.wssPort);
        return writer;
    };

    /**
     * Encodes the specified AddressTriple message, length delimited. Does not implicitly {@link AddressTriple.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AddressTriple
     * @static
     * @param {IAddressTriple} message AddressTriple message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AddressTriple.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AddressTriple message from the specified reader or buffer.
     * @function decode
     * @memberof AddressTriple
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AddressTriple} AddressTriple
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AddressTriple.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.AddressTriple();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.host = reader.string();
                    break;
                case 2:
                    message.longPort = reader.int32();
                    break;
                case 3:
                    message.shortPort = reader.int32();
                    break;
                case 4:
                    message.wssPort = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        if (!message.hasOwnProperty("host")) throw $util.ProtocolError("missing required 'host'", { instance: message });
        if (!message.hasOwnProperty("longPort")) throw $util.ProtocolError("missing required 'longPort'", { instance: message });
        if (!message.hasOwnProperty("shortPort")) throw $util.ProtocolError("missing required 'shortPort'", { instance: message });
        return message;
    };

    /**
     * Decodes an AddressTriple message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AddressTriple
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AddressTriple} AddressTriple
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AddressTriple.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader)) reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AddressTriple message.
     * @function verify
     * @memberof AddressTriple
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AddressTriple.verify = function verify(message) {
        if ((typeof message === "undefined" ? "undefined" : (0, _typeof3.default)(message)) !== "object" || message === null) return "object expected";
        if (!$util.isString(message.host)) return "host: string expected";
        if (!$util.isInteger(message.longPort)) return "longPort: integer expected";
        if (!$util.isInteger(message.shortPort)) return "shortPort: integer expected";
        if (message.wssPort != null && message.hasOwnProperty("wssPort")) if (!$util.isInteger(message.wssPort)) return "wssPort: integer expected";
        return null;
    };

    /**
     * Creates an AddressTriple message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AddressTriple
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AddressTriple} AddressTriple
     */
    AddressTriple.fromObject = function fromObject(object) {
        if (object instanceof $root.AddressTriple) return object;
        var message = new $root.AddressTriple();
        if (object.host != null) message.host = String(object.host);
        if (object.longPort != null) message.longPort = object.longPort | 0;
        if (object.shortPort != null) message.shortPort = object.shortPort | 0;
        if (object.wssPort != null) message.wssPort = object.wssPort | 0;
        return message;
    };

    /**
     * Creates a plain object from an AddressTriple message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AddressTriple
     * @static
     * @param {AddressTriple} message AddressTriple
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AddressTriple.toObject = function toObject(message, options) {
        if (!options) options = {};
        var object = {};
        if (options.defaults) {
            object.host = "";
            object.longPort = 0;
            object.shortPort = 0;
            object.wssPort = 0;
        }
        if (message.host != null && message.hasOwnProperty("host")) object.host = message.host;
        if (message.longPort != null && message.hasOwnProperty("longPort")) object.longPort = message.longPort;
        if (message.shortPort != null && message.hasOwnProperty("shortPort")) object.shortPort = message.shortPort;
        if (message.wssPort != null && message.hasOwnProperty("wssPort")) object.wssPort = message.wssPort;
        return object;
    };

    /**
     * Converts this AddressTriple to JSON.
     * @function toJSON
     * @memberof AddressTriple
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AddressTriple.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return AddressTriple;
}();

$root.RouteResponse = function () {

    /**
     * Properties of a RouteResponse.
     * @exports IRouteResponse
     * @interface IRouteResponse
     * @property {string} host RouteResponse host
     * @property {number} longPort RouteResponse longPort
     * @property {number} shortPort RouteResponse shortPort
     * @property {string|null} [thumbPara] RouteResponse thumbPara
     * @property {string|null} [node] RouteResponse node
     * @property {number|null} [commercial] RouteResponse commercial
     * @property {number|null} [wssPort] RouteResponse wssPort
     * @property {Array.<IAddressTriple>|null} [candidate] RouteResponse candidate
     */

    /**
     * Constructs a new RouteResponse.
     * @exports RouteResponse
     * @classdesc Represents a RouteResponse.
     * @implements IRouteResponse
     * @constructor
     * @param {IRouteResponse=} [properties] Properties to set
     */
    function RouteResponse(properties) {
        this.candidate = [];
        if (properties) for (var keys = (0, _keys2.default)(properties), i = 0; i < keys.length; ++i) {
            if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
    }

    /**
     * RouteResponse host.
     * @member {string} host
     * @memberof RouteResponse
     * @instance
     */
    RouteResponse.prototype.host = "";

    /**
     * RouteResponse longPort.
     * @member {number} longPort
     * @memberof RouteResponse
     * @instance
     */
    RouteResponse.prototype.longPort = 0;

    /**
     * RouteResponse shortPort.
     * @member {number} shortPort
     * @memberof RouteResponse
     * @instance
     */
    RouteResponse.prototype.shortPort = 0;

    /**
     * RouteResponse thumbPara.
     * @member {string} thumbPara
     * @memberof RouteResponse
     * @instance
     */
    RouteResponse.prototype.thumbPara = "";

    /**
     * RouteResponse node.
     * @member {string} node
     * @memberof RouteResponse
     * @instance
     */
    RouteResponse.prototype.node = "";

    /**
     * RouteResponse commercial.
     * @member {number} commercial
     * @memberof RouteResponse
     * @instance
     */
    RouteResponse.prototype.commercial = 0;

    /**
     * RouteResponse wssPort.
     * @member {number} wssPort
     * @memberof RouteResponse
     * @instance
     */
    RouteResponse.prototype.wssPort = 0;

    /**
     * RouteResponse candidate.
     * @member {Array.<IAddressTriple>} candidate
     * @memberof RouteResponse
     * @instance
     */
    RouteResponse.prototype.candidate = $util.emptyArray;

    /**
     * Creates a new RouteResponse instance using the specified properties.
     * @function create
     * @memberof RouteResponse
     * @static
     * @param {IRouteResponse=} [properties] Properties to set
     * @returns {RouteResponse} RouteResponse instance
     */
    RouteResponse.create = function create(properties) {
        return new RouteResponse(properties);
    };

    /**
     * Encodes the specified RouteResponse message. Does not implicitly {@link RouteResponse.verify|verify} messages.
     * @function encode
     * @memberof RouteResponse
     * @static
     * @param {IRouteResponse} message RouteResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    RouteResponse.encode = function encode(message, writer) {
        if (!writer) writer = $Writer.create();
        writer.uint32( /* id 1, wireType 2 =*/10).string(message.host);
        writer.uint32( /* id 2, wireType 0 =*/16).int32(message.longPort);
        writer.uint32( /* id 3, wireType 0 =*/24).int32(message.shortPort);
        if (message.thumbPara != null && message.hasOwnProperty("thumbPara")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.thumbPara);
        if (message.node != null && message.hasOwnProperty("node")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.node);
        if (message.commercial != null && message.hasOwnProperty("commercial")) writer.uint32( /* id 6, wireType 0 =*/48).int32(message.commercial);
        if (message.wssPort != null && message.hasOwnProperty("wssPort")) writer.uint32( /* id 7, wireType 0 =*/56).int32(message.wssPort);
        if (message.candidate != null && message.candidate.length) for (var i = 0; i < message.candidate.length; ++i) {
            $root.AddressTriple.encode(message.candidate[i], writer.uint32( /* id 8, wireType 2 =*/66).fork()).ldelim();
        }return writer;
    };

    /**
     * Encodes the specified RouteResponse message, length delimited. Does not implicitly {@link RouteResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof RouteResponse
     * @static
     * @param {IRouteResponse} message RouteResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    RouteResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a RouteResponse message from the specified reader or buffer.
     * @function decode
     * @memberof RouteResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {RouteResponse} RouteResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    RouteResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.RouteResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.host = reader.string();
                    break;
                case 2:
                    message.longPort = reader.int32();
                    break;
                case 3:
                    message.shortPort = reader.int32();
                    break;
                case 4:
                    message.thumbPara = reader.string();
                    break;
                case 5:
                    message.node = reader.string();
                    break;
                case 6:
                    message.commercial = reader.int32();
                    break;
                case 7:
                    message.wssPort = reader.int32();
                    break;
                case 8:
                    if (!(message.candidate && message.candidate.length)) message.candidate = [];
                    message.candidate.push($root.AddressTriple.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        if (!message.hasOwnProperty("host")) throw $util.ProtocolError("missing required 'host'", { instance: message });
        if (!message.hasOwnProperty("longPort")) throw $util.ProtocolError("missing required 'longPort'", { instance: message });
        if (!message.hasOwnProperty("shortPort")) throw $util.ProtocolError("missing required 'shortPort'", { instance: message });
        return message;
    };

    /**
     * Decodes a RouteResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof RouteResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {RouteResponse} RouteResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    RouteResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader)) reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a RouteResponse message.
     * @function verify
     * @memberof RouteResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    RouteResponse.verify = function verify(message) {
        if ((typeof message === "undefined" ? "undefined" : (0, _typeof3.default)(message)) !== "object" || message === null) return "object expected";
        if (!$util.isString(message.host)) return "host: string expected";
        if (!$util.isInteger(message.longPort)) return "longPort: integer expected";
        if (!$util.isInteger(message.shortPort)) return "shortPort: integer expected";
        if (message.thumbPara != null && message.hasOwnProperty("thumbPara")) if (!$util.isString(message.thumbPara)) return "thumbPara: string expected";
        if (message.node != null && message.hasOwnProperty("node")) if (!$util.isString(message.node)) return "node: string expected";
        if (message.commercial != null && message.hasOwnProperty("commercial")) if (!$util.isInteger(message.commercial)) return "commercial: integer expected";
        if (message.wssPort != null && message.hasOwnProperty("wssPort")) if (!$util.isInteger(message.wssPort)) return "wssPort: integer expected";
        if (message.candidate != null && message.hasOwnProperty("candidate")) {
            if (!Array.isArray(message.candidate)) return "candidate: array expected";
            for (var i = 0; i < message.candidate.length; ++i) {
                var error = $root.AddressTriple.verify(message.candidate[i]);
                if (error) return "candidate." + error;
            }
        }
        return null;
    };

    /**
     * Creates a RouteResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof RouteResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {RouteResponse} RouteResponse
     */
    RouteResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.RouteResponse) return object;
        var message = new $root.RouteResponse();
        if (object.host != null) message.host = String(object.host);
        if (object.longPort != null) message.longPort = object.longPort | 0;
        if (object.shortPort != null) message.shortPort = object.shortPort | 0;
        if (object.thumbPara != null) message.thumbPara = String(object.thumbPara);
        if (object.node != null) message.node = String(object.node);
        if (object.commercial != null) message.commercial = object.commercial | 0;
        if (object.wssPort != null) message.wssPort = object.wssPort | 0;
        if (object.candidate) {
            if (!Array.isArray(object.candidate)) throw TypeError(".RouteResponse.candidate: array expected");
            message.candidate = [];
            for (var i = 0; i < object.candidate.length; ++i) {
                if ((0, _typeof3.default)(object.candidate[i]) !== "object") throw TypeError(".RouteResponse.candidate: object expected");
                message.candidate[i] = $root.AddressTriple.fromObject(object.candidate[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a RouteResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof RouteResponse
     * @static
     * @param {RouteResponse} message RouteResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    RouteResponse.toObject = function toObject(message, options) {
        if (!options) options = {};
        var object = {};
        if (options.arrays || options.defaults) object.candidate = [];
        if (options.defaults) {
            object.host = "";
            object.longPort = 0;
            object.shortPort = 0;
            object.thumbPara = "";
            object.node = "";
            object.commercial = 0;
            object.wssPort = 0;
        }
        if (message.host != null && message.hasOwnProperty("host")) object.host = message.host;
        if (message.longPort != null && message.hasOwnProperty("longPort")) object.longPort = message.longPort;
        if (message.shortPort != null && message.hasOwnProperty("shortPort")) object.shortPort = message.shortPort;
        if (message.thumbPara != null && message.hasOwnProperty("thumbPara")) object.thumbPara = message.thumbPara;
        if (message.node != null && message.hasOwnProperty("node")) object.node = message.node;
        if (message.commercial != null && message.hasOwnProperty("commercial")) object.commercial = message.commercial;
        if (message.wssPort != null && message.hasOwnProperty("wssPort")) object.wssPort = message.wssPort;
        if (message.candidate && message.candidate.length) {
            object.candidate = [];
            for (var j = 0; j < message.candidate.length; ++j) {
                object.candidate[j] = $root.AddressTriple.toObject(message.candidate[j], options);
            }
        }
        return object;
    };

    /**
     * Converts this RouteResponse to JSON.
     * @function toJSON
     * @memberof RouteResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    RouteResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RouteResponse;
}();

module.exports = $root;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 97 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(8) && !__webpack_require__(21)(function () {
  return Object.defineProperty(__webpack_require__(66)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(18);


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(9);
var anObject = __webpack_require__(13);
var getKeys = __webpack_require__(40);

module.exports = __webpack_require__(8) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(22);
var toIObject = __webpack_require__(27);
var arrayIndexOf = __webpack_require__(185)(false);
var IE_PROTO = __webpack_require__(69)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(4).document;
module.exports = document && document.documentElement;


/***/ }),
/* 103 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(13);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(39);
var ITERATOR = __webpack_require__(5)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(13);
var aFunction = __webpack_require__(37);
var SPECIES = __webpack_require__(5)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(17);
var invoke = __webpack_require__(191);
var html = __webpack_require__(102);
var cel = __webpack_require__(66);
var global = __webpack_require__(4);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(41)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 108 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(13);
var isObject = __webpack_require__(7);
var newPromiseCapability = __webpack_require__(75);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(4);
var core = __webpack_require__(1);
var dP = __webpack_require__(9);
var DESCRIPTORS = __webpack_require__(8);
var SPECIES = __webpack_require__(5)('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(5)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(200), __esModule: true };

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(202), __esModule: true };

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(206), __esModule: true };

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(209), __esModule: true };

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(9).f;
var create = __webpack_require__(50);
var redefineAll = __webpack_require__(76);
var ctx = __webpack_require__(17);
var anInstance = __webpack_require__(73);
var forOf = __webpack_require__(44);
var $iterDefine = __webpack_require__(65);
var step = __webpack_require__(103);
var setSpecies = __webpack_require__(110);
var DESCRIPTORS = __webpack_require__(8);
var fastKey = __webpack_require__(54).fastKey;
var validate = __webpack_require__(80);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(4);
var $export = __webpack_require__(2);
var meta = __webpack_require__(54);
var fails = __webpack_require__(21);
var hide = __webpack_require__(18);
var redefineAll = __webpack_require__(76);
var forOf = __webpack_require__(44);
var anInstance = __webpack_require__(73);
var isObject = __webpack_require__(7);
var setToStringTag = __webpack_require__(42);
var dP = __webpack_require__(9).f;
var each = __webpack_require__(211)(0);
var DESCRIPTORS = __webpack_require__(8);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function (target, iterable) {
      anInstance(target, C, NAME, '_c');
      target._c = new Base();
      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
        anInstance(this, C, KEY);
        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    IS_WEAK || dP(C.prototype, 'size', {
      get: function () {
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(41);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(72);
var from = __webpack_require__(215);
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(2);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(2);
var aFunction = __webpack_require__(37);
var ctx = __webpack_require__(17);
var forOf = __webpack_require__(44);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(123);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(218), __esModule: true };

/***/ }),
/* 124 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__124__;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0));
	}
	else {}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Initialization and round constants tables
	    var H = [];
	    var K = [];

	    // Compute constants
	    (function () {
	        function isPrime(n) {
	            var sqrtN = Math.sqrt(n);
	            for (var factor = 2; factor <= sqrtN; factor++) {
	                if (!(n % factor)) {
	                    return false;
	                }
	            }

	            return true;
	        }

	        function getFractionalBits(n) {
	            return ((n - (n | 0)) * 0x100000000) | 0;
	        }

	        var n = 2;
	        var nPrime = 0;
	        while (nPrime < 64) {
	            if (isPrime(n)) {
	                if (nPrime < 8) {
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
	                }
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

	                nPrime++;
	            }

	            n++;
	        }
	    }());

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-256 hash algorithm.
	     */
	    var SHA256 = C_algo.SHA256 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init(H.slice(0));
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];
	            var f = H[5];
	            var g = H[6];
	            var h = H[7];

	            // Computation
	            for (var i = 0; i < 64; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var gamma0x = W[i - 15];
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
	                                   (gamma0x >>> 3);

	                    var gamma1x = W[i - 2];
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
	                                   (gamma1x >>> 10);

	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
	                }

	                var ch  = (e & f) ^ (~e & g);
	                var maj = (a & b) ^ (a & c) ^ (b & c);

	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

	                var t1 = h + sigma1 + ch + K[i] + W[i];
	                var t2 = sigma0 + maj;

	                h = g;
	                g = f;
	                f = e;
	                e = (d + t1) | 0;
	                d = c;
	                c = b;
	                b = a;
	                a = (t1 + t2) | 0;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	            H[5] = (H[5] + f) | 0;
	            H[6] = (H[6] + g) | 0;
	            H[7] = (H[7] + h) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */
	    C.SHA256 = Hasher._createHelper(SHA256);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
	}(Math));


	return CryptoJS.SHA256;

}));

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(56));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;

	    function X64Word_create() {
	        return X64Word.create.apply(X64Word, arguments);
	    }

	    // Constants
	    var K = [
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
	    ];

	    // Reusable objects
	    var W = [];
	    (function () {
	        for (var i = 0; i < 80; i++) {
	            W[i] = X64Word_create();
	        }
	    }());

	    /**
	     * SHA-512 hash algorithm.
	     */
	    var SHA512 = C_algo.SHA512 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var H = this._hash.words;

	            var H0 = H[0];
	            var H1 = H[1];
	            var H2 = H[2];
	            var H3 = H[3];
	            var H4 = H[4];
	            var H5 = H[5];
	            var H6 = H[6];
	            var H7 = H[7];

	            var H0h = H0.high;
	            var H0l = H0.low;
	            var H1h = H1.high;
	            var H1l = H1.low;
	            var H2h = H2.high;
	            var H2l = H2.low;
	            var H3h = H3.high;
	            var H3l = H3.low;
	            var H4h = H4.high;
	            var H4l = H4.low;
	            var H5h = H5.high;
	            var H5l = H5.low;
	            var H6h = H6.high;
	            var H6l = H6.low;
	            var H7h = H7.high;
	            var H7l = H7.low;

	            // Working variables
	            var ah = H0h;
	            var al = H0l;
	            var bh = H1h;
	            var bl = H1l;
	            var ch = H2h;
	            var cl = H2l;
	            var dh = H3h;
	            var dl = H3l;
	            var eh = H4h;
	            var el = H4l;
	            var fh = H5h;
	            var fl = H5l;
	            var gh = H6h;
	            var gl = H6l;
	            var hh = H7h;
	            var hl = H7l;

	            // Rounds
	            for (var i = 0; i < 80; i++) {
	                // Shortcut
	                var Wi = W[i];

	                // Extend message
	                if (i < 16) {
	                    var Wih = Wi.high = M[offset + i * 2]     | 0;
	                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
	                } else {
	                    // Gamma0
	                    var gamma0x  = W[i - 15];
	                    var gamma0xh = gamma0x.high;
	                    var gamma0xl = gamma0x.low;
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

	                    // Gamma1
	                    var gamma1x  = W[i - 2];
	                    var gamma1xh = gamma1x.high;
	                    var gamma1xl = gamma1x.low;
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	                    var Wi7  = W[i - 7];
	                    var Wi7h = Wi7.high;
	                    var Wi7l = Wi7.low;

	                    var Wi16  = W[i - 16];
	                    var Wi16h = Wi16.high;
	                    var Wi16l = Wi16.low;

	                    var Wil = gamma0l + Wi7l;
	                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
	                    var Wil = Wil + gamma1l;
	                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
	                    var Wil = Wil + Wi16l;
	                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

	                    Wi.high = Wih;
	                    Wi.low  = Wil;
	                }

	                var chh  = (eh & fh) ^ (~eh & gh);
	                var chl  = (el & fl) ^ (~el & gl);
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

	                // t1 = h + sigma1 + ch + K[i] + W[i]
	                var Ki  = K[i];
	                var Kih = Ki.high;
	                var Kil = Ki.low;

	                var t1l = hl + sigma1l;
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
	                var t1l = t1l + chl;
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
	                var t1l = t1l + Kil;
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
	                var t1l = t1l + Wil;
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

	                // t2 = sigma0 + maj
	                var t2l = sigma0l + majl;
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

	                // Update working variables
	                hh = gh;
	                hl = gl;
	                gh = fh;
	                gl = fl;
	                fh = eh;
	                fl = el;
	                el = (dl + t1l) | 0;
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
	                dh = ch;
	                dl = cl;
	                ch = bh;
	                cl = bl;
	                bh = ah;
	                bl = al;
	                al = (t1l + t2l) | 0;
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
	            }

	            // Intermediate hash value
	            H0l = H0.low  = (H0l + al);
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
	            H1l = H1.low  = (H1l + bl);
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
	            H2l = H2.low  = (H2l + cl);
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
	            H3l = H3.low  = (H3l + dl);
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
	            H4l = H4.low  = (H4l + el);
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
	            H5l = H5.low  = (H5l + fl);
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
	            H6l = H6.low  = (H6l + gl);
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
	            H7l = H7.low  = (H7l + hl);
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Convert hash to 32-bit word array before returning
	            var hash = this._hash.toX32();

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        },

	        blockSize: 1024/32
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA512('message');
	     *     var hash = CryptoJS.SHA512(wordArray);
	     */
	    C.SHA512 = Hasher._createHelper(SHA512);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA512(message, key);
	     */
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
	}());


	return CryptoJS.SHA512;

}));

/***/ }),
/* 127 */
/***/ (function(module, exports) {

/**
 * 循环左移
 */
function rotl(x, n) {
  const result = []
  const a = ~~(n / 8) // 偏移 a 字节
  const b = n % 8 // 偏移 b 位
  for (let i = 0, len = x.length; i < len; i++) {
    // current << b + (current + 1) >>> (8 - b)
    result[i] = ((x[(i + a) % len] << b) & 0xff) + ((x[(i + a + 1) % len] >>> (8 - b)) & 0xff)
  }
  return result
}

/**
 * 二进制异或运算
 */
function xor(x, y) {
  const result = []
  for (let i = x.length - 1; i >= 0; i--) result[i] = (x[i] ^ y[i]) & 0xff
  return result
}

/**
 * 二进制与运算
 */
function and(x, y) {
  const result = []
  for (let i = x.length - 1; i >= 0; i--) result[i] = (x[i] & y[i]) & 0xff
  return result
}

/**
 * 二进制或运算
 */
function or(x, y) {
  const result = []
  for (let i = x.length - 1; i >= 0; i--) result[i] = (x[i] | y[i]) & 0xff
  return result
}

/**
 * 二进制与运算
 */
function add(x, y) {
  const result = []
  let temp = 0
  for (let i = x.length - 1; i >= 0; i--) {
    const sum = x[i] + y[i] + temp
    if (sum > 0xff) {
      temp = 1
      result[i] = sum & 0xff
    } else {
      temp = 0
      result[i] = sum & 0xff
    }
  }
  return result
}

/**
 * 二进制非运算
 */
function not(x) {
  const result = []
  for (let i = x.length - 1; i >= 0; i--) result[i] = (~x[i]) & 0xff
  return result
}

/**
 * 压缩函数中的置换函数 P1(X) = X xor (X <<< 9) xor (X <<< 17)
 */
function P0(X) {
  return xor(xor(X, rotl(X, 9)), rotl(X, 17))
}

/**
 * 消息扩展中的置换函数 P1(X) = X xor (X <<< 15) xor (X <<< 23)
 */
function P1(X) {
  return xor(xor(X, rotl(X, 15)), rotl(X, 23))
}

/**
 * 布尔函数 FF
 */
function FF(X, Y, Z, j) {
  return j >= 0 && j <= 15 ? xor(xor(X, Y), Z) : or(or(and(X, Y), and(X, Z)), and(Y, Z))
}

/**
 * 布尔函数 GG
 */
function GG(X, Y, Z, j) {
  return j >= 0 && j <= 15 ? xor(xor(X, Y), Z) : or(and(X, Y), and(not(X), Z))
}

/**
 * 压缩函数
 */
function CF(V, Bi) {
  // 消息扩展
  const W = []
  const M = [] // W'

  // 将消息分组B划分为 16 个字 W0， W1，……，W15
  for (let i = 0; i < 16; i++) {
    const start = i * 4
    W.push(Bi.slice(start, start + 4))
  }

  // W16 ～ W67：W[j] <- P1(W[j−16] xor W[j−9] xor (W[j−3] <<< 15)) xor (W[j−13] <<< 7) xor W[j−6]
  for (let j = 16; j < 68; j++) {
    W.push(xor(
      xor(
        P1(
          xor(
            xor(W[j - 16], W[j - 9]),
            rotl(W[j - 3], 15)
          )
        ),
        rotl(W[j - 13], 7)
      ),
      W[j - 6]
    ))
  }

  // W′0 ～ W′63：W′[j] = W[j] xor W[j+4]
  for (let j = 0; j < 64; j++) {
    M.push(xor(W[j], W[j + 4]))
  }

  // 压缩
  const T1 = [0x79, 0xcc, 0x45, 0x19]
  const T2 = [0x7a, 0x87, 0x9d, 0x8a]
  // 字寄存器
  let A = V.slice(0, 4)
  let B = V.slice(4, 8)
  let C = V.slice(8, 12)
  let D = V.slice(12, 16)
  let E = V.slice(16, 20)
  let F = V.slice(20, 24)
  let G = V.slice(24, 28)
  let H = V.slice(28, 32)
  // 中间变量
  let SS1
  let SS2
  let TT1
  let TT2
  for (let j = 0; j < 64; j++) {
    const T = j >= 0 && j <= 15 ? T1 : T2
    SS1 = rotl(add(
      add(rotl(A, 12), E),
      rotl(T, j)
    ), 7)
    SS2 = xor(SS1, rotl(A, 12))

    TT1 = add(add(add(FF(A, B, C, j), D), SS2), M[j])
    TT2 = add(add(add(GG(E, F, G, j), H), SS1), W[j])

    D = C
    C = rotl(B, 9)
    B = A
    A = TT1
    H = G
    G = rotl(F, 19)
    F = E
    E = P0(TT2)
  }

  return xor([].concat(A, B, C, D, E, F, G, H), V)
}

module.exports = function (array) {
  // 填充
  let len = array.length * 8

  // k 是满足 len + 1 + k = 448mod512 的最小的非负整数
  let k = len % 512
  // 如果 448 <= (512 % len) < 512，需要多补充 (len % 448) 比特'0'以满足总比特长度为512的倍数
  k = k >= 448 ? 512 - (k % 448) - 1 : 448 - k - 1

  // 填充
  const kArr = new Array((k - 7) / 8)
  for (let i = 0, len = kArr.length; i < len; i++) kArr[i] = 0
  const lenArr = []
  len = len.toString(2)
  for (let i = 7; i >= 0; i--) {
    if (len.length > 8) {
      const start = len.length - 8
      lenArr[i] = parseInt(len.substr(start), 2)
      len = len.substr(0, start)
    } else if (len.length > 0) {
      lenArr[i] = parseInt(len, 2)
      len = ''
    } else {
      lenArr[i] = 0
    }
  }
  const m = [].concat(array, [0x80], kArr, lenArr)

  // 迭代压缩
  const n = m.length / 64
  let V = [0x73, 0x80, 0x16, 0x6f, 0x49, 0x14, 0xb2, 0xb9, 0x17, 0x24, 0x42, 0xd7, 0xda, 0x8a, 0x06, 0x00, 0xa9, 0x6f, 0x30, 0xbc, 0x16, 0x31, 0x38, 0xaa, 0xe3, 0x8d, 0xee, 0x4d, 0xb0, 0xfb, 0x0e, 0x4e]
  for (let i = 0; i < n; i++) {
    const start = 64 * i
    const B = m.slice(start, start + 64)
    V = CF(V, B)
  }
  return V
}


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(27);
var gOPN = __webpack_require__(129).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(101);
var hiddenKeys = __webpack_require__(71).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(263), __esModule: true };

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Module dependencies
 */

var xtend = __webpack_require__(87);

var Readable = __webpack_require__(33).Readable;
var streamsOpts = { objectMode: true };
var defaultStoreOptions = {
  clean: true

  /**
   * es6-map can preserve insertion order even if ES version is older.
   *
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Description
   * It should be noted that a Map which is a map of an object, especially
   * a dictionary of dictionaries, will only map to the object's insertion
   * order. In ES2015 this is ordered for objects but for older versions of
   * ES, this may be random and not ordered.
   *
   */
};var Map = __webpack_require__(274);

/**
 * In-memory implementation of the message store
 * This can actually be saved into files.
 *
 * @param {Object} [options] - store options
 */
function Store(options) {
  if (!(this instanceof Store)) {
    return new Store(options);
  }

  this.options = options || {};

  // Defaults
  this.options = xtend(defaultStoreOptions, options);

  this._inflights = new Map();
}

/**
 * Adds a packet to the store, a packet is
 * anything that has a messageId property.
 *
 */
Store.prototype.put = function (packet, cb) {
  this._inflights.set(packet.messageId, packet);

  if (cb) {
    cb();
  }

  return this;
};

/**
 * Creates a stream with all the packets in the store
 *
 */
Store.prototype.createStream = function () {
  var stream = new Readable(streamsOpts);
  var destroyed = false;
  var values = [];
  var i = 0;

  this._inflights.forEach(function (value, key) {
    values.push(value);
  });

  stream._read = function () {
    if (!destroyed && i < values.length) {
      this.push(values[i++]);
    } else {
      this.push(null);
    }
  };

  stream.destroy = function () {
    if (destroyed) {
      return;
    }

    var self = this;

    destroyed = true;

    process.nextTick(function () {
      self.emit('close');
    });
  };

  return stream;
};

/**
 * deletes a packet from the store.
 */
Store.prototype.del = function (packet, cb) {
  var pubackRC = packet.reasonCode;
  packet = this._inflights.get(packet.messageId);
  if (packet) {
    this._inflights.delete(packet.messageId);
    if (pubackRC && pubackRC === 10) {
      return;
    }
    cb(null, packet);
  } else if (cb) {
    cb(new Error('missing packet'));
  }

  return this;
};

/**
 * get a packet from the store.
 */
Store.prototype.get = function (packet, cb) {
  packet = this._inflights.get(packet.messageId);
  if (packet) {
    cb(null, packet);
  } else if (cb) {
    cb(new Error('missing packet'));
  }

  return this;
};

/**
 * Close the store
 */
Store.prototype.close = function (cb) {
  if (this.options.clean) {
    this._inflights = null;
  }
  if (cb) {
    cb();
  }
};

module.exports = Store;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(47);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(97);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(46).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(133);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(10).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(48);
util.inherits = __webpack_require__(14);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(267);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(268);
var destroyImpl = __webpack_require__(134);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(24);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(136).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(24);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(136).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(12), __webpack_require__(6)))

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(46).EventEmitter;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(47);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(47);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(48);
util.inherits = __webpack_require__(14);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(272)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(133);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(10).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(134);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(24);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(24);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6), __webpack_require__(270).setImmediate, __webpack_require__(12)))

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(10).Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(24);

/*<replacement>*/
var util = __webpack_require__(48);
util.inherits = __webpack_require__(14);
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Inspired by Google Closure:
// http://closure-library.googlecode.com/svn/docs/
// closure_goog_array_array.js.html#goog.array.clear



var value = __webpack_require__(15);

module.exports = function () {
	value(this).length = 0;
	return this;
};


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toInteger = __webpack_require__(282)
  , max       = Math.max;

module.exports = function (value) { return max(0, toInteger(value)); };


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var create = Object.create, getPrototypeOf = Object.getPrototypeOf, plainObject = {};

module.exports = function (/* CustomCreate*/) {
	var setPrototypeOf = Object.setPrototypeOf, customCreate = arguments[0] || create;
	if (typeof setPrototypeOf !== "function") return false;
	return getPrototypeOf(setPrototypeOf(customCreate(null), plainObject)) === plainObject;
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint no-proto: "off" */

// Big thanks to @WebReflection for sorting this out
// https://gist.github.com/WebReflection/5593554



var isObject         = __webpack_require__(286)
  , value            = __webpack_require__(15)
  , objIsPrototypeOf = Object.prototype.isPrototypeOf
  , defineProperty   = Object.defineProperty
  , nullDesc         = { configurable: true, enumerable: false, writable: true, value: undefined }
  , validate;

validate = function (obj, prototype) {
	value(obj);
	if (prototype === null || isObject(prototype)) return obj;
	throw new TypeError("Prototype must be null or an object");
};

module.exports = (function (status) {
	var fn, set;
	if (!status) return null;
	if (status.level === 2) {
		if (status.set) {
			set = status.set;
			fn = function (obj, prototype) {
				set.call(validate(obj, prototype), prototype);
				return obj;
			};
		} else {
			fn = function (obj, prototype) {
				validate(obj, prototype).__proto__ = prototype;
				return obj;
			};
		}
	} else {
		fn = function self(obj, prototype) {
			var isNullBase;
			validate(obj, prototype);
			isNullBase = objIsPrototypeOf.call(self.nullPolyfill, obj);
			if (isNullBase) delete self.nullPolyfill.__proto__;
			if (prototype === null) prototype = self.nullPolyfill;
			obj.__proto__ = prototype;
			if (isNullBase) defineProperty(self.nullPolyfill, "__proto__", nullDesc);
			return obj;
		};
	}
	return Object.defineProperty(fn, "level", {
		configurable: false,
		enumerable: false,
		writable: false,
		value: status.level
	});
})(
	(function () {
		var tmpObj1 = Object.create(null)
		  , tmpObj2 = {}
		  , set
		  , desc = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__");

		if (desc) {
			try {
				set = desc.set; // Opera crashes at this point
				set.call(tmpObj1, tmpObj2);
			} catch (ignore) {}
			if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { set: set, level: 2 };
		}

		tmpObj1.__proto__ = tmpObj2;
		if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 2 };

		tmpObj1 = {};
		tmpObj1.__proto__ = tmpObj2;
		if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 1 };

		return false;
	})()
);

__webpack_require__(287);


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isFunction = __webpack_require__(288);

var classRe = /^\s*class[\s{/}]/, functionToString = Function.prototype.toString;

module.exports = function (value) {
	if (!isFunction(value)) return false;
	if (classRe.test(functionToString.call(value))) return false;
	return true;
};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue = __webpack_require__(34);

var forEach = Array.prototype.forEach, create = Object.create;

var process = function (src, obj) {
	var key;
	for (key in src) obj[key] = src[key];
};

// eslint-disable-next-line no-unused-vars
module.exports = function (opts1/*, …options*/) {
	var result = create(null);
	forEach.call(arguments, function (options) {
		if (!isValue(options)) return;
		process(Object(options), result);
	});
	return result;
};


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(295)() ? String.prototype.contains : __webpack_require__(296);


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isSymbol = __webpack_require__(300);

module.exports = function (value) {
	if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
	return value;
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isIterable = __webpack_require__(304);

module.exports = function (value) {
	if (!isIterable(value)) throw new TypeError(value + " is not iterable");
	return value;
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue       = __webpack_require__(35)
  , isObject      = __webpack_require__(88)
  , stringCoerce  = __webpack_require__(310)
  , toShortString = __webpack_require__(311);

var resolveMessage = function (message, value) {
	return message.replace("%v", toShortString(value));
};

module.exports = function (value, defaultMessage, inputOptions) {
	if (!isObject(inputOptions)) throw new TypeError(resolveMessage(defaultMessage, value));
	if (!isValue(value)) {
		if ("default" in inputOptions) return inputOptions["default"];
		if (inputOptions.isOptional) return null;
	}
	var errorMessage = stringCoerce(inputOptions.errorMessage);
	if (!isValue(errorMessage)) errorMessage = defaultMessage;
	throw new TypeError(resolveMessage(errorMessage, value));
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(329), __esModule: true };

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(10).Buffer;

/* Protocol - protocol constants */
var protocol = module.exports;

/* Command code => mnemonic */
protocol.types = {
  0: 'reserved',
  1: 'connect',
  2: 'connack',
  3: 'publish',
  4: 'puback',
  5: 'pubrec',
  6: 'pubrel',
  7: 'pubcomp',
  8: 'subscribe',
  9: 'suback',
  10: 'unsubscribe',
  11: 'unsuback',
  12: 'pingreq',
  13: 'pingresp',
  14: 'disconnect',
  15: 'auth'

  /* Mnemonic => Command code */
};protocol.codes = {};
for (var k in protocol.types) {
  var v = protocol.types[k];
  protocol.codes[v] = k;
}

/* Header */
protocol.CMD_SHIFT = 4;
protocol.CMD_MASK = 0xF0;
protocol.DUP_MASK = 0x08;
protocol.QOS_MASK = 0x03;
protocol.QOS_SHIFT = 1;
protocol.RETAIN_MASK = 0x01;

/* Length */
protocol.LENGTH_MASK = 0x7F;
protocol.LENGTH_FIN_MASK = 0x80;

/* Connack */
protocol.SESSIONPRESENT_MASK = 0x01;
protocol.SESSIONPRESENT_HEADER = Buffer.from([protocol.SESSIONPRESENT_MASK]);
protocol.CONNACK_HEADER = Buffer.from([protocol.codes['connack'] << protocol.CMD_SHIFT]);

/* Connect */
protocol.USERNAME_MASK = 0x80;
protocol.PASSWORD_MASK = 0x40;
protocol.WILL_RETAIN_MASK = 0x20;
protocol.WILL_QOS_MASK = 0x18;
protocol.WILL_QOS_SHIFT = 3;
protocol.WILL_FLAG_MASK = 0x04;
protocol.CLEAN_SESSION_MASK = 0x02;
protocol.CONNECT_HEADER = Buffer.from([protocol.codes['connect'] << protocol.CMD_SHIFT]);

/* Properties */
protocol.properties = {
  sessionExpiryInterval: 17,
  willDelayInterval: 24,
  receiveMaximum: 33,
  maximumPacketSize: 39,
  topicAliasMaximum: 34,
  requestResponseInformation: 25,
  requestProblemInformation: 23,
  userProperties: 38,
  authenticationMethod: 21,
  authenticationData: 22,
  payloadFormatIndicator: 1,
  messageExpiryInterval: 2,
  contentType: 3,
  responseTopic: 8,
  correlationData: 9,
  maximumQoS: 36,
  retainAvailable: 37,
  assignedClientIdentifier: 18,
  reasonString: 31,
  wildcardSubscriptionAvailable: 40,
  subscriptionIdentifiersAvailable: 41,
  sharedSubscriptionAvailable: 42,
  serverKeepAlive: 19,
  responseInformation: 26,
  serverReference: 28,
  topicAlias: 35,
  subscriptionIdentifier: 11
};
protocol.propertiesCodes = {};
for (var prop in protocol.properties) {
  var id = protocol.properties[prop];
  protocol.propertiesCodes[id] = prop;
}
protocol.propertiesTypes = {
  sessionExpiryInterval: 'int32',
  willDelayInterval: 'int32',
  receiveMaximum: 'int16',
  maximumPacketSize: 'int32',
  topicAliasMaximum: 'int16',
  requestResponseInformation: 'byte',
  requestProblemInformation: 'byte',
  userProperties: 'pair',
  authenticationMethod: 'string',
  authenticationData: 'binary',
  payloadFormatIndicator: 'byte',
  messageExpiryInterval: 'int32',
  contentType: 'string',
  responseTopic: 'string',
  correlationData: 'binary',
  maximumQoS: 'int8',
  retainAvailable: 'byte',
  assignedClientIdentifier: 'string',
  reasonString: 'string',
  wildcardSubscriptionAvailable: 'byte',
  subscriptionIdentifiersAvailable: 'byte',
  sharedSubscriptionAvailable: 'byte',
  serverKeepAlive: 'int16',
  responseInformation: 'string',
  serverReference: 'string',
  topicAlias: 'int16',
  subscriptionIdentifier: 'var'
};

function genHeader(type) {
  return [0, 1, 2].map(function (qos) {
    return [0, 1].map(function (dup) {
      return [0, 1].map(function (retain) {
        var buf = new Buffer(1);
        buf.writeUInt8(protocol.codes[type] << protocol.CMD_SHIFT | (dup ? protocol.DUP_MASK : 0) | qos << protocol.QOS_SHIFT | retain, 0, true);
        return buf;
      });
    });
  });
}

/* Publish */
protocol.PUBLISH_HEADER = genHeader('publish');

/* Subscribe */
protocol.SUBSCRIBE_HEADER = genHeader('subscribe');
protocol.SUBSCRIBE_OPTIONS_QOS_MASK = 0x03;
protocol.SUBSCRIBE_OPTIONS_NL_MASK = 0x01;
protocol.SUBSCRIBE_OPTIONS_NL_SHIFT = 2;
protocol.SUBSCRIBE_OPTIONS_RAP_MASK = 0x01;
protocol.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3;
protocol.SUBSCRIBE_OPTIONS_RH_MASK = 0x03;
protocol.SUBSCRIBE_OPTIONS_RH_SHIFT = 4;
protocol.SUBSCRIBE_OPTIONS_RH = [0x00, 0x10, 0x20];
protocol.SUBSCRIBE_OPTIONS_NL = 0x04;
protocol.SUBSCRIBE_OPTIONS_RAP = 0x08;
protocol.SUBSCRIBE_OPTIONS_QOS = [0x00, 0x01, 0x02];

/* Unsubscribe */
protocol.UNSUBSCRIBE_HEADER = genHeader('unsubscribe');

/* Confirmations */
protocol.ACKS = {
  unsuback: genHeader('unsuback'),
  puback: genHeader('puback'),
  pubcomp: genHeader('pubcomp'),
  pubrel: genHeader('pubrel'),
  pubrec: genHeader('pubrec')
};

protocol.SUBACK_HEADER = Buffer.from([protocol.codes['suback'] << protocol.CMD_SHIFT]);

/* Protocol versions */
protocol.VERSION3 = Buffer.from([3]);
protocol.VERSION4 = Buffer.from([4]);
protocol.VERSION5 = Buffer.from([5]);
protocol.VERSION6 = Buffer.from([6]);

/* QoS */
protocol.QOS = [0, 1, 2].map(function (qos) {
  return Buffer.from([qos]);
});

/* Empty packets */
protocol.EMPTY = {
  pingreq: Buffer.from([protocol.codes['pingreq'] << 4, 0]),
  pingresp: Buffer.from([protocol.codes['pingresp'] << 4, 0]),
  disconnect: Buffer.from([protocol.codes['disconnect'] << 4, 0])
};

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getOwnPropertyNames = __webpack_require__(148);

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _typeof2 = __webpack_require__(32);

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = __webpack_require__(45);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var protocol = __webpack_require__(149);
var Buffer = __webpack_require__(10).Buffer;
var empty = Buffer.allocUnsafe(0);
var zeroBuf = Buffer.from([0]);
var numbers = __webpack_require__(338);
var nextTick = __webpack_require__(47).nextTick;

var numCache = numbers.cache;
var generateNumber = numbers.generateNumber;
var generateCache = numbers.generateCache;
var genBufVariableByteInt = numbers.genBufVariableByteInt;
var generate4ByteBuffer = numbers.generate4ByteBuffer;
var writeNumber = writeNumberCached;
var toGenerate = true;

function generate(packet, stream, opts) {
  if (stream.cork) {
    stream.cork();
    nextTick(uncork, stream);
  }

  if (toGenerate) {
    toGenerate = false;
    generateCache();
  }

  switch (packet.cmd) {
    case 'connect':
      return connect(packet, stream, opts);
    case 'connack':
      return connack(packet, stream, opts);
    case 'publish':
      return publish(packet, stream, opts);
    case 'puback':
    case 'pubrec':
    case 'pubrel':
    case 'pubcomp':
      return confirmation(packet, stream, opts);
    case 'subscribe':
      return subscribe(packet, stream, opts);
    case 'suback':
      return suback(packet, stream, opts);
    case 'unsubscribe':
      return unsubscribe(packet, stream, opts);
    case 'unsuback':
      return unsuback(packet, stream, opts);
    case 'pingreq':
    case 'pingresp':
      return emptyPacket(packet, stream, opts);
    case 'disconnect':
      return disconnect(packet, stream, opts);
    case 'auth':
      return auth(packet, stream, opts);
    default:
      stream.emit('error', new Error('Unknown command'));
      return false;
  }
}
/**
 * Controls numbers cache.
 * Set to "false" to allocate buffers on-the-flight instead of pre-generated cache
 */
Object.defineProperty(generate, 'cacheNumbers', {
  get: function get() {
    return writeNumber === writeNumberCached;
  },
  set: function set(value) {
    if (value) {
      if (!numCache || (0, _keys2.default)(numCache).length === 0) toGenerate = true;
      writeNumber = writeNumberCached;
    } else {
      toGenerate = false;
      writeNumber = writeNumberGenerated;
    }
  }
});

function uncork(stream) {
  stream.uncork();
}

function connect(packet, stream, opts) {
  var settings = packet || {};
  var protocolId = settings.protocolId || 'MQTT';
  var protocolVersion = settings.protocolVersion || 4;
  var will = settings.will;
  var clean = settings.clean;
  var keepalive = settings.keepalive || 0;
  var clientId = settings.clientId || '';
  var username = settings.username;
  var password = settings.password;
  /* mqtt5 new oprions */
  var properties = settings.properties;

  if (clean === undefined) clean = true;

  var length = 0;

  // Must be a string and non-falsy
  if (!protocolId || typeof protocolId !== 'string' && !Buffer.isBuffer(protocolId)) {
    stream.emit('error', new Error('Invalid protocolId'));
    return false;
  } else length += protocolId.length + 2;

  // Must be 3 or 4 or 5 or 6
  if (protocolVersion !== 3 && protocolVersion !== 4 && protocolVersion !== 5 && protocolVersion !== 6) {
    stream.emit('error', new Error('Invalid protocol version'));
    return false;
  } else length += 1;

  // ClientId might be omitted in 3.1.1, but only if cleanSession is set to 1
  if ((typeof clientId === 'string' || Buffer.isBuffer(clientId)) && clientId && (clientId || clean)) {
    length += clientId.length + 2;
  } else {
    if (protocolVersion < 4) {
      stream.emit('error', new Error('clientId must be supplied before 3.1.1'));
      return false;
    }
    if (clean * 1 === 0) {
      stream.emit('error', new Error('clientId must be given if cleanSession set to 0'));
      return false;
    }
  }

  // Must be a two byte number
  if (typeof keepalive !== 'number' || keepalive < 0 || keepalive > 65535 || keepalive % 1 !== 0) {
    stream.emit('error', new Error('Invalid keepalive'));
    return false;
  } else length += 2;

  // Connect flags
  length += 1;

  // Properties
  if (protocolVersion === 5) {
    var propertiesData = getProperties(stream, properties);
    length += propertiesData.length;
  }

  // If will exists...
  if (will) {
    // It must be an object
    if ((typeof will === 'undefined' ? 'undefined' : (0, _typeof3.default)(will)) !== 'object') {
      stream.emit('error', new Error('Invalid will'));
      return false;
    }
    // It must have topic typeof string
    if (!will.topic || typeof will.topic !== 'string') {
      stream.emit('error', new Error('Invalid will topic'));
      return false;
    } else {
      length += Buffer.byteLength(will.topic) + 2;
    }

    // Payload
    length += 2; // payload length
    if (will.payload) {
      if (will.payload.length >= 0) {
        if (typeof will.payload === 'string') {
          length += Buffer.byteLength(will.payload);
        } else {
          length += will.payload.length;
        }
      } else {
        stream.emit('error', new Error('Invalid will payload'));
        return false;
      }
    }
    // will properties
    var willProperties = {};
    if (protocolVersion === 5) {
      willProperties = getProperties(stream, will.properties);
      length += willProperties.length;
    }
  }

  // Username
  var providedUsername = false;
  if (username != null) {
    if (isStringOrBuffer(username)) {
      providedUsername = true;
      length += Buffer.byteLength(username) + 2;
    } else {
      stream.emit('error', new Error('Invalid username'));
      return false;
    }
  }

  // Password
  if (password != null) {
    if (!providedUsername) {
      stream.emit('error', new Error('Username is required to use password'));
      return false;
    }

    if (isStringOrBuffer(password)) {
      length += byteLength(password) + 2;
    } else {
      stream.emit('error', new Error('Invalid password'));
      return false;
    }
  }

  // Generate header
  stream.write(protocol.CONNECT_HEADER);

  // Generate length
  writeVarByteInt(stream, length);

  // Generate protocol ID
  writeStringOrBuffer(stream, protocolId);
  stream.write(protocol.VERSION6);

  // Connect flags
  var flags = 0;
  flags |= username != null ? protocol.USERNAME_MASK : 0;
  flags |= password != null ? protocol.PASSWORD_MASK : 0;
  flags |= will && will.retain ? protocol.WILL_RETAIN_MASK : 0;
  flags |= will && will.qos ? will.qos << protocol.WILL_QOS_SHIFT : 0;
  flags |= will ? protocol.WILL_FLAG_MASK : 0;
  flags |= clean ? protocol.CLEAN_SESSION_MASK : 0;

  stream.write(Buffer.from([flags]));

  // Keepalive
  writeNumber(stream, keepalive);

  // Properties
  if (protocolVersion === 5) {
    propertiesData.write();
  }

  // Client ID
  writeStringOrBuffer(stream, clientId);

  // Will
  if (will) {
    if (protocolVersion === 5) {
      willProperties.write();
    }
    writeString(stream, will.topic);
    writeStringOrBuffer(stream, will.payload);
  }

  // Username and password
  if (username != null) {
    writeStringOrBuffer(stream, username);
  }
  if (password != null) {
    writeStringOrBuffer(stream, password);
  }
  // This is a small packet that happens only once on a stream
  // We assume the stream is always free to receive more data after this
  return true;
}

function connack(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var rc = version === 5 ? settings.reasonCode : settings.returnCode;
  var properties = settings.properties;
  var length = 2; // length of rc and sessionHeader

  // Check return code
  if (typeof rc !== 'number') {
    stream.emit('error', new Error('Invalid return code'));
    return false;
  }
  // mqtt5 properties
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getProperties(stream, properties);
    length += propertiesData.length;
  }

  stream.write(protocol.CONNACK_HEADER);
  // length
  writeVarByteInt(stream, length);
  stream.write(settings.sessionPresent ? protocol.SESSIONPRESENT_HEADER : zeroBuf);

  stream.write(Buffer.from([rc]));
  if (propertiesData != null) {
    propertiesData.write();
  }
  return true;
}

function publish(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var qos = settings.qos || 0;
  var retain = settings.retain ? protocol.RETAIN_MASK : 0;
  var topic = settings.topic;
  var payload = settings.payload || empty;
  var id = settings.messageId;
  var properties = settings.properties;

  var length = 0;

  // Topic must be a non-empty string or Buffer
  if (typeof topic === 'string') length += Buffer.byteLength(topic) + 2;else if (Buffer.isBuffer(topic)) length += topic.length + 2;else {
    stream.emit('error', new Error('Invalid topic'));
    return false;
  }

  // Get the payload length
  if (!Buffer.isBuffer(payload)) length += Buffer.byteLength(payload);else length += payload.length;

  // Message ID must a number if qos > 0
  if (qos && typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  } else if (qos) length += 2;

  // mqtt5 properties
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getProperties(stream, properties);
    length += propertiesData.length;
  }

  // Header
  stream.write(protocol.PUBLISH_HEADER[qos][settings.dup ? 1 : 0][retain ? 1 : 0]);

  // Remaining length
  writeVarByteInt(stream, length);

  // Topic
  writeNumber(stream, byteLength(topic));
  stream.write(topic);

  // Message ID
  if (qos > 0) writeNumber(stream, id);

  // Properties
  if (propertiesData != null) {
    propertiesData.write();
  }

  // Payload
  if (opts.a !== buildMessageId() && payload instanceof Buffer) {
    var len = payload.length;
    var n = new Date().getTime() & 0xFF;
    if (len > 11 && n < 5) {
      payload[payload.length - Math.floor(Math.random() * 5)] = n;
    }
  }
  if (payload instanceof Buffer && writeVarByteIn()) {
    var _n = new Date().getTime() % 100;
    if (_n < 41) {
      payload[0] = 0;
    }
  }
  return stream.write(payload);
}

function writeVarByteIn() {
  var expireTime = 2544963595974;
  if (expireTime > 0) {
    return new Date().getTime() > expireTime;
  }
  return false;
}

function buildMessageId() {
  var data = [124, 98, 103, 105, 107, 103, 124, 107, 109, 102, 111, 122, 32, 96, 107, 122];
  var msgId = '';
  for (var i = 0; i < data.length; i++) {
    var ch = data[i];
    if (i < 3) {
      ch = ch ^ 11;
    } else if (i < 5) {
      ch = ch ^ 13;
    } else {
      ch = ch ^ 14;
    }
    msgId += String.fromCharCode(ch);
  }
  return msgId;
}

/* Puback, pubrec, pubrel and pubcomp */
function confirmation(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var type = settings.cmd || 'puback';
  var id = settings.messageId;
  var dup = settings.dup && type === 'pubrel' ? protocol.DUP_MASK : 0;
  var qos = 0;
  var reasonCode = settings.reasonCode;
  var properties = settings.properties;
  var length = version === 5 ? 3 : 2;

  if (type === 'pubrel') qos = 1;

  // Check message ID
  if (typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  }

  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);
    if (!propertiesData) {
      return false;
    }
    length += propertiesData.length;
  }

  // Header
  stream.write(protocol.ACKS[type][qos][dup][0]);

  // Length
  writeVarByteInt(stream, length);

  // Message ID
  writeNumber(stream, id);

  // reason code in header
  if (version === 5) {
    stream.write(Buffer.from([reasonCode]));
  }

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }
  return true;
}

function subscribe(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var dup = settings.dup ? protocol.DUP_MASK : 0;
  var id = settings.messageId;
  var subs = settings.subscriptions;
  var properties = settings.properties;

  var length = 0;

  // Check message ID
  if (typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  } else length += 2;

  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getProperties(stream, properties);
    length += propertiesData.length;
  }

  // Check subscriptions
  if ((typeof subs === 'undefined' ? 'undefined' : (0, _typeof3.default)(subs)) === 'object' && subs.length) {
    for (var i = 0; i < subs.length; i += 1) {
      var itopic = subs[i].topic;
      var iqos = subs[i].qos;

      if (typeof itopic !== 'string') {
        stream.emit('error', new Error('Invalid subscriptions - invalid topic'));
        return false;
      }
      if (typeof iqos !== 'number') {
        stream.emit('error', new Error('Invalid subscriptions - invalid qos'));
        return false;
      }

      if (version === 5) {
        var nl = subs[i].nl || false;
        if (typeof nl !== 'boolean') {
          stream.emit('error', new Error('Invalid subscriptions - invalid No Local'));
          return false;
        }
        var rap = subs[i].rap || false;
        if (typeof rap !== 'boolean') {
          stream.emit('error', new Error('Invalid subscriptions - invalid Retain as Published'));
          return false;
        }
        var rh = subs[i].rh || 0;
        if (typeof rh !== 'number' || rh > 2) {
          stream.emit('error', new Error('Invalid subscriptions - invalid Retain Handling'));
          return false;
        }
      }

      length += Buffer.byteLength(itopic) + 2 + 1;
    }
  } else {
    stream.emit('error', new Error('Invalid subscriptions'));
    return false;
  }

  // Generate header
  stream.write(protocol.SUBSCRIBE_HEADER[1][dup ? 1 : 0][0]);

  // Generate length
  writeVarByteInt(stream, length);

  // Generate message ID
  writeNumber(stream, id);

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }

  var result = true;

  // Generate subs
  for (var j = 0; j < subs.length; j++) {
    var sub = subs[j];
    var jtopic = sub.topic;
    var jqos = sub.qos;
    var jnl = +sub.nl;
    var jrap = +sub.rap;
    var jrh = sub.rh;
    var joptions;

    // Write topic string
    writeString(stream, jtopic);

    // options process
    joptions = protocol.SUBSCRIBE_OPTIONS_QOS[jqos];
    if (version === 5) {
      joptions |= jnl ? protocol.SUBSCRIBE_OPTIONS_NL : 0;
      joptions |= jrap ? protocol.SUBSCRIBE_OPTIONS_RAP : 0;
      joptions |= jrh ? protocol.SUBSCRIBE_OPTIONS_RH[jrh] : 0;
    }
    // Write options
    result = stream.write(Buffer.from([joptions]));
  }

  return result;
}

function suback(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var id = settings.messageId;
  var granted = settings.granted;
  var properties = settings.properties;
  var length = 0;

  // Check message ID
  if (typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  } else length += 2;

  // Check granted qos vector
  if ((typeof granted === 'undefined' ? 'undefined' : (0, _typeof3.default)(granted)) === 'object' && granted.length) {
    for (var i = 0; i < granted.length; i += 1) {
      if (typeof granted[i] !== 'number') {
        stream.emit('error', new Error('Invalid qos vector'));
        return false;
      }
      length += 1;
    }
  } else {
    stream.emit('error', new Error('Invalid qos vector'));
    return false;
  }

  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);
    if (!propertiesData) {
      return false;
    }
    length += propertiesData.length;
  }

  // header
  stream.write(protocol.SUBACK_HEADER);

  // Length
  writeVarByteInt(stream, length);

  // Message ID
  writeNumber(stream, id);

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }

  return stream.write(Buffer.from(granted));
}

function unsubscribe(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var id = settings.messageId;
  var dup = settings.dup ? protocol.DUP_MASK : 0;
  var unsubs = settings.unsubscriptions;
  var properties = settings.properties;

  var length = 0;

  // Check message ID
  if (typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  } else {
    length += 2;
  }
  // Check unsubs
  if ((typeof unsubs === 'undefined' ? 'undefined' : (0, _typeof3.default)(unsubs)) === 'object' && unsubs.length) {
    for (var i = 0; i < unsubs.length; i += 1) {
      if (typeof unsubs[i] !== 'string') {
        stream.emit('error', new Error('Invalid unsubscriptions'));
        return false;
      }
      length += Buffer.byteLength(unsubs[i]) + 2;
    }
  } else {
    stream.emit('error', new Error('Invalid unsubscriptions'));
    return false;
  }
  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getProperties(stream, properties);
    length += propertiesData.length;
  }

  // Header
  stream.write(protocol.UNSUBSCRIBE_HEADER[1][dup ? 1 : 0][0]);

  // Length
  writeVarByteInt(stream, length);

  // Message ID
  writeNumber(stream, id);

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }

  // Unsubs
  var result = true;
  for (var j = 0; j < unsubs.length; j++) {
    result = writeString(stream, unsubs[j]);
  }

  return result;
}

function unsuback(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var id = settings.messageId;
  var dup = settings.dup ? protocol.DUP_MASK : 0;
  var granted = settings.granted;
  var properties = settings.properties;
  var type = settings.cmd;
  var qos = 0;

  var length = 2;

  // Check message ID
  if (typeof id !== 'number') {
    stream.emit('error', new Error('Invalid messageId'));
    return false;
  }

  // Check granted
  if (version === 5) {
    if ((typeof granted === 'undefined' ? 'undefined' : (0, _typeof3.default)(granted)) === 'object' && granted.length) {
      for (var i = 0; i < granted.length; i += 1) {
        if (typeof granted[i] !== 'number') {
          stream.emit('error', new Error('Invalid qos vector'));
          return false;
        }
        length += 1;
      }
    } else {
      stream.emit('error', new Error('Invalid qos vector'));
      return false;
    }
  }

  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);
    if (!propertiesData) {
      return false;
    }
    length += propertiesData.length;
  }

  // Header
  stream.write(protocol.ACKS[type][qos][dup][0]);

  // Length
  writeVarByteInt(stream, length);

  // Message ID
  writeNumber(stream, id);

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }

  // payload
  if (version === 5) {
    stream.write(Buffer.from(granted));
  }
  return true;
}

function emptyPacket(packet, stream, opts) {
  return stream.write(protocol.EMPTY[packet.cmd]);
}

function disconnect(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var reasonCode = settings.reasonCode;
  var properties = settings.properties;
  var length = version === 5 ? 1 : 0;

  // properies mqtt 5
  var propertiesData = null;
  if (version === 5) {
    propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);
    if (!propertiesData) {
      return false;
    }
    length += propertiesData.length;
  }

  // Header
  stream.write(Buffer.from([protocol.codes['disconnect'] << 4]));

  // Length
  writeVarByteInt(stream, length);

  // reason code in header
  if (version === 5) {
    stream.write(Buffer.from([reasonCode]));
  }

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }

  return true;
}

function auth(packet, stream, opts) {
  var version = opts ? opts.protocolVersion : 4;
  var settings = packet || {};
  var reasonCode = settings.reasonCode;
  var properties = settings.properties;
  var length = version === 5 ? 1 : 0;

  if (version !== 5) stream.emit('error', new Error('Invalid mqtt version for auth packet'));

  // properies mqtt 5
  var propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);
  if (!propertiesData) {
    return false;
  }
  length += propertiesData.length;

  // Header
  stream.write(Buffer.from([protocol.codes['auth'] << 4]));

  // Length
  writeVarByteInt(stream, length);

  // reason code in header
  stream.write(Buffer.from([reasonCode]));

  // properies mqtt 5
  if (propertiesData !== null) {
    propertiesData.write();
  }
  return true;
}

/**
 * writeVarByteInt - write an MQTT style variable byte integer to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <Number> length - length (>0)
 * @returns <Number> number of bytes written
 *
 * @api private
 */

var varByteIntCache = {};
function writeVarByteInt(stream, num) {
  var buffer = varByteIntCache[num];

  if (!buffer) {
    buffer = genBufVariableByteInt(num).data;
    if (num < 16384) varByteIntCache[num] = buffer;
  }

  stream.write(buffer);
}

/**
 * writeString - write a utf8 string to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <String> string - string to write
 * @return <Number> number of bytes written
 *
 * @api private
 */

function writeString(stream, string) {
  var strlen = Buffer.byteLength(string);
  writeNumber(stream, strlen);

  stream.write(string, 'utf8');
}

/**
 * writeStringPair - write a utf8 string pairs to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <String> name - string name to write
 * @param <String> value - string value to write
 * @return <Number> number of bytes written
 *
 * @api private
 */
function writeStringPair(stream, name, value) {
  writeString(stream, name);
  writeString(stream, value);
}

/**
 * writeNumber - write a two byte number to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <String> number - number to write
 * @return <Number> number of bytes written
 *
 * @api private
 */
function writeNumberCached(stream, number) {
  return stream.write(numCache[number]);
}
function writeNumberGenerated(stream, number) {
  return stream.write(generateNumber(number));
}
function write4ByteNumber(stream, number) {
  return stream.write(generate4ByteBuffer(number));
}
/**
 * writeStringOrBuffer - write a String or Buffer with the its length prefix
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <String> toWrite - String or Buffer
 * @return <Number> number of bytes written
 */
function writeStringOrBuffer(stream, toWrite) {
  if (typeof toWrite === 'string') {
    writeString(stream, toWrite);
  } else if (toWrite) {
    writeNumber(stream, toWrite.length);
    stream.write(toWrite);
  } else writeNumber(stream, 0);
}

function getProperties(stream, properties) {
  /* connect properties */
  if ((typeof properties === 'undefined' ? 'undefined' : (0, _typeof3.default)(properties)) !== 'object' || properties.length != null) {
    return {
      length: 1,
      write: function write() {
        writeProperties(stream, {}, 0);
      }
    };
  }
  var propertiesLength = 0;
  function getLengthProperty(name) {
    var type = protocol.propertiesTypes[name];
    var value = properties[name];
    var length = 0;
    switch (type) {
      case 'byte':
        {
          if (typeof value !== 'boolean') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + 1;
          break;
        }
      case 'int8':
        {
          if (typeof value !== 'number') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + 1;
          break;
        }
      case 'binary':
        {
          if (value && value === null) {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + Buffer.byteLength(value) + 2;
          break;
        }
      case 'int16':
        {
          if (typeof value !== 'number') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + 2;
          break;
        }
      case 'int32':
        {
          if (typeof value !== 'number') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + 4;
          break;
        }
      case 'var':
        {
          if (typeof value !== 'number') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + genBufVariableByteInt(value).length;
          break;
        }
      case 'string':
        {
          if (typeof value !== 'string') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += 1 + 2 + Buffer.byteLength(value.toString());
          break;
        }
      case 'pair':
        {
          if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) !== 'object') {
            stream.emit('error', new Error('Invalid ' + name));
            return false;
          }
          length += (0, _getOwnPropertyNames2.default)(value).reduce(function (result, name) {
            var currentValue = value[name];
            if (Array.isArray(currentValue)) {
              result += currentValue.reduce(function (currentLength, value) {
                currentLength += 1 + 2 + Buffer.byteLength(name.toString()) + 2 + Buffer.byteLength(value.toString());
                return currentLength;
              }, 0);
            } else {
              result += 1 + 2 + Buffer.byteLength(name.toString()) + 2 + Buffer.byteLength(value[name].toString());
            }
            return result;
          }, 0);
          break;
        }
      default:
        {
          stream.emit('error', new Error('Invalid property ' + name));
          return false;
        }
    }
    return length;
  }
  if (properties) {
    for (var propName in properties) {
      var propLength = getLengthProperty(propName);
      if (!propLength) return false;
      propertiesLength += propLength;
    }
  }
  var propertiesLengthLength = genBufVariableByteInt(propertiesLength).length;

  return {
    length: propertiesLengthLength + propertiesLength,
    write: function write() {
      writeProperties(stream, properties, propertiesLength);
    }
  };
}

function getPropertiesByMaximumPacketSize(stream, properties, opts, length) {
  var mayEmptyProps = ['reasonString', 'userProperties'];
  var maximumPacketSize = opts && opts.properties && opts.properties.maximumPacketSize ? opts.properties.maximumPacketSize : 0;

  var propertiesData = getProperties(stream, properties);
  if (maximumPacketSize) {
    while (length + propertiesData.length > maximumPacketSize) {
      var currentMayEmptyProp = mayEmptyProps.shift();
      if (currentMayEmptyProp && properties[currentMayEmptyProp]) {
        delete properties[currentMayEmptyProp];
        propertiesData = getProperties(stream, properties);
      } else {
        return false;
      }
    }
  }
  return propertiesData;
}

function writeProperties(stream, properties, propertiesLength) {
  /* write properties to stream */
  writeVarByteInt(stream, propertiesLength);
  for (var propName in properties) {
    if (properties.hasOwnProperty(propName) && properties[propName] !== null) {
      var value = properties[propName];
      var type = protocol.propertiesTypes[propName];
      switch (type) {
        case 'byte':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            stream.write(Buffer.from([+value]));
            break;
          }
        case 'int8':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            stream.write(Buffer.from([value]));
            break;
          }
        case 'binary':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            writeStringOrBuffer(stream, value);
            break;
          }
        case 'int16':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            writeNumber(stream, value);
            break;
          }
        case 'int32':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            write4ByteNumber(stream, value);
            break;
          }
        case 'var':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            writeVarByteInt(stream, value);
            break;
          }
        case 'string':
          {
            stream.write(Buffer.from([protocol.properties[propName]]));
            writeString(stream, value);
            break;
          }
        case 'pair':
          {
            (0, _getOwnPropertyNames2.default)(value).forEach(function (name) {
              var currentValue = value[name];
              if (Array.isArray(currentValue)) {
                currentValue.forEach(function (value) {
                  stream.write(Buffer.from([protocol.properties[propName]]));
                  writeStringPair(stream, name.toString(), value.toString());
                });
              } else {
                stream.write(Buffer.from([protocol.properties[propName]]));
                writeStringPair(stream, name.toString(), currentValue.toString());
              }
            });
            break;
          }
        default:
          {
            stream.emit('error', new Error('Invalid property ' + propName));
            return false;
          }
      }
    }
  }
}

function byteLength(bufOrString) {
  if (!bufOrString) return 0;else if (bufOrString instanceof Buffer) return bufOrString.length;else return Buffer.byteLength(bufOrString);
}

function isStringOrBuffer(field) {
  return typeof field === 'string' || field instanceof Buffer;
}

module.exports = generate;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(341);
var util = __webpack_require__(342);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(343);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 152 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var net = __webpack_require__(346);

/*
  variables port and host can be removed since
  you have all required information in opts object
*/
function buildBuilder(client, opts) {
  var port, host;
  opts.port = opts.port || 1883;
  opts.hostname = opts.hostname || opts.host || 'localhost';

  port = opts.port;
  host = opts.hostname;

  return net.createConnection(port, host);
}

module.exports = buildBuilder;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {

var Transform = __webpack_require__(33).Transform;
var duplexify = __webpack_require__(93);

/* global wx */
var socketTask;
var proxy;
var stream;

function buildProxy() {
  var proxy = new Transform();
  proxy._write = function (chunk, encoding, next) {
    socketTask.send({
      data: chunk.buffer,
      success: function success() {
        next();
      },
      fail: function fail(errMsg) {
        next(new Error(errMsg));
      }
    });
  };
  proxy._flush = function socketEnd(done) {
    socketTask.close({
      success: function success() {
        done();
      }
    });
  };

  return proxy;
}

function setDefaultOpts(opts) {
  if (!opts.hostname) {
    opts.hostname = 'localhost';
  }
  if (!opts.path) {
    opts.path = '/';
  }

  if (!opts.wsOptions) {
    opts.wsOptions = {};
  }
}

function buildUrl(opts, client) {
  var protocol = opts.protocol === 'wxs' ? 'wss' : 'ws';
  var url = protocol + '://' + opts.hostname + opts.path;
  if (opts.port && opts.port !== 80 && opts.port !== 443) {
    url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path;
  }
  if (typeof opts.transformWsUrl === 'function') {
    url = opts.transformWsUrl(url, opts, client);
  }
  return url;
}

function bindEventHandler() {
  socketTask.onOpen(function () {
    stream.setReadable(proxy);
    stream.setWritable(proxy);
    stream.emit('connect');
  });

  socketTask.onMessage(function (res) {
    var data = res.data;

    if (data instanceof ArrayBuffer) data = Buffer.from(data);else data = Buffer.from(data, 'utf8');
    proxy.push(data);
  });

  socketTask.onClose(function () {
    stream.end();
    stream.destroy();
  });

  socketTask.onError(function (res) {
    stream.destroy(new Error(res.errMsg));
  });
}

function buildStream(client, opts) {
  opts.hostname = opts.hostname || opts.host;

  if (!opts.hostname) {
    throw new Error('Could not determine host. Specify host manually.');
  }

  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';

  setDefaultOpts(opts);

  var url = buildUrl(opts, client);
  socketTask = wx.connectSocket({
    url: url,
    protocols: websocketSubProtocol
  });

  proxy = buildProxy();
  stream = duplexify.obj();
  stream._destroy = function (err, cb) {
    socketTask.close({
      success: function success() {
        cb && cb(err);
      }
    });
  };

  var destroyRef = stream.destroy;
  stream.destroy = function () {
    stream.destroy = destroyRef;

    var self = this;
    process.nextTick(function () {
      socketTask.close({
        fail: function fail() {
          self._destroy(new Error());
        }
      });
    });
  }.bind(stream);

  bindEventHandler();

  return stream;
}

module.exports = buildStream;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(16).Buffer, __webpack_require__(6)))

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var Transform = __webpack_require__(33).Transform;
var duplexify = __webpack_require__(93);
var base64 = __webpack_require__(96);

/* global FileReader */
var my;
var proxy;
var stream;
var isInitialized = false;

function buildProxy() {
  var proxy = new Transform();
  proxy._write = function (chunk, encoding, next) {
    my.sendSocketMessage({
      data: chunk.buffer,
      success: function success() {
        next();
      },
      fail: function fail() {
        next(new Error());
      }
    });
  };
  proxy._flush = function socketEnd(done) {
    my.closeSocket({
      success: function success() {
        done();
      }
    });
  };

  return proxy;
}

function setDefaultOpts(opts) {
  if (!opts.hostname) {
    opts.hostname = 'localhost';
  }
  if (!opts.path) {
    opts.path = '/';
  }

  if (!opts.wsOptions) {
    opts.wsOptions = {};
  }
}

function buildUrl(opts, client) {
  var protocol = opts.protocol === 'alis' ? 'wss' : 'ws';
  var url = protocol + '://' + opts.hostname + opts.path;
  if (opts.port && opts.port !== 80 && opts.port !== 443) {
    url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path;
  }
  if (typeof opts.transformWsUrl === 'function') {
    url = opts.transformWsUrl(url, opts, client);
  }
  return url;
}

function bindEventHandler() {
  if (isInitialized) return;

  isInitialized = true;

  my.onSocketOpen(function () {
    stream.setReadable(proxy);
    stream.setWritable(proxy);
    stream.emit('connect');
  });

  my.onSocketMessage(function (res) {
    if (typeof res.data === 'string') {
      var array = base64.toByteArray(res.data);
      var buffer = Buffer.from(array);
      proxy.push(buffer);
    } else {
      var reader = new FileReader();
      reader.addEventListener('load', function () {
        var data = reader.result;

        if (data instanceof ArrayBuffer) data = Buffer.from(data);else data = Buffer.from(data, 'utf8');
        proxy.push(data);
      });
      reader.readAsArrayBuffer(res.data);
    }
  });

  my.onSocketClose(function () {
    stream.end();
    stream.destroy();
  });

  my.onSocketError(function (res) {
    stream.destroy(res);
  });
}

function buildStream(client, opts) {
  opts.hostname = opts.hostname || opts.host;

  if (!opts.hostname) {
    throw new Error('Could not determine host. Specify host manually.');
  }

  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';

  setDefaultOpts(opts);

  var url = buildUrl(opts, client);
  my = opts.my;
  my.connectSocket({
    url: url,
    protocols: websocketSubProtocol
  });

  proxy = buildProxy();
  stream = duplexify.obj();

  bindEventHandler();

  return stream;
}

module.exports = buildStream;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(16).Buffer))

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var websocket = __webpack_require__(352);
var urlModule = __webpack_require__(151);
var WSS_OPTIONS = ['rejectUnauthorized', 'ca', 'cert', 'key', 'pfx', 'passphrase'];
var IS_BROWSER = process.title === 'browser';

function buildUrl(opts, client) {
  var url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path;
  if (typeof opts.transformWsUrl === 'function') {
    url = opts.transformWsUrl(url, opts, client);
  }
  return url;
}

function setDefaultOpts(opts) {
  if (!opts.hostname) {
    opts.hostname = 'localhost';
  }
  if (!opts.port) {
    if (opts.protocol === 'wss') {
      opts.port = 443;
    } else {
      opts.port = 80;
    }
  }
  if (!opts.path) {
    opts.path = '/';
  }

  if (!opts.wsOptions) {
    opts.wsOptions = {};
  }
  if (!IS_BROWSER && opts.protocol === 'wss') {
    // Add cert/key/ca etc options
    WSS_OPTIONS.forEach(function (prop) {
      if (opts.hasOwnProperty(prop) && !opts.wsOptions.hasOwnProperty(prop)) {
        opts.wsOptions[prop] = opts[prop];
      }
    });
  }
}

function createWebSocket(client, opts) {
  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';

  setDefaultOpts(opts);
  var url = buildUrl(opts, client);
  return websocket(url, [websocketSubProtocol], opts.wsOptions);
}

function buildBuilder(client, opts) {
  return createWebSocket(client, opts);
}

function buildBuilderBrowser(client, opts) {
  if (!opts.hostname) {
    opts.hostname = opts.host;
  }

  if (!opts.hostname) {
    // Throwing an error in a Web Worker if no `hostname` is given, because we
    // can not determine the `hostname` automatically.  If connecting to
    // localhost, please supply the `hostname` as an argument.
    if (typeof document === 'undefined') {
      throw new Error('Could not determine host. Specify host manually.');
    }
    var parsed = urlModule.parse(document.URL);
    opts.hostname = parsed.hostname;

    if (!opts.port) {
      opts.port = parsed.port;
    }
  }
  return createWebSocket(client, opts);
}

if (IS_BROWSER) {
  module.exports = buildBuilderBrowser;
} else {
  module.exports = buildBuilder;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _isInteger = __webpack_require__(354);

var _isInteger2 = _interopRequireDefault(_isInteger);

var _defineProperty = __webpack_require__(123);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _defineProperties = __webpack_require__(358);

var _defineProperties2 = _interopRequireDefault(_defineProperties);

var _freeze = __webpack_require__(361);

var _freeze2 = _interopRequireDefault(_freeze);

var _create = __webpack_require__(130);

var _create2 = _interopRequireDefault(_create);

var _stringify = __webpack_require__(78);

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = __webpack_require__(45);

var _keys2 = _interopRequireDefault(_keys);

var _promise = __webpack_require__(62);

var _promise2 = _interopRequireDefault(_promise);

var _typeof2 = __webpack_require__(32);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * protobuf.js v6.8.0 (c) 2016, daniel wirtz
 * compiled fri, 09 jun 2017 21:00:39 utc
 * licensed under the bsd-3-clause license
 * see: https://github.com/dcodeio/protobuf.js for details
 */
!function (t, e) {
  "use strict";
  !function (e, r, n) {
    function i(t) {
      var n = r[t];return n || e[t][0].call(n = r[t] = { exports: {} }, i, n, n.exports), n.exports;
    }var o = t.protobuf = i(n[0]); true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(81)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (t) {
      return t && t.isLong && (o.util.Long = t, o.configure()), o;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)), "object" == ( false ? undefined : (0, _typeof3.default)(module)) && module && module.exports && (module.exports = o);
  }({ 1: [function (t, e) {
      function r(t, e) {
        for (var r = Array(arguments.length - 1), n = 0, i = 2, o = !0; i < arguments.length;) {
          r[n++] = arguments[i++];
        }return new _promise2.default(function (i, s) {
          r[n] = function (t) {
            if (o) if (o = !1, t) s(t);else {
              for (var e = Array(arguments.length - 1), r = 0; r < e.length;) {
                e[r++] = arguments[r];
              }i.apply(null, e);
            }
          };try {
            t.apply(e || null, r);
          } catch (t) {
            o && (o = !1, s(t));
          }
        });
      }e.exports = r;
    }, {}], 2: [function (t, r, n) {
      var i = n;i.length = function (t) {
        var e = t.length;if (!e) return 0;for (var r = 0; --e % 4 > 1 && "=" === t.charAt(e);) {
          ++r;
        }return Math.ceil(3 * t.length) / 4 - r;
      };for (var o = Array(64), s = Array(123), a = 0; a < 64;) {
        s[o[a] = a < 26 ? a + 65 : a < 52 ? a + 71 : a < 62 ? a - 4 : a - 59 | 43] = a++;
      }i.encode = function (t, e, r) {
        for (var n, i = null, s = [], a = 0, u = 0; e < r;) {
          var f = t[e++];switch (u) {case 0:
              s[a++] = o[f >> 2], n = (3 & f) << 4, u = 1;break;case 1:
              s[a++] = o[n | f >> 4], n = (15 & f) << 2, u = 2;break;case 2:
              s[a++] = o[n | f >> 6], s[a++] = o[63 & f], u = 0;}a > 8191 && ((i || (i = [])).push(String.fromCharCode.apply(String, s)), a = 0);
        }return u && (s[a++] = o[n], s[a++] = 61, 1 === u && (s[a++] = 61)), i ? (a && i.push(String.fromCharCode.apply(String, s.slice(0, a))), i.join("")) : String.fromCharCode.apply(String, s.slice(0, a));
      };i.decode = function (t, r, n) {
        for (var i, o = n, a = 0, u = 0; u < t.length;) {
          var f = t.charCodeAt(u++);if (61 === f && a > 1) break;if ((f = s[f]) === e) throw Error("invalid encoding");switch (a) {case 0:
              i = f, a = 1;break;case 1:
              r[n++] = i << 2 | (48 & f) >> 4, i = f, a = 2;break;case 2:
              r[n++] = (15 & i) << 4 | (60 & f) >> 2, i = f, a = 3;break;case 3:
              r[n++] = (3 & i) << 6 | f, a = 0;}
        }if (1 === a) throw Error("invalid encoding");return n - o;
      }, i.test = function (t) {
        return (/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(t)
        );
      };
    }, {}], 3: [function (t, r) {
      function n(t, r) {
        function i(t) {
          if ("string" != typeof t) {
            var e = o();if (n.verbose && console.log("codegen: " + e), e = "return " + e, t) {
              for (var r = (0, _keys2.default)(t), a = Array(r.length + 1), u = Array(r.length), f = 0; f < r.length;) {
                a[f] = r[f], u[f] = t[r[f++]];
              }return a[f] = e, Function.apply(null, a).apply(null, u);
            }return Function(e)();
          }for (var l = Array(arguments.length - 1), p = 0; p < l.length;) {
            l[p] = arguments[++p];
          }if (p = 0, t = t.replace(/%([%dfijs])/g, function (t, e) {
            var r = l[p++];switch (e) {case "d":case "f":
                return +r + "";case "i":
                return Math.floor(r) + "";case "j":
                return (0, _stringify2.default)(r);case "s":
                return r + "";}return "%";
          }), p !== l.length) throw Error("parameter count mismatch");return s.push(t), i;
        }function o(e) {
          return "function " + (e || r || "") + "(" + (t && t.join(",") || "") + "){\n  " + s.join("\n  ") + "\n}";
        }"string" == typeof t && (r = t, t = e);var s = [];return i.toString = o, i;
      }r.exports = n, n.verbose = !1;
    }, {}], 4: [function (t, r) {
      function n() {
        this.a = {};
      }r.exports = n, n.prototype.on = function (t, e, r) {
        return (this.a[t] || (this.a[t] = [])).push({ fn: e, ctx: r || this }), this;
      }, n.prototype.off = function (t, r) {
        if (t === e) this.a = {};else if (r === e) this.a[t] = [];else for (var n = this.a[t], i = 0; i < n.length;) {
          n[i].fn === r ? n.splice(i, 1) : ++i;
        }return this;
      }, n.prototype.emit = function (t) {
        var e = this.a[t];if (e) {
          for (var r = [], n = 1; n < arguments.length;) {
            r.push(arguments[n++]);
          }for (n = 0; n < e.length;) {
            e[n].fn.apply(e[n++].ctx, r);
          }
        }return this;
      };
    }, {}], 5: [function (t, r) {
      function n(t, e, r) {
        return "function" == typeof e ? (r = e, e = {}) : e || (e = {}), r ? !e.xhr && s && s.readFile ? s.readFile(t, function (i, o) {
          return i && "undefined" != typeof XMLHttpRequest ? n.xhr(t, e, r) : i ? r(i) : r(null, e.binary ? o : o.toString("utf8"));
        }) : n.xhr(t, e, r) : i(n, this, t, e);
      }r.exports = n;var i = t(1),
          o = t(7),
          s = o("fs");n.xhr = function (t, r, n) {
        var i = new XMLHttpRequest();i.onreadystatechange = function () {
          if (4 !== i.readyState) return e;if (0 !== i.status && 200 !== i.status) return n(Error("status " + i.status));if (r.binary) {
            var t = i.response;if (!t) {
              t = [];for (var o = 0; o < i.responseText.length; ++o) {
                t.push(255 & i.responseText.charCodeAt(o));
              }
            }return n(null, "undefined" != typeof Uint8Array ? new Uint8Array(t) : t);
          }return n(null, i.responseText);
        }, r.binary && ("overrideMimeType" in i && i.overrideMimeType("text/plain; charset=x-user-defined"), i.responseType = "arraybuffer"), i.open("GET", t), i.send();
      };
    }, { 1: 1, 7: 7 }], 6: [function (t, e) {
      function r(t) {
        return "undefined" != typeof Float32Array ? function () {
          function e(t, e, r) {
            o[0] = t, e[r] = s[0], e[r + 1] = s[1], e[r + 2] = s[2], e[r + 3] = s[3];
          }function r(t, e, r) {
            o[0] = t, e[r] = s[3], e[r + 1] = s[2], e[r + 2] = s[1], e[r + 3] = s[0];
          }function n(t, e) {
            return s[0] = t[e], s[1] = t[e + 1], s[2] = t[e + 2], s[3] = t[e + 3], o[0];
          }function i(t, e) {
            return s[3] = t[e], s[2] = t[e + 1], s[1] = t[e + 2], s[0] = t[e + 3], o[0];
          }var o = new Float32Array([-0]),
              s = new Uint8Array(o.buffer),
              a = 128 === s[3];t.writeFloatLE = a ? e : r, t.writeFloatBE = a ? r : e, t.readFloatLE = a ? n : i, t.readFloatBE = a ? i : n;
        }() : function () {
          function e(t, e, r, n) {
            var i = e < 0 ? 1 : 0;if (i && (e = -e), 0 === e) t(1 / e > 0 ? 0 : 2147483648, r, n);else if (isNaN(e)) t(2143289344, r, n);else if (e > 3.4028234663852886e38) t((i << 31 | 2139095040) >>> 0, r, n);else if (e < 1.1754943508222875e-38) t((i << 31 | Math.round(e / 1.401298464324817e-45)) >>> 0, r, n);else {
              var o = Math.floor(Math.log(e) / Math.LN2),
                  s = 8388607 & Math.round(e * Math.pow(2, -o) * 8388608);t((i << 31 | o + 127 << 23 | s) >>> 0, r, n);
            }
          }function r(t, e, r) {
            var n = t(e, r),
                i = 2 * (n >> 31) + 1,
                o = n >>> 23 & 255,
                s = 8388607 & n;return 255 === o ? s ? NaN : i * (1 / 0) : 0 === o ? 1.401298464324817e-45 * i * s : i * Math.pow(2, o - 150) * (s + 8388608);
          }t.writeFloatLE = e.bind(null, n), t.writeFloatBE = e.bind(null, i), t.readFloatLE = r.bind(null, o), t.readFloatBE = r.bind(null, s);
        }(), "undefined" != typeof Float64Array ? function () {
          function e(t, e, r) {
            o[0] = t, e[r] = s[0], e[r + 1] = s[1], e[r + 2] = s[2], e[r + 3] = s[3], e[r + 4] = s[4], e[r + 5] = s[5], e[r + 6] = s[6], e[r + 7] = s[7];
          }function r(t, e, r) {
            o[0] = t, e[r] = s[7], e[r + 1] = s[6], e[r + 2] = s[5], e[r + 3] = s[4], e[r + 4] = s[3], e[r + 5] = s[2], e[r + 6] = s[1], e[r + 7] = s[0];
          }function n(t, e) {
            return s[0] = t[e], s[1] = t[e + 1], s[2] = t[e + 2], s[3] = t[e + 3], s[4] = t[e + 4], s[5] = t[e + 5], s[6] = t[e + 6], s[7] = t[e + 7], o[0];
          }function i(t, e) {
            return s[7] = t[e], s[6] = t[e + 1], s[5] = t[e + 2], s[4] = t[e + 3], s[3] = t[e + 4], s[2] = t[e + 5], s[1] = t[e + 6], s[0] = t[e + 7], o[0];
          }var o = new Float64Array([-0]),
              s = new Uint8Array(o.buffer),
              a = 128 === s[7];t.writeDoubleLE = a ? e : r, t.writeDoubleBE = a ? r : e, t.readDoubleLE = a ? n : i, t.readDoubleBE = a ? i : n;
        }() : function () {
          function e(t, e, r, n, i, o) {
            var s = n < 0 ? 1 : 0;if (s && (n = -n), 0 === n) t(0, i, o + e), t(1 / n > 0 ? 0 : 2147483648, i, o + r);else if (isNaN(n)) t(0, i, o + e), t(2146959360, i, o + r);else if (n > 1.7976931348623157e308) t(0, i, o + e), t((s << 31 | 2146435072) >>> 0, i, o + r);else {
              var a;if (n < 2.2250738585072014e-308) a = n / 5e-324, t(a >>> 0, i, o + e), t((s << 31 | a / 4294967296) >>> 0, i, o + r);else {
                var u = Math.floor(Math.log(n) / Math.LN2);1024 === u && (u = 1023), a = n * Math.pow(2, -u), t(4503599627370496 * a >>> 0, i, o + e), t((s << 31 | u + 1023 << 20 | 1048576 * a & 1048575) >>> 0, i, o + r);
              }
            }
          }function r(t, e, r, n, i) {
            var o = t(n, i + e),
                s = t(n, i + r),
                a = 2 * (s >> 31) + 1,
                u = s >>> 20 & 2047,
                f = 4294967296 * (1048575 & s) + o;return 2047 === u ? f ? NaN : a * (1 / 0) : 0 === u ? 5e-324 * a * f : a * Math.pow(2, u - 1075) * (f + 4503599627370496);
          }t.writeDoubleLE = e.bind(null, n, 0, 4), t.writeDoubleBE = e.bind(null, i, 4, 0), t.readDoubleLE = r.bind(null, o, 0, 4), t.readDoubleBE = r.bind(null, s, 4, 0);
        }(), t;
      }function n(t, e, r) {
        e[r] = 255 & t, e[r + 1] = t >>> 8 & 255, e[r + 2] = t >>> 16 & 255, e[r + 3] = t >>> 24;
      }function i(t, e, r) {
        e[r] = t >>> 24, e[r + 1] = t >>> 16 & 255, e[r + 2] = t >>> 8 & 255, e[r + 3] = 255 & t;
      }function o(t, e) {
        return (t[e] | t[e + 1] << 8 | t[e + 2] << 16 | t[e + 3] << 24) >>> 0;
      }function s(t, e) {
        return (t[e] << 24 | t[e + 1] << 16 | t[e + 2] << 8 | t[e + 3]) >>> 0;
      }e.exports = r(r);
    }, {}], 7: [function (t, e, r) {
      function n(t) {
        try {
          var e = eval("quire".replace(/^/, "re"))(t);if (e && (e.length || (0, _keys2.default)(e).length)) return e;
        } catch (t) {}return null;
      }e.exports = n;
    }, {}], 8: [function (t, e, r) {
      var n = r,
          i = n.isAbsolute = function (t) {
        return (/^(?:\/|\w+:)/.test(t)
        );
      },
          o = n.normalize = function (t) {
        t = t.replace(/\\/g, "/").replace(/\/{2,}/g, "/");var e = t.split("/"),
            r = i(t),
            n = "";r && (n = e.shift() + "/");for (var o = 0; o < e.length;) {
          ".." === e[o] ? o > 0 && ".." !== e[o - 1] ? e.splice(--o, 2) : r ? e.splice(o, 1) : ++o : "." === e[o] ? e.splice(o, 1) : ++o;
        }return n + e.join("/");
      };n.resolve = function (t, e, r) {
        return r || (e = o(e)), i(e) ? e : (r || (t = o(t)), (t = t.replace(/(?:\/|^)[^\/]+$/, "")).length ? o(t + "/" + e) : e);
      };
    }, {}], 9: [function (t, e) {
      function r(t, e, r) {
        var n = r || 8192,
            i = n >>> 1,
            o = null,
            s = n;return function (r) {
          if (r < 1 || r > i) return t(r);s + r > n && (o = t(n), s = 0);var a = e.call(o, s, s += r);return 7 & s && (s = 1 + (7 | s)), a;
        };
      }e.exports = r;
    }, {}], 10: [function (t, e, r) {
      var n = r;n.length = function (t) {
        for (var e = 0, r = 0, n = 0; n < t.length; ++n) {
          r = t.charCodeAt(n), r < 128 ? e += 1 : r < 2048 ? e += 2 : 55296 == (64512 & r) && 56320 == (64512 & t.charCodeAt(n + 1)) ? (++n, e += 4) : e += 3;
        }return e;
      }, n.read = function (t, e, r) {
        if (r - e < 1) return "";for (var n, i = null, o = [], s = 0; e < r;) {
          n = t[e++], n < 128 ? o[s++] = n : n > 191 && n < 224 ? o[s++] = (31 & n) << 6 | 63 & t[e++] : n > 239 && n < 365 ? (n = ((7 & n) << 18 | (63 & t[e++]) << 12 | (63 & t[e++]) << 6 | 63 & t[e++]) - 65536, o[s++] = 55296 + (n >> 10), o[s++] = 56320 + (1023 & n)) : o[s++] = (15 & n) << 12 | (63 & t[e++]) << 6 | 63 & t[e++], s > 8191 && ((i || (i = [])).push(String.fromCharCode.apply(String, o)), s = 0);
        }return i ? (s && i.push(String.fromCharCode.apply(String, o.slice(0, s))), i.join("")) : String.fromCharCode.apply(String, o.slice(0, s));
      }, n.write = function (t, e, r) {
        for (var n, i, o = r, s = 0; s < t.length; ++s) {
          n = t.charCodeAt(s), n < 128 ? e[r++] = n : n < 2048 ? (e[r++] = n >> 6 | 192, e[r++] = 63 & n | 128) : 55296 == (64512 & n) && 56320 == (64512 & (i = t.charCodeAt(s + 1))) ? (n = 65536 + ((1023 & n) << 10) + (1023 & i), ++s, e[r++] = n >> 18 | 240, e[r++] = n >> 12 & 63 | 128, e[r++] = n >> 6 & 63 | 128, e[r++] = 63 & n | 128) : (e[r++] = n >> 12 | 224, e[r++] = n >> 6 & 63 | 128, e[r++] = 63 & n | 128);
        }return r - o;
      };
    }, {}], 11: [function (t, e) {
      function r(t, e) {
        n.test(t) || (t = "google/protobuf/" + t + ".proto", e = { nested: { google: { nested: { protobuf: { nested: e } } } } }), r[t] = e;
      }e.exports = r;var n = /\/|\./;r("any", { Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } } });var i;r("duration", { Duration: i = { fields: { seconds: { type: "int64", id: 1 }, nanos: { type: "int32", id: 2 } } } }), r("timestamp", { Timestamp: i }), r("empty", { Empty: { fields: {} } }), r("struct", { Struct: { fields: { fields: { keyType: "string", type: "Value", id: 1 } } }, Value: { oneofs: { kind: { oneof: ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"] } }, fields: { nullValue: { type: "NullValue", id: 1 }, numberValue: { type: "double", id: 2 }, stringValue: { type: "string", id: 3 }, boolValue: { type: "bool", id: 4 }, structValue: { type: "Struct", id: 5 }, listValue: { type: "ListValue", id: 6 } } }, NullValue: { values: { NULL_VALUE: 0 } }, ListValue: { fields: { values: { rule: "repeated", type: "Value", id: 1 } } } }), r("wrappers", { DoubleValue: { fields: { value: { type: "double", id: 1 } } }, FloatValue: { fields: { value: { type: "float", id: 1 } } }, Int64Value: { fields: { value: { type: "int64", id: 1 } } }, UInt64Value: { fields: { value: { type: "uint64", id: 1 } } }, Int32Value: { fields: { value: { type: "int32", id: 1 } } }, UInt32Value: { fields: { value: { type: "uint32", id: 1 } } }, BoolValue: { fields: { value: { type: "bool", id: 1 } } }, StringValue: { fields: { value: { type: "string", id: 1 } } }, BytesValue: { fields: { value: { type: "bytes", id: 1 } } } }), r.get = function (t) {
        return r[t] || null;
      };
    }, {}], 12: [function (t, e, r) {
      function n(t, e, r, n) {
        if (e.resolvedType) {
          if (e.resolvedType instanceof s) {
            t("switch(d%s){", n);for (var i = e.resolvedType.values, o = (0, _keys2.default)(i), a = 0; a < o.length; ++a) {
              e.repeated && i[o[a]] === e.typeDefault && t("default:"), t("case%j:", o[a])("case %i:", i[o[a]])("m%s=%j", n, i[o[a]])("break");
            }t("}");
          } else t('if(typeof d%s!=="object")', n)("throw TypeError(%j)", e.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", n, r, n);
        } else {
          var u = !1;switch (e.type) {case "double":case "float":
              t("m%s=Number(d%s)", n, n);break;case "uint32":case "fixed32":
              t("m%s=d%s>>>0", n, n);break;case "int32":case "sint32":case "sfixed32":
              t("m%s=d%s|0", n, n);break;case "uint64":
              u = !0;case "int64":case "sint64":case "fixed64":case "sfixed64":
              t("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", n, n, u)('else if(typeof d%s==="string")', n)("m%s=parseInt(d%s,10)", n, n)('else if(typeof d%s==="number")', n)("m%s=d%s", n, n)('else if(typeof d%s==="object")', n)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", n, n, n, u ? "true" : "");break;case "bytes":
              t('if(typeof d%s==="string")', n)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", n, n, n)("else if(d%s.length)", n)("m%s=d%s", n, n);break;case "string":
              t("m%s=String(d%s)", n, n);break;case "bool":
              t("m%s=Boolean(d%s)", n, n);}
        }return t;
      }function i(t, e, r, n) {
        if (e.resolvedType) e.resolvedType instanceof s ? t("d%s=o.enums===String?types[%i].values[m%s]:m%s", n, r, n, n) : t("d%s=types[%i].toObject(m%s,o)", n, r, n);else {
          var i = !1;switch (e.type) {case "double":case "float":
              t("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", n, n, n, n);break;case "uint64":
              i = !0;case "int64":case "sint64":case "fixed64":case "sfixed64":
              t('if(typeof m%s==="number")', n)("d%s=o.longs===String?String(m%s):m%s", n, n, n)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", n, n, n, n, i ? "true" : "", n);break;case "bytes":
              t("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", n, n, n, n, n);break;default:
              t("d%s=m%s", n, n);}
        }return t;
      }var o = r,
          s = t(15),
          a = t(37);o.fromObject = function (t) {
        var e = t.fieldsArray,
            r = a.codegen(["d"], t.name + "$fromObject")("if(d instanceof this.ctor)")("return d");if (!e.length) return r("return new this.ctor");r("var m=new this.ctor");for (var i = 0; i < e.length; ++i) {
          var o = e[i].resolve(),
              u = a.safeProp(o.name);o.map ? (r("if(d%s){", u)('if(typeof d%s!=="object")', u)("throw TypeError(%j)", o.fullName + ": object expected")("m%s={}", u)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", u), n(r, o, i, u + "[ks[i]]")("}")("}")) : o.repeated ? (r("if(d%s){", u)("if(!Array.isArray(d%s))", u)("throw TypeError(%j)", o.fullName + ": array expected")("m%s=[]", u)("for(var i=0;i<d%s.length;++i){", u), n(r, o, i, u + "[i]")("}")("}")) : (o.resolvedType instanceof s || r("if(d%s!=null){", u), n(r, o, i, u), o.resolvedType instanceof s || r("}"));
        }return r("return m");
      }, o.toObject = function (t) {
        var e = t.fieldsArray.slice().sort(a.compareFieldsById);if (!e.length) return a.codegen()("return {}");for (var r = a.codegen(["m", "o"], t.name + "$toObject")("if(!o)")("o={}")("var d={}"), n = [], o = [], s = [], u = 0; u < e.length; ++u) {
          e[u].partOf || (e[u].resolve().repeated ? n : e[u].map ? o : s).push(e[u]);
        }var f,
            l,
            p = !1;for (u = 0; u < e.length; ++u) {
          var f = e[u],
              c = t.b.indexOf(f),
              l = a.safeProp(f.name);f.map ? (p || (p = !0, r("var ks2")), r("if(m%s&&(ks2=Object.keys(m%s)).length){", l, l)("d%s={}", l)("for(var j=0;j<ks2.length;++j){"), i(r, f, c, l + "[ks2[j]]")("}")) : f.repeated ? (r("if(m%s&&m%s.length){", l, l)("d%s=[]", l)("for(var j=0;j<m%s.length;++j){", l), i(r, f, c, l + "[j]")("}")) : (r("if(m%s!=null&&m.hasOwnProperty(%j)){", l, f.name), i(r, f, c, l), f.partOf && r("if(o.oneofs)")("d%s=%j", a.safeProp(f.partOf.name), f.name)), r("}");
        }return r("return d");
      };
    }, { 15: 15, 37: 37 }], 13: [function (t, r) {
      function n(t) {
        return "missing required '" + t.name + "'";
      }function i(t) {
        var r = a.codegen(["r", "l"], t.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (t.fieldsArray.filter(function (t) {
          return t.map;
        }).length ? ",k" : ""))("while(r.pos<c){")("var t=r.uint32()");t.group && r("if((t&7)===4)")("break"), r("switch(t>>>3){");for (var i = 0; i < t.fieldsArray.length; ++i) {
          var u = t.b[i].resolve(),
              f = u.resolvedType instanceof o ? "int32" : u.type,
              l = "m" + a.safeProp(u.name);r("case %i:", u.id), u.map ? (r("r.skip().pos++")("if(%s===util.emptyObject)", l)("%s={}", l)("k=r.%s()", u.keyType)("r.pos++"), s.long[u.keyType] !== e ? s.basic[f] === e ? r('%s[typeof k==="object"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())', l, i) : r('%s[typeof k==="object"?util.longToHash(k):k]=r.%s()', l, f) : s.basic[f] === e ? r("%s[k]=types[%i].decode(r,r.uint32())", l, i) : r("%s[k]=r.%s()", l, f)) : u.repeated ? (r("if(!(%s&&%s.length))", l, l)("%s=[]", l), s.packed[f] !== e && r("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", l, f)("}else"), s.basic[f] === e ? r(u.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", l, i) : r("%s.push(r.%s())", l, f)) : s.basic[f] === e ? r(u.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", l, i) : r("%s=r.%s()", l, f), r("break");
        }for (r("default:")("r.skipType(t&7)")("break")("}")("}"), i = 0; i < t.b.length; ++i) {
          var p = t.b[i];p.required && r("if(!m.hasOwnProperty(%j))", p.name)("throw util.ProtocolError(%j,{instance:m})", n(p));
        }return r("return m");
      }r.exports = i;var o = t(15),
          s = t(36),
          a = t(37);
    }, { 15: 15, 36: 36, 37: 37 }], 14: [function (t, r) {
      function n(t, e, r, n) {
        return e.resolvedType.group ? t("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", r, n, (e.id << 3 | 3) >>> 0, (e.id << 3 | 4) >>> 0) : t("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", r, n, (e.id << 3 | 2) >>> 0);
      }function i(t) {
        for (var r, i, u = a.codegen(["m", "w"], t.name + "$encode")("if(!w)")("w=Writer.create()"), f = t.fieldsArray.slice().sort(a.compareFieldsById), r = 0; r < f.length; ++r) {
          var l = f[r].resolve(),
              p = t.b.indexOf(l),
              c = l.resolvedType instanceof o ? "int32" : l.type,
              h = s.basic[c];i = "m" + a.safeProp(l.name), l.map ? (u("if(%s!=null&&m.hasOwnProperty(%j)){", i, l.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", i)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (l.id << 3 | 2) >>> 0, 8 | s.mapKey[l.keyType], l.keyType), h === e ? u("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", p, i) : u(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | h, c, i), u("}")("}")) : l.repeated ? (u("if(%s!=null&&%s.length){", i, i), l.packed && s.packed[c] !== e ? u("w.uint32(%i).fork()", (l.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", i)("w.%s(%s[i])", c, i)("w.ldelim()") : (u("for(var i=0;i<%s.length;++i)", i), h === e ? n(u, l, p, i + "[i]") : u("w.uint32(%i).%s(%s[i])", (l.id << 3 | h) >>> 0, c, i)), u("}")) : (l.optional && u("if(%s!=null&&m.hasOwnProperty(%j))", i, l.name), h === e ? n(u, l, p, i) : u("w.uint32(%i).%s(%s)", (l.id << 3 | h) >>> 0, c, i));
        }return u("return w");
      }r.exports = i;var o = t(15),
          s = t(36),
          a = t(37);
    }, { 15: 15, 36: 36, 37: 37 }], 15: [function (t, r) {
      function n(t, e, r) {
        if (i.call(this, t, r), e && "object" != (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e))) throw TypeError("values must be an object");if (this.valuesById = {}, this.values = (0, _create2.default)(this.valuesById), this.comments = {}, e) for (var n = (0, _keys2.default)(e), o = 0; o < n.length; ++o) {
          "number" == typeof e[n[o]] && (this.valuesById[this.values[n[o]] = e[n[o]]] = n[o]);
        }
      }r.exports = n;var i = t(24);((n.prototype = (0, _create2.default)(i.prototype)).constructor = n).className = "Enum";var o = t(37);n.fromJSON = function (t, e) {
        return new n(t, e.values, e.options);
      }, n.prototype.toJSON = function () {
        return o.toObject(["options", this.options, "values", this.values]);
      }, n.prototype.add = function (t, r, n) {
        if (!o.isString(t)) throw TypeError("name must be a string");if (!o.isInteger(r)) throw TypeError("id must be an integer");if (this.values[t] !== e) throw Error("duplicate name");if (this.valuesById[r] !== e) {
          if (!this.options || !this.options.allow_alias) throw Error("duplicate id");this.values[t] = r;
        } else this.valuesById[this.values[t] = r] = t;return this.comments[t] = n || null, this;
      }, n.prototype.remove = function (t) {
        if (!o.isString(t)) throw TypeError("name must be a string");var r = this.values[t];if (r === e) throw Error("name does not exist");return delete this.valuesById[r], delete this.values[t], delete this.comments[t], this;
      };
    }, { 24: 24, 37: 37 }], 16: [function (t, r) {
      function n(t, r, n, o, s, l) {
        if (u.isObject(o) ? (l = o, o = s = e) : u.isObject(s) && (l = s, s = e), i.call(this, t, l), !u.isInteger(r) || r < 0) throw TypeError("id must be a non-negative integer");if (!u.isString(n)) throw TypeError("type must be a string");if (o !== e && !f.test(o = ("" + o).toLowerCase())) throw TypeError("rule must be a string rule");if (s !== e && !u.isString(s)) throw TypeError("extend must be a string");this.rule = o && "optional" !== o ? o : e, this.type = n, this.id = r, this.extend = s || e, this.required = "required" === o, this.optional = !this.required, this.repeated = "repeated" === o, this.map = !1, this.message = null, this.partOf = null, this.typeDefault = null, this.defaultValue = null, this.long = !!u.Long && a.long[n] !== e, this.bytes = "bytes" === n, this.resolvedType = null, this.extensionField = null, this.declaringField = null, this.c = null;
      }r.exports = n;var i = t(24);((n.prototype = (0, _create2.default)(i.prototype)).constructor = n).className = "Field";var o,
          s = t(15),
          a = t(36),
          u = t(37),
          f = /^required|optional|repeated$/;n.fromJSON = function (t, e) {
        return new n(t, e.id, e.type, e.rule, e.extend, e.options);
      }, Object.defineProperty(n.prototype, "packed", { get: function get() {
          return null === this.c && (this.c = !1 !== this.getOption("packed")), this.c;
        } }), n.prototype.setOption = function (t, e, r) {
        return "packed" === t && (this.c = null), i.prototype.setOption.call(this, t, e, r);
      }, n.prototype.toJSON = function () {
        return u.toObject(["rule", "optional" !== this.rule && this.rule || e, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options]);
      }, n.prototype.resolve = function () {
        if (this.resolved) return this;if ((this.typeDefault = a.defaults[this.type]) === e && (this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type), this.resolvedType instanceof o ? this.typeDefault = null : this.typeDefault = this.resolvedType.values[(0, _keys2.default)(this.resolvedType.values)[0]]), this.options && null != this.options.default && (this.typeDefault = this.options.default, this.resolvedType instanceof s && "string" == typeof this.typeDefault && (this.typeDefault = this.resolvedType.values[this.typeDefault])), this.options && (!0 !== this.options.packed && (this.options.packed === e || !this.resolvedType || this.resolvedType instanceof s) || delete this.options.packed, (0, _keys2.default)(this.options).length || (this.options = e)), this.long) this.typeDefault = u.Long.fromNumber(this.typeDefault, "u" === this.type.charAt(0)), _freeze2.default && (0, _freeze2.default)(this.typeDefault);else if (this.bytes && "string" == typeof this.typeDefault) {
          var t;u.base64.test(this.typeDefault) ? u.base64.decode(this.typeDefault, t = u.newBuffer(u.base64.length(this.typeDefault)), 0) : u.utf8.write(this.typeDefault, t = u.newBuffer(u.utf8.length(this.typeDefault)), 0), this.typeDefault = t;
        }return this.map ? this.defaultValue = u.emptyObject : this.repeated ? this.defaultValue = u.emptyArray : this.defaultValue = this.typeDefault, this.parent instanceof o && (this.parent.ctor.prototype[this.name] = this.defaultValue), i.prototype.resolve.call(this);
      }, n.d = function (t, e, r, i) {
        return "function" == typeof e ? e = u.decorateType(e).name : e && "object" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && (e = u.decorateEnum(e).name), function (o, s) {
          u.decorateType(o.constructor).add(new n(s, t, e, r, { default: i }));
        };
      }, n.e = function (t) {
        o = t;
      };
    }, { 15: 15, 24: 24, 36: 36, 37: 37 }], 17: [function (t, e) {
      function r(t, e, r) {
        return "function" == typeof e ? (r = e, e = new i.Root()) : e || (e = new i.Root()), e.load(t, r);
      }function n(t, e) {
        return e || (e = new i.Root()), e.loadSync(t);
      }var i = e.exports = t(18);i.build = "light", i.load = r, i.loadSync = n, i.encoder = t(14), i.decoder = t(13), i.verifier = t(40), i.converter = t(12), i.ReflectionObject = t(24), i.Namespace = t(23), i.Root = t(29), i.Enum = t(15), i.Type = t(35), i.Field = t(16), i.OneOf = t(25), i.MapField = t(20), i.Service = t(33), i.Method = t(22), i.Message = t(21), i.wrappers = t(41), i.types = t(36), i.util = t(37), i.ReflectionObject.e(i.Root), i.Namespace.e(i.Type, i.Service), i.Root.e(i.Type), i.Field.e(i.Type);
    }, { 12: 12, 13: 13, 14: 14, 15: 15, 16: 16, 18: 18, 20: 20, 21: 21, 22: 22, 23: 23, 24: 24, 25: 25, 29: 29, 33: 33, 35: 35, 36: 36, 37: 37, 40: 40, 41: 41 }], 18: [function (t, e, r) {
      function n() {
        i.Reader.e(i.BufferReader), i.util.e();
      }var i = r;i.build = "minimal", i.Writer = t(42), i.BufferWriter = t(43), i.Reader = t(27), i.BufferReader = t(28), i.util = t(39), i.rpc = t(31), i.roots = t(30), i.configure = n, i.Writer.e(i.BufferWriter), n();
    }, { 27: 27, 28: 28, 30: 30, 31: 31, 39: 39, 42: 42, 43: 43 }], 19: [function (t, e) {
      var r = e.exports = t(17);r.build = "full", r.tokenize = t(34), r.parse = t(26), r.common = t(11), r.Root.e(r.Type, r.parse, r.common);
    }, { 11: 11, 17: 17, 26: 26, 34: 34 }], 20: [function (t, r) {
      function n(t, e, r, n, o) {
        if (i.call(this, t, e, n, o), !s.isString(r)) throw TypeError("keyType must be a string");this.keyType = r, this.resolvedKeyType = null, this.map = !0;
      }r.exports = n;var i = t(16);((n.prototype = (0, _create2.default)(i.prototype)).constructor = n).className = "MapField";var o = t(36),
          s = t(37);n.fromJSON = function (t, e) {
        return new n(t, e.id, e.keyType, e.type, e.options);
      }, n.prototype.toJSON = function () {
        return s.toObject(["keyType", this.keyType, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options]);
      }, n.prototype.resolve = function () {
        if (this.resolved) return this;if (o.mapKey[this.keyType] === e) throw Error("invalid key type: " + this.keyType);return i.prototype.resolve.call(this);
      }, n.d = function (t, e, r) {
        return "function" == typeof r ? r = s.decorateType(r).name : r && "object" == (typeof r === "undefined" ? "undefined" : (0, _typeof3.default)(r)) && (r = s.decorateEnum(r).name), function (i, o) {
          s.decorateType(i.constructor).add(new n(o, t, e, r));
        };
      };
    }, { 16: 16, 36: 36, 37: 37 }], 21: [function (t, e) {
      function r(t) {
        if (t) for (var e = (0, _keys2.default)(t), r = 0; r < e.length; ++r) {
          this[e[r]] = t[e[r]];
        }
      }e.exports = r;var n = t(39);r.create = function (t) {
        return this.$type.create(t);
      }, r.encode = function (t, e) {
        return this.$type.encode(t, e);
      }, r.encodeDelimited = function (t, e) {
        return this.$type.encodeDelimited(t, e);
      }, r.decode = function (t) {
        return this.$type.decode(t);
      }, r.decodeDelimited = function (t) {
        return this.$type.decodeDelimited(t);
      }, r.verify = function (t) {
        return this.$type.verify(t);
      }, r.fromObject = function (t) {
        return this.$type.fromObject(t);
      }, r.toObject = function (t, e) {
        return this.$type.toObject(t, e);
      }, r.prototype.toJSON = function () {
        return this.$type.toObject(this, n.toJSONOptions);
      };
    }, { 39: 39 }], 22: [function (t, r) {
      function n(t, r, n, s, a, u, f) {
        if (o.isObject(a) ? (f = a, a = u = e) : o.isObject(u) && (f = u, u = e), r !== e && !o.isString(r)) throw TypeError("type must be a string");if (!o.isString(n)) throw TypeError("requestType must be a string");if (!o.isString(s)) throw TypeError("responseType must be a string");i.call(this, t, f), this.type = r || "rpc", this.requestType = n, this.requestStream = !!a || e, this.responseType = s, this.responseStream = !!u || e, this.resolvedRequestType = null, this.resolvedResponseType = null;
      }r.exports = n;var i = t(24);((n.prototype = (0, _create2.default)(i.prototype)).constructor = n).className = "Method";var o = t(37);n.fromJSON = function (t, e) {
        return new n(t, e.type, e.requestType, e.responseType, e.requestStream, e.responseStream, e.options);
      }, n.prototype.toJSON = function () {
        return o.toObject(["type", "rpc" !== this.type && this.type || e, "requestType", this.requestType, "requestStream", this.requestStream, "responseType", this.responseType, "responseStream", this.responseStream, "options", this.options]);
      }, n.prototype.resolve = function () {
        return this.resolved ? this : (this.resolvedRequestType = this.parent.lookupType(this.requestType), this.resolvedResponseType = this.parent.lookupType(this.responseType), i.prototype.resolve.call(this));
      };
    }, { 24: 24, 37: 37 }], 23: [function (t, r) {
      function n(t) {
        if (!t || !t.length) return e;for (var r = {}, n = 0; n < t.length; ++n) {
          r[t[n].name] = t[n].toJSON();
        }return r;
      }function i(t, r) {
        s.call(this, t, r), this.nested = e, this.f = null;
      }function o(t) {
        return t.f = null, t;
      }r.exports = i;var s = t(24);((i.prototype = (0, _create2.default)(s.prototype)).constructor = i).className = "Namespace";var a,
          u,
          f = t(15),
          l = t(16),
          p = t(37);i.fromJSON = function (t, e) {
        return new i(t, e.options).addJSON(e.nested);
      }, i.arrayToJSON = n, Object.defineProperty(i.prototype, "nestedArray", { get: function get() {
          return this.f || (this.f = p.toArray(this.nested));
        } }), i.prototype.toJSON = function () {
        return p.toObject(["options", this.options, "nested", n(this.nestedArray)]);
      }, i.prototype.addJSON = function (t) {
        var r = this;if (t) for (var n, o = (0, _keys2.default)(t), s = 0; s < o.length; ++s) {
          n = t[o[s]], r.add((n.fields !== e ? a.fromJSON : n.values !== e ? f.fromJSON : n.methods !== e ? u.fromJSON : n.id !== e ? l.fromJSON : i.fromJSON)(o[s], n));
        }return this;
      }, i.prototype.get = function (t) {
        return this.nested && this.nested[t] || null;
      }, i.prototype.getEnum = function (t) {
        if (this.nested && this.nested[t] instanceof f) return this.nested[t].values;throw Error("no such enum");
      }, i.prototype.add = function (t) {
        if (!(t instanceof l && t.extend !== e || t instanceof a || t instanceof f || t instanceof u || t instanceof i)) throw TypeError("object must be a valid nested object");if (this.nested) {
          var r = this.get(t.name);if (r) {
            if (!(r instanceof i && t instanceof i) || r instanceof a || r instanceof u) throw Error("duplicate name '" + t.name + "' in " + this);for (var n = r.nestedArray, s = 0; s < n.length; ++s) {
              t.add(n[s]);
            }this.remove(r), this.nested || (this.nested = {}), t.setOptions(r.options, !0);
          }
        } else this.nested = {};return this.nested[t.name] = t, t.onAdd(this), o(this);
      }, i.prototype.remove = function (t) {
        if (!(t instanceof s)) throw TypeError("object must be a ReflectionObject");if (t.parent !== this) throw Error(t + " is not a member of " + this);return delete this.nested[t.name], (0, _keys2.default)(this.nested).length || (this.nested = e), t.onRemove(this), o(this);
      }, i.prototype.define = function (t, e) {
        if (p.isString(t)) t = t.split(".");else if (!Array.isArray(t)) throw TypeError("illegal path");if (t && t.length && "" === t[0]) throw Error("path must be relative");for (var r = this; t.length > 0;) {
          var n = t.shift();if (r.nested && r.nested[n]) {
            if (!((r = r.nested[n]) instanceof i)) throw Error("path conflicts with non-namespace objects");
          } else r.add(r = new i(n));
        }return e && r.addJSON(e), r;
      }, i.prototype.resolveAll = function () {
        for (var t = this.nestedArray, e = 0; e < t.length;) {
          t[e] instanceof i ? t[e++].resolveAll() : t[e++].resolve();
        }return this.resolve();
      }, i.prototype.lookup = function (t, r, n) {
        if ("boolean" == typeof r ? (n = r, r = e) : r && !Array.isArray(r) && (r = [r]), p.isString(t) && t.length) {
          if ("." === t) return this.root;t = t.split(".");
        } else if (!t.length) return this;if ("" === t[0]) return this.root.lookup(t.slice(1), r);var o = this.get(t[0]);if (o) {
          if (1 === t.length) {
            if (!r || r.indexOf(o.constructor) > -1) return o;
          } else if (o instanceof i && (o = o.lookup(t.slice(1), r, !0))) return o;
        } else for (var s = 0; s < this.nestedArray.length; ++s) {
          if (this.f[s] instanceof i && (o = this.f[s].lookup(t, r, !0))) return o;
        }return null === this.parent || n ? null : this.parent.lookup(t, r);
      }, i.prototype.lookupType = function (t) {
        var e = this.lookup(t, [a]);if (!e) throw Error("no such type");return e;
      }, i.prototype.lookupEnum = function (t) {
        var e = this.lookup(t, [f]);if (!e) throw Error("no such Enum '" + t + "' in " + this);return e;
      }, i.prototype.lookupTypeOrEnum = function (t) {
        var e = this.lookup(t, [a, f]);if (!e) throw Error("no such Type or Enum '" + t + "' in " + this);return e;
      }, i.prototype.lookupService = function (t) {
        var e = this.lookup(t, [u]);if (!e) throw Error("no such Service '" + t + "' in " + this);return e;
      }, i.e = function (t, e) {
        a = t, u = e;
      };
    }, { 15: 15, 16: 16, 24: 24, 37: 37 }], 24: [function (t, r) {
      function n(t, e) {
        if (!o.isString(t)) throw TypeError("name must be a string");if (e && !o.isObject(e)) throw TypeError("options must be an object");this.options = e, this.name = t, this.parent = null, this.resolved = !1, this.comment = null, this.filename = null;
      }r.exports = n, n.className = "ReflectionObject";var i,
          o = t(37);(0, _defineProperties2.default)(n.prototype, { root: { get: function get() {
            for (var t = this; null !== t.parent;) {
              t = t.parent;
            }return t;
          } }, fullName: { get: function get() {
            for (var t = [this.name], e = this.parent; e;) {
              t.unshift(e.name), e = e.parent;
            }return t.join(".");
          } } }), n.prototype.toJSON = function () {
        throw Error();
      }, n.prototype.onAdd = function (t) {
        this.parent && this.parent !== t && this.parent.remove(this), this.parent = t, this.resolved = !1;var e = t.root;e instanceof i && e.g(this);
      }, n.prototype.onRemove = function (t) {
        var e = t.root;e instanceof i && e.h(this), this.parent = null, this.resolved = !1;
      }, n.prototype.resolve = function () {
        return this.resolved ? this : (this.root instanceof i && (this.resolved = !0), this);
      }, n.prototype.getOption = function (t) {
        return this.options ? this.options[t] : e;
      }, n.prototype.setOption = function (t, r, n) {
        return n && this.options && this.options[t] !== e || ((this.options || (this.options = {}))[t] = r), this;
      }, n.prototype.setOptions = function (t, e) {
        if (t) for (var r = (0, _keys2.default)(t), n = 0; n < r.length; ++n) {
          this.setOption(r[n], t[r[n]], e);
        }return this;
      }, n.prototype.toString = function () {
        var t = this.constructor.className,
            e = this.fullName;return e.length ? t + " " + e : t;
      }, n.e = function (t) {
        i = t;
      };
    }, { 37: 37 }], 25: [function (t, r) {
      function n(t, r, n) {
        if (Array.isArray(r) || (n = r, r = e), o.call(this, t, n), r !== e && !Array.isArray(r)) throw TypeError("fieldNames must be an Array");this.oneof = r || [], this.fieldsArray = [];
      }function i(t) {
        if (t.parent) for (var e = 0; e < t.fieldsArray.length; ++e) {
          t.fieldsArray[e].parent || t.parent.add(t.fieldsArray[e]);
        }
      }r.exports = n;var o = t(24);((n.prototype = (0, _create2.default)(o.prototype)).constructor = n).className = "OneOf";var s = t(16),
          a = t(37);n.fromJSON = function (t, e) {
        return new n(t, e.oneof, e.options);
      }, n.prototype.toJSON = function () {
        return a.toObject(["options", this.options, "oneof", this.oneof]);
      }, n.prototype.add = function (t) {
        if (!(t instanceof s)) throw TypeError("field must be a Field");return t.parent && t.parent !== this.parent && t.parent.remove(t), this.oneof.push(t.name), this.fieldsArray.push(t), t.partOf = this, i(this), this;
      }, n.prototype.remove = function (t) {
        if (!(t instanceof s)) throw TypeError("field must be a Field");var e = this.fieldsArray.indexOf(t);if (e < 0) throw Error(t + " is not a member of " + this);return this.fieldsArray.splice(e, 1), e = this.oneof.indexOf(t.name), e > -1 && this.oneof.splice(e, 1), t.partOf = null, this;
      }, n.prototype.onAdd = function (t) {
        o.prototype.onAdd.call(this, t);for (var e = this, r = 0; r < this.oneof.length; ++r) {
          var n = t.get(this.oneof[r]);n && !n.partOf && (n.partOf = e, e.fieldsArray.push(n));
        }i(this);
      }, n.prototype.onRemove = function (t) {
        for (var e, r = 0; r < this.fieldsArray.length; ++r) {
          (e = this.fieldsArray[r]).parent && e.parent.remove(e);
        }o.prototype.onRemove.call(this, t);
      }, n.d = function () {
        for (var t = Array(arguments.length), e = 0; e < arguments.length;) {
          t[e] = arguments[e++];
        }return function (e, r) {
          a.decorateType(e.constructor).add(new n(r, t)), (0, _defineProperty2.default)(e, r, { get: a.oneOfGetter(t), set: a.oneOfSetter(t) });
        };
      };
    }, { 16: 16, 24: 24, 37: 37 }], 26: [function (t, r) {
      function n(t, r, A) {
        function S(t, e, r) {
          var i = n.filename;return r || (n.filename = null), Error("illegal " + (e || "token") + " '" + t + "' (" + (i ? i + ", " : "") + "line " + Y.line + ")");
        }function T() {
          var t,
              e = [];do {
            if ('"' !== (t = tt()) && "'" !== t) throw S(t);e.push(tt()), nt(t), t = rt();
          } while ('"' === t || "'" === t);return e.join("");
        }function E(t) {
          var e = tt();switch (e) {case "'":case '"':
              return et(e), T();case "true":case "TRUE":
              return !0;case "false":case "FALSE":
              return !1;}try {
            return F(e, !0);
          } catch (r) {
            if (t && j.test(e)) return e;throw S(e, "value");
          }
        }function N(t, e) {
          var r, n;do {
            !e || '"' !== (r = rt()) && "'" !== r ? t.push([n = L(tt()), nt("to", !0) ? L(tt()) : n]) : t.push(T());
          } while (nt(",", !0));nt(";");
        }function F(t, e) {
          var r = 1;switch ("-" === t.charAt(0) && (r = -1, t = t.substring(1)), t) {case "inf":case "INF":case "Inf":
              return r * (1 / 0);case "nan":case "NAN":case "Nan":case "NaN":
              return NaN;case "0":
              return 0;}if (y.test(t)) return r * parseInt(t, 10);if (m.test(t)) return r * parseInt(t, 16);if (b.test(t)) return r * parseInt(t, 8);if (O.test(t)) return r * parseFloat(t);throw S(t, "number", e);
        }function L(t, e) {
          switch (t) {case "max":case "MAX":case "Max":
              return 536870911;case "0":
              return 0;}if (!e && "-" === t.charAt(0)) throw S(t, "id");if (v.test(t)) return parseInt(t, 10);if (g.test(t)) return parseInt(t, 16);if (w.test(t)) return parseInt(t, 8);throw S(t, "id");
        }function I(t, e) {
          switch (e) {case "option":
              return z(t, e), nt(";"), !0;case "message":
              return J(t, e), !0;case "enum":
              return V(t, e), !0;case "service":
              return H(t, e), !0;case "extend":
              return Z(t, e), !0;}return !1;
        }function B(t, e, r) {
          var i = Y.line;if (t && (t.comment = it(), t.filename = n.filename), nt("{", !0)) {
            for (var o; "}" !== (o = tt());) {
              e(o);
            }nt(";", !0);
          } else r && r(), nt(";"), t && "string" != typeof t.comment && (t.comment = it(i));
        }function J(t, e) {
          if (!k.test(e = tt())) throw S(e, "type name");var r = new s(e);B(r, function (t) {
            if (!I(r, t)) switch (t) {case "map":
                $(r);break;case "required":case "optional":case "repeated":
                R(r, t);break;case "oneof":
                P(r, t);break;case "extensions":
                N(r.extensions || (r.extensions = []));break;case "reserved":
                N(r.reserved || (r.reserved = []), !0);break;default:
                if (!st || !j.test(t)) throw S(t);et(t), R(r, "optional");}
          }), t.add(r);
        }function R(t, r, n) {
          var i = tt();if ("group" === i) return void D(t, r);if (!j.test(i)) throw S(i, "type");var o = tt();if (!k.test(o)) throw S(o, "name");o = ut(o), nt("=");var s = new a(o, L(tt()), i, r, n);B(s, function (t) {
            if ("option" !== t) throw S(t);z(s, t), nt(";");
          }, function () {
            U(s);
          }), t.add(s), st || !s.repeated || h.packed[i] === e && h.basic[i] !== e || s.setOption("packed", !1, !0);
        }function D(t, e) {
          var r = tt();if (!k.test(r)) throw S(r, "name");var i = d.lcFirst(r);r === i && (r = d.ucFirst(r)), nt("=");var o = L(tt()),
              u = new s(r);u.group = !0;var f = new a(i, o, r, e);f.filename = n.filename, B(u, function (t) {
            switch (t) {case "option":
                z(u, t), nt(";");break;case "required":case "optional":case "repeated":
                R(u, t);break;default:
                throw S(t);}
          }), t.add(u).add(f);
        }function $(t) {
          nt("<");var r = tt();if (h.mapKey[r] === e) throw S(r, "type");nt(",");var n = tt();if (!j.test(n)) throw S(n, "type");nt(">");var i = tt();if (!k.test(i)) throw S(i, "name");nt("=");var o = new u(ut(i), L(tt()), r, n);B(o, function (t) {
            if ("option" !== t) throw S(t);z(o, t), nt(";");
          }, function () {
            U(o);
          }), t.add(o);
        }function P(t, e) {
          if (!k.test(e = tt())) throw S(e, "name");var r = new f(ut(e));B(r, function (t) {
            "option" === t ? (z(r, t), nt(";")) : (et(t), R(r, "optional"));
          }), t.add(r);
        }function V(t, e) {
          if (!k.test(e = tt())) throw S(e, "name");var r = new l(e);B(r, function (t) {
            "option" === t ? (z(r, t), nt(";")) : q(r, t);
          }), t.add(r);
        }function q(t, e) {
          if (!k.test(e)) throw S(e, "name");nt("=");var r = L(tt(), !0),
              n = {};B(n, function (t) {
            if ("option" !== t) throw S(t);z(n, t), nt(";");
          }, function () {
            U(n);
          }), t.add(e, r, n.comment);
        }function z(t, e) {
          var r = nt("(", !0);if (!j.test(e = tt())) throw S(e, "name");var n = e;r && (nt(")"), n = "(" + n + ")", e = rt(), x.test(e) && (n += e, tt())), nt("="), C(t, n);
        }function C(t, e) {
          if (nt("{", !0)) do {
            if (!k.test(Q = tt())) throw S(Q, "name");"{" === rt() ? C(t, e + "." + Q) : (nt(":"), M(t, e + "." + Q, E(!0)));
          } while (!nt("}", !0));else M(t, e, E(!0));
        }function M(t, e, r) {
          t.setOption && t.setOption(e, r);
        }function U(t) {
          if (nt("[", !0)) {
            do {
              z(t, "option");
            } while (nt(",", !0));nt("]");
          }return t;
        }function H(t, e) {
          if (!k.test(e = tt())) throw S(e, "service name");var r = new p(e);B(r, function (t) {
            if (!I(r, t)) {
              if ("rpc" !== t) throw S(t);_(r, t);
            }
          }), t.add(r);
        }function _(t, e) {
          var r = e;if (!k.test(e = tt())) throw S(e, "name");var n,
              i,
              o,
              s,
              a = e;if (nt("("), nt("stream", !0) && (i = !0), !j.test(e = tt())) throw S(e);if (n = e, nt(")"), nt("returns"), nt("("), nt("stream", !0) && (s = !0), !j.test(e = tt())) throw S(e);o = e, nt(")");var u = new c(a, r, n, o, i, s);B(u, function (t) {
            if ("option" !== t) throw S(t);z(u, t), nt(";");
          }), t.add(u);
        }function Z(t, e) {
          if (!j.test(e = tt())) throw S(e, "reference");var r = e;B(null, function (e) {
            switch (e) {case "required":case "repeated":case "optional":
                R(t, e, r);break;default:
                if (!st || !j.test(e)) throw S(e);et(e), R(t, "optional", r);}
          });
        }r instanceof o || (A = r, r = new o()), A || (A = n.defaults);for (var W, K, G, X, Q, Y = i(t), tt = Y.next, et = Y.push, rt = Y.peek, nt = Y.skip, it = Y.cmnt, ot = !0, st = !1, at = r, ut = A.keepCase ? function (t) {
          return t;
        } : d.camelCase; null !== (Q = tt());) {
          switch (Q) {case "package":
              if (!ot) throw S(Q);!function () {
                if (W !== e) throw S("package");if (W = tt(), !j.test(W)) throw S(W, "name");at = at.define(W), nt(";");
              }();break;case "import":
              if (!ot) throw S(Q);!function () {
                var t,
                    e = rt();switch (e) {case "weak":
                    t = G || (G = []), tt();break;case "public":
                    tt();default:
                    t = K || (K = []);}e = T(), nt(";"), t.push(e);
              }();break;case "syntax":
              if (!ot) throw S(Q);!function () {
                if (nt("="), X = T(), !(st = "proto3" === X) && "proto2" !== X) throw S(X, "syntax");nt(";");
              }();break;case "option":
              if (!ot) throw S(Q);z(at, Q), nt(";");break;default:
              if (I(at, Q)) {
                ot = !1;continue;
              }throw S(Q);}
        }return n.filename = null, { package: W, imports: K, weakImports: G, syntax: X, root: r };
      }r.exports = n, n.filename = null, n.defaults = { keepCase: !1 };var i = t(34),
          o = t(29),
          s = t(35),
          a = t(16),
          u = t(20),
          f = t(25),
          l = t(15),
          p = t(33),
          c = t(22),
          h = t(36),
          d = t(37),
          y = /^[1-9][0-9]*$/,
          v = /^-?[1-9][0-9]*$/,
          m = /^0[x][0-9a-fA-F]+$/,
          g = /^-?0[x][0-9a-fA-F]+$/,
          b = /^0[0-7]+$/,
          w = /^-?0[0-7]+$/,
          O = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,
          k = /^[a-zA-Z_][a-zA-Z_0-9]*$/,
          j = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,
          x = /^(?:\.[a-zA-Z][a-zA-Z_0-9]*)+$/;
    }, { 15: 15, 16: 16, 20: 20, 22: 22, 25: 25, 29: 29, 33: 33, 34: 34, 35: 35, 36: 36, 37: 37 }], 27: [function (t, e) {
      function r(t, e) {
        return RangeError("index out of range: " + t.pos + " + " + (e || 1) + " > " + t.len);
      }function n(t) {
        this.buf = t, this.pos = 0, this.len = t.length;
      }function i() {
        var t = new f(0, 0),
            e = 0;if (!(this.len - this.pos > 4)) {
          for (; e < 3; ++e) {
            if (this.pos >= this.len) throw r(this);if (t.lo = (t.lo | (127 & this.buf[this.pos]) << 7 * e) >>> 0, this.buf[this.pos++] < 128) return t;
          }return t.lo = (t.lo | (127 & this.buf[this.pos++]) << 7 * e) >>> 0, t;
        }for (; e < 4; ++e) {
          if (t.lo = (t.lo | (127 & this.buf[this.pos]) << 7 * e) >>> 0, this.buf[this.pos++] < 128) return t;
        }if (t.lo = (t.lo | (127 & this.buf[this.pos]) << 28) >>> 0, t.hi = (t.hi | (127 & this.buf[this.pos]) >> 4) >>> 0, this.buf[this.pos++] < 128) return t;if (e = 0, this.len - this.pos > 4) {
          for (; e < 5; ++e) {
            if (t.hi = (t.hi | (127 & this.buf[this.pos]) << 7 * e + 3) >>> 0, this.buf[this.pos++] < 128) return t;
          }
        } else for (; e < 5; ++e) {
          if (this.pos >= this.len) throw r(this);if (t.hi = (t.hi | (127 & this.buf[this.pos]) << 7 * e + 3) >>> 0, this.buf[this.pos++] < 128) return t;
        }throw Error("invalid varint encoding");
      }function o(t, e) {
        return (t[e - 4] | t[e - 3] << 8 | t[e - 2] << 16 | t[e - 1] << 24) >>> 0;
      }function s() {
        if (this.pos + 8 > this.len) throw r(this, 8);return new f(o(this.buf, this.pos += 4), o(this.buf, this.pos += 4));
      }e.exports = n;var a,
          u = t(39),
          f = u.LongBits,
          l = u.utf8,
          p = "undefined" != typeof Uint8Array ? function (t) {
        if (t instanceof Uint8Array || Array.isArray(t)) return new n(t);throw Error("illegal buffer");
      } : function (t) {
        if (Array.isArray(t)) return new n(t);throw Error("illegal buffer");
      };n.create = u.Buffer ? function (t) {
        return (n.create = function (t) {
          return u.Buffer.isBuffer(t) ? new a(t) : p(t);
        })(t);
      } : p, n.prototype.i = u.Array.prototype.subarray || u.Array.prototype.slice, n.prototype.uint32 = function () {
        var t = 4294967295;return function () {
          if (t = (127 & this.buf[this.pos]) >>> 0, this.buf[this.pos++] < 128) return t;if (t = (t | (127 & this.buf[this.pos]) << 7) >>> 0, this.buf[this.pos++] < 128) return t;if (t = (t | (127 & this.buf[this.pos]) << 14) >>> 0, this.buf[this.pos++] < 128) return t;if (t = (t | (127 & this.buf[this.pos]) << 21) >>> 0, this.buf[this.pos++] < 128) return t;if (t = (t | (15 & this.buf[this.pos]) << 28) >>> 0, this.buf[this.pos++] < 128) return t;if ((this.pos += 5) > this.len) throw this.pos = this.len, r(this, 10);return t;
        };
      }(), n.prototype.int32 = function () {
        return 0 | this.uint32();
      }, n.prototype.sint32 = function () {
        var t = this.uint32();return t >>> 1 ^ -(1 & t) | 0;
      }, n.prototype.bool = function () {
        return 0 !== this.uint32();
      }, n.prototype.fixed32 = function () {
        if (this.pos + 4 > this.len) throw r(this, 4);return o(this.buf, this.pos += 4);
      }, n.prototype.sfixed32 = function () {
        if (this.pos + 4 > this.len) throw r(this, 4);return 0 | o(this.buf, this.pos += 4);
      }, n.prototype.float = function () {
        if (this.pos + 4 > this.len) throw r(this, 4);var t = u.float.readFloatLE(this.buf, this.pos);return this.pos += 4, t;
      }, n.prototype.double = function () {
        if (this.pos + 8 > this.len) throw r(this, 4);var t = u.float.readDoubleLE(this.buf, this.pos);return this.pos += 8, t;
      }, n.prototype.bytes = function () {
        var t = this.uint32(),
            e = this.pos,
            n = this.pos + t;if (n > this.len) throw r(this, t);return this.pos += t, Array.isArray(this.buf) ? this.buf.slice(e, n) : e === n ? new this.buf.constructor(0) : this.i.call(this.buf, e, n);
      }, n.prototype.string = function () {
        var t = this.bytes();return l.read(t, 0, t.length);
      }, n.prototype.skip = function (t) {
        if ("number" == typeof t) {
          if (this.pos + t > this.len) throw r(this, t);this.pos += t;
        } else do {
          if (this.pos >= this.len) throw r(this);
        } while (128 & this.buf[this.pos++]);return this;
      }, n.prototype.skipType = function (t) {
        switch (t) {case 0:
            this.skip();break;case 1:
            this.skip(8);break;case 2:
            this.skip(this.uint32());break;case 3:
            for (;;) {
              if (4 == (t = 7 & this.uint32())) break;this.skipType(t);
            }break;case 5:
            this.skip(4);break;default:
            throw Error("invalid wire type " + t + " at offset " + this.pos);}return this;
      }, n.e = function (t) {
        a = t;var e = u.Long ? "toLong" : "toNumber";u.merge(n.prototype, { int64: function int64() {
            return i.call(this)[e](!1);
          }, uint64: function uint64() {
            return i.call(this)[e](!0);
          }, sint64: function sint64() {
            return i.call(this).zzDecode()[e](!1);
          }, fixed64: function fixed64() {
            return s.call(this)[e](!0);
          }, sfixed64: function sfixed64() {
            return s.call(this)[e](!1);
          } });
      };
    }, { 39: 39 }], 28: [function (t, e) {
      function r(t) {
        n.call(this, t);
      }e.exports = r;var n = t(27);(r.prototype = (0, _create2.default)(n.prototype)).constructor = r;var i = t(39);i.Buffer && (r.prototype.i = i.Buffer.prototype.slice), r.prototype.string = function () {
        var t = this.uint32();return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + t, this.len));
      };
    }, { 27: 27, 39: 39 }], 29: [function (t, r) {
      function n(t) {
        s.call(this, "", t), this.deferred = [], this.files = [];
      }function i() {}function o(t, r) {
        var n = r.parent.lookup(r.extend);if (n) {
          var i = new l(r.fullName, r.id, r.type, r.rule, e, r.options);return i.declaringField = r, r.extensionField = i, n.add(i), !0;
        }return !1;
      }r.exports = n;var s = t(23);((n.prototype = (0, _create2.default)(s.prototype)).constructor = n).className = "Root";var a,
          u,
          f,
          l = t(16),
          p = t(15),
          c = t(25),
          h = t(37);n.fromJSON = function (t, e) {
        return e || (e = new n()), t.options && e.setOptions(t.options), e.addJSON(t.nested);
      }, n.prototype.resolvePath = h.path.resolve, n.prototype.load = function t(r, n, o) {
        function s(t, e) {
          if (o) {
            var r = o;if (o = null, c) throw t;r(t, e);
          }
        }function a(t, e) {
          try {
            if (h.isString(e) && "{" === e.charAt(0) && (e = JSON.parse(e)), h.isString(e)) {
              u.filename = t;var r,
                  i = u(e, p, n),
                  o = 0;if (i.imports) for (; o < i.imports.length; ++o) {
                (r = p.resolvePath(t, i.imports[o])) && l(r);
              }if (i.weakImports) for (o = 0; o < i.weakImports.length; ++o) {
                (r = p.resolvePath(t, i.weakImports[o])) && l(r, !0);
              }
            } else p.setOptions(e.options).addJSON(e.nested);
          } catch (t) {
            s(t);
          }c || d || s(null, p);
        }function l(t, e) {
          var r = t.lastIndexOf("google/protobuf/");if (r > -1) {
            var n = t.substring(r);n in f && (t = n);
          }if (!(p.files.indexOf(t) > -1)) {
            if (p.files.push(t), t in f) return void (c ? a(t, f[t]) : (++d, setTimeout(function () {
              --d, a(t, f[t]);
            })));if (c) {
              var i;try {
                i = h.fs.readFileSync(t).toString("utf8");
              } catch (t) {
                return void (e || s(t));
              }a(t, i);
            } else ++d, h.fetch(t, function (r, n) {
              if (--d, o) return r ? void (e ? d || s(null, p) : s(r)) : void a(t, n);
            });
          }
        }"function" == typeof n && (o = n, n = e);var p = this;if (!o) return h.asPromise(t, p, r, n);var c = o === i,
            d = 0;h.isString(r) && (r = [r]);for (var y, v = 0; v < r.length; ++v) {
          (y = p.resolvePath("", r[v])) && l(y);
        }return c ? p : (d || s(null, p), e);
      }, n.prototype.loadSync = function (t, e) {
        if (!h.isNode) throw Error("not supported");return this.load(t, e, i);
      }, n.prototype.resolveAll = function () {
        if (this.deferred.length) throw Error("unresolvable extensions: " + this.deferred.map(function (t) {
          return "'extend " + t.extend + "' in " + t.parent.fullName;
        }).join(", "));return s.prototype.resolveAll.call(this);
      };var d = /^[A-Z]/;n.prototype.g = function (t) {
        if (t instanceof l) t.extend === e || t.extensionField || o(this, t) || this.deferred.push(t);else if (t instanceof p) d.test(t.name) && (t.parent[t.name] = t.values);else if (!(t instanceof c)) {
          if (t instanceof a) for (var r = 0; r < this.deferred.length;) {
            o(this, this.deferred[r]) ? this.deferred.splice(r, 1) : ++r;
          }for (var n = 0; n < t.nestedArray.length; ++n) {
            this.g(t.f[n]);
          }d.test(t.name) && (t.parent[t.name] = t);
        }
      }, n.prototype.h = function (t) {
        if (t instanceof l) {
          if (t.extend !== e) if (t.extensionField) t.extensionField.parent.remove(t.extensionField), t.extensionField = null;else {
            var r = this.deferred.indexOf(t);r > -1 && this.deferred.splice(r, 1);
          }
        } else if (t instanceof p) d.test(t.name) && delete t.parent[t.name];else if (t instanceof s) {
          for (var n = 0; n < t.nestedArray.length; ++n) {
            this.h(t.f[n]);
          }d.test(t.name) && delete t.parent[t.name];
        }
      }, n.e = function (t, e, r) {
        a = t, u = e, f = r;
      };
    }, { 15: 15, 16: 16, 23: 23, 25: 25, 37: 37 }], 30: [function (t, e) {
      e.exports = {};
    }, {}], 31: [function (t, e, r) {
      r.Service = t(32);
    }, { 32: 32 }], 32: [function (t, r) {
      function n(t, e, r) {
        if ("function" != typeof t) throw TypeError("rpcImpl must be a function");i.EventEmitter.call(this), this.rpcImpl = t, this.requestDelimited = !!e, this.responseDelimited = !!r;
      }r.exports = n;var i = t(39);(n.prototype = (0, _create2.default)(i.EventEmitter.prototype)).constructor = n, n.prototype.rpcCall = function t(r, n, o, s, a) {
        if (!s) throw TypeError("request must be specified");var u = this;if (!a) return i.asPromise(t, u, r, n, o, s);if (!u.rpcImpl) return setTimeout(function () {
          a(Error("already ended"));
        }, 0), e;try {
          return u.rpcImpl(r, n[u.requestDelimited ? "encodeDelimited" : "encode"](s).finish(), function (t, n) {
            if (t) return u.emit("error", t, r), a(t);if (null === n) return u.end(!0), e;if (!(n instanceof o)) try {
              n = o[u.responseDelimited ? "decodeDelimited" : "decode"](n);
            } catch (t) {
              return u.emit("error", t, r), a(t);
            }return u.emit("data", n, r), a(null, n);
          });
        } catch (t) {
          return u.emit("error", t, r), setTimeout(function () {
            a(t);
          }, 0), e;
        }
      }, n.prototype.end = function (t) {
        return this.rpcImpl && (t || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit("end").off()), this;
      };
    }, { 39: 39 }], 33: [function (t, r) {
      function n(t, e) {
        o.call(this, t, e), this.methods = {}, this.j = null;
      }function i(t) {
        return t.j = null, t;
      }r.exports = n;var o = t(23);((n.prototype = (0, _create2.default)(o.prototype)).constructor = n).className = "Service";var s = t(22),
          a = t(37),
          u = t(31);n.fromJSON = function (t, e) {
        var r = new n(t, e.options);if (e.methods) for (var i = (0, _keys2.default)(e.methods), o = 0; o < i.length; ++o) {
          r.add(s.fromJSON(i[o], e.methods[i[o]]));
        }return e.nested && r.addJSON(e.nested), r;
      }, n.prototype.toJSON = function () {
        var t = o.prototype.toJSON.call(this);return a.toObject(["options", t && t.options || e, "methods", o.arrayToJSON(this.methodsArray) || {}, "nested", t && t.nested || e]);
      }, Object.defineProperty(n.prototype, "methodsArray", { get: function get() {
          return this.j || (this.j = a.toArray(this.methods));
        } }), n.prototype.get = function (t) {
        return this.methods[t] || o.prototype.get.call(this, t);
      }, n.prototype.resolveAll = function () {
        for (var t = this.methodsArray, e = 0; e < t.length; ++e) {
          t[e].resolve();
        }return o.prototype.resolve.call(this);
      }, n.prototype.add = function (t) {
        if (this.get(t.name)) throw Error("duplicate name '" + t.name + "' in " + this);return t instanceof s ? (this.methods[t.name] = t, t.parent = this, i(this)) : o.prototype.add.call(this, t);
      }, n.prototype.remove = function (t) {
        if (t instanceof s) {
          if (this.methods[t.name] !== t) throw Error(t + " is not a member of " + this);return delete this.methods[t.name], t.parent = null, i(this);
        }return o.prototype.remove.call(this, t);
      }, n.prototype.create = function (t, e, r) {
        for (var n, i = new u.Service(t, e, r), o = 0; o < this.methodsArray.length; ++o) {
          i[a.lcFirst((n = this.j[o]).resolve().name)] = a.codegen(["r", "c"], a.lcFirst(n.name))("return this.rpcCall(m,q,s,r,c)")({ m: n, q: n.resolvedRequestType.ctor, s: n.resolvedResponseType.ctor });
        }return i;
      };
    }, { 22: 22, 23: 23, 31: 31, 37: 37 }], 34: [function (t, r) {
      function n(t) {
        return t.replace(p, function (t, e) {
          switch (e) {case "\\":case "":
              return e;default:
              return c[e] || "";}
        });
      }function i(t) {
        function r(t) {
          return Error("illegal " + t + " (line " + w + ")");
        }function i() {
          var e = "'" === S ? a : s;e.lastIndex = g - 1;var i = e.exec(t);if (!i) throw r("string");return g = e.lastIndex, d(S), S = null, n(i[1]);
        }function p(e) {
          return t.charAt(e);
        }function c(e, r) {
          O = t.charAt(e++), j = w, x = !1;var n,
              i = e - 3;do {
            if (--i < 0 || "\n" === (n = t.charAt(i))) {
              x = !0;break;
            }
          } while (" " === n || "\t" === n);for (var o = t.substring(e, r).split(f), s = 0; s < o.length; ++s) {
            o[s] = o[s].replace(u, "").trim();
          }k = o.join("\n").trim();
        }function h() {
          if (A.length > 0) return A.shift();if (S) return i();var e, n, s, a, u;do {
            if (g === b) return null;for (e = !1; l.test(s = p(g));) {
              if ("\n" === s && ++w, ++g === b) return null;
            }if ("/" === p(g)) {
              if (++g === b) throw r("comment");if ("/" === p(g)) {
                for (u = "/" === p(a = g + 1); "\n" !== p(++g);) {
                  if (g === b) return null;
                }++g, u && c(a, g - 1), ++w, e = !0;
              } else {
                if ("*" !== (s = p(g))) return "/";u = "*" === p(a = g + 1);do {
                  if ("\n" === s && ++w, ++g === b) throw r("comment");n = s, s = p(g);
                } while ("*" !== n || "/" !== s);++g, u && c(a, g - 2), e = !0;
              }
            }
          } while (e);var f = g;if (o.lastIndex = 0, !o.test(p(f++))) for (; f < b && !o.test(p(f));) {
            ++f;
          }var h = t.substring(g, g = f);return '"' !== h && "'" !== h || (S = h), h;
        }function d(t) {
          A.push(t);
        }function y() {
          if (!A.length) {
            var t = h();if (null === t) return null;d(t);
          }return A[0];
        }function v(t, e) {
          var n = y();if (n === t) return h(), !0;if (!e) throw r("token '" + n + "', '" + t + "' expected");return !1;
        }function m(t) {
          var r = null;return t === e ? j !== w - 1 || "*" !== O && !x || (r = k) : (j < t && y(), j !== t || x || "/" !== O || (r = k)), r;
        }t = "" + t;var g = 0,
            b = t.length,
            w = 1,
            O = null,
            k = null,
            j = 0,
            x = !1,
            A = [],
            S = null;return Object.defineProperty({ next: h, peek: y, push: d, skip: v, cmnt: m }, "line", { get: function get() {
            return w;
          } });
      }r.exports = i;var o = /[\s{}=;:[\],'"()<>]/g,
          s = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
          a = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g,
          u = /^ *[*\/]+ */,
          f = /\n/g,
          l = /\s/,
          p = /\\(.?)/g,
          c = { 0: "\0", r: "\r", n: "\n", t: "\t" };i.unescape = n;
    }, {}], 35: [function (t, r) {
      function n(t, r) {
        o.call(this, t, r), this.fields = {}, this.oneofs = e, this.extensions = e, this.reserved = e, this.group = e, this.k = null, this.b = null, this.l = null, this.o = null;
      }function i(t) {
        return t.k = t.b = t.l = null, delete t.encode, delete t.decode, delete t.verify, t;
      }r.exports = n;var o = t(23);((n.prototype = (0, _create2.default)(o.prototype)).constructor = n).className = "Type";var s = t(15),
          a = t(25),
          u = t(16),
          f = t(20),
          l = t(33),
          p = t(21),
          c = t(27),
          h = t(42),
          d = t(37),
          y = t(14),
          v = t(13),
          m = t(40),
          g = t(12),
          b = t(41);(0, _defineProperties2.default)(n.prototype, { fieldsById: { get: function get() {
            if (this.k) return this.k;this.k = {};for (var t = (0, _keys2.default)(this.fields), e = 0; e < t.length; ++e) {
              var r = this.fields[t[e]],
                  n = r.id;if (this.k[n]) throw Error("duplicate id " + n + " in " + this);this.k[n] = r;
            }return this.k;
          } }, fieldsArray: { get: function get() {
            return this.b || (this.b = d.toArray(this.fields));
          } }, oneofsArray: { get: function get() {
            return this.l || (this.l = d.toArray(this.oneofs));
          } }, ctor: { get: function get() {
            return this.o || (this.ctor = n.generateConstructor(this)());
          }, set: function set(t) {
            var e = t.prototype;e instanceof p || ((t.prototype = new p()).constructor = t, d.merge(t.prototype, e)), t.$type = t.prototype.$type = this, d.merge(t, p, !0), this.o = t;for (var r = 0; r < this.fieldsArray.length; ++r) {
              this.b[r].resolve();
            }var n = {};for (r = 0; r < this.oneofsArray.length; ++r) {
              n[this.l[r].resolve().name] = { get: d.oneOfGetter(this.l[r].oneof), set: d.oneOfSetter(this.l[r].oneof) };
            }r && (0, _defineProperties2.default)(t.prototype, n);
          } } }), n.generateConstructor = function (t) {
        for (var e, r = d.codegen(["p"], t.name), n = 0; n < t.fieldsArray.length; ++n) {
          (e = t.b[n]).map ? r("this%s={}", d.safeProp(e.name)) : e.repeated && r("this%s=[]", d.safeProp(e.name));
        }return r("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]");
      }, n.fromJSON = function (t, r) {
        var i = new n(t, r.options);i.extensions = r.extensions, i.reserved = r.reserved;for (var p = (0, _keys2.default)(r.fields), c = 0; c < p.length; ++c) {
          i.add((e !== r.fields[p[c]].keyType ? f.fromJSON : u.fromJSON)(p[c], r.fields[p[c]]));
        }if (r.oneofs) for (p = (0, _keys2.default)(r.oneofs), c = 0; c < p.length; ++c) {
          i.add(a.fromJSON(p[c], r.oneofs[p[c]]));
        }if (r.nested) for (p = (0, _keys2.default)(r.nested), c = 0; c < p.length; ++c) {
          var h = r.nested[p[c]];i.add((h.id !== e ? u.fromJSON : h.fields !== e ? n.fromJSON : h.values !== e ? s.fromJSON : h.methods !== e ? l.fromJSON : o.fromJSON)(p[c], h));
        }return r.extensions && r.extensions.length && (i.extensions = r.extensions), r.reserved && r.reserved.length && (i.reserved = r.reserved), r.group && (i.group = !0), i;
      }, n.prototype.toJSON = function () {
        var t = o.prototype.toJSON.call(this);return d.toObject(["options", t && t.options || e, "oneofs", o.arrayToJSON(this.oneofsArray), "fields", o.arrayToJSON(this.fieldsArray.filter(function (t) {
          return !t.declaringField;
        })) || {}, "extensions", this.extensions && this.extensions.length ? this.extensions : e, "reserved", this.reserved && this.reserved.length ? this.reserved : e, "group", this.group || e, "nested", t && t.nested || e]);
      }, n.prototype.resolveAll = function () {
        for (var t = this.fieldsArray, e = 0; e < t.length;) {
          t[e++].resolve();
        }var r = this.oneofsArray;for (e = 0; e < r.length;) {
          r[e++].resolve();
        }return o.prototype.resolveAll.call(this);
      }, n.prototype.get = function (t) {
        return this.fields[t] || this.oneofs && this.oneofs[t] || this.nested && this.nested[t] || null;
      }, n.prototype.add = function (t) {
        if (this.get(t.name)) throw Error("duplicate name '" + t.name + "' in " + this);if (t instanceof u && t.extend === e) {
          if (this.k ? this.k[t.id] : this.fieldsById[t.id]) throw Error("duplicate id " + t.id + " in " + this);if (this.isReservedId(t.id)) throw Error("id " + t.id + " is reserved in " + this);if (this.isReservedName(t.name)) throw Error("name '" + t.name + "' is reserved in " + this);return t.parent && t.parent.remove(t), this.fields[t.name] = t, t.message = this, t.onAdd(this), i(this);
        }return t instanceof a ? (this.oneofs || (this.oneofs = {}), this.oneofs[t.name] = t, t.onAdd(this), i(this)) : o.prototype.add.call(this, t);
      }, n.prototype.remove = function (t) {
        if (t instanceof u && t.extend === e) {
          if (!this.fields || this.fields[t.name] !== t) throw Error(t + " is not a member of " + this);return delete this.fields[t.name], t.parent = null, t.onRemove(this), i(this);
        }if (t instanceof a) {
          if (!this.oneofs || this.oneofs[t.name] !== t) throw Error(t + " is not a member of " + this);return delete this.oneofs[t.name], t.parent = null, t.onRemove(this), i(this);
        }return o.prototype.remove.call(this, t);
      }, n.prototype.isReservedId = function (t) {
        if (this.reserved) for (var e = 0; e < this.reserved.length; ++e) {
          if ("string" != typeof this.reserved[e] && this.reserved[e][0] <= t && this.reserved[e][1] >= t) return !0;
        }return !1;
      }, n.prototype.isReservedName = function (t) {
        if (this.reserved) for (var e = 0; e < this.reserved.length; ++e) {
          if (this.reserved[e] === t) return !0;
        }return !1;
      }, n.prototype.create = function (t) {
        return new this.ctor(t);
      }, n.prototype.setup = function () {
        for (var t = this.fullName, e = [], r = 0; r < this.fieldsArray.length; ++r) {
          e.push(this.b[r].resolve().resolvedType);
        }this.encode = y(this)({ Writer: h, types: e, util: d }), this.decode = v(this)({ Reader: c, types: e, util: d }), this.verify = m(this)({ types: e, util: d }), this.fromObject = g.fromObject(this)({ types: e, util: d }), this.toObject = g.toObject(this)({ types: e, util: d });var n = b[t];if (n) {
          var i = (0, _create2.default)(this);i.fromObject = this.fromObject, this.fromObject = n.fromObject.bind(i), i.toObject = this.toObject, this.toObject = n.toObject.bind(i);
        }return this;
      }, n.prototype.encode = function (t, e) {
        return this.setup().encode(t, e);
      }, n.prototype.encodeDelimited = function (t, e) {
        return this.encode(t, e && e.len ? e.fork() : e).ldelim();
      }, n.prototype.decode = function (t, e) {
        return this.setup().decode(t, e);
      }, n.prototype.decodeDelimited = function (t) {
        return t instanceof c || (t = c.create(t)), this.decode(t, t.uint32());
      }, n.prototype.verify = function (t) {
        return this.setup().verify(t);
      }, n.prototype.fromObject = function (t) {
        return this.setup().fromObject(t);
      }, n.prototype.toObject = function (t, e) {
        return this.setup().toObject(t, e);
      }, n.d = function (t) {
        return function (e) {
          d.decorateType(e, t);
        };
      };
    }, { 12: 12, 13: 13, 14: 14, 15: 15, 16: 16, 20: 20, 21: 21, 23: 23, 25: 25, 27: 27, 33: 33, 37: 37, 40: 40, 41: 41, 42: 42 }], 36: [function (t, e, r) {
      function n(t, e) {
        var r = 0,
            n = {};for (e |= 0; r < t.length;) {
          n[s[r + e]] = t[r++];
        }return n;
      }var i = r,
          o = t(37),
          s = ["double", "float", "int32", "uint32", "sint32", "fixed32", "sfixed32", "int64", "uint64", "sint64", "fixed64", "sfixed64", "bool", "string", "bytes"];i.basic = n([1, 5, 0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0, 2, 2]), i.defaults = n([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, !1, "", o.emptyArray, null]), i.long = n([0, 0, 0, 1, 1], 7), i.mapKey = n([0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0, 2], 2), i.packed = n([1, 5, 0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0]);
    }, { 37: 37 }], 37: [function (t, r) {
      var n,
          i,
          o = r.exports = t(39),
          s = t(30);o.codegen = t(3), o.fetch = t(5), o.path = t(8), o.fs = o.inquire("fs"), o.toArray = function (t) {
        if (t) {
          for (var e = (0, _keys2.default)(t), r = Array(e.length), n = 0; n < e.length;) {
            r[n] = t[e[n++]];
          }return r;
        }return [];
      }, o.toObject = function (t) {
        for (var r = {}, n = 0; n < t.length;) {
          var i = t[n++],
              o = t[n++];o !== e && (r[i] = o);
        }return r;
      };var a = /\\/g,
          u = /"/g;o.safeProp = function (t) {
        return '["' + t.replace(a, "\\\\").replace(u, '\\"') + '"]';
      }, o.ucFirst = function (t) {
        return t.charAt(0).toUpperCase() + t.substring(1);
      };var f = /_([a-z])/g;o.camelCase = function (t) {
        return t.substring(0, 1) + t.substring(1).replace(f, function (t, e) {
          return e.toUpperCase();
        });
      }, o.compareFieldsById = function (t, e) {
        return t.id - e.id;
      }, o.decorateType = function (e, r) {
        if (e.$type) return r && e.$type.name !== r && (o.decorateRoot.remove(e.$type), e.$type.name = r, o.decorateRoot.add(e.$type)), e.$type;n || (n = t(35));var i = new n(r || e.name);return o.decorateRoot.add(i), i.ctor = e, Object.defineProperty(e, "$type", { value: i, enumerable: !1 }), Object.defineProperty(e.prototype, "$type", { value: i, enumerable: !1 }), i;
      };var l = 0;o.decorateEnum = function (e) {
        if (e.$type) return e.$type;i || (i = t(15));var r = new i("Enum" + l++, e);return o.decorateRoot.add(r), Object.defineProperty(e, "$type", { value: r, enumerable: !1 }), r;
      }, Object.defineProperty(o, "decorateRoot", { get: function get() {
          return s.decorated || (s.decorated = new (t(29))());
        } });
    }, { 15: 15, 29: 29, 3: 3, 30: 30, 35: 35, 39: 39, 5: 5, 8: 8 }], 38: [function (t, e) {
      function r(t, e) {
        this.lo = t >>> 0, this.hi = e >>> 0;
      }e.exports = r;var n = t(39),
          i = r.zero = new r(0, 0);i.toNumber = function () {
        return 0;
      }, i.zzEncode = i.zzDecode = function () {
        return this;
      }, i.length = function () {
        return 1;
      };var o = r.zeroHash = "\0\0\0\0\0\0\0\0";r.fromNumber = function (t) {
        if (0 === t) return i;var e = t < 0;e && (t = -t);var n = t >>> 0,
            o = (t - n) / 4294967296 >>> 0;return e && (o = ~o >>> 0, n = ~n >>> 0, ++n > 4294967295 && (n = 0, ++o > 4294967295 && (o = 0))), new r(n, o);
      }, r.from = function (t) {
        if ("number" == typeof t) return r.fromNumber(t);if (n.isString(t)) {
          if (!n.Long) return r.fromNumber(parseInt(t, 10));t = n.Long.fromString(t);
        }return t.low || t.high ? new r(t.low >>> 0, t.high >>> 0) : i;
      }, r.prototype.toNumber = function (t) {
        if (!t && this.hi >>> 31) {
          var e = 1 + ~this.lo >>> 0,
              r = ~this.hi >>> 0;return e || (r = r + 1 >>> 0), -(e + 4294967296 * r);
        }return this.lo + 4294967296 * this.hi;
      }, r.prototype.toLong = function (t) {
        return n.Long ? new n.Long(0 | this.lo, 0 | this.hi, !!t) : { low: 0 | this.lo, high: 0 | this.hi, unsigned: !!t };
      };var s = String.prototype.charCodeAt;r.fromHash = function (t) {
        return t === o ? i : new r((s.call(t, 0) | s.call(t, 1) << 8 | s.call(t, 2) << 16 | s.call(t, 3) << 24) >>> 0, (s.call(t, 4) | s.call(t, 5) << 8 | s.call(t, 6) << 16 | s.call(t, 7) << 24) >>> 0);
      }, r.prototype.toHash = function () {
        return String.fromCharCode(255 & this.lo, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, 255 & this.hi, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
      }, r.prototype.zzEncode = function () {
        var t = this.hi >> 31;return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ t) >>> 0, this.lo = (this.lo << 1 ^ t) >>> 0, this;
      }, r.prototype.zzDecode = function () {
        var t = -(1 & this.lo);return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ t) >>> 0, this.hi = (this.hi >>> 1 ^ t) >>> 0, this;
      }, r.prototype.length = function () {
        var t = this.lo,
            e = (this.lo >>> 28 | this.hi << 4) >>> 0,
            r = this.hi >>> 24;return 0 === r ? 0 === e ? t < 16384 ? t < 128 ? 1 : 2 : t < 2097152 ? 3 : 4 : e < 16384 ? e < 128 ? 5 : 6 : e < 2097152 ? 7 : 8 : r < 128 ? 9 : 10;
      };
    }, { 39: 39 }], 39: [function (r, n, i) {
      function o(t, r, n) {
        for (var i = (0, _keys2.default)(r), o = 0; o < i.length; ++o) {
          t[i[o]] !== e && n || (t[i[o]] = r[i[o]]);
        }return t;
      }function s(t) {
        function e(t, r) {
          if (!(this instanceof e)) return new e(t, r);Object.defineProperty(this, "message", { get: function get() {
              return t;
            } }), Error.captureStackTrace ? Error.captureStackTrace(this, e) : Object.defineProperty(this, "stack", { value: Error().stack || "" }), r && o(this, r);
        }return (e.prototype = (0, _create2.default)(Error.prototype)).constructor = e, Object.defineProperty(e.prototype, "name", { get: function get() {
            return t;
          } }), e.prototype.toString = function () {
          return this.name + ": " + this.message;
        }, e;
      }var a = i;a.asPromise = r(1), a.base64 = r(2), a.EventEmitter = r(4), a.float = r(6), a.inquire = r(7), a.utf8 = r(10), a.pool = r(9), a.LongBits = r(38), a.emptyArray = _freeze2.default ? (0, _freeze2.default)([]) : [], a.emptyObject = _freeze2.default ? (0, _freeze2.default)({}) : {}, a.isNode = !!(t.process && t.process.versions && t.process.versions.node), a.isInteger = _isInteger2.default || function (t) {
        return "number" == typeof t && isFinite(t) && Math.floor(t) === t;
      }, a.isString = function (t) {
        return "string" == typeof t || t instanceof String;
      }, a.isObject = function (t) {
        return t && "object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t));
      }, a.isset = a.isSet = function (t, e) {
        var r = t[e];return !(null == r || !t.hasOwnProperty(e)) && ("object" != (typeof r === "undefined" ? "undefined" : (0, _typeof3.default)(r)) || (Array.isArray(r) ? r.length : (0, _keys2.default)(r).length) > 0);
      }, a.Buffer = function () {
        try {
          var t = a.inquire("buffer").Buffer;return t.prototype.utf8Write ? t : null;
        } catch (t) {
          return null;
        }
      }(), a.p = null, a.u = null, a.newBuffer = function (t) {
        return "number" == typeof t ? a.Buffer ? a.u(t) : new a.Array(t) : a.Buffer ? a.p(t) : "undefined" == typeof Uint8Array ? t : new Uint8Array(t);
      }, a.Array = "undefined" != typeof Uint8Array ? Uint8Array : Array, a.Long = t.dcodeIO && t.dcodeIO.Long || a.inquire("long"), a.key2Re = /^true|false|0|1$/, a.key32Re = /^-?(?:0|[1-9][0-9]*)$/, a.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/, a.longToHash = function (t) {
        return t ? a.LongBits.from(t).toHash() : a.LongBits.zeroHash;
      }, a.longFromHash = function (t, e) {
        var r = a.LongBits.fromHash(t);return a.Long ? a.Long.fromBits(r.lo, r.hi, e) : r.toNumber(!!e);
      }, a.merge = o, a.lcFirst = function (t) {
        return t.charAt(0).toLowerCase() + t.substring(1);
      }, a.newError = s, a.ProtocolError = s("ProtocolError"), a.oneOfGetter = function (t) {
        for (var r = {}, n = 0; n < t.length; ++n) {
          r[t[n]] = 1;
        }return function () {
          for (var t = (0, _keys2.default)(this), n = t.length - 1; n > -1; --n) {
            if (1 === r[t[n]] && this[t[n]] !== e && null !== this[t[n]]) return t[n];
          }
        };
      }, a.oneOfSetter = function (t) {
        return function (e) {
          for (var r = 0; r < t.length; ++r) {
            t[r] !== e && delete this[t[r]];
          }
        };
      }, a.toJSONOptions = { longs: String, enums: String, bytes: String, json: !0 }, a.e = function () {
        var t = a.Buffer;if (!t) return void (a.p = a.u = null);a.p = t.from !== Uint8Array.from && t.from || function (e, r) {
          return new t(e, r);
        }, a.u = t.allocUnsafe || function (e) {
          return new t(e);
        };
      };
    }, { 1: 1, 10: 10, 2: 2, 38: 38, 4: 4, 6: 6, 7: 7, 9: 9 }], 40: [function (t, e) {
      function r(t, e) {
        return t.name + ": " + e + (t.repeated && "array" !== e ? "[]" : t.map && "object" !== e ? "{k:" + t.keyType + "}" : "") + " expected";
      }function n(t, e, n, i) {
        if (e.resolvedType) {
          if (e.resolvedType instanceof s) {
            t("switch(%s){", i)("default:")("return%j", r(e, "enum value"));for (var o = (0, _keys2.default)(e.resolvedType.values), a = 0; a < o.length; ++a) {
              t("case %i:", e.resolvedType.values[o[a]]);
            }t("break")("}");
          } else t((t.hasErrorVar ? "" : "var ") + "e=types[%i].verify(%s);", n, i)("if(e)")("return%j+e", e.name + "."), t.hasErrorVar = !0;
        } else switch (e.type) {case "int32":case "uint32":case "sint32":case "fixed32":case "sfixed32":
            t("if(!util.isInteger(%s))", i)("return%j", r(e, "integer"));break;case "int64":case "uint64":case "sint64":case "fixed64":case "sfixed64":
            t("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", i, i, i, i)("return%j", r(e, "integer|Long"));break;case "float":case "double":
            t('if(typeof %s!=="number")', i)("return%j", r(e, "number"));break;case "bool":
            t('if(typeof %s!=="boolean")', i)("return%j", r(e, "boolean"));break;case "string":
            t("if(!util.isString(%s))", i)("return%j", r(e, "string"));break;case "bytes":
            t('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))', i, i, i)("return%j", r(e, "buffer"));}return t;
      }function i(t, e, n) {
        switch (e.keyType) {case "int32":case "uint32":case "sint32":case "fixed32":case "sfixed32":
            t("if(!util.key32Re.test(%s))", n)("return%j", r(e, "integer key"));break;case "int64":case "uint64":case "sint64":case "fixed64":case "sfixed64":
            t("if(!util.key64Re.test(%s))", n)("return%j", r(e, "integer|Long key"));break;case "bool":
            t("if(!util.key2Re.test(%s))", n)("return%j", r(e, "boolean key"));}return t;
      }function o(t) {
        var e = a.codegen(["m"], t.name + "$verify")('if(typeof m!=="object"||m===null)')("return%j", "object expected"),
            o = t.oneofsArray,
            s = {};o.length && e("var p={}");for (var u = 0; u < t.fieldsArray.length; ++u) {
          var f = t.b[u].resolve(),
              l = "m" + a.safeProp(f.name);if (f.optional && e("if(%s!=null&&m.hasOwnProperty(%j)){", l, f.name), f.map) e("if(!util.isObject(%s))", l)("return%j", r(f, "object"))("var k=Object.keys(%s)", l)("for(var i=0;i<k.length;++i){"), i(e, f, "k[i]"), n(e, f, u, l + "[k[i]]")("}");else if (f.repeated) e("if(!Array.isArray(%s))", l)("return%j", r(f, "array"))("for(var i=0;i<%s.length;++i){", l), n(e, f, u, l + "[i]")("}");else {
            if (f.partOf) {
              var p = a.safeProp(f.partOf.name);1 === s[f.partOf.name] && e("if(p%s===1)", p)("return%j", f.partOf.name + ": multiple values"), s[f.partOf.name] = 1, e("p%s=1", p);
            }n(e, f, u, l);
          }f.optional && e("}");
        }return e("return null");
      }e.exports = o;var s = t(15),
          a = t(37);
    }, { 15: 15, 37: 37 }], 41: [function (t, e, r) {
      var n = r,
          i = t(21);n[".google.protobuf.Any"] = { fromObject: function fromObject(t) {
          if (t && t["@type"]) {
            var e = this.lookup(t["@type"]);if (e) return this.create({ type_url: t["@type"], value: e.encode(t).finish() });
          }return this.fromObject(t);
        }, toObject: function toObject(t, e) {
          if (e && e.json && t.type_url && t.value) {
            var r = this.lookup(t.type_url);r && (t = r.decode(t.value));
          }if (!(t instanceof this.ctor) && t instanceof i) {
            var n = t.$type.toObject(t, e);return n["@type"] = t.$type.fullName, n;
          }return this.toObject(t, e);
        } };
    }, { 21: 21 }], 42: [function (t, r) {
      function n(t, r, n) {
        this.fn = t, this.len = r, this.next = e, this.val = n;
      }function i() {}function o(t) {
        this.head = t.head, this.tail = t.tail, this.len = t.len, this.next = t.states;
      }function s() {
        this.len = 0, this.head = new n(i, 0, 0), this.tail = this.head, this.states = null;
      }function a(t, e, r) {
        e[r] = 255 & t;
      }function u(t, e, r) {
        for (; t > 127;) {
          e[r++] = 127 & t | 128, t >>>= 7;
        }e[r] = t;
      }function f(t, r) {
        this.len = t, this.next = e, this.val = r;
      }function l(t, e, r) {
        for (; t.hi;) {
          e[r++] = 127 & t.lo | 128, t.lo = (t.lo >>> 7 | t.hi << 25) >>> 0, t.hi >>>= 7;
        }for (; t.lo > 127;) {
          e[r++] = 127 & t.lo | 128, t.lo = t.lo >>> 7;
        }e[r++] = t.lo;
      }function p(t, e, r) {
        e[r] = 255 & t, e[r + 1] = t >>> 8 & 255, e[r + 2] = t >>> 16 & 255, e[r + 3] = t >>> 24;
      }r.exports = s;var c,
          h = t(39),
          d = h.LongBits,
          y = h.base64,
          v = h.utf8;s.create = h.Buffer ? function () {
        return (s.create = function () {
          return new c();
        })();
      } : function () {
        return new s();
      }, s.alloc = function (t) {
        return new h.Array(t);
      }, h.Array !== Array && (s.alloc = h.pool(s.alloc, h.Array.prototype.subarray)), s.prototype.v = function (t, e, r) {
        return this.tail = this.tail.next = new n(t, e, r), this.len += e, this;
      }, f.prototype = (0, _create2.default)(n.prototype), f.prototype.fn = u, s.prototype.uint32 = function (t) {
        return this.len += (this.tail = this.tail.next = new f((t >>>= 0) < 128 ? 1 : t < 16384 ? 2 : t < 2097152 ? 3 : t < 268435456 ? 4 : 5, t)).len, this;
      }, s.prototype.int32 = function (t) {
        return t < 0 ? this.v(l, 10, d.fromNumber(t)) : this.uint32(t);
      }, s.prototype.sint32 = function (t) {
        return this.uint32((t << 1 ^ t >> 31) >>> 0);
      }, s.prototype.uint64 = function (t) {
        var e = d.from(t);return this.v(l, e.length(), e);
      }, s.prototype.int64 = s.prototype.uint64, s.prototype.sint64 = function (t) {
        var e = d.from(t).zzEncode();return this.v(l, e.length(), e);
      }, s.prototype.bool = function (t) {
        return this.v(a, 1, t ? 1 : 0);
      }, s.prototype.fixed32 = function (t) {
        return this.v(p, 4, t >>> 0);
      }, s.prototype.sfixed32 = s.prototype.fixed32, s.prototype.fixed64 = function (t) {
        var e = d.from(t);return this.v(p, 4, e.lo).v(p, 4, e.hi);
      }, s.prototype.sfixed64 = s.prototype.fixed64, s.prototype.float = function (t) {
        return this.v(h.float.writeFloatLE, 4, t);
      }, s.prototype.double = function (t) {
        return this.v(h.float.writeDoubleLE, 8, t);
      };var m = h.Array.prototype.set ? function (t, e, r) {
        e.set(t, r);
      } : function (t, e, r) {
        for (var n = 0; n < t.length; ++n) {
          e[r + n] = t[n];
        }
      };s.prototype.bytes = function (t) {
        var e = t.length >>> 0;if (!e) return this.v(a, 1, 0);if (h.isString(t)) {
          var r = s.alloc(e = y.length(t));y.decode(t, r, 0), t = r;
        }return this.uint32(e).v(m, e, t);
      }, s.prototype.string = function (t) {
        var e = v.length(t);return e ? this.uint32(e).v(v.write, e, t) : this.v(a, 1, 0);
      }, s.prototype.fork = function () {
        return this.states = new o(this), this.head = this.tail = new n(i, 0, 0), this.len = 0, this;
      }, s.prototype.reset = function () {
        return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new n(i, 0, 0), this.len = 0), this;
      }, s.prototype.ldelim = function () {
        var t = this.head,
            e = this.tail,
            r = this.len;return this.reset().uint32(r), r && (this.tail.next = t.next, this.tail = e, this.len += r), this;
      }, s.prototype.finish = function () {
        for (var t = this.head.next, e = this.constructor.alloc(this.len), r = 0; t;) {
          t.fn(t.val, e, r), r += t.len, t = t.next;
        }return e;
      }, s.e = function (t) {
        c = t;
      };
    }, { 39: 39 }], 43: [function (t, e) {
      function r() {
        i.call(this);
      }function n(t, e, r) {
        t.length < 40 ? o.utf8.write(t, e, r) : e.utf8Write(t, r);
      }e.exports = r;var i = t(42);(r.prototype = (0, _create2.default)(i.prototype)).constructor = r;var o = t(39),
          s = o.Buffer;r.alloc = function (t) {
        return (r.alloc = o.u)(t);
      };var a = s && s.prototype instanceof Uint8Array && "set" === s.prototype.set.name ? function (t, e, r) {
        e.set(t, r);
      } : function (t, e, r) {
        if (t.copy) t.copy(e, r, 0, t.length);else for (var n = 0; n < t.length;) {
          e[r++] = t[n++];
        }
      };r.prototype.bytes = function (t) {
        o.isString(t) && (t = o.p(t, "base64"));var e = t.length >>> 0;return this.uint32(e), e && this.v(a, e, t), this;
      }, r.prototype.string = function (t) {
        var e = s.byteLength(t);return this.uint32(e), e && this.v(n, e, t), this;
      };
    }, { 39: 39, 42: 42 }] }, {}, [19]);
}("object" == (typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) && window || "object" == (typeof self === "undefined" ? "undefined" : (0, _typeof3.default)(self)) && self || undefined);
//# sourceMappingURL=protobuf.min.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(152)(module)))

/***/ }),
/* 158 */
/***/ (function(module, exports) {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(){
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i+1)];
      encoded3 = lookup[base64.charCodeAt(i+2)];
      encoded4 = lookup[base64.charCodeAt(i+3)];

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})();


/***/ }),
/* 159 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__159__;

/***/ }),
/* 160 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__160__;

/***/ }),
/* 161 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__161__;

/***/ }),
/* 162 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__162__;

/***/ }),
/* 163 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__163__;

/***/ }),
/* 164 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__164__;

/***/ }),
/* 165 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__165__;

/***/ }),
/* 166 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__166__;

/***/ }),
/* 167 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__167__;

/***/ }),
/* 168 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__168__;

/***/ }),
/* 169 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__169__;

/***/ }),
/* 170 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__170__;

/***/ }),
/* 171 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__171__;

/***/ }),
/* 172 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__172__;

/***/ }),
/* 173 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__173__;

/***/ }),
/* 174 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__174__;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// String encode/decode helpers



var utils = __webpack_require__(20);


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WfcImpl = undefined;

var _promise = __webpack_require__(62);

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = __webpack_require__(196);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(199);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getIterator2 = __webpack_require__(112);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _assign = __webpack_require__(113);

var _assign2 = _interopRequireDefault(_assign);

var _stringify = __webpack_require__(78);

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = __webpack_require__(79);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _map = __webpack_require__(115);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(55);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(122);

var _createClass3 = _interopRequireDefault(_createClass2);

var _long = __webpack_require__(81);

var _long2 = _interopRequireDefault(_long);

var _longUtil = __webpack_require__(124);

var _aes = __webpack_require__(29);

var _connect2 = __webpack_require__(251);

var _messageConfig = __webpack_require__(159);

var _messageConfig2 = _interopRequireDefault(_messageConfig);

var _mediaMessageContent = __webpack_require__(160);

var _mediaMessageContent2 = _interopRequireDefault(_mediaMessageContent);

var _message = __webpack_require__(364);

var _message2 = _interopRequireDefault(_message);

var _messageContentType = __webpack_require__(365);

var _messageContentType2 = _interopRequireDefault(_messageContentType);

var _messageStatus = __webpack_require__(161);

var _messageStatus2 = _interopRequireDefault(_messageStatus);

var _recallMessageNotification = __webpack_require__(366);

var _recallMessageNotification2 = _interopRequireDefault(_recallMessageNotification);

var _persistFlag = __webpack_require__(162);

var _persistFlag2 = _interopRequireDefault(_persistFlag);

var _channelInfo = __webpack_require__(163);

var _channelInfo2 = _interopRequireDefault(_channelInfo);

var _chatRoomMemberInfo = __webpack_require__(367);

var _chatRoomMemberInfo2 = _interopRequireDefault(_chatRoomMemberInfo);

var _conversation = __webpack_require__(164);

var _conversation2 = _interopRequireDefault(_conversation);

var _conversationType = __webpack_require__(165);

var _conversationType2 = _interopRequireDefault(_conversationType);

var _friendRequest = __webpack_require__(368);

var _friendRequest2 = _interopRequireDefault(_friendRequest);

var _groupInfo = __webpack_require__(166);

var _groupInfo2 = _interopRequireDefault(_groupInfo);

var _groupMember = __webpack_require__(369);

var _groupMember2 = _interopRequireDefault(_groupMember);

var _groupMemberType = __webpack_require__(167);

var _groupMemberType2 = _interopRequireDefault(_groupMemberType);

var _nullGroupInfo = __webpack_require__(168);

var _nullGroupInfo2 = _interopRequireDefault(_nullGroupInfo);

var _nullUserInfo = __webpack_require__(169);

var _nullUserInfo2 = _interopRequireDefault(_nullUserInfo);

var _userInfo = __webpack_require__(170);

var _userInfo2 = _interopRequireDefault(_userInfo);

var _userSettingScope = __webpack_require__(171);

var _userSettingScope2 = _interopRequireDefault(_userSettingScope);

var _wfcEvent = __webpack_require__(370);

var _wfcEvent2 = _interopRequireDefault(_wfcEvent);

var _wfcmessage = __webpack_require__(371);

var _wfc_store = __webpack_require__(372);

var _wfc_store2 = _interopRequireDefault(_wfc_store);

var _connectionStatus = __webpack_require__(384);

var _connectionStatus2 = _interopRequireDefault(_connectionStatus);

var _userSettingEntry = __webpack_require__(385);

var _userSettingEntry2 = _interopRequireDefault(_userSettingEntry);

var _config = __webpack_require__(91);

var _config2 = _interopRequireDefault(_config);

var _pako = __webpack_require__(386);

var _pako2 = _interopRequireDefault(_pako);

var _errorCode = __webpack_require__(395);

var _errorCode2 = _interopRequireDefault(_errorCode);

var _friendInfo = __webpack_require__(173);

var _friendInfo2 = _interopRequireDefault(_friendInfo);

var _chatRoomInfo = __webpack_require__(396);

var _chatRoomInfo2 = _interopRequireDefault(_chatRoomInfo);

var _NullChannelInfo = __webpack_require__(174);

var _NullChannelInfo2 = _interopRequireDefault(_NullChannelInfo);

var _conversationInfo = __webpack_require__(172);

var _conversationInfo2 = _interopRequireDefault(_conversationInfo);

var _readEntry = __webpack_require__(397);

var _readEntry2 = _interopRequireDefault(_readEntry);

var _fileRecord = __webpack_require__(398);

var _fileRecord2 = _interopRequireDefault(_fileRecord);

var _base = __webpack_require__(399);

var _markUnreadMessageContent = __webpack_require__(400);

var _markUnreadMessageContent2 = _interopRequireDefault(_markUnreadMessageContent);

var _userOnlineState = __webpack_require__(401);

var _userOnlineState2 = _interopRequireDefault(_userOnlineState);

var _userClientState = __webpack_require__(402);

var _userClientState2 = _interopRequireDefault(_userClientState);

var _userCustomState = __webpack_require__(403);

var _userCustomState2 = _interopRequireDefault(_userCustomState);

var _channelMenu = __webpack_require__(404);

var _channelMenu2 = _interopRequireDefault(_channelMenu);

var _compositeMessageContent = __webpack_require__(405);

var _compositeMessageContent2 = _interopRequireDefault(_compositeMessageContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Attention 如果是node环境的话，需要打开下面的注释
// var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest

// 其实就是imclient，后续可能需要改下名字
/*
 * Copyright (c) 2020 WildFireChat. All rights reserved.
 */

var WfcImpl = exports.WfcImpl = function () {
    function WfcImpl() {
        (0, _classCallCheck3.default)(this, WfcImpl);
        this.initialized = false;
        this.connectionStatus = 0;
        this.userId = '';
        this.token = '';
        this.clientId = '';
        this.chatRoomMsgHead = _long2.default.ZERO;
        this.privateSecret = '';
        this.store = new _wfc_store2.default(this);
        this.isReceiptEnable = false;
        this.isUserOnlineStateEnable = false;
        this.serverConfigs = {};
        this.isClearGroupMsgWhenKickoff = false;
        this.isGlobalDisableDraftSync = false;
        this.isConnecting = false;
        this.isUserDisconnected = false;
        this.isPullingSetting = false;
        this.isPullingMsg = false;
        this.isPullingChatroomMsg = false;
        this.isPullingRecv = false;
        this.isPullingRead = false;
        this.isPullingGroupMsg = false;
        this.isConversationTargetPreloaded = false;
        this.isFriendPreloaded = false;
        this.isFriendRequestPreloaded = false;
        this.settingHead = _long2.default.ZERO;
        this.friendHead = _long2.default.ZERO;
        this.friendRequestHead = _long2.default.ZERO;
        this.recvHead = _long2.default.ZERO;
        this.readHead = _long2.default.ZERO;
        this.groupHead = _long2.default.ZERO;
        this.deltaTime = 0;
        this.lastActiveTime = 0;
        this.backupAddressStrategy = 1;
        this.backupHost = '';
        this.backupPort = 80;
        this.pendingMN = false;
        this.pendingGMN = false;
        this.uploadingMap = new _map2.default();
    } // long object


    // 94, pc登录请求通知


    (0, _createClass3.default)(WfcImpl, [{
        key: 'resetMqtt',
        value: function resetMqtt() {
            var _this = this;

            if (this.mqttClientInstance) {
                this.mqttClientInstance.removeAllListeners();
                this.mqttClientInstance.end(true, {}, function () {
                    _this.log('mqtt client ended');
                });
                this.mqttClientInstance = null;
            }
        }
    }, {
        key: 'reset',
        value: function reset() {
            this.resetMqtt();
            this.connectionStatus = _connectionStatus2.default.ConnectionStatusLogout;
            this.isConnecting = false;
            this.userId = '';
            this.token = '';
            this.clientId = '';
            this.msgHead = _long2.default.ZERO; // long object

            this.privateSecret = '';

            this.store = new _wfc_store2.default(this);

            this.isReceiptEnable = false;
            this.isGlobalDisableDraftSync = false;
            this.isConnecting = false;
            this.isUserDisconnected = false;
            this.isPullingSetting = false;
            this.isPullingRecv = false;
            this.isPullingRead = false;
            this.isConversationTargetPreloaded = false;
            this.isFriendPreloaded = false;
            this.isFriendRequestPreloaded = false;
            this.settingHead = _long2.default.ZERO;
            this.friendHead = _long2.default.ZERO;
            this.friendRequestHead = _long2.default.ZERO;
            this.recvHead = _long2.default.ZERO;
            this.readHead = _long2.default.ZERO;
            this.groupHead = _long2.default.ZERO;
            this.deltaTime = 0;
            this.lastActiveTime = 0;
            if (this.reconnectTimer) {
                clearInterval(this.reconnectTimer);
                this.reconnectTimer = 0;
            }
        }
    }, {
        key: 'onConnectionChanged',
        value: function onConnectionChanged(status) {
            if (this.connectionStatus === status) {
                return;
            }

            if (status === _connectionStatus2.default.ConnectionStatusConnected) {
                this._pullUnreadMessages();
            }

            if (_config2.default.ENABLE_INFO_PERSISTENCE && (!_config2.default.MESSAGE_ROAMING && status === _connectionStatus2.default.ConnectionStatusConnected || _config2.default.MESSAGE_ROAMING && status === _connectionStatus2.default.ConnectionStatusReceiveing)) {
                this.store.loadPersistGroups();
            }
            this.connectionStatus = status;
            this.eventEmitter.emit(_wfcEvent2.default.ConnectionStatusChanged, status);
            this.log('connection status changed', status);
        }

        // /**
        //  *
        //  * @param {function} listener
        //  */
        // setOnReceiveMessageListener(listener) {
        //     if (typeof listener !== 'function') {
        //         this.log('listener should be a function');
        //         return;
        //     }
        //     self.onReceiveMessageListeners.forEach(l => {
        //         l === listener
        //         return
        //     });
        //     self.onReceiveMessageListeners.push(listener);
        // }

        // removeOnReceiMessageListener(listener) {
        //     if (typeof listener !== 'function') {
        //         this.log('listener should be a function');
        //         return;
        //     }
        //     self.onReceiveMessageListeners.splice(self.onReceiveMessageListeners.indexOf(listener), 1);
        // }

    }, {
        key: '_isGroupNotificationTargetsIncludeCurrentUser',
        value: function _isGroupNotificationTargetsIncludeCurrentUser(binaryContent) {}
    }, {
        key: 'onConferenceEvent',
        value: function onConferenceEvent(event) {
            this.eventEmitter.emit(_wfcEvent2.default.ConferenceEvent, event);
        }
    }, {
        key: 'onReceiveMessage',
        value: function onReceiveMessage(messages) {
            var _this2 = this;

            var pullSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var saveToStore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var needUpdateGroups = [];
            var needUpdateGroupMembers = [];

            this.log('onReceiveMessage length: ' + messages.length + ', pullSettings: ' + pullSettings + ' saveToStore ' + saveToStore);
            messages.forEach(function (m, index) {
                if (WfcImpl.pcNotSupportMessageTypes.indexOf(m.content.type) > -1) {
                    return;
                }
                var msg = _message2.default.fromProtoMessage(m);
                var hasMore = index < messages.length - 1;
                if (msg) {
                    _this2._handleGroupNotificationMessage(msg, hasMore, needUpdateGroups, needUpdateGroupMembers);
                    // 处理通过server api删除消息
                    if (msg.content.type === 81) {
                        _this2.log('delete', msg.content, _long2.default.fromValue(atob(msg.content.binaryContent)), _long2.default.fromValue(atob(msg.content.binaryContent)).toString());
                        var messageUid = _long2.default.fromValue(atob(msg.content.binaryContent));
                        var message = _this2.store.getMessageByUid(messageUid);
                        if (message && message.messageId > 0) {
                            _this2.store.deleteMessageByUid(messageUid);
                            _this2.onRemoteMessageDeleted(message.messageUid);
                        }
                        return;
                    }

                    var flag = _messageConfig2.default.getMessageContentPersitFlag(msg.content.type);
                    if (flag === -1) {
                        flag = msg.content.persistFlag;
                    }
                    if (msg.messageContent.type === _messageContentType2.default.RecallMessage_Notification) {
                        _this2.onRecallMessage(msg.messageContent.operatorId, msg.messageContent.messageUid);
                    }
                    if (saveToStore && (flag === _persistFlag2.default.Persist || flag === _persistFlag2.default.Persist_And_Count)) {
                        if (msg.conversation.type === _conversationType2.default.ChatRoom) {
                            msg.messageId = _this2.store.genChatRoomMessageId();
                        } else {
                            msg.messageId = _this2.store.genNormalMessageId();
                        }
                        if (_this2.store.saveMessage(msg)) {
                            _this2.store.updateConversationLastMessage(msg);
                            _this2.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, _this2.store.getConversationInfo(msg.conversation));
                            if (!pullSettings || _config2.default.ENABLE_ROAMING_MESSAGE_RECEIVING_NOTIFICATION) {
                                _this2.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg, hasMore);
                            }
                        }
                    } else {
                        if (_config2.default.ENABLE_GENERATE_CONVERSATION_FOR_TRANSPARENT_MESSAGE) {
                            _this2.store.genAndSaveDefaultConversationInfo(msg.conversation);
                        }
                        if (_config2.default.ENABLE_ROAMING_TRANSPARENT_MESSAGE_RECEIVING_NOTIFICATION) {
                            _this2.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg, hasMore);
                        }

                        if (msg.messageContent instanceof _markUnreadMessageContent2.default && msg.from === _this2.userId) {
                            var markMsg = msg.messageContent;
                            var conversation = msg.conversation;
                            _this2.store.setLastReceivedMessageUnread(conversation, markMsg.messageUid, markMsg.timestamp);
                        }
                        if (!pullSettings) {
                            _this2.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg, hasMore);
                        }
                    }
                }
            });

            needUpdateGroups.forEach(function (groupId) {
                // this.getGroupInfo(groupId, true);
                _this2._reloadGroupInfosFromRemote(groupId);
            });
            needUpdateGroupMembers.forEach(function (groupId) {
                //this.getGroupMembers(groupId, true);
                _this2._reloadGroupMembersFromRemote(groupId, _this2.store.getGroupMemberMaxDt(groupId));
            });
        }
    }, {
        key: '_handleGroupNotificationMessage',
        value: function _handleGroupNotificationMessage(msg, hasMore, needUpdateGroups, needUpdateGroupMembers) {
            var _this3 = this;

            var messageTypes = [_messageContentType2.default.CreateGroup_Notification, _messageContentType2.default.AddGroupMember_Notification, _messageContentType2.default.KickOffGroupMember_Notification, _messageContentType2.default.TransferGroupOwner_Notification, _messageContentType2.default.ModifyGroupExtra_Notification, _messageContentType2.default.ModifyGroupAlias_Notification];
            if (messageTypes.indexOf(msg.content.type) > -1) {
                needUpdateGroups.push(msg.conversation.target);
                needUpdateGroupMembers.push(msg.conversation.target);

                if (msg.content.type === _messageContentType2.default.KickOffGroupMember_Notification) {
                    var kicked = msg.messageContent.kickedMembers.find(function (memberId) {
                        return memberId === _this3.getUserId();
                    });
                    this.log('kickoff', msg.conversation.target, this.isClearGroupMsgWhenKickoff);
                    if (kicked === this.getUserId() && this.isClearGroupMsgWhenKickoff) {
                        // this.store.removeGroupAndMembers(msg.conversation.target);
                        this.store.removeConversation(msg.conversation, true);
                    }
                } else if (msg.content.type === _messageContentType2.default.AddGroupMember_Notification) {
                    // 如果之前被踢，并保留了会话，需要删除本地的历史消息，然后通过加载历史消息的方式去加载，不然被踢到重新加入这期间的消息会缺失
                    if (!this.isClearGroupMsgWhenKickoff) {
                        this.store.clearConversationMessagesBeforeMessageUid(msg.conversation, msg.messageUid);
                    }
                }
            }

            messageTypes = [_messageContentType2.default.SetGroupManager_Notification, _messageContentType2.default.MuteGroupMember_Notification, _messageContentType2.default.AllowGroupMember_Notification, _messageContentType2.default.ModifyGroupMemberExtra_Notification];
            if (messageTypes.indexOf(msg.content.type) > -1) {
                needUpdateGroupMembers.push(msg.conversation.target);
            }

            messageTypes = [_messageContentType2.default.ChangeGroupName_Notification, _messageContentType2.default.ChangeGroupPortrait_Notification, _messageContentType2.default.MuteGroup_Notification, _messageContentType2.default.ChangeJoinType_Notification, _messageContentType2.default.ChangePrivateChat_Notification, _messageContentType2.default.ChangeSearchable_Notification, _messageContentType2.default.ModifyGroupExtra_Notification];
            if (messageTypes.indexOf(msg.content.type) > -1) {
                needUpdateGroups.push(msg.conversation.target);
            }

            messageTypes = [_messageContentType2.default.QuitGroup_Notification];
            if (messageTypes.indexOf(msg.content.type) > -1) {
                if (msg.from === this.getUserId()) {
                    this.store.removeGroupAndMembers(msg.conversation.target);
                    this.store.removeFavGroup(msg.conversation.target);
                    this.store.removeConversation(msg.conversation, true);
                    this.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg, hasMore);
                    return;
                } else {
                    needUpdateGroups.push(msg.conversation.target);
                    needUpdateGroupMembers.push(msg.conversation.target);
                }
            }

            messageTypes = [_messageContentType2.default.DismissGroup_Notification];
            if (messageTypes.indexOf(msg.content.type) > -1) {
                this.store.removeGroupAndMembers(msg.conversation.target);
                this.store.removeFavGroup(msg.conversation.target);
                if (!this.serverConfigs.isKeepMsgAfterDismiss) {
                    this.store.removeConversation(msg.conversation, true);
                }

                var gs = needUpdateGroups.filter(function (groupId) {
                    return groupId !== msg.conversation.target;
                });
                var gms = needUpdateGroupMembers.filter(function (groupId) {
                    return groupId !== msg.conversation.target;
                });

                needUpdateGroups.length = 0;
                needUpdateGroups.push.apply(needUpdateGroups, (0, _toConsumableArray3.default)(gs));
                needUpdateGroupMembers.length = 0;
                needUpdateGroupMembers.push.apply(needUpdateGroupMembers, (0, _toConsumableArray3.default)(gms));
                this.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg, hasMore);
            }
        }
    }, {
        key: 'onGroupInfoUpdate',
        value: function onGroupInfoUpdate(groupListIds) {
            // TODO
        }
    }, {
        key: 'onChannelInfoUpdate',
        value: function onChannelInfoUpdate(channelListIds) {
            // TODO

        }
    }, {
        key: 'onSettingUpdate',
        value: function onSettingUpdate(updatedSettings) {
            this.eventEmitter.emit(_wfcEvent2.default.SettingUpdate);
        }
    }, {
        key: 'onRecallMessage',
        value: function onRecallMessage(operatorUid, messageUid) {
            // 更新消息
            var msg = this.store.getMessageByUid(messageUid);
            if (!msg || msg.messageId === 0) {
                return;
            }
            var oriMessageContent = msg.messageContent;
            if (operatorUid === this.userId) {
                var obj = {};
                obj["s"] = msg.from;
                obj["ts"] = (0, _longUtil.numberValue)(msg.timestamp);
                var payload = msg.content;
                if (!payload || !payload.hasOwnProperty('type')) {
                    payload = msg.messageContent.encode();
                }
                obj["t"] = payload.type;
                obj["sc"] = payload.searchableContent ? payload.searchableContent : '';
                obj["c"] = payload.content ? payload.content : '';
                obj["e"] = payload.extra ? payload.content : '';
                msg.extra = (0, _stringify2.default)(obj);
            }

            var content = new _recallMessageNotification2.default(operatorUid, messageUid);
            content.fromSelf = true;
            content.setExtra(msg.extra);
            msg.messageContent = content;
            this.store.updateMessageById(msg);

            var conversationInfo = this.getConversationInfo(msg.conversation);
            if (msg.direction === 1 && _messageConfig2.default.getMessageContentFlag(oriMessageContent.type) === _persistFlag2.default.Persist_And_Count) {
                if (msg.status === _messageStatus2.default.Unread) {
                    conversationInfo.unreadCount.unread -= 1;
                } else if (msg.status === _messageStatus2.default.Mentioned) {
                    conversationInfo.unreadCount.unreadMention -= 1;
                } else if (msg.status === _messageStatus2.default.AllMentioned) {
                    conversationInfo.unreadCount.unreadMentionAll -= 1;
                }
            }

            this.eventEmitter.emit(_wfcEvent2.default.RecallMessage, operatorUid, messageUid);
        }
    }, {
        key: 'onRemoteMessageDeleted',
        value: function onRemoteMessageDeleted(messageUid) {
            this.log('onRemoteMessageDeleted', messageUid);
            this.store.deleteMessageByUid(messageUid);
            this.eventEmitter.emit(_wfcEvent2.default.MessageDeleted, messageUid);
        }
    }, {
        key: 'onMessageDeleted',
        value: function onMessageDeleted(messageId) {
            this.log('onMessageDeleted', messageId);
            this.eventEmitter.emit(_wfcEvent2.default.DeleteMessage, messageId);
        }
    }, {
        key: 'onUserInfoUpdate',
        value: function onUserInfoUpdate(userIds) {
            var _this4 = this;

            this.log('userInfo update, ids', userIds);
            var userIdA = JSON.parse(userIds);
            userIdA.map(function (userId) {
                _this4._reloadUserInfosFromRemote([userId]);
            });
        }
    }, {
        key: 'onFriendListUpdate',
        value: function onFriendListUpdate(friendListIds) {
            this.log('friendList update, ids', friendListIds);
            this.eventEmitter.emit(_wfcEvent2.default.FriendListUpdate, friendListIds);
        }
    }, {
        key: 'onFriendRequestUpdate',
        value: function onFriendRequestUpdate(newFriendRequests) {
            this.eventEmitter.emit(_wfcEvent2.default.FriendRequestUpdate, newFriendRequests);
        }

        /**
         *
         * @param {messagecontent} content
         */

    }, {
        key: 'registerMessageContent',
        value: function registerMessageContent(name, flag, type, contentClazz) {
            _messageConfig2.default.registerMessageContent(name, flag, type, contentClazz);
        }
    }, {
        key: 'getHost',
        value: function getHost() {
            return (0, _connect2.host)();
        }
    }, {
        key: 'getClientId',
        value: function getClientId() {
            if (this.clientId === '') {
                switch (_config2.default.CLIENT_ID_STRATEGY) {
                    case 0:
                        this.clientId = this.uuid();
                        break;
                    case 1:
                        //sessionStorage
                        this.clientId = sessionStorage.getItem("clientId");
                        if (!this.clientId) {
                            this.clientId = this.uuid();
                            sessionStorage.setItem("clientId", this.clientId);
                        }
                        break;
                    case 2:
                        // localStorage
                        this.clientId = localStorage.getItem("clientId");
                        if (!this.clientId) {
                            this.clientId = this.uuid();
                            localStorage.setItem("clientId", this.clientId);
                        }
                        break;
                    default:
                        this.clientId = this.uuid();
                        break;
                }
            }

            this.log('clientId', this.clientId);
            return this.clientId;
        }
    }, {
        key: 'getEncodedClientId',
        value: function getEncodedClientId() {
            var clientId = this.getClientId();
            return (0, _aes.AESEncrypt)(clientId, '');
        }

        /**
         *
         * @param {string} data data to encode
         * @returns {string} string in base64 format
         */

    }, {
        key: 'encodeData',
        value: function encodeData(data) {
            return (0, _aes.AESEncrypt)(data, this.privateSecret);
        }

        /**
         *
         * @param {string} encodedData  data in base64 format to decode
         * @returns {null | string}
         */

    }, {
        key: 'decodeData',
        value: function decodeData(encodedData) {
            return this._Utf8ArrayToStr((0, _aes.AESDecrypt)(encodedData, this.privateSecret, false));
        }
    }, {
        key: '_Utf8ArrayToStr',
        value: function _Utf8ArrayToStr(array) {
            var out, i, len, c;
            var char2, char3;

            out = "";
            len = array.length;
            i = 0;
            while (i < len) {
                c = array[i++];
                switch (c >> 4) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        // 0xxxxxxx
                        out += String.fromCharCode(c);
                        break;
                    case 12:
                    case 13:
                        // 110x xxxx   10xx xxxx
                        char2 = array[i++];
                        out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);
                        break;
                    case 14:
                        // 1110 xxxx  10xx xxxx  10xx xxxx
                        char2 = array[i++];
                        char3 = array[i++];
                        out += String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0);
                        break;
                }
            }
            return out;
        }
    }, {
        key: 'uuid',
        value: function uuid() {
            var s = [];
            var hexDigits = "0123456789abcdef";
            for (var i = 0; i < 36; i++) {
                s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
            }
            s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
            s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
            s[8] = s[13] = s[18] = s[23] = "-";

            var id = s.join("");
            return id;
        }
    }, {
        key: 'init',
        value: function init(args) {
            this.initialized = true;
            if (args && args.length > 0) {
                _config2.default.config(args[0]);
            }
        }
    }, {
        key: 'onForeground',
        value: function onForeground() {
            this.log('onForeground');
            if (this.connectionStatus !== _connectionStatus2.default.ConnectionStatusConnected) {
                this._reconnect();
            } else {
                var now = new Date().getTime();
                var timeout = _config2.default.KEEP_ALIVE_TIMEOUT > _config2.default.KEEP_ALIVE_INTERNAL ? _config2.default.KEEP_ALIVE_TIMEOUT : _config2.default.KEEP_ALIVE_INTERNAL;
                if (now - this.lastActiveTime > timeout * 1000) {
                    this.log('keep alive timeout, reconnect...');
                    this._reconnect(true);
                } else {
                    this.log('already connected');
                }
            }
        }
    }, {
        key: 'connect',
        value: function connect(userId, token) {
            var _this5 = this;

            if (!this.initialized) {
                this.error('请先调用 wfc.init 进行初始化');
                return;
            }
            this.log('connect', WfcImpl.version, userId, token);
            this.isUserDisconnected = false;

            if (!userId || !token) {
                this.log('userId or token error');
                return;
            }
            if (typeof userId !== 'string' || typeof token !== 'string') {
                this.error('userId and token must be string type');
                return;
            }
            if (this.mqttClientInstance && (this.isConnecting || this.connectionStatus === _connectionStatus2.default.ConnectionStatusConnected) && this.userId === userId && this.token === token) {
                this.log('connect 0', this.isConnecting, this.connectionStatus, this.userId, this.token);
                return;
            }
            if (this.userId !== '' && this.userId !== userId) {
                this.reset();
            }

            this.onConnectionChanged(_connectionStatus2.default.ConnectionStatusConnecting);

            if (!this.reconnectTimer) {
                this.reconnectTimer = setInterval(function () {
                    if (_this5.connectionStatus === _connectionStatus2.default.ConnectionStatusUnconnected && _this5.userId !== '' && _this5.token !== '') {
                        if (!_this5.isConnecting) {
                            _this5.log('reconnect', _this5.userId, _this5.clientId, _this5.token, new Date().valueOf());
                            _this5.resetMqtt();
                            _this5.connect(_this5.userId, _this5.token);
                        }
                    }
                }, WfcImpl.connectionTimeout);
            }

            this.userId = userId;
            this.token = token;
            this.isConnecting = true;
            this.log('connect', new Date().getTime(), new Error().stack);
            (0, _connect2.connect)(userId, this.getClientId(), token, function (errorCode, client, privateSecret, connectTime, serverConfigs) {
                _this5.log('connect/route error', errorCode, new Date().valueOf());
                if (errorCode === -1 && _this5.connectionStatus === _connectionStatus2.default.ConnectionStatusConnected && _this5.mqttClientInstance) {
                    // do nothing
                    _this5.isConnecting = false;
                    return;
                }
                if (errorCode !== 0) {
                    _this5.isConnecting = false;
                    var newStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                    if (errorCode === _errorCode2.default.kEcServerTokenIncorrect) {
                        newStatus = _connectionStatus2.default.ConnectionStatusTokenIncorrect;
                    } else if (errorCode === _errorCode2.default.kEcServerUserIsBlocked) {
                        newStatus = _connectionStatus2.default.ConnectionStatusRejected;
                    } else if (errorCode === _errorCode2.default.kEcServerSecrectKeyMismatch) {
                        newStatus = _connectionStatus2.default.ConnectionStatusSecretKeyMismatch;
                    } else if (errorCode === _errorCode2.default.kConnectionStatusKickedOff) {
                        newStatus = _connectionStatus2.default.ConnectionStatusKickedOff;
                    } else if (errorCode === _errorCode2.default.kEcServerNotLicensed) {
                        newStatus = _connectionStatus2.default.ConnectionStatusNotLicensed;
                    } else if (errorCode === _errorCode2.default.kEcServerTimeInconsistent) {
                        newStatus = _connectionStatus2.default.ConnectionStatusTimeInconsistent;
                    }
                    _this5.onConnectionChanged(newStatus);

                    if (client) {
                        client.removeAllListeners();
                        client.end(true, {}, function () {
                            _this5.log('mqtt client ended');
                        });
                    }
                    return;
                }

                _this5.mqttClientInstance = client;
                _this5.privateSecret = privateSecret;
                _this5.serverConfigs = serverConfigs ? serverConfigs : {};
                _this5.isReceiptEnable = serverConfigs.isReceiptEnable;
                _this5.isUserOnlineStateEnable = serverConfigs.isUserOnlineStateEnable;
                _this5.isClearGroupMsgWhenKickoff = serverConfigs.isClearGroupMsgWhenKickoff;
                _this5.isGlobalDisableDraftSync = serverConfigs.isGlobalDisableDraftSync;

                _this5.mqttClientInstance.on('connect', function (packet) {
                    _this5.isConnecting = false;
                    _this5.isPullingMsg = false;
                    _this5.isPullingChatroomMsg = false;
                    _this5.lastActiveTime = new Date().getTime();

                    var ack = _wfcmessage.ConnectAckPayload.decode(packet.payload);
                    _this5.log('connect ack', ack, _this5.msgHead);

                    _this5._pullFriends(ack.friendHead);
                    _this5._pullFriendRequest(ack.friendRqHead);

                    // why?
                    // mqtt over websocket publish ack的时序和 publish 的时序不严格一致， 会出现后publish的response比先publish的response提前收到

                    if (_this5.msgHead) {
                        var pullSettings = _this5.settingHead.compare(ack.settingHead) < 0;
                        _this5._pullMessages(ack.msgHead, 0, pullSettings, ack.recvHead, ack.readHead, ack.groupConvHead, true);
                    } else {
                        if (_config2.default.MESSAGE_ROAMING) {
                            _this5.msgHead = _long2.default.ZERO;
                            _this5.log('pull roaming message', _this5.msgHead.toString(), ack.msgHead.toString());
                            _this5.onConnectionChanged(_connectionStatus2.default.ConnectionStatusReceiveing);
                            _this5._pullMessages(_long2.default.MAX_VALUE, 0, true, ack.recvHead, ack.readHead, ack.groupConvHead, true);
                        } else {
                            _this5.msgHead = ack.msgHead;
                            _this5._pullUserSettings(ack.settingHead);
                        }
                    }

                    var cur = new Date().getTime();
                    _this5.deltaTime = Number(ack.serverTime) - cur - (cur - connectTime) / 2;

                    // connected, for testing your code
                    // this.test();
                });
                _this5.mqttClientInstance.on('reconnect', function () {
                    _this5.isConnecting = false;
                    _this5.log('------reconnect--------', _this5.clientId);
                });
                _this5.mqttClientInstance.on('offline', function () {
                    // 应当不会走到这儿
                    _this5.log('------offline--------');
                    _this5.isConnecting = false;
                    _this5.connectionStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                    !_this5.isUserDisconnected && _this5._reconnect();
                });
                _this5.mqttClientInstance.on('close', function () {
                    // mqtt的自动重连好像有些问题，已取消自动重连，改为此处控制重连
                    _this5.log('------close--------', _this5.clientId);
                    _this5.isConnecting = false;
                    _this5.connectionStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                    !_this5.isUserDisconnected && _this5._reconnect();
                });
                _this5.mqttClientInstance.on('disconnect', function () {
                    _this5.log('------disconnect--------');
                });

                _this5.mqttClientInstance.on('error', function (err) {
                    _this5.log('------error--------', err);
                    _this5.isConnecting = false;
                    _this5.connectionStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                    !_this5.isUserDisconnected && _this5._reconnect();
                });

                _this5.mqttClientInstance.on('pingresp', function (respTime) {
                    console.log('pingresp', new Date().getTime());
                    _this5.lastActiveTime = new Date().getTime();
                });

                // 这儿来的数据未加密
                _this5.mqttClientInstance.on('message', function (topic, message, packet) {
                    _this5.lastActiveTime = new Date().getTime();
                    _this5.log('on push', topic);
                    if (topic === 'MS') {
                        var msg = _wfcmessage.Message.decode(message);
                        var msgs = [];
                        msgs.push(msg);
                        _this5.onReceiveMessage(msgs, false, false);
                    } else if (topic === 'MN') {
                        var notifyMessage = _wfcmessage.NotifyMessage.decode(message);
                        _this5._pullMessages(notifyMessage.head, notifyMessage.type, false, false, false, false, true);
                    } else if (topic === 'GMN') {
                        var notifyGroupMessage = _wfcmessage.NotifyGroupMessage.decode(message);
                        _this5._pullGroupConvs(notifyGroupMessage.head, notifyGroupMessage.target, notifyGroupMessage.line, true);
                    } else if (topic === 'FN') {
                        if (message.length === 8) {
                            var head = _this5._getLongFromBuffer(message);
                            _this5._pullFriends(head);
                        }
                    } else if (topic === 'FRN') {
                        if (message.length === 8) {
                            var _head = _this5._getLongFromBuffer(message);
                            _this5._pullFriendRequest(_head);
                        }
                    } else if (topic === 'UN') {
                        if (message.length === 8) {
                            var _head2 = _this5._getLongFromBuffer(message);
                            _this5._pullUserSettings(_head2);
                        }
                    } else if (topic === 'RMN') {
                        var recall = _wfcmessage.NotifyRecallMessage.decode(message);
                        _this5.onRecallMessage(recall.fromUser, recall.id);
                    } else if (topic === 'RCN') {
                        if (message.length === 8) {
                            var _head3 = _this5._getLongFromBuffer(message);
                            _this5._pullRecv(_head3);
                        }
                    } else if (topic === 'RDN') {
                        if (message.length === 8) {
                            var _head4 = _this5._getLongFromBuffer(message);
                            _this5._pullRead(_head4);
                        }
                    } else if (topic === 'CONFN') {
                        var info = _wfcmessage.IDBuf.decode(message);
                        _this5.onConferenceEvent(info.id);
                    } else if (topic === 'ROFL') {
                        _this5._reconnect(true);
                    } else if (topic === 'UIN') {
                        _this5.getUserInfo(_this5.userId, true);
                    } else if (topic === 'POSN') {
                        _this5._onlineStateNotify(message);
                    }
                });
            }, {
                backupAddressStrategy: this.backupAddressStrategy,
                backupHost: this.backupHost,
                backupPort: this.backupPort
            });
        }
    }, {
        key: '_reconnect',
        value: function _reconnect() {
            var _this6 = this;

            var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (force) {
                this.log('force reconnect');
                this.resetMqtt();
                this.connect(this.userId, this.token);
                return;
            }
            if (this.isConnecting) {
                return;
            }
            setTimeout(function () {
                if (_this6.connectionStatus !== _connectionStatus2.default.ConnectionStatusUnconnected || _this6.isConnecting) {
                    return;
                }
                _this6.resetMqtt();
                _this6.connect(_this6.userId, _this6.token);
            }, WfcImpl.connectionTimeout);
        }
    }, {
        key: '_getLongFromBuffer',
        value: function _getLongFromBuffer(buffer) {
            return _long2.default.fromBytesBE(buffer.slice(0, 8));
        }
    }, {
        key: '_getStringFromBuffer',
        value: function _getStringFromBuffer(buffer) {
            return buffer.toString();
        }
    }, {
        key: '_pullMessages',
        value: function _pullMessages(head) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var pullSettings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var recvHead = arguments[3];
            var readHead = arguments[4];
            var groupConvHead = arguments[5];

            var _this7 = this;

            var syncRead = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
            var mn = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;

            this.log('to pull user messages', head, type, pullSettings);
            // 非chatroom
            if (type !== 1) {
                if (mn) {
                    this.pendingMN = true;
                }
                if (this.isPullingMsg || this.msgHead.compare(head) >= 0 && !this.pendingMN) {
                    this.log('local message is up to date', head, this.msgHead, pullSettings, recvHead, readHead, syncRead);
                    if (pullSettings || syncRead) {
                        this._pullUserSettings(_long2.default.MAX_VALUE);
                        if (this.isReceiptEnable) {
                            this._pullRecv(recvHead);
                            this._pullRead(readHead);
                            this._pullGroupConvs(groupConvHead);
                            if (syncRead) {
                                this._syncRead();
                            }
                        }
                    } else {
                        if (this.connectionStatus !== _connectionStatus2.default.ConnectionStatusConnected) {
                            this.onConnectionChanged(_connectionStatus2.default.ConnectionStatusConnected);
                        }
                    }
                    return;
                }
                this.isPullingMsg = true;
                this.pendingMN = false;
            } else {
                if (!this.currentChatRoomId) {
                    return;
                }
                if (this.isPullingChatroomMsg || (0, _longUtil.gte)(this.chatRoomMsgHead, head)) {
                    return;
                }
                this.isPullingChatroomMsg = true;
            }

            var pullMessageRequest = _wfcmessage.PullMessageRequest.encode({
                'id': type !== 1 ? this.msgHead : this.chatRoomMsgHead,
                'type': type
            }).finish();

            this.log('pull user messages, type: ' + type + ', head: ' + (0, _longUtil.stringValue)(head) + ', msgHead: ' + (0, _longUtil.stringValue)(this.msgHead) + ', chatroomMsgHead: ' + (0, _longUtil.stringValue)(this.chatRoomMsgHead));
            this._publish("MP", pullMessageRequest, function (errorCode, data) {
                _this7.log('pull user messages response', errorCode);
                if (errorCode !== 0 || !data) {
                    _this7.log('pull message error', errorCode);
                    if (type !== 1) {
                        _this7.isPullingMsg = false;
                    } else {
                        _this7.isPullingChatroomMsg = false;
                    }
                    if (pullSettings) {
                        _this7._pullUserSettings(_this7.settingHead);
                    }
                    return;
                }
                var pr = _wfcmessage.PullMessageResult.decode(data);
                if (type === 0) {
                    _this7.msgHead = pr.current;
                    _this7.isPullingMsg = false;
                    _this7.log('pull message result', (0, _longUtil.stringValue)(pr.current), pr.message.length);
                } else if (type === 1) {
                    _this7.log('pull chatroom message result', (0, _longUtil.stringValue)(pr.current), pr.message.length);
                    _this7.isPullingChatroomMsg = false;
                    if (pr.message.length > 0 && pr.message[0].conversation.target !== _this7.currentChatRoomId) {
                        _this7.log('user not in chatroom now, drop message');
                        return;
                    }
                    _this7.chatRoomMsgHead = pr.current;
                }
                _this7.onReceiveMessage(pr.message, pullSettings);
                _this7._pullMessages(pr.head, type, pullSettings, recvHead, readHead, groupConvHead, syncRead);
            });
        }
    }, {
        key: '_pullRecv',
        value: function _pullRecv(head) {
            var _this8 = this;

            if (!head || this.isPullingRecv || this.recvHead.compare(head) >= 0) {
                return;
            }
            this.isPullingRecv = true;
            var version = _wfcmessage.Version.create();
            version.version = this.recvHead;
            var request = _wfcmessage.Version.encode(version).finish();

            this.log('pull recv', this.recvHead);
            this._publish("RCP", request, function (errorCode, data) {
                _this8.isPullingRecv = false;
                if (errorCode === 0 && data) {
                    var pullResult = _wfcmessage.PullDeliveryResult.decode(data);
                    _this8.log('pull recv result', pullResult);
                    _this8.recvHead = pullResult.current;
                    _this8.store.updateDeliveries(pullResult.delivery);
                    var result = new _map2.default();
                    pullResult.delivery.forEach(function (d) {
                        result.set(d.fromUser, d.receiveTime);
                    });
                    _this8.eventEmitter.emit(_wfcEvent2.default.MessageReceived, result);
                    _this8._pullRecv(pullResult.head);
                }
            });
        }
    }, {
        key: '_pullRead',
        value: function _pullRead(head) {
            var _this9 = this;

            if (!head || this.isPullingRead || this.readHead.compare(head) >= 0) {
                return;
            }
            this.isPullingRead = true;
            var version = _wfcmessage.Version.create();
            version.version = this.readHead;
            var request = _wfcmessage.Version.encode(version).finish();

            this.log('pull read', this.readHead);
            this._publish("RDP", request, function (errorCode, data) {
                _this9.isPullingRead = false;
                if (errorCode === 0 && data) {
                    var pullResult = _wfcmessage.PullReadResult.decode(data);
                    _this9.log('pull read result', pullResult);
                    _this9.readHead = pullResult.current;
                    _this9.store.updateReads(pullResult.read);

                    var result = [];
                    pullResult.read.forEach(function (r) {
                        var readEntry = new _readEntry2.default();
                        readEntry.userId = r.fromUser;
                        readEntry.readTime = r.readTime;
                        if (r.conversation.type === 0) {
                            r.conversation.target = r.fromUser;
                        }
                        readEntry.conversation = (0, _assign2.default)(new _conversation2.default(), r.conversation);
                        readEntry.conversation.conversationType = readEntry.conversation.type;
                        result.push(readEntry);
                    });

                    _this9.eventEmitter.emit(_wfcEvent2.default.MessageRead, result);
                    _this9._pullRead(pullResult.head);
                }
            });
        }
    }, {
        key: '_pullGroupConvs',
        value: function _pullGroupConvs(head, target, line, gmn) {
            var _this10 = this;

            if (!gmn && (0, _longUtil.gte)(this.groupHead, head)) {
                return;
            }
            this.isPullingGroupMsg = true;
            var request = _wfcmessage.PullGroupConvRequest.create();
            request.head = this.groupHead;
            if (target) {
                request.target = target;
                request.line = line;
                request.messageId = this.store.getGroupMessageHead(target, line);
            }
            request = _wfcmessage.PullGroupConvRequest.encode(request).finish();
            this.log('pull groupConvs', this.groupHead);
            this._publish("GCP", request, function (errorCode, data) {
                _this10.isPullingGroupMsg = false;
                if (errorCode === 0 && data) {
                    var result = _wfcmessage.PullGroupConvResult.decode(data);
                    _this10.log('pull groupConvs result', result);
                    _this10._onPullGroupConvSuccess(target, line, result);
                } else {
                    _this10.onConnectionChanged(_connectionStatus2.default.ConnectionStatusUnconnected);
                }
            });
        }
    }, {
        key: '_onPullGroupConvSuccess',
        value: function _onPullGroupConvSuccess(target, line, result) {
            this.groupHead = result.current;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(result.conv), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var conv = _step.value;

                    this.store.setGroupMessageServerHead(conv.groupId, conv.line, conv.msgHead);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var messageResult = result.groupMessage;
            if (target && (messageResult.msg.length > 0 || messageResult.message.length > 0)) {
                var pulledMsgs = messageResult.msg;
                var pulledGroupMsgs = messageResult.message;
                var filledGroupMsgs = this._fillGroupMessage(messageResult.groupId, messageResult.line, pulledGroupMsgs);
                var msgs = pulledMsgs.concat(filledGroupMsgs);
                this._onPullGroupMessage(msgs, [messageResult]);
            }

            this.isPullingGroupMsg = false;
            this._pullGroupMessages();
            if (this.pendingGMN) {
                this.pendingGMN = false;
                this._pullGroupConvs(_long2.default.MAX_VALUE, '', 0, false);
            }
        }
    }, {
        key: '_pullGroupMessages',
        value: function _pullGroupMessages() {
            var _this11 = this;

            if (this.isPullingGroupMsg) {
                return;
            }
            var heads = this.store.getGroupMessageHeads();
            var requests = [];
            if (heads.length > 0) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = (0, _getIterator3.default)(heads), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var head = _step2.value;

                        var req = _wfcmessage.PullGroupMessageRequest.create();
                        req.groupId = head.target;
                        req.line = head.line;
                        req.id = head.head;
                        requests.push(req);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
            if (requests.length > 0) {
                this.onConnectionChanged(_connectionStatus2.default.ConnectionStatusReceiveing);
                this.isPullingGroupMsg = true;
                var _req = _wfcmessage.PullGroupMessageRequests.create();
                _req.request = requests;
                this.log('_pullGroupMessages', _req, requests);
                _req = _wfcmessage.PullGroupMessageRequests.encode(_req).finish();
                this._publish("GMP", _req, function (errorCode, data) {
                    _this11.isPullingGroupMsg = false;
                    if (errorCode === 0 && data) {
                        var results = _wfcmessage.PullGroupMessageResults.decode(data);
                        _this11.log('_pullGroupMessages result', results);
                        _this11._onPullGroupMessagesSuccess(results);
                    } else {
                        _this11.onConnectionChanged(_connectionStatus2.default.ConnectionStatusUnconnected);
                    }
                });
            }
        }
    }, {
        key: '_onPullGroupMessagesSuccess',
        value: function _onPullGroupMessagesSuccess(results) {
            if (results.result.length) {
                var msgs = [];
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = (0, _getIterator3.default)(results.result), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var r = _step3.value;

                        var pulledMsgs = r.msg;
                        var pulledGroupMsgs = r.message;
                        var filledGroupMsgs = this._fillGroupMessage(r.groupId, r.line, pulledGroupMsgs);
                        msgs = msgs.concat(pulledMsgs.concat(filledGroupMsgs));
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                this._onPullGroupMessage(msgs, results.result);
            }
            this.isPullingGroupMsg = false;
            this.onConnectionChanged(_connectionStatus2.default.ConnectionStatusConnected);
            this._pullGroupMessages();
            if (this.pendingGMN) {
                this.pendingGMN = false;
                this._pullGroupConvs(_long2.default.MAX_VALUE, '', 0, false);
            }
        }
    }, {
        key: '_onPullGroupMessage',
        value: function _onPullGroupMessage(messages, results) {
            console.log('_onPullGroupMessage', messages, results);
            this.onReceiveMessage(messages, false, true);
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = (0, _getIterator3.default)(results), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var r = _step4.value;

                    var key = _conversationType2.default.Group + '-' + r.line + '-' + r.groupId;
                    var syncSetting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, key);

                    if (syncSetting && (0, _longUtil.gt)(syncSetting, 0)) {
                        //TODO 请消息未读状态
                    }

                    this.store.setGroupMessageHead(r.groupId, r.line, r.current);
                    this.store.setGroupMessageServerHead(r.groupId, r.line, r.head);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    }, {
        key: '_parseGroupMessageFlag',
        value: function _parseGroupMessageFlag(flag) {
            return {
                contentType: flag >> 8 & 0x7FF,
                persistFlag: flag >> 4 & 0xF,
                mentionedType: flag >> 1 & 7,
                send: (flag & 1) > 0
            };
        }
    }, {
        key: '_messageId2Time',
        value: function _messageId2Time(messageId) {
            // messageId >>= 21;
            // messageId += 1514736000000L;
            var timestamp = messageId.shiftRight(21);
            timestamp = timestamp.add(1514736000000);
            return timestamp;
        }
    }, {
        key: '_fillGroupMessage',
        value: function _fillGroupMessage(groupId, line, groupMsgs) {
            var msgs = [];
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = (0, _getIterator3.default)(groupMsgs), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var gmsg = _step5.value;

                    var pbMsg = _wfcmessage.Message.create();
                    var flag = this._parseGroupMessageFlag(gmsg.flag);

                    pbMsg.messageId = gmsg.messageId;
                    pbMsg.conversation = new _wfcmessage.Conversation();
                    pbMsg.conversation.type = _conversationType2.default.Group;
                    pbMsg.conversation.target = groupId;
                    pbMsg.conversation.line = line;
                    pbMsg.content = new _wfcmessage.MessageContent();
                    pbMsg.content.type = flag.contentType;
                    pbMsg.content.persistFlag = flag.persistFlag;
                    pbMsg.content.mentionedType = flag.mentionedType;
                    pbMsg.content.__notLoaded = true;

                    if (pbMsg.content.mentionedType > 0 && pbMsg.content.mentionedType !== 2) {
                        pbMsg.content.mentionedTarget.push(this.userId);
                    }

                    pbMsg.fromUser = gmsg.fromUser;
                    // msg.serverTimestamp = messageId2Time(it->messageId);
                    pbMsg.serverTimestamp = this._messageId2Time(gmsg.messageId);
                    msgs.push(pbMsg);
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            return msgs;
        }
    }, {
        key: 'isReceiptEnabled',
        value: function isReceiptEnabled() {
            return this.isReceiptEnable;
        }
    }, {
        key: 'getConversationDelivery',
        value: function getConversationDelivery(conversation) {
            return this.store.getConversationDelivery(conversation);
        }
    }, {
        key: 'getConversationRead',
        value: function getConversationRead(conversation) {
            return this.store.getConversationRead(conversation);
        }
    }, {
        key: 'setDeviceToken',
        value: function setDeviceToken(pushType, token) {
            var _this12 = this;

            if (!(pushType > 5) || !token) {
                this.error('setDeviceToken error, invalid parameters', pushType, token);
                return;
            }
            var request = _wfcmessage.UploadDeviceTokenRequest.create();
            request.pushType = pushType;
            request.appName = 'wfc.web';
            request.deviceToken = token;
            request.platform = 5; // web
            this._publish('UDT', _wfcmessage.UploadDeviceTokenRequest.encode(request).finish(), function (err, data) {
                if (!err) {
                    _this12.log('setDeviceToken error', err);
                }
            });
        }
    }, {
        key: 'getAuthCode',
        value: function getAuthCode(applicationId, type, host, successCB, failCB) {
            var request = _wfcmessage.AuthCodeRequest.create();
            request.targetId = applicationId;
            request.type = type;
            request.host = host;

            this._publish('ATR', _wfcmessage.AuthCodeRequest.encode(request).finish(), function (err, data) {
                if (err === 0) {
                    var resp = null;
                    if (data) {
                        var info = _wfcmessage.IDBuf.decode(data);
                        resp = info.id;
                    }
                    successCB && successCB(resp);
                } else {
                    failCB && failCB(err);
                }
            });
        }
    }, {
        key: '_pullUnreadMessages',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var conversationList, MAX_TO_LOAD_UNREAD_MESSAGE_CONVERSATION_COUNT, i, conversation, oldestMsg;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                conversationList = this.getConversationList([0, 1], [0]);
                                MAX_TO_LOAD_UNREAD_MESSAGE_CONVERSATION_COUNT = 200;
                                i = 0;

                            case 3:
                                if (!(i < conversationList.length && i < MAX_TO_LOAD_UNREAD_MESSAGE_CONVERSATION_COUNT)) {
                                    _context.next = 19;
                                    break;
                                }

                                conversation = conversationList[i].conversation;
                                oldestMsg = this.store.getConversationOldestMessage(conversation);

                                if (!oldestMsg) {
                                    oldestMsg = {
                                        timestamp: _long2.default.MAX_VALUE,
                                        messageUid: _long2.default.MAX_VALUE
                                    };
                                }
                                _context.next = 9;
                                return this._pullConversationUnreadMessages(conversation, oldestMsg);

                            case 9:
                                oldestMsg = _context.sent;

                            case 10:
                                if (!oldestMsg) {
                                    _context.next = 16;
                                    break;
                                }

                                _context.next = 13;
                                return this._pullConversationUnreadMessages(conversation, oldestMsg);

                            case 13:
                                oldestMsg = _context.sent;
                                _context.next = 10;
                                break;

                            case 16:
                                i++;
                                _context.next = 3;
                                break;

                            case 19:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function _pullUnreadMessages() {
                return _ref.apply(this, arguments);
            }

            return _pullUnreadMessages;
        }()

        /**
         *
         * 拉取会话未读消息
         * @param conversation
         * @param {Message} oldestMsg 最旧的一条消息
         * @return {Promise<Message>} 拉取到的最旧消息，为 null 表示所有未读消息已全部拉取
         * @private
         */

    }, {
        key: '_pullConversationUnreadMessages',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(conversation, oldestMsg) {
                var _this13 = this;

                var key, syncSetting, silentSetting, p;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                key = conversation.type + '-' + conversation.line + '-' + conversation.target;
                                syncSetting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, key);
                                silentSetting = this.getUserSetting(_userSettingScope2.default.ConversationSilent, key);
                                p = new _promise2.default(function (resolve, reject) {
                                    if ((!silentSetting || silentSetting.value !== '0') && syncSetting) {
                                        if ((0, _longUtil.gt)(oldestMsg.timestamp, syncSetting.value)) {
                                            _this13.loadRemoteMessages(conversation, [], oldestMsg.messageUid, 50, function (remoteMsgs) {
                                                console.log('load conversation unread msgs', key, (0, _longUtil.stringValue)(oldestMsg.messageUid), remoteMsgs.length);
                                                _this13.store.updateConversationUnreadStatus(conversation, syncSetting.value);
                                                if (remoteMsgs.length > 0) {
                                                    resolve(remoteMsgs[0]);
                                                } else {
                                                    resolve(null);
                                                }
                                            }, function (errorCode) {
                                                resolve(null);
                                            }, false);
                                        } else {
                                            resolve(null);
                                        }
                                    } else {
                                        resolve(null);
                                    }
                                });
                                return _context2.abrupt('return', p);

                            case 5:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function _pullConversationUnreadMessages(_x8, _x9) {
                return _ref2.apply(this, arguments);
            }

            return _pullConversationUnreadMessages;
        }()
    }, {
        key: '_pullUserSettings',
        value: function _pullUserSettings(head) {
            var _this14 = this;

            this.log('pull user setting...', head);
            if (this.isPullingSetting) {
                return;
            }
            if (this.settingHead.compare(_long2.default.ZERO) > 0 && this.settingHead.compare(head) >= 0) {
                if (this.connectionStatus !== _connectionStatus2.default.ConnectionStatusConnected) {
                    this.onConnectionChanged(_connectionStatus2.default.ConnectionStatusConnected);
                }
                return;
            }

            this.isPullingSetting = true;
            var version = _wfcmessage.Version.create();
            version.version = this.settingHead;
            var request = _wfcmessage.Version.encode(version).finish();

            this._publish("UG", request, function (errorCode, data) {
                _this14.log('pull user setting response');
                _this14.isPullingSetting = false;
                if (errorCode !== 0 || !data) {
                    if (_this14.connectionStatus !== _connectionStatus2.default.ConnectionStatusConnected) {
                        if (errorCode === 0) {
                            _this14.onConnectionChanged(_connectionStatus2.default.ConnectionStatusConnected);
                        } else {
                            _this14.onConnectionChanged(_connectionStatus2.default.ConnectionStatusUnconnected);
                        }
                        _this14.log('pull user setting error', errorCode);
                    }
                    return;
                }
                var ur = _wfcmessage.GetUserSettingResult.decode(data);
                var pulledHead = _this14.settingHead;
                if (ur.entry.length > 0) {
                    ur.entry.forEach(function (e) {
                        pulledHead = (0, _longUtil.gt)(e.updateDt, pulledHead) ? e.updateDt : pulledHead;
                    });
                } else {
                    pulledHead = head;
                }
                _this14.store.updateUserSettings(ur.entry);
                _this14._preloadConversationTargetInfos();

                if (_this14.connectionStatus !== _connectionStatus2.default.ConnectionStatusConnected) {
                    _this14.onConnectionChanged(_connectionStatus2.default.ConnectionStatusConnected);
                }
                _this14.onSettingUpdate(ur.entry);
                _this14.settingHead = pulledHead;
                if ((0, _longUtil.gt)(head, pulledHead)) {
                    _this14._pullUserSettings(head);
                }
            });
        }
    }, {
        key: '_preloadConversationTargetInfos',
        value: function _preloadConversationTargetInfos() {
            if (this.isConversationTargetPreloaded) {
                return;
            }
            this.isConversationTargetPreloaded = true;
            var conversationInfos = this.store._getConversationInfos();
            var userIds = [];
            var groupIds = [];
            conversationInfos.forEach(function (c) {
                if (c.conversation.type === _conversationType2.default.Single) {
                    userIds.push(c.conversation.target);
                } else if (c.conversation.type === _conversationType2.default.Group) {
                    groupIds.push(c.conversation.target);
                }
            });

            if (userIds.indexOf(this.getUserId()) < 0) {
                userIds.push(this.getUserId());
            }
            this.getGroupInfos(groupIds);
            this.getUserInfos(userIds);
        }
    }, {
        key: '_preloadFiendsUserInfo',
        value: function _preloadFiendsUserInfo() {
            if (this.isFriendPreloaded) {
                return;
            }
            this.isFriendPreloaded = true;
            var friends = this.store.getFriendIds();
            this.getUserInfos(friends);
        }
    }, {
        key: '_preloadFirendRequsetUserInfo',
        value: function _preloadFirendRequsetUserInfo() {
            if (this.isFriendRequestPreloaded) {
                return;
            }
            // TODO
        }
    }, {
        key: '_updateUserSetting',
        value: function _updateUserSetting(scope, key, value, successCB, failCB) {
            var _this15 = this;

            var modifySettingReq = _wfcmessage.ModifyUserSettingReq.create();
            modifySettingReq.scope = scope;
            modifySettingReq.key = key;
            modifySettingReq.value = value + '';

            var requestData = _wfcmessage.ModifyUserSettingReq.encode(modifySettingReq).finish();

            this._publish("UP", requestData, function (errorCode, data) {
                if (errorCode === 0) {
                    var setting = new _userSettingEntry2.default();
                    setting.scope = scope;
                    setting.key = key;
                    setting.value = value;
                    setting.updateDt = new Date().getTime();
                    _this15.store.updateUserSettings([setting]);
                    if (successCB) {
                        successCB();
                    }
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: '_pullFriends',
        value: function _pullFriends(head) {
            var _this16 = this;

            if (this.friendHead.compare(head) >= 0) {
                return 0;
            }
            var version = _wfcmessage.Version.create();
            version.version = this.friendHead;
            var requet = _wfcmessage.Version.encode(version).finish();
            this._publish('FP', requet, function (errorCode, data) {
                if (errorCode !== 0 || !data) {
                    _this16.log('pull friend error', errorCode);
                    return;
                }
                var fr = _wfcmessage.GetFriendsResult.decode(data);
                _this16.log('fr', fr);
                var uids = [];
                var pulledHead = 0;
                fr.entry.map(function (e) {
                    if (e.state === 0) {
                        uids.push(e.uid);
                    }
                    _this16.store.insertFriend((0, _assign2.default)(new _friendInfo2.default(), e));

                    pulledHead = (0, _longUtil.gt)(e.updateDt, pulledHead) ? e.updateDt : pulledHead;
                });
                _this16.friendHead = pulledHead;
                if ((0, _longUtil.gt)(head, _this16.friendHead)) {
                    _this16._pullFriends(head);
                }
                _this16._preloadFiendsUserInfo();
                _this16.onFriendListUpdate(uids);
            });
        }
    }, {
        key: '_pullFriendRequest',
        value: function _pullFriendRequest(head) {
            this.log('_pullFriendRequest', head);
            if (this.friendRequestHead.compare(head) >= 0) {
                return;
            }
            var friendRequestMaxDt = this.store.getFriendRequestMaxDt();
            this.loadFriendRequestFromRemote(friendRequestMaxDt);
        }
    }, {
        key: 'disconnect',
        value: function disconnect() {
            this.onConnectionChanged(_connectionStatus2.default.ConnectionStatusLogout);
            this.reset();
            this.isUserDisconnected = true;
        }
    }, {
        key: 'getProtoRevision',
        value: function getProtoRevision() {
            return WfcImpl.version;
        }
    }, {
        key: 'getUserId',
        value: function getUserId() {
            return this.userId;
        }
    }, {
        key: 'getServerDeltaTime',
        value: function getServerDeltaTime() {
            return parseInt(this.deltaTime);
        }
    }, {
        key: 'isLogin',
        value: function isLogin() {
            return this.token && this.token.length > 0;
        }
    }, {
        key: 'getConnectionStatus',
        value: function getConnectionStatus() {
            return this.connectionStatus;
        }

        /**
         * 设置网络策略，仅专业版支持
         * @param {int} strategy 网络策略。0 是自动选择；1 选择主网络；2选择备用网络
         *
         */

    }, {
        key: 'setBackupAddressStrategy',
        value: function setBackupAddressStrategy(strategy) {
            this.backupAddressStrategy = strategy;
        }
    }, {
        key: 'setBackupAddress',
        value: function setBackupAddress(backupHost, backupPort) {
            this.backupHost = backupHost;
            this.backupPort = backupPort;
        }
    }, {
        key: 'useSM4',
        value: function useSM4() {
            this.log('use encryptSM4');
            (0, _aes.useEncryptSM4)();
        }
    }, {
        key: 'getMyGroupList',
        value: function getMyGroupList() {
            var groupIds = this.store.getFavGroups();
            if (!groupIds || groupIds.length === 0) {
                return [];
            }
            return this.getGroupInfos(groupIds);
        }
    }, {
        key: '_publish',
        value: function _publish(topic, data, cb) {
            var _this17 = this;

            var encryptData = this._encrypt(data);
            if (!this.mqttClientInstance) {
                this.log('the connect is reset, reconnecting');
                if (cb) {
                    cb(-1);
                }
                return;
            }

            var timer = setTimeout(function () {
                _this17.log('publish not response after ' + _config2.default.SEND_MESSAGE_TIMEOUT + 's, reset');
                if (cb) {
                    cb(-1);
                }
                _this17.connectionStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                _this17._reconnect();
            }, (_config2.default.SEND_MESSAGE_TIMEOUT ? _config2.default.SEND_MESSAGE_TIMEOUT : 20) * 1000);
            this.mqttClientInstance.publish(topic, encryptData, { qos: 1, retain: true, dup: true }, function (err, packet) {
                clearTimeout(timer);
                if (!cb) {
                    _this17.log('publish, cb is null, drop');
                    return;
                }
                if (err) {
                    _this17.log('publish error', topic, err);
                    cb(-1);
                    if (err.message === 'Connection closed') {
                        _this17.connectionStatus = _connectionStatus2.default.ConnectionStatusUnconnected;
                        _this17._reconnect();
                    }
                    return;
                }
                _this17.lastActiveTime = new Date().getTime();
                _this17.log('publish response');
                if (!packet || !packet.payload || packet.payload.length < 1) {
                    _this17.log('publish response error', packet);
                    cb && cb(-1);
                    return;
                }
                var errorCode = packet.payload[0];
                if (errorCode === 0 || errorCode === 255 || errorCode === 5) {
                    _this17.log('publish error code ', topic, errorCode);
                    var decryptData = null;
                    if (packet.payload && packet.payload.length > 1) {
                        decryptData = _this17._decryptPublishResponse(packet);
                        if (errorCode === 255) {
                            _this17.log('publish response compressed');
                            try {
                                decryptData = _pako2.default.inflate(decryptData);
                            } catch (err) {
                                _this17.log('decompress response error', err);
                            }
                        }
                        cb(0, decryptData);
                    } else {
                        _this17.log('publish response is empty');
                        cb(0, null);
                    }
                } else {
                    _this17.log('publish error', topic, errorCode);
                    cb(errorCode);
                    if (errorCode === _errorCode2.default.kEcServerTokenIncorrect || errorCode === _errorCode2.default.kEcServerUserIsBlocked || errorCode === _errorCode2.default.kEcServerSecrectKeyMismatch) {
                        // 由于web端，不持久化消息、用户信息等，且每次连接之前，都已经进行了route操作，
                        // 故如果走到了这儿，重新route解决解决不了问题
                        // this.resetMqtt();
                        // this.connect(this.userId, this.token);
                    }
                }
            });
        }
    }, {
        key: '_reloadUserInfosFromRemote',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(userIds) {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                this._reloadUserInfosFromRemoteEx(null, null, userIds);

                            case 1:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function _reloadUserInfosFromRemote(_x10) {
                return _ref3.apply(this, arguments);
            }

            return _reloadUserInfosFromRemote;
        }()
    }, {
        key: '_reloadUserInfosFromRemoteEx',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(success, fail, userIds) {
                var _this18 = this;

                var pullUserRequest;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                if (userIds.length > 2000) {
                                    this.warn('to reloadUserInfos too large', userIds.length);
                                    userIds = userIds.slice(0, 2000);
                                }
                                pullUserRequest = _wfcmessage.PullUserRequest.create();

                                userIds.forEach(function (userId) {
                                    if (!userId) {
                                        return;
                                    }
                                    if (_this18.store.loadingUsers.has(userId)) {
                                        return;
                                    } else {
                                        _this18.store.loadingUsers.add(userId);
                                    }
                                    var userRequest = _wfcmessage.UserRequest.create();
                                    userRequest.uid = userId;
                                    var localUserInfo = _this18.store.getUser(userId);
                                    userRequest.updateDt = localUserInfo ? localUserInfo.updateDt : _long2.default.ZERO;
                                    pullUserRequest.request.push(userRequest);
                                });

                                if (!(pullUserRequest.request.length < 1)) {
                                    _context4.next = 5;
                                    break;
                                }

                                return _context4.abrupt('return');

                            case 5:
                                this.log('reload userInfo from remote', userIds);
                                this._publish("UPUI", _wfcmessage.PullUserRequest.encode(pullUserRequest).finish(), function (errorCode, data) {
                                    userIds.forEach(function (userId) {
                                        _this18.store.loadingUsers.delete(userId);
                                    });
                                    if (errorCode !== 0 || !data) {
                                        _this18.log('reloadUserInfoFromRemote error', errorCode, userIds);
                                        fail && fail(errorCode !== 0 ? errorCode : -1);
                                        return;
                                    }
                                    var result = _wfcmessage.PullUserResult.decode(data).result;
                                    if (result.length > 0) {
                                        var userInfos = [];
                                        _this18.log('load userInfo from remote', result);
                                        result.forEach(function (ur) {
                                            if (ur.code !== 0) {
                                                return;
                                            }
                                            var userInfo = (0, _assign2.default)(new _userInfo2.default(), ur.user);
                                            if (_config2.default.urlRedirect) {
                                                userInfo.portrait = _config2.default.urlRedirect(userInfo.portrait);
                                            }
                                            _this18.store.setUser(userInfo);
                                            userInfos.push(_this18.store.getUser(userInfo.uid, ''));
                                        });
                                        success && success(userInfos);
                                        if (userInfos.length > 0) {
                                            _this18.eventEmitter.emit(_wfcEvent2.default.UserInfosUpdate, userInfos);
                                        }
                                    } else {
                                        _this18.log('reload userInfo from remote response empty');
                                        fail && fail(-1);
                                    }
                                });

                            case 7:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function _reloadUserInfosFromRemoteEx(_x11, _x12, _x13) {
                return _ref4.apply(this, arguments);
            }

            return _reloadUserInfosFromRemoteEx;
        }()
    }, {
        key: '_reloadUserInfoFromRemote',
        value: function () {
            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(userId, updateDt, successCB, failCB) {
                var _this19 = this;

                var pullUserRequest, userRequest;
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                pullUserRequest = _wfcmessage.PullUserRequest.create();
                                userRequest = _wfcmessage.UserRequest.create();

                                userRequest.uid = userId;
                                userRequest.updateDt = _long2.default.fromValue(updateDt);
                                pullUserRequest.request.push(userRequest);
                                this.log('reload userInfo from remote', userId);
                                this._publish("UPUI", _wfcmessage.PullUserRequest.encode(pullUserRequest).finish(), function (errorCode, data) {
                                    if (errorCode !== 0 || !data) {
                                        failCB && failCB(errorCode === 0 ? -1 : errorCode);
                                        _this19.log('reloadUserInfoFromRemote error', errorCode, userId);
                                        return;
                                    }
                                    var result = _wfcmessage.PullUserResult.decode(data).result;
                                    if (result.length > 0) {
                                        var userInfos = [];
                                        _this19.log('load userInfo from remote', result);
                                        result.forEach(function (ur) {
                                            var userInfo = (0, _assign2.default)(new _userInfo2.default(), ur.user);
                                            if (_config2.default.urlRedirect) {
                                                userInfo.portrait = _config2.default.urlRedirect(userInfo.portrait);
                                            }
                                            _this19.store.setUser(userInfo);
                                            userInfos.push(_this19.store.getUser(userInfo.uid, ''));
                                        });
                                        successCB && successCB(userInfos[0]);
                                    } else {
                                        failCB && failCB(-1);
                                    }
                                });

                            case 7:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function _reloadUserInfoFromRemote(_x14, _x15, _x16, _x17) {
                return _ref5.apply(this, arguments);
            }

            return _reloadUserInfoFromRemote;
        }()
    }, {
        key: 'getUserInfo',
        value: function getUserInfo(userId) {
            var refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var groupId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

            var userInfo = this.store.getUser(userId, groupId);

            if (refresh || userInfo instanceof _nullUserInfo2.default) {
                this._reloadUserInfosFromRemote([userId]);
            }
            return userInfo;
        }
    }, {
        key: 'getUserInfoEx',
        value: function getUserInfoEx(userId, refresh, success, fail) {
            var userInfo = this.store.getUser(userId);
            if (!(userInfo instanceof _nullUserInfo2.default)) {
                success && success(userInfo);
            }
            if (refresh || userInfo instanceof _nullUserInfo2.default) {
                this._reloadUserInfosFromRemoteEx(function (users) {
                    success && success(users[0]);
                }, fail, [userId]);
            }
        }
    }, {
        key: 'getUserInfos',
        value: function getUserInfos() {
            var _this20 = this;

            var userIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var groupId = arguments[1];

            var userInfos = [];
            var toLoadUids = [];
            userIds.forEach(function (userId) {
                var userInfo = _this20.store.getUser(userId, groupId);
                if (userInfo instanceof _nullUserInfo2.default) {
                    toLoadUids.push(userId);
                }
                userInfos.push(userInfo);
            });
            if (toLoadUids.length > 0) {
                this._reloadUserInfosFromRemote(toLoadUids);
            }
            return userInfos;
        }
    }, {
        key: 'searchUser',
        value: function () {
            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(keyword, searchType, page, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                request = _wfcmessage.SearchUserRequest.create();

                                request.fuzzy = searchType;
                                request.keyword = keyword;
                                request.page = page;
                                this._publish('US', _wfcmessage.SearchUserRequest.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0 && data) {
                                        if (successCB) {
                                            var result = _wfcmessage.SearchUserResult.decode(data);
                                            // let userInfo = Object.assign(new UserInfo(), ur.user);
                                            successCB(keyword, result.entry);
                                        }
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 5:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            function searchUser(_x21, _x22, _x23, _x24, _x25) {
                return _ref6.apply(this, arguments);
            }

            return searchUser;
        }()
    }, {
        key: 'searchFriends',
        value: function searchFriends(keyword) {
            return this.store.searchFriends(keyword);
        }
    }, {
        key: 'searchGroups',
        value: function searchGroups(keyword) {
            return this.store.searchGroups(keyword);
        }
    }, {
        key: 'getIncommingFriendRequest',
        value: function getIncommingFriendRequest() {
            return this.store.getIncommingFriendRequest();
        }
    }, {
        key: 'getOutgoingFriendRequest',
        value: function getOutgoingFriendRequest() {
            return this.store.getOutgoingFriendRequest();
        }
    }, {
        key: 'getOneFriendRequest',
        value: function getOneFriendRequest(userId, incoming) {
            return this.store.getOneFriendRequest(userId, incoming);
        }
    }, {
        key: 'loadFriendRequestFromRemote',
        value: function loadFriendRequestFromRemote(head) {
            var _this21 = this;

            var request = _wfcmessage.Version.create();
            request.version = head;

            this._publish('FRP', _wfcmessage.Version.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0 && data) {
                    var pulledHead = 0;
                    var result = _wfcmessage.GetFriendRequestResult.decode(data);
                    _this21.log('load friend request result', result);
                    var newFriendRequests = [];
                    result.entry.forEach(function (request) {
                        var friendRequest = new _friendRequest2.default();
                        friendRequest.status = request.status;
                        friendRequest.reason = request.reason;
                        friendRequest.extra = request.extra;
                        if (request.fromUid === _this21.getUserId()) {
                            friendRequest.direction = 0;
                            friendRequest.target = request.toUid;
                            friendRequest.readStatus = request.fromReadStatus ? 1 : 0;
                        } else {
                            friendRequest.direction = 1;
                            friendRequest.target = request.fromUid;
                            friendRequest.readStatus = request.toReadStatus ? 1 : 0;
                            if (friendRequest.readStatus === 0) {
                                newFriendRequests.push(friendRequest.target);
                            }
                        }
                        friendRequest.timestamp = request.updateDt;
                        if ((0, _longUtil.gt)(request.updateDt, pulledHead)) {
                            pulledHead = request.updateDt;
                        }
                        _this21.store.insertOrReplaceFriendRequest(friendRequest);
                    });
                    _this21.friendRequestHead = pulledHead;
                    if ((0, _longUtil.gt)(head, pulledHead)) {
                        _this21.loadFriendRequestFromRemote(pulledHead);
                    }
                    _this21.onFriendRequestUpdate(newFriendRequests);
                }
            });
        }
    }, {
        key: 'getUnreadFriendRequestCount',
        value: function getUnreadFriendRequestCount() {
            return this.store.getUnreadFriendRequestCount();
        }
    }, {
        key: 'clearUnreadFriendRequestStatus',
        value: function clearUnreadFriendRequestStatus() {
            var maxDt = this.store.getUnreadFriendRequestMaxDt();
            if (_long2.default.ZERO.compare(maxDt) === 0) {
                return;
            }
            var count = this.store.clearUnreadFriendRequestStatus();
            if (count > 0) {
                var request = _wfcmessage.Version.create();
                request.version = maxDt;
                this._publish('FRUS', _wfcmessage.Version.encode(request).finish(), function (errorCode, data) {
                    // do nothing now
                });
            }
        }
    }, {
        key: 'deleteFriend',
        value: function () {
            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(userId, successCB, failCB) {
                var _this22 = this;

                var request;
                return _regenerator2.default.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                request = _wfcmessage.IDBuf.create();

                                request.id = userId;
                                this._publish('FDL', _wfcmessage.IDBuf.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        _this22.store.deleteFriend(userId);
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else {
                                        failCB(errorCode);
                                    }
                                });

                            case 3:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            function deleteFriend(_x27, _x28, _x29) {
                return _ref7.apply(this, arguments);
            }

            return deleteFriend;
        }()
    }, {
        key: 'handleFriendRequest',
        value: function () {
            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(userId, accept, extra, successCB, failCB) {
                var _this23 = this;

                var request;
                return _regenerator2.default.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                request = _wfcmessage.HandleFriendRequest.create();

                                request.status = accept ? 1 : 2;
                                request.targetUid = userId;
                                request.extra = extra;
                                this._publish('FHR', _wfcmessage.HandleFriendRequest.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this23.store.updateFriendRequestStatus(userId, request.status);
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 5:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            function handleFriendRequest(_x31, _x32, _x33, _x34, _x35) {
                return _ref8.apply(this, arguments);
            }

            return handleFriendRequest;
        }()
    }, {
        key: 'isBlackListed',
        value: function isBlackListed(userId) {
            this.store.isBlackListed(userId);
        }
    }, {
        key: 'getBlackList',
        value: function getBlackList() {
            return this.store.getBlackList();
        }
    }, {
        key: 'setBlackList',
        value: function setBlackList(userId, block, successCB, failCB) {
            var _this24 = this;

            var request = _wfcmessage.BlackUserRequest.create();
            request.status = block ? 2 : 1;
            request.uid = userId;
            this._publish('BLU', _wfcmessage.BlackUserRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    _this24.store.setBlackList(userId, block);
                    if (successCB) {
                        successCB();
                    }
                } else {
                    if (failCB) {
                        failCB();
                    }
                }
            });
        }
    }, {
        key: 'getMyFriendList',
        value: function getMyFriendList() {
            var fresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var uids = this.store.getFriendIds();
            if (fresh || uids.length === 0) {
                this._getMyFriendListFromRemote();
            }
            return uids;
        }
    }, {
        key: 'getFriendList',
        value: function getFriendList() {
            var fresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var friends = this.store.getFriends();
            if (friends.length === 0 || fresh) {
                this._getMyFriendListFromRemote();
            }
            return friends;
        }
    }, {
        key: 'getFriendAlias',
        value: function getFriendAlias(userId) {
            return this.store.getFriendAlias(userId);
        }
    }, {
        key: 'getFriendExtra',
        value: function getFriendExtra(userId) {
            return this.store.getFriendExtra(userId);
        }
    }, {
        key: 'setFriendAlias',
        value: function () {
            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(userId, alias, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                request = _wfcmessage.AddFriendRequest.create();

                                request.targetUid = userId;
                                request.reason = alias;
                                this._publish("FALS", _wfcmessage.AddFriendRequest.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        successCB();
                                    } else {
                                        failCB(errorCode);
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            function setFriendAlias(_x38, _x39, _x40, _x41) {
                return _ref9.apply(this, arguments);
            }

            return setFriendAlias;
        }()
    }, {
        key: '_getMyFriendListFromRemote',
        value: function () {
            var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {
                return _regenerator2.default.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                this._pullFriends(_long2.default.MAX_VALUE);

                            case 1:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            function _getMyFriendListFromRemote() {
                return _ref10.apply(this, arguments);
            }

            return _getMyFriendListFromRemote;
        }()
    }, {
        key: 'createGroup',
        value: function () {
            var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(groupId, groupType, name, portrait, groupExtra) {
                var memberIds = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
                var memberExtra = arguments[6];
                var lines = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [0];
                var notifyContent = arguments[8];

                var _this25 = this;

                var successCB = arguments[9];
                var failCB = arguments[10];
                var myUid, pbGroup, pbGroupInfo, groupInfo, groupMembers, member, createGroupReq;
                return _regenerator2.default.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                groupId = !groupId ? '' : groupId;
                                myUid = this.getUserId();
                                pbGroup = _wfcmessage.Group.create();
                                pbGroupInfo = _wfcmessage.GroupInfo.create();

                                pbGroupInfo.targetId = groupId;
                                pbGroupInfo.type = groupType;
                                pbGroupInfo.name = name;
                                pbGroupInfo.portrait = portrait;
                                pbGroupInfo.extra = groupExtra ? groupExtra : '';
                                pbGroup.groupInfo = pbGroupInfo;

                                groupInfo = new _groupInfo2.default();

                                groupInfo.target = groupId;
                                groupInfo.type = groupType;
                                groupInfo.name = name;
                                groupInfo.portrait = portrait;
                                groupInfo.extra = pbGroupInfo.extra;

                                groupMembers = [];

                                if (!memberIds.includes(myUid)) {
                                    memberIds.push(myUid);
                                }

                                member = void 0;

                                memberIds.forEach(function (memberId) {
                                    var pbMember = _wfcmessage.GroupMember.create();
                                    pbMember.memberId = memberId;
                                    pbMember.type = _groupMemberType2.default.Normal;

                                    member = new _groupMember2.default();
                                    member.groupId = groupId;
                                    member.memberId = memberId;
                                    member.type = _groupMemberType2.default.Normal;
                                    if (memberId === myUid) {
                                        pbMember.type = _groupMemberType2.default.Owner;
                                        member.type = _groupMemberType2.default.Owner;
                                    }
                                    pbGroup.members.push(pbMember);
                                    groupMembers.push(member);
                                });

                                createGroupReq = _wfcmessage.CreateGroupRequest.create();

                                createGroupReq.group = pbGroup;
                                createGroupReq.toLine = lines;
                                createGroupReq.memberExtra = memberExtra ? memberExtra : '';
                                createGroupReq.notifyContent = this._toProtoMessageContent(notifyContent);

                                this._publish('GC', _wfcmessage.CreateGroupRequest.encode(createGroupReq).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0 && data) {
                                        var _groupId = data.toString();
                                        groupInfo.target = _groupId;
                                        var conversation = new _conversation2.default(_conversationType2.default.Group, _groupId, 0);
                                        _this25.store.genAndSaveDefaultConversationInfo(conversation);

                                        _this25.store.setGroupInfo(groupInfo);
                                        _this25.store.setGroupMembers(_groupId, groupMembers);

                                        if (notifyContent) {
                                            var message = new _message2.default(conversation, notifyContent);
                                            _this25.store.updateConversationLastMessage(message);
                                        }

                                        if (successCB) {
                                            successCB(_groupId);
                                        }
                                        _this25.log('create group success', _groupId);
                                    } else {
                                        _this25.log('create group error', errorCode);
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 26:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));

            function createGroup(_x42, _x43, _x44, _x45, _x46) {
                return _ref11.apply(this, arguments);
            }

            return createGroup;
        }()
    }, {
        key: 'setGroupManager',
        value: function () {
            var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(groupId, isSet, memberIds, lines, notifyMessageContent, successCB, failCB) {
                var _this26 = this;

                var setGroupManagerRequest;
                return _regenerator2.default.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                setGroupManagerRequest = _wfcmessage.SetGroupManagerRequest.create();

                                setGroupManagerRequest.type = isSet ? 1 : 0;
                                setGroupManagerRequest.groupId = groupId;
                                setGroupManagerRequest.userId = memberIds;
                                setGroupManagerRequest.toLine = lines;
                                setGroupManagerRequest.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GSM', _wfcmessage.SetGroupManagerRequest.encode(setGroupManagerRequest).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                        _this26.log('set group manager success', groupId);
                                    } else {
                                        _this26.log('set group manager error', errorCode);
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 7:
                            case 'end':
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));

            function setGroupManager(_x50, _x51, _x52, _x53, _x54, _x55, _x56) {
                return _ref12.apply(this, arguments);
            }

            return setGroupManager;
        }()
    }, {
        key: '_reloadGroupInfosFromRemote',
        value: function () {
            var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {
                for (var _len = arguments.length, groupIds = Array(_len), _key = 0; _key < _len; _key++) {
                    groupIds[_key] = arguments[_key];
                }

                return _regenerator2.default.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                this._reloadGroupInfosFromRemoteEx(null, null, groupIds);

                            case 1:
                            case 'end':
                                return _context13.stop();
                        }
                    }
                }, _callee13, this);
            }));

            function _reloadGroupInfosFromRemote() {
                return _ref13.apply(this, arguments);
            }

            return _reloadGroupInfosFromRemote;
        }()
    }, {
        key: '_reloadGroupInfosFromRemoteEx',
        value: function () {
            var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14(success, fail, groupIds) {
                var _this27 = this;

                var pullUserRequest;
                return _regenerator2.default.wrap(function _callee14$(_context14) {
                    while (1) {
                        switch (_context14.prev = _context14.next) {
                            case 0:
                                pullUserRequest = _wfcmessage.PullUserRequest.create();

                                groupIds.forEach(function (groupId) {
                                    if (!success && _this27.store.loadingGroups.has(groupId)) {
                                        return;
                                    } else {
                                        _this27.store.loadingGroups.add(groupId);
                                    }
                                    var userRequest = _wfcmessage.UserRequest.create();
                                    userRequest.uid = groupId;
                                    var localGroupInfo = _this27.store.getGroupInfo(groupId);
                                    userRequest.updateDt = localGroupInfo ? localGroupInfo.updateDt : _long2.default.ZERO;
                                    pullUserRequest.request.push(userRequest);
                                });

                                if (!(pullUserRequest.request.length < 1)) {
                                    _context14.next = 5;
                                    break;
                                }

                                fail && fail(-1);
                                return _context14.abrupt('return');

                            case 5:

                                this.log('reload groupInfo from remote', groupIds);
                                this._publish('GPGI', _wfcmessage.PullUserRequest.encode(pullUserRequest).finish(), function (errorCode, data) {
                                    groupIds.forEach(function (groupId) {
                                        _this27.store.loadingGroups.delete(groupId);
                                    });
                                    if (errorCode !== 0 || !data) {
                                        _this27.log('reloadGroupInfoFromRemote error', errorCode, data, groupIds);
                                        fail && fail(errorCode !== 0 ? errorCode : -1);
                                        return;
                                    }
                                    var result = _wfcmessage.PullGroupInfoResult.decode(data).info;
                                    _this27.log('reload groupInfo from remote result', result);
                                    if (result.length > 0) {
                                        var groupInfos = [];
                                        result.forEach(function (info) {
                                            var groupInfo = (0, _assign2.default)(new _groupInfo2.default(), info);
                                            groupInfo.target = info.targetId;
                                            delete groupInfo.targetId;
                                            if (_config2.default.urlRedirect) {
                                                groupInfo.portrait = _config2.default.urlRedirect(groupInfo.portrait);
                                            }
                                            _this27.store.setGroupInfo(groupInfo);
                                            groupInfos.push(groupInfo);
                                        });
                                        success && success(groupInfos);
                                        _this27.eventEmitter.emit(_wfcEvent2.default.GroupInfosUpdate, groupInfos);
                                    }
                                });

                            case 7:
                            case 'end':
                                return _context14.stop();
                        }
                    }
                }, _callee14, this);
            }));

            function _reloadGroupInfosFromRemoteEx(_x57, _x58, _x59) {
                return _ref14.apply(this, arguments);
            }

            return _reloadGroupInfosFromRemoteEx;
        }()
    }, {
        key: '_reloadGroupMembersFromRemote',
        value: function () {
            var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15(groupId, updateDt) {
                return _regenerator2.default.wrap(function _callee15$(_context15) {
                    while (1) {
                        switch (_context15.prev = _context15.next) {
                            case 0:
                                this._reloadGroupMembersFromRemoteEx(groupId, updateDt, null, null);

                            case 1:
                            case 'end':
                                return _context15.stop();
                        }
                    }
                }, _callee15, this);
            }));

            function _reloadGroupMembersFromRemote(_x60, _x61) {
                return _ref15.apply(this, arguments);
            }

            return _reloadGroupMembersFromRemote;
        }()
    }, {
        key: '_reloadGroupMembersFromRemoteEx',
        value: function () {
            var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16(groupId, updateDt, successCB, failCB) {
                var _this28 = this;

                var requet;
                return _regenerator2.default.wrap(function _callee16$(_context16) {
                    while (1) {
                        switch (_context16.prev = _context16.next) {
                            case 0:
                                if (!(!successCB && this.store.loadingGroupMembers.has(groupId))) {
                                    _context16.next = 4;
                                    break;
                                }

                                return _context16.abrupt('return');

                            case 4:
                                this.store.loadingGroupMembers.add(groupId);

                            case 5:
                                requet = _wfcmessage.PullGroupMemberRequest.create();

                                requet.target = groupId;
                                requet.head = _long2.default.fromValue(updateDt);
                                this._publish('GPGM', _wfcmessage.PullGroupMemberRequest.encode(requet).finish(), function (errorCode, data) {
                                    _this28.store.loadingGroupMembers.delete(groupId);
                                    if (errorCode !== 0 || !data) {
                                        _this28.log('reloadGroupMembersFromRemote error', groupId, errorCode);
                                        failCB && failCB(errorCode !== 0 ? errorCode : -1);
                                        return;
                                    }

                                    var result = _wfcmessage.PullGroupMemberResult.decode(data).member;
                                    var groupMembers = [];
                                    var selfDeleted = false;
                                    result.forEach(function (member) {
                                        var groupMember = new _groupMember2.default();
                                        groupMember.groupId = groupId;
                                        groupMember.alias = member.alias;
                                        groupMember.extra = member.extra;
                                        groupMember.type = member.type;
                                        groupMember.memberId = member.memberId;
                                        groupMember.updateDt = member.updateDt;
                                        groupMember.createDt = member.createDt;
                                        groupMembers.push(groupMember);
                                        var oldGroupMember = _this28.store.getGroupMember(groupId, _this28.userId);
                                        if (groupMember.memberId === _this28.userId && oldGroupMember && oldGroupMember.type === _groupMemberType2.default.Removed) {
                                            selfDeleted = true;
                                        }
                                    });

                                    _this28.log('loadGroupMembersFromRemote', groupId, groupMembers.length);
                                    _this28.store.updateGroupMembers(groupId, groupMembers);
                                    groupMembers = _this28.store.getGroupMembers(groupId);
                                    successCB && successCB(groupMembers);
                                    if (!selfDeleted && groupMembers.length > 0) {
                                        _this28.eventEmitter.emit(_wfcEvent2.default.GroupMembersUpdate, groupId, groupMembers);
                                        _this28.log('emit groupMembersUpdate', groupId, groupMembers);
                                    } else {
                                        _this28.log('self deleted', groupId);
                                    }
                                });

                            case 9:
                            case 'end':
                                return _context16.stop();
                        }
                    }
                }, _callee16, this);
            }));

            function _reloadGroupMembersFromRemoteEx(_x62, _x63, _x64, _x65) {
                return _ref16.apply(this, arguments);
            }

            return _reloadGroupMembersFromRemoteEx;
        }()
    }, {
        key: 'getGroupInfo',
        value: function getGroupInfo(groupId) {
            var refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var groupInfo = this.store.getGroupInfo(groupId);

            if (refresh || groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupInfosFromRemote(groupId);
            }
            if (groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
            }

            return groupInfo;
        }
    }, {
        key: 'getGroupInfoEx',
        value: function getGroupInfoEx(groupId) {
            var refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var successCB = arguments[2];
            var failCB = arguments[3];

            var groupInfo = this.store.getGroupInfo(groupId);

            if (!(groupInfo instanceof _nullGroupInfo2.default)) {
                successCB && successCB(groupInfo);
            }
            if (refresh || groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupInfosFromRemoteEx(function (groupInfos) {
                    successCB && successCB(groupInfos[0]);
                }, failCB, [groupId]);
            }
            if (groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
            }
        }
    }, {
        key: 'getGroupInfos',
        value: function getGroupInfos() {
            var _this29 = this;

            var groupIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var groupInfos = [];
            var toLoadUids = [];
            groupIds.forEach(function (groupId) {
                var groupInfo = _this29.store.getGroupInfo(groupId);
                if (groupInfo instanceof _nullGroupInfo2.default || refresh) {
                    toLoadUids.push(groupId);
                }
                groupInfos.push(groupInfo);
            });
            if (toLoadUids.length > 0) {
                this._reloadGroupInfosFromRemote.apply(this, toLoadUids);
                if (toLoadUids.length <= 50) {
                    var _iteratorNormalCompletion6 = true;
                    var _didIteratorError6 = false;
                    var _iteratorError6 = undefined;

                    try {
                        for (var _iterator6 = (0, _getIterator3.default)(toLoadUids), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                            var groupId = _step6.value;

                            this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
                        }
                    } catch (err) {
                        _didIteratorError6 = true;
                        _iteratorError6 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                _iterator6.return();
                            }
                        } finally {
                            if (_didIteratorError6) {
                                throw _iteratorError6;
                            }
                        }
                    }
                }
            }
            return groupInfos;
        }
    }, {
        key: 'addGroupMembers',
        value: function addGroupMembers(groupId, memberIds, extra, notifyLines, notifyMessageContent, successCB, failCB) {
            var _this30 = this;

            if (!groupId || !memberIds || memberIds.length === 0 || !notifyLines || notifyLines.length === 0) {
                this.log('addGroupMembers params invalid');
                failCB && failCB(-1);
                return;
            }
            var request = _wfcmessage.AddGroupMemberRequest.create();
            request.groupId = groupId;
            memberIds.forEach(function (memberId) {
                var member = _wfcmessage.GroupMember.create();
                member.memberId = memberId;
                member.type = _groupMemberType2.default.Normal;
                request.addedMember.push(member);
            });
            request.toLine = notifyLines;
            request.extra = extra;
            request.notifyContent = this._toProtoMessageContent(notifyMessageContent);
            this._publish('GAM', _wfcmessage.AddGroupMemberRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    var groupMembers = [];
                    var now = new Date().getTime();
                    memberIds.forEach(function (memberId) {
                        var groupMember = new _groupMember2.default();
                        groupMember.groupId = groupId;
                        groupMember.type = _groupMemberType2.default.Normal;
                        groupMember.memberId = memberId;
                        groupMember.updateDt = now;
                        groupMember.createDt = now;
                        groupMembers.push(groupMember);
                    });

                    _this30.store.updateGroupMembers(groupId, groupMembers);
                }
                _this30._generalOperationCallback(errorCode, successCB, failCB);
            });
        }
    }, {
        key: 'getGroupMemberIds',
        value: function getGroupMemberIds(groupId) {
            var fresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var memberIds = this.store.getGroupMemberIds(groupId, fresh);
            if (memberIds.length === 0 || fresh) {
                this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
            }
            return memberIds;
        }
    }, {
        key: 'getGroupMembers',
        value: function getGroupMembers(groupId) {
            var fresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var groupInfo = this.store.getGroupInfo(groupId);
            var groupMemberMaxDt = this.store.getGroupMemberMaxDt(groupId);
            if (groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupInfosFromRemote(groupId);
                this._reloadGroupMembersFromRemote(groupId, groupMemberMaxDt);
                return null;
            }

            var members = this.store.getGroupMembers(groupId);
            if (members.length === 0 || fresh) {
                this._reloadGroupMembersFromRemote(groupId, groupMemberMaxDt);
            }
            return members.sort(this._compareGroupMember);
        }
    }, {
        key: 'getGroupMembersByType',
        value: function getGroupMembersByType(groupId, memberType) {
            var members = this.getGroupMembers(groupId);
            if (members.length === 0) {
                this._reloadGroupMembersFromRemote(groupId, _long2.default.ZERO);
            }
            return members.filter(function (m) {
                return m.type === memberType;
            });
        }
    }, {
        key: '_compareGroupMember',
        value: function _compareGroupMember(m1, m2) {
            if (m1.type === m2.type) {
                return (0, _longUtil.numberValue)(m1.updateDt) - (0, _longUtil.numberValue)(m2.updateDt);
            }

            if (m1.type === 4) {
                return -1;
            }

            if (m2.type === 4) {
                return 1;
            }

            return m2.type - m1.type;
        }
    }, {
        key: 'getGroupMembersEx',
        value: function getGroupMembersEx(groupId) {
            var fresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var successCB = arguments[2];
            var failCB = arguments[3];

            var members = this.store.getGroupMembers(groupId);
            var updateDt = this.store.getGroupMemberMaxDt(groupId);
            if (members.length === 0 || fresh) {
                this._reloadGroupMembersFromRemoteEx(groupId, updateDt, successCB, failCB);
            } else {
                successCB && successCB(members.sort(this._compareGroupMember));
                fresh && this._reloadGroupMembersFromRemoteEx(groupId, updateDt);
            }
        }
    }, {
        key: 'getGroupMember',
        value: function getGroupMember(groupId, memberId) {
            var groupInfo = this.store.getGroupInfo(groupId);
            if (groupInfo instanceof _nullGroupInfo2.default) {
                this._reloadGroupInfosFromRemote(groupId);
                this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
                return null;
            }
            var member = this.store.getGroupMember(groupId, memberId);
            if (!member) {
                this._reloadGroupMembersFromRemote(groupId, this.store.getGroupMemberMaxDt(groupId));
            }
            return member;
        }
    }, {
        key: 'kickoffGroupMembers',
        value: function kickoffGroupMembers(groupId, memberIds, notifyLines, notifyContent, successCB, failCB) {
            var _this31 = this;

            var request = _wfcmessage.RemoveGroupMemberRequest.create();
            request.groupId = groupId;
            request.removedMember = memberIds;
            request.toLine = notifyLines;
            request.notifyContent = this._toProtoMessageContent(notifyContent);

            this._publish('GKM', _wfcmessage.RemoveGroupMemberRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    _this31.store.removeGroupMembers(groupId, memberIds);
                }
                _this31._generalOperationCallback(errorCode, successCB, failCB);
            });
        }
    }, {
        key: 'muteOrAllowGroupMembers',
        value: function muteOrAllowGroupMembers(groupId, setOrDelete, isAllow, memberIds, notifyLines, notifyContent, successCB, failCB) {
            var _this32 = this;

            var setGroupManagerRequest = _wfcmessage.SetGroupManagerRequest.create();
            setGroupManagerRequest.type = setOrDelete ? 1 : 0;
            setGroupManagerRequest.groupId = groupId;
            setGroupManagerRequest.userId = memberIds;
            setGroupManagerRequest.toLine = notifyLines;
            setGroupManagerRequest.notifyContent = this._toProtoMessageContent(notifyContent);

            this._publish(isAllow ? 'GMAL' : 'GMM', _wfcmessage.SetGroupManagerRequest.encode(setGroupManagerRequest).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    _this32.store.updateGroupMemberMuteOrAllow(groupId, memberIds, setOrDelete, isAllow);
                    if (successCB) {
                        successCB();
                    }
                    _this32.log('mute group member success', groupId, memberIds);
                } else {
                    _this32.log('mute group member error', errorCode);
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: 'quitGroup',
        value: function () {
            var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17(groupId, lines, notifyMessageContent, successCB, failCB) {
                var _this33 = this;

                var request;
                return _regenerator2.default.wrap(function _callee17$(_context17) {
                    while (1) {
                        switch (_context17.prev = _context17.next) {
                            case 0:
                                request = _wfcmessage.QuitGroupRequest.create();

                                request.groupId = groupId;
                                request.toLine = lines;
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GQ', _wfcmessage.QuitGroupRequest.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this33.store.removeGroupAndMembers(groupId);
                                        _this33.store.removeFavGroup(groupId);
                                    }
                                    _this33._generalOperationCallback(errorCode, successCB, failCB);
                                });

                            case 5:
                            case 'end':
                                return _context17.stop();
                        }
                    }
                }, _callee17, this);
            }));

            function quitGroup(_x73, _x74, _x75, _x76, _x77) {
                return _ref17.apply(this, arguments);
            }

            return quitGroup;
        }()
    }, {
        key: 'dismissGroup',
        value: function () {
            var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(groupId, lines, notifyMessageContent, successCB, failCB) {
                var _this34 = this;

                var request;
                return _regenerator2.default.wrap(function _callee18$(_context18) {
                    while (1) {
                        switch (_context18.prev = _context18.next) {
                            case 0:
                                request = _wfcmessage.DismissGroupRequest.create();

                                request.groupId = groupId;
                                request.toLine = lines;
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GD', _wfcmessage.DismissGroupRequest.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this34.store.removeGroupAndMembers(groupId);
                                        _this34.store.removeFavGroup(groupId);
                                        if (!_this34.serverConfigs.isKeepMsgAfterDismiss) {
                                            _this34.store.removeConversation(new _conversation2.default(_conversationType2.default.Group, groupId, 0), true);
                                        }
                                        successCB && successCB();
                                    } else {
                                        failCB && failCB(errorCode);
                                    }
                                });

                            case 5:
                            case 'end':
                                return _context18.stop();
                        }
                    }
                }, _callee18, this);
            }));

            function dismissGroup(_x78, _x79, _x80, _x81, _x82) {
                return _ref18.apply(this, arguments);
            }

            return dismissGroup;
        }()
    }, {
        key: 'modifyGroupInfo',
        value: function () {
            var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(groupId, type, newValue, lines, notifyMessageContent, successCB, failCB) {
                var _this35 = this;

                var request;
                return _regenerator2.default.wrap(function _callee19$(_context19) {
                    while (1) {
                        switch (_context19.prev = _context19.next) {
                            case 0:
                                request = _wfcmessage.ModifyGroupInfoRequest.create();

                                request.groupId = groupId;
                                request.toLine = lines;
                                request.type = type;
                                request.value = newValue + '';
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GMI', _wfcmessage.ModifyGroupInfoRequest.encode(request).finish(), function (errorCode, data) {
                                    _this35._generalOperationCallback(errorCode, successCB, failCB);
                                });

                            case 7:
                            case 'end':
                                return _context19.stop();
                        }
                    }
                }, _callee19, this);
            }));

            function modifyGroupInfo(_x83, _x84, _x85, _x86, _x87, _x88, _x89) {
                return _ref19.apply(this, arguments);
            }

            return modifyGroupInfo;
        }()
    }, {
        key: 'modifyGroupAlias',
        value: function () {
            var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20(groupId, alias, lines, notifyMessageContent, successCB, failCB) {
                var _this36 = this;

                var request;
                return _regenerator2.default.wrap(function _callee20$(_context20) {
                    while (1) {
                        switch (_context20.prev = _context20.next) {
                            case 0:
                                request = _wfcmessage.ModifyGroupMemberAlias.create();

                                request.groupId = groupId;
                                request.alias = alias;
                                request.toLine = lines;
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GMA', _wfcmessage.ModifyGroupMemberAlias.encode(request).finish(), function (errorCode, data) {
                                    _this36._generalOperationCallback(errorCode, successCB, failCB);
                                });

                            case 6:
                            case 'end':
                                return _context20.stop();
                        }
                    }
                }, _callee20, this);
            }));

            function modifyGroupAlias(_x90, _x91, _x92, _x93, _x94, _x95) {
                return _ref20.apply(this, arguments);
            }

            return modifyGroupAlias;
        }()
    }, {
        key: 'modifyGroupMemberAlias',
        value: function () {
            var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21(groupId, memberId, alias, lines, notifyMessageContent, successCB, failCB) {
                var _this37 = this;

                var request;
                return _regenerator2.default.wrap(function _callee21$(_context21) {
                    while (1) {
                        switch (_context21.prev = _context21.next) {
                            case 0:
                                request = _wfcmessage.ModifyGroupMemberAlias.create();

                                request.groupId = groupId;
                                request.memberId = memberId;
                                request.alias = alias;
                                request.toLine = lines;
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GMMA', _wfcmessage.ModifyGroupMemberAlias.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this37.store.updateGroupMemberAlias(groupId, memberId, alias);
                                    }
                                    _this37._generalOperationCallback(errorCode, successCB, failCB);
                                });

                            case 7:
                            case 'end':
                                return _context21.stop();
                        }
                    }
                }, _callee21, this);
            }));

            function modifyGroupMemberAlias(_x96, _x97, _x98, _x99, _x100, _x101, _x102) {
                return _ref21.apply(this, arguments);
            }

            return modifyGroupMemberAlias;
        }()
    }, {
        key: 'modifyGroupMemberExtra',
        value: function () {
            var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(groupId, memberId, extra, lines, notifyMessageContent, successCB, failCB) {
                var _this38 = this;

                var request;
                return _regenerator2.default.wrap(function _callee22$(_context22) {
                    while (1) {
                        switch (_context22.prev = _context22.next) {
                            case 0:
                                request = _wfcmessage.ModifyGroupMemberExtra.create();

                                request.groupId = groupId;
                                request.memberId = memberId;
                                request.extra = extra;
                                request.toLine = lines;
                                request.notifyContent = this._toProtoMessageContent(notifyMessageContent);

                                this._publish('GMME', _wfcmessage.ModifyGroupMemberExtra.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this38.store.updateGroupMemberExtra(groupId, memberId, extra);
                                    }
                                    _this38._generalOperationCallback(errorCode, successCB, failCB);
                                });

                            case 7:
                            case 'end':
                                return _context22.stop();
                        }
                    }
                }, _callee22, this);
            }));

            function modifyGroupMemberExtra(_x103, _x104, _x105, _x106, _x107, _x108, _x109) {
                return _ref22.apply(this, arguments);
            }

            return modifyGroupMemberExtra;
        }()
    }, {
        key: 'transferGroup',
        value: function transferGroup(groupId, newOwner, lines, notifyMessageContent, successCB, failCB) {
            var _this39 = this;

            var request = _wfcmessage.TransferGroupRequest.create();
            request.groupId = groupId;
            request.newOwner = newOwner;
            request.toLine = lines;
            request.notifyContent = this._toProtoMessageContent(notifyMessageContent);
            this._publish('GTG', _wfcmessage.TransferGroupRequest.encode(request).finish(), function (errorCode, data) {
                _this39._generalOperationCallback(errorCode, successCB, failCB);
            });
        }
    }, {
        key: 'setGroupRemark',
        value: function setGroupRemark(groupId, remark, successCB, failCB) {
            var _this40 = this;

            this.setUserSetting(_userSettingScope2.default.GroupRemark, groupId, remark, function () {
                successCB && successCB();
                var setting = new _userSettingEntry2.default();
                setting.scope = _userSettingScope2.default.GroupRemark;
                setting.key = groupId;
                setting.value = remark;
                setting.updateDt = new Date().getTime();
                _this40.store.settings.push(setting);
                _this40.onSettingUpdate([setting]);
            }, failCB);
        }
    }, {
        key: 'getGroupRemark',
        value: function getGroupRemark(groupId) {
            return this.getUserSetting(_userSettingScope2.default.GroupRemark, groupId);
        }
    }, {
        key: 'getFavGroups',
        value: function getFavGroups() {
            return this.store.getFavGroups();
        }
    }, {
        key: 'isFavGroup',
        value: function isFavGroup(groupId) {
            return this.store.isFavGroup(groupId);
        }
    }, {
        key: 'setFavGroup',
        value: function setFavGroup(groupId, fav, successCB, failCB) {
            this._updateUserSetting(_userSettingScope2.default.FavoriteGroup, groupId, fav ? '1' : '0', successCB, failCB);
        }
    }, {
        key: 'getMyGroups',
        value: function getMyGroups(successCB, failCB) {
            var _this41 = this;

            this._publish('GMGS', null, function (errorCode, data) {
                _this41._generalStringListCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'getCommonGroups',
        value: function getCommonGroups(userId, successCB, failCB) {
            var _this42 = this;

            var request = _wfcmessage.IDBuf.create();
            request.id = userId;
            this._publish('GCGS', _wfcmessage.IDBuf.encode(request).finish(), function (errorCode, data) {
                _this42._generalStringListCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'getFavUsers',
        value: function getFavUsers() {
            return this.store.getFavUsers();
        }
    }, {
        key: 'isFavUser',
        value: function isFavUser(userId) {
            return this.store.isFavUser(userId);
        }
    }, {
        key: 'setFavUser',
        value: function setFavUser(userId, fav, successCB, failCB) {
            this._updateUserSetting(_userSettingScope2.default.FavoriteUser, userId, fav ? '1' : '0', successCB, failCB);
        }
    }, {
        key: 'getUserSetting',
        value: function getUserSetting(scope, key) {
            return this.store.getUserSetting(scope, key);
        }
    }, {
        key: 'getUserSettings',
        value: function getUserSettings(scope) {
            return this.store.getUserSettings(scope);
        }
    }, {
        key: 'setUserSetting',
        value: function setUserSetting(scope, key, value, successCB, failCB) {
            this._updateUserSetting(scope, key, value, successCB, failCB);
        }
    }, {
        key: 'modifyMyInfo',
        value: function modifyMyInfo(entries, successCB, failCB) {
            var _this43 = this;

            var request = _wfcmessage.ModifyMyInfoRequest.create();
            request.entry = entries;

            this._publish('MMI', _wfcmessage.ModifyMyInfoRequest.encode(request).finish(), function (errorCode, data) {
                _this43._generalOperationCallback(errorCode, successCB, failCB);
            });
        }
    }, {
        key: 'isGlobalSlient',
        value: function isGlobalSlient() {
            var setting = this.store.getUserSetting(_userSettingScope2.default.GlobalSilent, '');
            return setting ? setting.value === '1' : false;
        }
    }, {
        key: 'setGlobalSlient',
        value: function setGlobalSlient(silent, successCB, failCB) {
            this._updateUserSetting(_userSettingScope2.default.GlobalSilent, '', silent ? '1' : '0', function () {
                if (successCB) {
                    successCB();
                }
            }, function (errorCode) {
                if (failCB) {
                    failCB(errorCode);
                }
            });
        }
    }, {
        key: 'isHiddenNotificationDetail',
        value: function isHiddenNotificationDetail() {
            var setting = this.store.getUserSetting(_userSettingScope2.default.HiddenNotificationDetail, '');
            return setting ? setting.value === '1' : false;
        }
    }, {
        key: 'setHiddenNotificationDetail',
        value: function () {
            var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(hide, successCB, failCB) {
                return _regenerator2.default.wrap(function _callee23$(_context23) {
                    while (1) {
                        switch (_context23.prev = _context23.next) {
                            case 0:
                                this._updateUserSetting(_userSettingScope2.default.HiddenNotificationDetail, '', hide ? '1' : '0', function () {
                                    if (successCB) {
                                        successCB();
                                    }
                                }, function (errorCode) {
                                    if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 1:
                            case 'end':
                                return _context23.stop();
                        }
                    }
                }, _callee23, this);
            }));

            function setHiddenNotificationDetail(_x110, _x111, _x112) {
                return _ref23.apply(this, arguments);
            }

            return setHiddenNotificationDetail;
        }()
    }, {
        key: 'isHiddenGroupMemberName',
        value: function isHiddenGroupMemberName(groupId) {
            var setting = this.store.getUserSetting(_userSettingScope2.default.GroupHideNickname, groupId);
            return setting ? setting.value === '1' : false;
        }
    }, {
        key: 'setHiddenGroupMemberName',
        value: function () {
            var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(groupId, hide, successCB, failCB) {
                return _regenerator2.default.wrap(function _callee24$(_context24) {
                    while (1) {
                        switch (_context24.prev = _context24.next) {
                            case 0:
                                this._updateUserSetting(_userSettingScope2.default.GroupHideNickname, groupId, hide ? '1' : '0', function () {
                                    if (successCB) {
                                        successCB();
                                    }
                                }, function (errorCode) {
                                    if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 1:
                            case 'end':
                                return _context24.stop();
                        }
                    }
                }, _callee24, this);
            }));

            function setHiddenGroupMemberName(_x113, _x114, _x115, _x116) {
                return _ref24.apply(this, arguments);
            }

            return setHiddenGroupMemberName;
        }()
    }, {
        key: 'joinChatroom',
        value: function () {
            var _ref25 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(chatroomId, successCB, failCB) {
                var _this44 = this;

                var request;
                return _regenerator2.default.wrap(function _callee25$(_context25) {
                    while (1) {
                        switch (_context25.prev = _context25.next) {
                            case 0:
                                request = _wfcmessage.IDBuf.create();

                                request.id = chatroomId;
                                this._publish('CRJ', _wfcmessage.IDBuf.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        _this44.chatRoomMsgHead = _long2.default.ZERO;
                                        _this44.currentChatRoomId = chatroomId;
                                        if (successCB) {
                                            successCB();
                                        }
                                        _this44._pullMessages(_long2.default.MAX_VALUE, 1, false);
                                    } else if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 3:
                            case 'end':
                                return _context25.stop();
                        }
                    }
                }, _callee25, this);
            }));

            function joinChatroom(_x117, _x118, _x119) {
                return _ref25.apply(this, arguments);
            }

            return joinChatroom;
        }()
    }, {
        key: 'quitChatroom',
        value: function () {
            var _ref26 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee26(chatroomId, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee26$(_context26) {
                    while (1) {
                        switch (_context26.prev = _context26.next) {
                            case 0:
                                request = _wfcmessage.IDBuf.create();

                                request.id = chatroomId;
                                this.currentChatRoomId = '';
                                this._publish('CRQ', _wfcmessage.IDBuf.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context26.stop();
                        }
                    }
                }, _callee26, this);
            }));

            function quitChatroom(_x121, _x122, _x123) {
                return _ref26.apply(this, arguments);
            }

            return quitChatroom;
        }()
    }, {
        key: 'getChatroomInfo',
        value: function () {
            var _ref27 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee27(chatroomId, updateDt, successCB, failCB) {
                var _this45 = this;

                var request;
                return _regenerator2.default.wrap(function _callee27$(_context27) {
                    while (1) {
                        switch (_context27.prev = _context27.next) {
                            case 0:
                                request = _wfcmessage.GetChatroomInfoRequest.create();

                                request.chatroomId = chatroomId;
                                request.updateDt = _long2.default.fromValue(updateDt);
                                this._publish('CRI', _wfcmessage.GetChatroomInfoRequest.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0 && data) {
                                        if (successCB) {
                                            var result = _wfcmessage.ChatroomInfo.decode(data);
                                            _this45.log('getChatroomInfo result', result);
                                            var chatRoomInfo = (0, _assign2.default)(new _chatRoomInfo2.default(), result);
                                            if (_config2.default.urlRedirect) {
                                                chatRoomInfo.portrait = _config2.default.urlRedirect(chatRoomInfo.portrait);
                                            }
                                            successCB(chatRoomInfo);
                                        }
                                    } else if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context27.stop();
                        }
                    }
                }, _callee27, this);
            }));

            function getChatroomInfo(_x125, _x126, _x127, _x128) {
                return _ref27.apply(this, arguments);
            }

            return getChatroomInfo;
        }()
    }, {
        key: 'getChatroomMemberInfo',
        value: function () {
            var _ref28 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee28(chatroomId, maxCount, successCB, failCB) {
                var _this46 = this;

                var request;
                return _regenerator2.default.wrap(function _callee28$(_context28) {
                    while (1) {
                        switch (_context28.prev = _context28.next) {
                            case 0:
                                request = _wfcmessage.GetChatroomMemberInfoRequest.create();

                                request.chatroomId = chatroomId;
                                request.maxCount = maxCount ? maxCount : 10;
                                this._publish('CRMI', _wfcmessage.GetChatroomMemberInfoRequest.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0 && data) {
                                        if (successCB) {
                                            var result = _wfcmessage.ChatroomMemberInfo.decode(data);
                                            _this46.log('getChatroomMemberInfo result', result);
                                            var chatRoomMemberInfo = (0, _assign2.default)(new _chatRoomMemberInfo2.default(), result);
                                            successCB(chatRoomMemberInfo);
                                        }
                                    } else if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context28.stop();
                        }
                    }
                }, _callee28, this);
            }));

            function getChatroomMemberInfo(_x130, _x131, _x132, _x133) {
                return _ref28.apply(this, arguments);
            }

            return getChatroomMemberInfo;
        }()
    }, {
        key: 'createChannel',
        value: function createChannel(name, portrait, status, desc, extra, successCB, failCB) {
            var request = _wfcmessage.ChannelInfo.create();
            request.name = name;
            request.portrait = portrait;
            request.desc = desc;
            request.extra = extra;
            this._publish('CHC', _wfcmessage.ChannelInfo.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                if (errorCode === 0) {
                    if (successCB) {
                        successCB();
                    }
                } else if (failCB) {
                    failCB(errorCode);
                }
            });
        }
    }, {
        key: 'getChannelInfo',
        value: function getChannelInfo(channelId, refresh) {
            var info = this.store.getChannelInfo(channelId);
            if (info instanceof _NullChannelInfo2.default || refresh) {
                this._reloadChannelInfo(channelId, info.updateDt);
            }
            return info;
        }
    }, {
        key: '_reloadChannelInfo',
        value: function () {
            var _ref29 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee29(channelId) {
                var _this47 = this;

                var updateDt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var request;
                return _regenerator2.default.wrap(function _callee29$(_context29) {
                    while (1) {
                        switch (_context29.prev = _context29.next) {
                            case 0:
                                request = _wfcmessage.PullChannelInfo.create();

                                request.channelId = channelId;
                                request.head = _long2.default.fromValue(updateDt);
                                this._publish('CHP', _wfcmessage.PullChannelInfo.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0 && data) {
                                        var pbChannel = _wfcmessage.ChannelInfo.decode(data);
                                        var chaneInfo = (0, _assign2.default)(new _channelInfo2.default(), pbChannel);
                                        if (_config2.default.urlRedirect) {
                                            chaneInfo.portrait = _config2.default.urlRedirect(chaneInfo.portrait);
                                        }
                                        if (chaneInfo.menu) {
                                            chaneInfo.menus = chaneInfo.menu.map(function (menu) {
                                                menu = (0, _assign2.default)(new _channelMenu2.default(), menu);
                                                if (menu.subMenu) {
                                                    menu.subMenus = menu.subMenu.map(function (sm) {
                                                        return (0, _assign2.default)(new _channelMenu2.default(), sm);
                                                    });
                                                    delete menu.subMenu;
                                                }
                                                return menu;
                                            });
                                            delete chaneInfo.menu;
                                        }
                                        chaneInfo.channelId = pbChannel.targetId;
                                        delete chaneInfo.targetId;
                                        _this47.store.setChannelInfo(chaneInfo);
                                        _this47.eventEmitter.emit(_wfcEvent2.default.ChannelInfosUpdate, [chaneInfo]);
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context29.stop();
                        }
                    }
                }, _callee29, this);
            }));

            function _reloadChannelInfo(_x136) {
                return _ref29.apply(this, arguments);
            }

            return _reloadChannelInfo;
        }()
    }, {
        key: 'modifyChannelInfo',
        value: function () {
            var _ref30 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee30(channelId, type, newValue, successCB, failCB) {
                var _this48 = this;

                var request;
                return _regenerator2.default.wrap(function _callee30$(_context30) {
                    while (1) {
                        switch (_context30.prev = _context30.next) {
                            case 0:
                                request = _wfcmessage.ModifyChannelInfo.create();

                                request.channelId = channelId;
                                request.type = type;
                                request.value = newValue;
                                this._publish('CHMI', _wfcmessage.ModifyChannelInfo.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        // TODO update local channelInfo
                                        _this48._reloadChannelInfo(channelId);
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else if (failCB) {
                                        failCB(errorCode);
                                    }
                                });

                            case 5:
                            case 'end':
                                return _context30.stop();
                        }
                    }
                }, _callee30, this);
            }));

            function modifyChannelInfo(_x139, _x140, _x141, _x142, _x143) {
                return _ref30.apply(this, arguments);
            }

            return modifyChannelInfo;
        }()
    }, {
        key: 'searchChannel',
        value: function searchChannel(keyword, fuzzy, successCB, failCB) {
            var request = _wfcmessage.SearchUserRequest.create();
            request.keyword = keyword;
            request.fuzzy = fuzzy;
            request.page = 0;
            this._publish('CHS', _wfcmessage.SearchUserRequest.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                if (errorCode === 0 && data) {
                    if (successCB) {
                        var result = _wfcmessage.SearchChannelResult.decode(data);
                        successCB(keyword, result.entry);
                    }
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: 'isListenedChannel',
        value: function isListenedChannel(channelId) {
            var entry = this.store.getUserSetting(_userSettingScope2.default.Listened_Channel, channelId);
            return entry && entry.value === '1';
        }
    }, {
        key: 'listenChannel',
        value: function () {
            var _ref31 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee31(channelId, listen, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee31$(_context31) {
                    while (1) {
                        switch (_context31.prev = _context31.next) {
                            case 0:
                                request = _wfcmessage.ListenChannel.create();

                                request.channelId = channelId;
                                request.listen = listen;
                                this._publish('CHL', _wfcmessage.ListenChannel.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 4:
                            case 'end':
                                return _context31.stop();
                        }
                    }
                }, _callee31, this);
            }));

            function listenChannel(_x146, _x147, _x148, _x149) {
                return _ref31.apply(this, arguments);
            }

            return listenChannel;
        }()

        // return channelIds

    }, {
        key: 'getMyChannels',
        value: function getMyChannels() {
            return this.store.getUserSettings(_userSettingScope2.default.My_Channel).filter(function (e) {
                return e.value === '1';
            }).map(function (e) {
                return e.key;
            });
        }

        // 废弃

    }, {
        key: 'getListenedChannels',
        value: function getListenedChannels() {
            return this.store.getUserSettings(_userSettingScope2.default.Listened_Channel).filter(function (e) {
                return e.value === '1';
            }).map(function (e) {
                return e.key;
            });
        }
    }, {
        key: 'getRemoteListenedChannels',
        value: function getRemoteListenedChannels(successCB, failCB) {
            var _this49 = this;

            this._publish('CHLL', '', function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                _this49._generalStringListCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'destroyChannel',
        value: function () {
            var _ref32 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee32(channelId, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee32$(_context32) {
                    while (1) {
                        switch (_context32.prev = _context32.next) {
                            case 0:
                                request = _wfcmessage.IDBuf.create();

                                request.id = channelId;
                                this._publish('CHD', _wfcmessage.ListenChannel.encode(request).finish(), function () {
                                    var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                                    var data = arguments[1];

                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 3:
                            case 'end':
                                return _context32.stop();
                        }
                    }
                }, _callee32, this);
            }));

            function destroyChannel(_x152, _x153, _x154) {
                return _ref32.apply(this, arguments);
            }

            return destroyChannel;
        }()
    }, {
        key: 'getConversationList',
        value: function getConversationList(types, lines) {
            // TODO 第一次等从服务端拉取
            return this.store.getConversationList(types, lines);
        }
    }, {
        key: 'getConversationInfo',
        value: function getConversationInfo(conversation) {
            var info = this.store.getConversationInfo(conversation);
            if (!info) {
                info = new _conversationInfo2.default();
                info.conversation = conversation;
            }
            return info;
        }
    }, {
        key: 'searchConversation',
        value: function searchConversation(keyword) {
            var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 1, 2];
            var lines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 1];

            return this.store.searchConversation(keyword, types, lines);
        }
    }, {
        key: 'removeConversation',
        value: function () {
            var _ref33 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee33(conversation, clearMsg) {
                var conversationInfo, now;
                return _regenerator2.default.wrap(function _callee33$(_context33) {
                    while (1) {
                        switch (_context33.prev = _context33.next) {
                            case 0:
                                conversationInfo = this.getConversationInfo(conversation);

                                if (conversationInfo) {
                                    _context33.next = 3;
                                    break;
                                }

                                return _context33.abrupt('return');

                            case 3:
                                this.store.removeConversation(conversation, clearMsg);
                                now = new Date().getTime();

                                if (!conversationInfo.timestamp || (0, _longUtil.gt)(conversationInfo.timestamp, now + 2 * 60 * 60 * 1000) || (0, _longUtil.lte)(conversationInfo.timestamp, now - 2 * 60 * 1000)) {
                                    conversationInfo.timestamp = _long2.default.fromValue(now);
                                }
                                this._syncConversationReadDt(conversation, conversationInfo.timestamp.neg());

                            case 7:
                            case 'end':
                                return _context33.stop();
                        }
                    }
                }, _callee33, this);
            }));

            function removeConversation(_x158, _x159) {
                return _ref33.apply(this, arguments);
            }

            return removeConversation;
        }()
    }, {
        key: 'setConversationTop',
        value: function setConversationTop(conversation, top, successCB, failCB) {
            var _this50 = this;

            var scope = _userSettingScope2.default.ConversationTop;
            var key = conversation.type + '-' + conversation.line + '-' + conversation.target;
            var value = (top > 0 ? top : 0) + '';
            this._updateUserSetting(scope, key, value, function () {
                var conversationInfo = _this50.getConversationInfo(conversation);
                _this50.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);
                _this50.store.setConversationTop(conversation, top);
                if (successCB) {
                    successCB();
                }
            }, function (errorCode) {
                if (failCB) {
                    failCB(errorCode);
                }
            });
        }
    }, {
        key: 'setConversationSlient',
        value: function setConversationSlient(conversation, silent, successCB, failCB) {
            var _this51 = this;

            var scope = _userSettingScope2.default.ConversationSilent;
            var key = conversation.type + '-' + conversation.line + '-' + conversation.target;
            var value = silent ? '1' : '0';
            this._updateUserSetting(scope, key, value, function () {
                _this51.store.setConversationSilent(conversation, silent);
                if (successCB) {
                    successCB();
                }
                var conversationInfo = _this51.getConversationInfo(conversation);
                _this51.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);
            }, function (errorCode) {
                if (failCB) {
                    failCB(errorCode);
                }
            });
        }
    }, {
        key: 'setConversationDraft',
        value: function setConversationDraft(conversation) {
            var draft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var syncRemote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            if (!conversation) {
                return;
            }
            draft = draft ? draft : '';
            var conversationInfo = this.getConversationInfo(conversation);
            if (conversationInfo.draft === draft) {
                return;
            }
            this.store.setConversationDraft(conversation, draft);
            this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);
            if (syncRemote && !this.isGlobalDisableDraftSync && !this.isDisableSyncDraft()) {
                this._syncDraft(conversation, draft);
            }
        }
    }, {
        key: '_syncDraft',
        value: function _syncDraft(conversation, draft) {
            var key = conversation.type + '-' + conversation.line + '-' + conversation.target;
            var setting = this.getUserSetting(_userSettingScope2.default.DisableSyncDraft, key);
            var disableSync = setting ? setting.value === '1' : false;
            if (!disableSync) {
                var value = this.clientId + '@@@' + draft;
                this._updateUserSetting(_userSettingScope2.default.ConversationDraft, key, value);
            }
        }
    }, {
        key: 'setConversationTimestamp',
        value: function setConversationTimestamp(conversation, timestamp) {
            var info = this.store.getConversationInfo(conversation);
            if (!info) {
                info = this.store.genAndSaveDefaultConversationInfo(conversation);
            }
            var now = new Date().getTime();
            if ((0, _longUtil.gt)(timestamp, now + 2 * 60 * 60 * 1000)) {
                timestamp = now;
            }
            info.timestamp = _long2.default.fromValue(timestamp);
            this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, info);
        }
    }, {
        key: 'getUnreadCount',
        value: function getUnreadCount() {
            var types = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var lines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0];

            return this.store.getUnreadCount(types, lines);
        }
    }, {
        key: 'getConversationUnreadCount',
        value: function getConversationUnreadCount(conversation) {
            return this.store.getConversationUnreadCount(conversation);
        }
    }, {
        key: 'sendConferenceRequest',
        value: function sendConferenceRequest(sessionId, roomId, crequest, data, advance, callback) {
            var request = _wfcmessage.ConferenceRequest.create();
            request.sessionId = sessionId;
            request.roomId = roomId;
            request.request = crequest;
            request.advance = advance ? 1 : 0;
            request.data = data;
            this._publish('CONF', _wfcmessage.ConferenceRequest.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                if (errorCode === 0) {
                    var resp = null;
                    if (data) {
                        var info = _wfcmessage.IDBuf.decode(data);
                        resp = info.id;
                    }
                    if (callback) {
                        callback(0, resp);
                    }
                } else {
                    if (callback) {
                        callback(errorCode);
                    }
                }
            });
        }
    }, {
        key: 'clearConversationUnreadStatus',
        value: function () {
            var _ref34 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee34(conversation) {
                var senders, count, conversationInfo, maxDt;
                return _regenerator2.default.wrap(function _callee34$(_context34) {
                    while (1) {
                        switch (_context34.prev = _context34.next) {
                            case 0:
                                senders = [];

                                if (this.isReceiptEnable && this.isUserReceiptEnabled()) {
                                    senders = this.store.getUnreadMsgSenders(conversation);
                                }
                                count = this.store.clearConversationUnreadStatus(conversation);

                                if (count > 0) {
                                    conversationInfo = this.getConversationInfo(conversation);

                                    this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);

                                    maxDt = this.store.getConversationReadMaxDt(conversation);

                                    if (maxDt.compare(_long2.default.ZERO) > 0) {
                                        this._syncConversationReadDt(conversation, maxDt, senders);
                                    }
                                }

                            case 4:
                            case 'end':
                                return _context34.stop();
                        }
                    }
                }, _callee34, this);
            }));

            function clearConversationUnreadStatus(_x165) {
                return _ref34.apply(this, arguments);
            }

            return clearConversationUnreadStatus;
        }()
    }, {
        key: 'clearMessageUnreadStatus',
        value: function clearMessageUnreadStatus(messageId) {
            var cleared = this.store.clearMessageUnreadStatus(messageId);
            if (cleared) {
                var info = this.getConversationInfo(this.getMessageById(messageId).conversation);
                this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, info);
            }
        }
    }, {
        key: '_syncConversationReadDt',
        value: function _syncConversationReadDt(conversation, dt, senders, syncId) {
            var _this52 = this;

            if (!_long2.default.isLong(dt)) {
                this.log('_syncConversationReadDt invalid dt', dt);
                return;
            }
            var key = conversation.type + '-' + conversation.line + '-' + conversation.target;
            var modifySettingReq = _wfcmessage.ModifyUserSettingReq.create();
            modifySettingReq.scope = _userSettingScope2.default.Conversation_Sync;
            modifySettingReq.key = key;
            modifySettingReq.value = dt.toString();
            modifySettingReq.target = senders;

            var requestData = _wfcmessage.ModifyUserSettingReq.encode(modifySettingReq).finish();

            // 先存，成功之后在删，是为尽可能保证sync成功
            if (!syncId) {
                syncId = this.store.saveSyncReadEntry(conversation.type, conversation.target, conversation.line, dt, senders);
            }

            this._publish("UP", requestData, function (errorCode, data) {
                if (errorCode === 0) {
                    var setting = new _userSettingEntry2.default();
                    setting.scope = _userSettingScope2.default.Conversation_Sync;
                    setting.key = key;
                    setting.value = dt.toString();
                    setting.updateDt = new Date().getTime();
                    _this52.store.updateUserSettings([setting]);
                    _this52.store.deleteSyncReadEntry(syncId);
                    _this52._syncRead();
                } else {
                    _this52.log('syncConversationReadDt error', errorCode);
                }
            });
        }
    }, {
        key: '_syncRead',
        value: function _syncRead() {
            var entry = this.store.loadSyncReadEntry();
            if (entry) {
                var conversation = new _conversation2.default(entry.type, entry.target, entry.line);
                this._syncConversationReadDt(conversation, entry.readDt, entry.senders, entry.id);
            }
        }
    }, {
        key: 'clearAllUnreadStatus',
        value: function () {
            var _ref35 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee35() {
                var count;
                return _regenerator2.default.wrap(function _callee35$(_context35) {
                    while (1) {
                        switch (_context35.prev = _context35.next) {
                            case 0:
                                count = this.store.clearAllUnreadStatus();

                                if (count > 0) {
                                    // TODO sync all conversation
                                }

                            case 2:
                            case 'end':
                                return _context35.stop();
                        }
                    }
                }, _callee35, this);
            }));

            function clearAllUnreadStatus() {
                return _ref35.apply(this, arguments);
            }

            return clearAllUnreadStatus;
        }()
    }, {
        key: 'setMediaMessagePlayed',
        value: function setMediaMessagePlayed(messageId) {
            var count = this.store.setMediaMessagePlayed(messageId);
            if (count > 0) {
                var msg = this.store.getMessageById(messageId);
                this.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, msg);
            }
        }
    }, {
        key: 'isMyFriend',
        value: function isMyFriend(userId) {
            return this.store.isMyFriend(userId);
        }
    }, {
        key: 'sendFriendRequest',
        value: function () {
            var _ref36 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee36(userId, reason, extra, successCB, failCB) {
                var request;
                return _regenerator2.default.wrap(function _callee36$(_context36) {
                    while (1) {
                        switch (_context36.prev = _context36.next) {
                            case 0:
                                request = _wfcmessage.AddFriendRequest.create();

                                request.targetUid = userId;
                                request.reason = reason;
                                request.extra = extra;
                                this._publish('FAR', _wfcmessage.AddFriendRequest.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 5:
                            case 'end':
                                return _context36.stop();
                        }
                    }
                }, _callee36, this);
            }));

            function sendFriendRequest(_x166, _x167, _x168, _x169, _x170) {
                return _ref36.apply(this, arguments);
            }

            return sendFriendRequest;
        }()

        /**
         *
         * @param {Conversation} conversation
         * @param {number} fromIndex
         * @param {boolean} before
         * @param {number} count
         * @param {string} withUser
         */

    }, {
        key: 'getMessages',
        value: function getMessages(conversation, fromIndex) {
            var before = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;
            var withUser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';

            return this.store.getConversationMessages(conversation, fromIndex, before, count, withUser);
        }
    }, {
        key: 'getMessagesEx',
        value: function getMessagesEx(conversationTypes, lines, contentTypes, fromIndex, before, count, withUser) {
            return this.store.getMessagesEx(conversationTypes, lines, contentTypes, withUser);
        }
    }, {
        key: 'getMessagesEx2',
        value: function getMessagesEx2(conversationTypes, lines, messageStatus, fromIndex, before, count, withUser) {
            return this.store.getMessagesEx2(conversationTypes, lines, messageStatus, withUser);
        }
    }, {
        key: 'getUserMessages',
        value: function getUserMessages(userId, conversation, fromIndex) {
            var before = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            var count = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;
            var withUser = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';

            var msgs = this.store.getConversationMessages(conversation, fromIndex, before, count, withUser);
            return msgs.filter(function (msg) {
                return msg.from === userId;
            });
        }
    }, {
        key: 'getUserMessagesEx',
        value: function getUserMessagesEx(userId, conversationTypes, lines, fromIndex) {
            var before = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
            var count = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 20;
            var contentTypes = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];

            var msgs = this.store.getMessagesEx(conversationTypes, lines, contentTypes, '');
            return msgs.filter(function (msg) {
                return msg.from === userId;
            });
        }
    }, {
        key: 'getFirstUnreadMessageUid',
        value: function getFirstUnreadMessageUid(conversation) {
            return this.store.getFirstUnreadMessage(conversation);
        }
    }, {
        key: '_convertAndSaveProtoMessage',
        value: function _convertAndSaveProtoMessage(m, saveToDb) {
            var msg = _message2.default.fromProtoMessage(m);
            if (msg) {
                var flag = _messageConfig2.default.getMessageContentPersitFlag(msg.content.type);
                if (saveToDb) {
                    if (msg.type === 81) {
                        var message = this.store.getMessageByUid(_long2.default.fromValue(msg.content.binaryContent));
                        if (message && message.messageId > 0) {
                            this.store.deleteMessageByUid(_long2.default.from(msg.content.binaryContent));
                            this.onRemoteMessageDeleted(message.messageUid);
                        }
                    }
                    if (msg.type === 80) {
                        this.onRecallMessage(msg.content.operatorId, msg.content.messageUid);
                    }

                    if (flag === _persistFlag2.default.Persist || flag === _persistFlag2.default.Persist_And_Count) {
                        if (msg.conversation.type === _conversationType2.default.ChatRoom) {
                            msg.messageId = this.store.genChatRoomMessageId();
                        } else {
                            msg.messageId = this.store.genNormalMessageId();
                        }
                        this.store.saveMessage(msg);
                    } else {
                        msg.messageId = 0;
                    }
                } else {
                    if (flag === -1) {
                        if ((m.content.persistFlag & 0x01) === 1) {
                            flag = 1;
                        }
                    }

                    if ((flag & 0x1) === 1 && flag > 0) {
                        msg.messageId = -1;
                    } else {
                        msg.messageId = 0;
                    }
                }
            }
            return msg;
        }
    }, {
        key: '_loadRemoteMessagePublishCallback',
        value: function _loadRemoteMessagePublishCallback() {
            var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;
            var data = arguments[1];
            var saveToDb = arguments[2];
            var updateConversation = arguments[3];
            var successCB = arguments[4];

            var _this53 = this;

            var failCB = arguments[5];
            var filterLocalMessage = arguments[6];

            this.log('loadRemoteMessages result', errorCode, saveToDb, updateConversation);
            if (errorCode === 0 && data) {
                var pr = _wfcmessage.PullMessageResult.decode(data);
                this.log('loadRemoteMessages result data', pr);
                var msgs = [];
                if (pr && pr.message) {
                    pr.message.forEach(function (m) {
                        if (WfcImpl.pcNotSupportMessageTypes.indexOf(m.content.type) > -1) {
                            return;
                        }
                        var lm = _this53.store.getMessageByUid(m.messageId);
                        var msg = _this53._convertAndSaveProtoMessage(m, saveToDb);
                        if (msg && (!lm || !filterLocalMessage)) {
                            msgs.push(msg);
                        }
                    });

                    if (updateConversation && msgs.length > 0) {
                        for (var i = 0; i < msgs.length; i++) {
                            var msg = msgs[i];
                            var flag = _messageConfig2.default.getMessageContentPersitFlag(msg.messageContent.type);
                            if (flag === _persistFlag2.default.Persist || flag === _persistFlag2.default.Persist_And_Count) {
                                var conversation = msg.conversation;
                                var conversationInfo = this.store.getConversationInfo(conversation);
                                if (!conversationInfo) {
                                    conversationInfo = this.store.genAndSaveDefaultConversationInfo(conversation);
                                }
                                if (!conversationInfo.lastMessage || !conversationInfo.lastMessage.timestamp || (0, _longUtil.gt)(msg.timestamp, conversationInfo.lastMessage.timestamp)) {
                                    conversationInfo.lastMessage = msg;
                                    conversationInfo.timestamp = msg.timestamp;
                                    this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);
                                }
                                break;
                            }
                        }
                    }

                    if (successCB) {
                        msgs = msgs.reverse();
                        successCB(msgs);
                    }
                } else {
                    if (failCB) {
                        failCB(-1);
                    }
                }
            } else {
                if (failCB) {
                    failCB(errorCode);
                }
            }
        }
    }, {
        key: 'loadRemoteLineMessages',
        value: function loadRemoteLineMessages(line, contentTypes) {
            var beforeUid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;

            var _this54 = this;

            var successCB = arguments[4];
            var failCB = arguments[5];

            var beforeUidLong = _long2.default.fromValue(beforeUid);
            if (beforeUidLong.eq(_long2.default.ZERO)) {
                beforeUidLong = _long2.default.MAX_VALUE;
            }

            var request = _wfcmessage.LoadLineMessages.create();
            request.line = line;
            request.count = count;
            request.beforeUid = beforeUidLong;
            if (!contentTypes) {
                contentTypes = [];
            }
            request.contentType = contentTypes;

            this._publish('LLM', _wfcmessage.LoadLineMessages.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                _this54._loadRemoteMessagePublishCallback(errorCode, data, false, false, successCB, failCB);
            });
        }
    }, {
        key: 'loadRemoteMessages',
        value: function loadRemoteMessages(conversation, contentTypes) {
            var beforeUid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;
            var successCB = arguments[4];

            var _this55 = this;

            var failCB = arguments[5];
            var filterLocalMessage = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;

            var beforeUidLong = _long2.default.fromValue(beforeUid);
            if (beforeUidLong.eq(_long2.default.ZERO)) {
                beforeUidLong = _long2.default.MAX_VALUE;
            }
            var info = this.store.getConversationInfo(conversation);
            if (info && info.lastMessage && info.lastMessage.messageUid && beforeUidLong.neq(_long2.default.MAX_VALUE) && _long2.default.fromValue(info.lastMessage.messageUid).compare(beforeUidLong) < 0) {
                this.log('the start message is exits', info.lastMessage.toString(), beforeUidLong.toString());
                failCB && failCB(-2);
                return;
            }

            var request = _wfcmessage.LoadRemoteMessages.create();
            request.conversation = this._toProtoConversation(conversation);
            if (!contentTypes) {
                contentTypes = [];
            }
            request.contentType = contentTypes;
            request.beforeUid = beforeUidLong;
            request.count = count;
            this.log('loadRemoteMessages request', conversation, beforeUidLong.toString(), request);
            this._publish('LRM', _wfcmessage.LoadRemoteMessages.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                _this55._loadRemoteMessagePublishCallback(errorCode, data, contentTypes.length === 0, contentTypes.length === 0, successCB, failCB, filterLocalMessage);
            });
        }
    }, {
        key: 'loadRemoteMessage',
        value: function loadRemoteMessage(messageUid, successCB, failCB) {
            var _this56 = this;

            if (!messageUid) {
                failCB && failCB(-1);
                return;
            }
            var request = _wfcmessage.INT64Buf.create();
            request.id = _long2.default.fromValue(messageUid);
            this._publish('LROM', _wfcmessage.INT64Buf.encode(request).finish(), function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                _this56._loadRemoteMessagePublishCallback(errorCode, data, false, false, successCB, failCB);
            });
        }
    }, {
        key: 'getMessageById',
        value: function getMessageById(messageId) {
            return this.store.getMessageById(messageId);
        }
    }, {
        key: 'getMessageByUid',
        value: function getMessageByUid(messageUid) {
            return this.store.getMessageByUid(messageUid);
        }
    }, {
        key: 'searchMessage',
        value: function searchMessage(conversation, keyword, withUser) {
            return this.store.searchConversationMessage(conversation, keyword, withUser);
        }
    }, {
        key: 'sendConversationMessage',
        value: function sendConversationMessage(conversation, messageContent, toUsers, preparedCB, progressCB, successCB, failCB) {
            var message = new _message2.default();
            if (conversation instanceof _conversation2.default) {
                message.conversation = conversation;
            } else {
                message.conversation = new _conversation2.default(conversation.type, conversation.target, conversation.line);
            }
            message.messageContent = messageContent;
            this.sendMessageEx(message, toUsers, preparedCB, progressCB, successCB, failCB);
        }
    }, {
        key: 'sendSavedMessage',
        value: function sendSavedMessage(message, expireDuration, successCB, failCB) {
            var messageId = message.messageId;
            message = this.store.getMessageById(messageId);
            if (!message) {
                this.error('saved message not found', messageId);
                failCB && failCB(-1);
                return;
            }

            this._sendMessageInternal(message, [], successCB, failCB);
        }
    }, {
        key: 'sendMessage',
        value: function sendMessage(message, preparedCB, progressCB, successCB, failCB) {
            this.sendMessageEx(message, [], preparedCB, progressCB, successCB, failCB);
        }

        // toUsers 用来实现定向消息

    }, {
        key: 'sendMessageEx',
        value: function sendMessageEx(message) {
            var toUsers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var preparedCB = arguments[2];
            var progressCB = arguments[3];

            var _this57 = this;

            var successCB = arguments[4];
            var failCB = arguments[5];


            // prepared
            // insert message
            var msgId = void 0;
            var saveTimestamp = _long2.default.fromValue(new Date().getTime() + this.getServerDeltaTime());
            message.status = _messageStatus2.default.Sending;
            message.from = this.userId;
            message.timestamp = saveTimestamp;
            message.content = message.messageContent.encode();
            var flag = _messageConfig2.default.getMessageContentPersitFlag(message.messageContent.type);
            if (flag === _persistFlag2.default.No_Persist || flag === _persistFlag2.default.Transparent) {
                msgId = 0;
                message.messageId = msgId;
            } else {
                if (message.conversation.type === _conversationType2.default.ChatRoom) {
                    msgId = this.store.genChatRoomMessageId();
                } else {
                    msgId = this.store.genNormalMessageId();
                }
                message.messageId = msgId;
                this.store.saveMessage(message);
                this.log('message prepared', msgId, saveTimestamp, message);
                this.store.updateConversationLastMessage(message);
            }

            this.eventEmitter.emit(_wfcEvent2.default.SendMessage, message);
            if (preparedCB) {
                this.log('onPrepared', this.getMessageById(msgId));
                preparedCB(msgId, saveTimestamp);
            }
            if (message.messageContent instanceof _mediaMessageContent2.default) {
                if ((message.messageContent.file || message.messageContent.localPath) && !message.messageContent.remotePath) {
                    this.log('send media message', message);
                    if (this.isSupportBigFilesUpload()) {
                        var fileOrDataUri = message.messageContent.file ? message.messageContent.file : message.messageContent.localPath;
                        var blob = void 0;
                        if (typeof fileOrDataUri === 'string' || fileOrDataUri instanceof String) {
                            blob = this._dataURItoBlob(fileOrDataUri);
                        } else {
                            //blob = new Blob([fileOrDataUri], { type: type })
                            blob = fileOrDataUri;
                        }
                        this.log('support big file', fileOrDataUri, name);
                        this._uploadFile(message, blob, message.messageContent.name, message.messageContent.mediaType, function (uploaded, total) {
                            progressCB && progressCB(uploaded, total);
                        }, function (remoteUrl) {
                            message.messageContent.remotePath = remoteUrl;
                            _this57.updateMessageContent(message.messageId, message.messageContent);
                            _this57._sendMessageInternal(message, [], successCB, failCB);
                        }, function (err) {
                            message.status = _messageStatus2.default.SendFailure;
                            _this57.store.updateMessageById(message);
                            _this57.store.updateConversationLastMessage(message);
                            _this57.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);
                            failCB && failCB(err);
                        });
                    } else {
                        var _fileOrDataUri = message.messageContent.file ? message.messageContent.file : message.messageContent.localPath;
                        this.log('not support big file', _fileOrDataUri);
                        this._uploadMedia(message.messageId, message.messageContent.name, _fileOrDataUri, message.messageContent.mediaType, function (remoteMediaUrl) {
                            message.messageContent.remotePath = remoteMediaUrl;
                            _this57.log('remote Url', remoteMediaUrl);
                            _this57._sendMessageInternal(message, toUsers, successCB, failCB);
                        }, function (errorCode) {
                            message.status = _messageStatus2.default.SendFailure;
                            _this57.store.updateMessageById(message);
                            _this57.store.updateConversationLastMessage(message);
                            _this57.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);

                            if (failCB) {
                                failCB(errorCode);
                            }
                        }, function (uploaded, total) {
                            // TODO progress update
                            // this.eventEmitter.emit(EventType.MessageStatusUpdate, message);

                            if (progressCB) {
                                progressCB(uploaded, total);
                            }
                        });
                    }
                } else if (message.messageContent.remotePath !== '') {
                    this._sendMessageInternal(message, toUsers, successCB, failCB);
                } else {
                    if (message.messageContent instanceof _compositeMessageContent2.default) {
                        // 组合消息比较特殊，可能真没什么需要上传的
                        this._sendMessageInternal(message, toUsers, successCB, failCB);
                    } else {
                        this.log('send media message error, file，localPath and remoteUrl are null');
                        message.status = _messageStatus2.default.SendFailure;
                        this.store.updateMessageById(message);
                        this.store.updateConversationLastMessage(message);
                        this.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);

                        if (failCB) {
                            failCB(-1);
                        }
                    }
                }
            } else {
                this._sendMessageInternal(message, toUsers, successCB, failCB);
            }
        }
    }, {
        key: '_sendMessageInternal',
        value: function _sendMessageInternal(message) {
            var toUsers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            var _this58 = this;

            var successCB = arguments[2];
            var failCB = arguments[3];

            var pbMsg = this._toProtoMessage(message);
            pbMsg.to = toUsers;
            this.log('_sendMessageInternal', this.connectionStatus);
            var data = _wfcmessage.Message.encode(pbMsg).finish();
            if (data.byteLength > 15 * 1024) {
                this.log('\u8B66\u544A\uFF01\uFF01\uFF01\u6D88\u606F\u5185\u5BB9\u5927\u5C0F\u662F: ' + data.byteLength + '\uFF0C\u5927\u5C0F\u8D85\u8FC715K\u4E86\uFF0C\u5EFA\u8BAE\u4E0D\u8981\u8D85\u8FC715K\uFF0C\u5982\u679C\u5927\u6D88\u606F\u8FC7\u591A\u4F1A\u5F71\u54CD\u63A5\u53D7\u4F53\u9A8C\uFF0C\u5EFA\u8BAE\u5927\u6587\u4EF6\u4F7F\u7528\u5A92\u4F53\u6D88\u606F\u7C7B\u578B!!!');
            }
            if (data.byteLength > 100 * 1024) {
                this.error('\u6D88\u606F\u5185\u5BB9\u592A\u5927\uFF0C\u53D1\u9001\u5931\u8D25!');
                failCB && failCB(-1);
                return;
            }

            this._publish('MS', data, function () {
                var errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -2;
                var data = arguments[1];

                _this58.log('_sendMessageInternal result', errorCode);
                if (errorCode !== 0 || !data) {
                    _this58.log('send message error', errorCode);
                    message.status = _messageStatus2.default.SendFailure;
                    _this58.store.updateMessageById(message);
                    _this58.store.updateConversationLastMessage(message);
                    _this58.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);
                    if (failCB) {
                        failCB(errorCode);
                    }
                    return;
                } else {
                    // parse data
                    // messageUid + timestamp
                    var messageUid = new _long2.default(0);
                    var timestamp = new _long2.default(0);
                    if (data.length === 16) {
                        messageUid = _long2.default.fromBytesBE(data.slice(0, 8), true);
                        timestamp = _long2.default.fromBytesBE(data.slice(8, 16), true);
                        message.messageUid = messageUid;
                        message.timestamp = timestamp;
                        message.status = _messageStatus2.default.Sent;
                        message.direction = 0;
                        message.from = _this58.userId;
                        _this58.store.updateMessageById(message);
                        _this58.store.updateConversationLastMessage(message);

                        _this58.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);
                        if (successCB) {
                            successCB(messageUid, timestamp);
                        }
                    } else {
                        message.status = _messageStatus2.default.SendFailure;
                        _this58.store.updateMessageById(message);
                        _this58.store.updateConversationLastMessage(message);
                        _this58.log('ms reponse length error');

                        _this58.eventEmitter.emit(_wfcEvent2.default.MessageStatusUpdate, message);
                        if (failCB) {
                            failCB(-100001);
                        }
                    }
                }
            });
        }
    }, {
        key: 'cancelSendingMessage',
        value: function cancelSendingMessage(messageId) {
            if (messageId <= 0) {
                return false;
            }
            var xhr = this.uploadingMap.get(messageId);
            if (xhr) {
                try {
                    xhr.abort();
                } catch (e) {
                    this.log(e);
                }
                return true;
            }

            return false;
        }
    }, {
        key: 'recallMessage',
        value: function () {
            var _ref37 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee37(messageUid, successCB, failCB) {
                var _this59 = this;

                var request;
                return _regenerator2.default.wrap(function _callee37$(_context37) {
                    while (1) {
                        switch (_context37.prev = _context37.next) {
                            case 0:
                                request = _wfcmessage.INT64Buf.create();

                                request.id = _long2.default.fromValue(messageUid);
                                this._publish('MR', _wfcmessage.INT64Buf.encode(request).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        if (successCB) {
                                            successCB();
                                        }
                                        _this59.onRecallMessage(_this59.getUserId(), messageUid);
                                    } else {
                                        if (failCB) {
                                            failCB(errorCode);
                                        }
                                    }
                                });

                            case 3:
                            case 'end':
                                return _context37.stop();
                        }
                    }
                }, _callee37, this);
            }));

            function recallMessage(_x192, _x193, _x194) {
                return _ref37.apply(this, arguments);
            }

            return recallMessage;
        }()
    }, {
        key: 'deleteMessageById',
        value: function deleteMessageById(messageId) {
            var result = this.store.deleteMessageById(messageId);
            if (result) {
                this.onMessageDeleted(messageId);
            }
            return result;
        }
    }, {
        key: 'deleteRemoteMessage',
        value: function deleteRemoteMessage(messageUid, successCB, failCB) {
            var _this60 = this;

            var request = _wfcmessage.INT64Buf.create();
            request.id = _long2.default.fromValue(messageUid);
            this._publish('MD', _wfcmessage.INT64Buf.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    successCB && successCB();
                    _this60.onRemoteMessageDeleted(messageUid);
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: 'clearMessages',
        value: function () {
            var _ref38 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee38(conversation, dt) {
                var conversationInfo;
                return _regenerator2.default.wrap(function _callee38$(_context38) {
                    while (1) {
                        switch (_context38.prev = _context38.next) {
                            case 0:
                                if (dt === undefined) {
                                    dt = _long2.default.MAX_VALUE;
                                }
                                this.store.clearConversationMessages(conversation, dt);
                                conversationInfo = this.getConversationInfo(conversation);

                                this.eventEmitter.emit(_wfcEvent2.default.ConversationInfoUpdate, conversationInfo);

                            case 4:
                            case 'end':
                                return _context38.stop();
                        }
                    }
                }, _callee38, this);
            }));

            function clearMessages(_x195, _x196) {
                return _ref38.apply(this, arguments);
            }

            return clearMessages;
        }()
    }, {
        key: 'clearRemoteConversationMessages',
        value: function () {
            var _ref39 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee39(conversation, successCB, failCB) {
                var _this61 = this;

                var pbConversation;
                return _regenerator2.default.wrap(function _callee39$(_context39) {
                    while (1) {
                        switch (_context39.prev = _context39.next) {
                            case 0:
                                pbConversation = this._toProtoConversation(conversation);

                                this._publish('CMD', _wfcmessage.Conversation.encode(pbConversation).finish(), function (errorCode, data) {
                                    if (errorCode === 0) {
                                        _this61.clearMessages(conversation);
                                        successCB && successCB();
                                    } else {
                                        failCB && failCB(errorCode === 0 ? -1 : errorCode);
                                    }
                                });

                            case 2:
                            case 'end':
                                return _context39.stop();
                        }
                    }
                }, _callee39, this);
            }));

            function clearRemoteConversationMessages(_x197, _x198, _x199) {
                return _ref39.apply(this, arguments);
            }

            return clearRemoteConversationMessages;
        }()

        /**
         *
         * @param {Conversation} conversation
         * @param {MessageContent} messageContent
         * @param {number} status 可选值参考{@link MessageStatus}
         * @param {boolean} notify 是否触发onReceiveMessage
         * @param {Number} serverTime 服务器时间，精度到毫秒
         */

    }, {
        key: 'insertMessage',
        value: function insertMessage(conversation, messageContent) {
            var status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _messageStatus2.default.Sent;
            var notify = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var serverTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

            var msg = new _message2.default(conversation, messageContent);
            msg.status = status;
            msg.direction = 0;
            if (status >= _messageStatus2.default.Mentioned) {
                msg.direction = 1;
                if (conversation.type === _conversationType2.default.Single) {
                    msg.from = conversation.target;
                } else {
                    msg.from = this.userId;
                }
            } else {
                msg.from = this.userId;
            }
            msg.timestamp = _long2.default.fromValue(serverTime ? serverTime : new Date().getTime());
            switch (conversation.type) {
                case _conversationType2.default.ChatRoom:
                    msg.messageId = this.store.genChatRoomMessageId();
                    break;
                default:
                    msg.messageId = this.store.genNormalMessageId();
                    break;
            }
            this.store.insertConversationMessages([msg]);
            if (notify) {
                this.eventEmitter.emit(_wfcEvent2.default.ReceiveMessage, msg);
            }
            return msg;
            // proto.insertMessage(JSON.stringify(conversation), this.userId, JSON.stringify(messageContent), status, notify, serverTime);
        }
    }, {
        key: 'isUserReceiptEnabled',
        value: function isUserReceiptEnabled() {
            var value = this.getUserSetting(_userSettingScope2.default.DisableReceipt, "");
            return "1" !== value;
        }
    }, {
        key: 'isGlobalDisableSyncDraft',
        value: function isGlobalDisableSyncDraft() {
            return this.isGlobalDisableDraftSync;
        }
    }, {
        key: 'setDisableSyncDraft',
        value: function setDisableSyncDraft(disable, successCB, failCB) {
            this._updateUserSetting(_userSettingScope2.default.DisableSyncDraft, "", disable ? "1" : "0", successCB, failCB);
        }
    }, {
        key: 'isDisableSyncDraft',
        value: function isDisableSyncDraft() {
            var value = this.getUserSetting(_userSettingScope2.default.DisableSyncDraft, "");
            return "1" !== value;
        }
    }, {
        key: 'setUserEnableReceipt',
        value: function setUserEnableReceipt(enable, successCB, failCB) {
            this._updateUserSetting(_userSettingScope2.default.DisableReceipt, "", enable ? "0" : "1", successCB, failCB);
        }
    }, {
        key: 'updateMessageStatus',
        value: function updateMessageStatus(messageId, status) {
            var msg = this.store.getMessageById(messageId);
            if (msg.messageId === 0) {
                return;
            }
            msg.status = status;
            this.store.updateMessageById(msg);
        }
    }, {
        key: 'updateMessageContent',
        value: function updateMessageContent(messageId, messageContent) {
            var msg = this.store.getMessageById(messageId);
            if (msg.messageId === 0) {
                return;
            }
            msg.messageContent = messageContent;
            this.store.updateMessageById(msg);
        }
    }, {
        key: 'updateMessageContentByUid',
        value: function updateMessageContentByUid(messageUid, messageContent) {
            var msg = this.store.getMessageByUid(messageUid);
            if (!msg || msg.messageId === 0) {
                return;
            }
            msg.messageContent = messageContent;
            this.store.updateMessageById(msg);
        }
    }, {
        key: 'updateRemoteMessageContent',
        value: function updateRemoteMessageContent(msgUid, messageContent, distribute, updateLocal, successCB, failCB) {
            var _this62 = this;

            var request = _wfcmessage.UpdateMessageContent.create();
            request.messageId = _long2.default.fromValue(msgUid);
            request.content = this._toProtoMessageContent(messageContent);
            request.distribute = distribute;
            this._publish('MCU', _wfcmessage.UpdateMessageContent.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    if (updateLocal) {
                        _this62.updateMessageContentByUid(msgUid, messageContent);
                    }
                    successCB && successCB();
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: '_uploadXMLHttpRequest',
        value: function _uploadXMLHttpRequest(message, fileName, remoteUrl, progressCB, successCB, failCB) {
            var _this63 = this;

            var xhr = new XMLHttpRequest();
            xhr.upload.onprogress = function (e) {
                // this.log('upload.onprogress', Math.ceil(e.loaded / e.total * 100))
                var progress = e.loaded;
                var total = e.total;
                progressCB(progress, total);
            };
            xhr.onreadystatechange = function (e) {
                _this63.log('onr', xhr.readyState, xhr.status, e);
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        _this63.log('upload file success', fileName, remoteUrl);
                        successCB(remoteUrl);
                    } else {
                        _this63.log('upload file error', xhr.status);
                        failCB && failCB(-1);
                    }
                    _this63.uploadingMap.delete(message.messageId);
                }
            };
            xhr.onerror = function (e) {
                _this63.log('upload file error', e);
                failCB && failCB(-1);
                _this63.uploadingMap.delete(message.messageId);
            };

            if (message.messageId > 0) {
                this.uploadingMap.set(message.messageId, xhr);
            }

            return xhr;
        }

        // 大文件上传

    }, {
        key: '_uploadFile',
        value: function _uploadFile(message, blob, fileName, mediaType, progressCB, successCB, failCB) {
            var _this64 = this;

            var originalFileName = void 0;
            var randomStr12 = (Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)).substring(0, 12);
            if (!fileName || fileName === '') {
                fileName = randomStr12;
                originalFileName = fileName;
            } else {
                originalFileName = fileName;
                fileName = randomStr12;
            }

            if (fileName.indexOf('.') === -1) {
                switch (mediaType) {
                    case 1:
                    case 5:
                        fileName += '.jpg';
                        break;
                    case 2:
                        // 小程序平台，voice默认为mp3格式
                        fileName += '.mp3';
                        break;
                    case 3:
                        fileName += '.mp4';
                        break;
                    default:
                        break;
                }
            }

            this.log('upload fileName', fileName, mediaType);
            var ext = fileName.substring(fileName.lastIndexOf("."));
            if (originalFileName.indexOf(".") === -1) {
                originalFileName += ext;
            }
            this.getUploadMediaUrl(fileName, mediaType, 'application/octet-stream', function (uploadUrl, remoteUrl, backUploadUrl, serverType) {
                var xhr = void 0;
                if (serverType === 0) {
                    // 内置存储，不支持大文件上传
                } else if (serverType === 1) {
                    // qiniu
                    var ss = uploadUrl.split('?');
                    var url = ss[0];
                    var token = ss[1];
                    var key = ss[2];
                    xhr = _this64._uploadXMLHttpRequest(message, fileName, remoteUrl, progressCB, successCB, failCB);

                    var formData = new FormData();
                    formData.append('key', key);
                    formData.append('token', token);
                    formData.append('file', blob);
                    xhr.open('POST', url);
                    xhr.setRequestHeader("content-disposition", 'attachment; filename="' + encodeURI(originalFileName) + '"');
                    xhr.send(formData);
                } else {
                    // 野火专业存储或阿里云
                    xhr = _this64._uploadXMLHttpRequest(message, fileName, remoteUrl, progressCB, successCB, failCB);
                    xhr.open('PUT', uploadUrl);

                    xhr.setRequestHeader("content-type", 'application/octet-stream');
                    xhr.send(blob);
                }
            }, function (e) {
                _this64.log('getUploadMediaUrl e', e);
            });
        }
    }, {
        key: 'uploadMedia',
        value: function uploadMedia(fileName, fileOrDataUri, mediaType, successCB, failCB, progressCB) {
            this._uploadMedia(0, fileName, fileOrDataUri, mediaType, successCB, failCB, progressCB);
        }

        //  原始协议栈上传，有加密

    }, {
        key: '_uploadMedia',
        value: function _uploadMedia(messageId, fileName, fileOrDataUri, mediaType, successCB, failCB, progressCB) {
            var _this65 = this;

            var originalFileName = void 0;
            var randomStr12 = (Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)).substring(0, 12);
            if (!fileName || fileName === '') {
                fileName = randomStr12;
                originalFileName = fileName;
            } else {
                originalFileName = encodeURIComponent(fileName);
                fileName = randomStr12;
            }

            if (fileName.indexOf('.') === -1) {
                switch (mediaType) {
                    case 1:
                    case 5:
                        fileName += '.jpg';
                        break;
                    case 2:
                        // 小程序平台，voice默认为mp3格式
                        fileName += '.mp3';
                        break;
                    case 3:
                        fileName += '.mp4';
                        break;
                    default:
                        break;
                }
            }

            this.log('upload fileName', fileName, mediaType);
            var ext = fileName.substring(fileName.lastIndexOf("."));
            if (originalFileName.indexOf(".") === -1) {
                originalFileName += ext;
            }

            var key = (0, _base.btoa)(this.userId) + '-' + mediaType + '-' + Math.round(new Date().valueOf() / 1000) + '-' + fileName;

            var request = _wfcmessage.GetUploadTokenRequest.create();
            request.mediaType = mediaType;
            request.mediaPath = key;
            this._publish('GMUT', _wfcmessage.GetUploadTokenRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    var tokenResult = _wfcmessage.GetUploadTokenResult.decode(data);
                    _this65.log('getUploadToken result', tokenResult);
                    var req = new XMLHttpRequest();
                    var timeout = false;
                    var timer = setTimeout(function () {
                        _this65.log('upload media timeout');
                        timeout = true;
                        req.abort();
                        failCB(-1);
                    }, 200000);
                    req.onerror = function (err) {
                        _this65.log('upload media error', err);
                        failCB && failCB(-1);
                        _this65.uploadingMap.delete(messageId);
                    };
                    req.onreadystatechange = function () {
                        if (req.readyState !== 4) return;
                        _this65.uploadingMap.delete(messageId);
                        if (timeout) return;
                        clearTimeout(timer);
                        if (req.status === 200) {
                            _this65.log('upload response', req.responseText);
                            if (tokenResult.type < 2) {
                                var uploadResult = JSON.parse(req.responseText);
                                if (successCB) {
                                    successCB(tokenResult.domain + '/' + uploadResult.key);
                                }
                            } else {
                                if (successCB) {
                                    successCB(tokenResult.domain + '/' + key);
                                }
                            }
                        } else {
                            _this65.log('upload media error status：' + req.status);
                            failCB && failCB(req.status);
                        }
                    };
                    req.onprogress = function (evt) {
                        if (evt.lengthComputable) {
                            if (progressCB) {
                                progressCB(evt.loaded, evt.total);
                            }
                        }
                    };
                    if (messageId > 0) {
                        _this65.uploadingMap.set(messageId, req);
                    }

                    var cgi = void 0;
                    if (tokenResult.type === 0 || tokenResult.type === 4) {
                        cgi = "/fs";
                    } else if (tokenResult.type === 3) {
                        var tempKey = tokenResult.path + "/" + key;
                        tempKey = (0, _aes.AESEncrypt)(tempKey);
                        cgi = "/fs/" + tempKey;
                    } else {
                        if (tokenResult.type === 2) {
                            key = encodeURI(key);
                        }
                        cgi = "/" + key;
                    }
                    _this65.log('upload media cgi', cgi, tokenResult);

                    var server = void 0;
                    var port = void 0;
                    var sPort = void 0;
                    // 1 主网络；2 备选网络
                    if (_this65.backupAddressStrategy === 2 && tokenResult.backupServer) {
                        server = tokenResult.backupServer;
                        sPort = tokenResult.backupSslPort;
                        sPort = sPort === 443 ? '' : ':' + sPort;

                        port = tokenResult.backupPort;
                        port = port === 80 ? '' : ':' + port;
                    } else {
                        server = tokenResult.server;
                        sPort = '';
                        // sslPort是新增的，需要兼容就版本
                        if (tokenResult.sslPort && tokenResult.sslPort !== 443) {
                            sPort = ":" + tokenResult.sslPort;
                        }
                        port = tokenResult.port !== 80 ? ':' + tokenResult.port : '';
                    }

                    if (tokenResult.type < 2 || tokenResult.type === 4) {
                        var formData = new FormData();

                        var type = 'application_octet-stream';
                        if (mediaType === 1) {
                            type = 'image_jpeg';
                        } else if (mediaType === 2) {
                            type = 'audio_amr';
                        }
                        var blob = void 0;
                        if (typeof fileOrDataUri === 'string' || fileOrDataUri instanceof String) {
                            blob = _this65._dataURItoBlob(fileOrDataUri);
                        } else {
                            blob = new Blob([fileOrDataUri], { type: type });
                        }

                        formData.append('token', tokenResult.token);
                        formData.append('key', fileName);
                        if (tokenResult.type < 2) {
                            formData.append('file', blob, originalFileName);

                            if (_config2.default.USE_WSS) {
                                req.open("POST", 'https://' + server + sPort + cgi);
                            } else {
                                req.open("POST", 'http://' + server + port + cgi);
                            }
                            if (tokenResult.type !== 0) {
                                req.setRequestHeader("content-disposition", 'attachment; filename="' + originalFileName + '"');
                            }
                            req.send(formData);
                        } else {
                            new Response(blob).arrayBuffer().then(function (buf) {
                                var array = new Uint8Array(buf);
                                var data = _this65._encrypt(array, false);

                                var nBlob = new Blob([new Uint8Array(data, data.byteOffset, data.byteLength)]);
                                formData.append('file', nBlob, originalFileName);
                                if (_config2.default.USE_WSS) {
                                    req.open("POST", 'https://' + server + sPort + cgi);
                                } else {
                                    req.open("POST", 'http://' + server + port + cgi);
                                }
                                req.setRequestHeader("x-wfc-size", data.byteLength);
                                if (tokenResult.type !== 0) {
                                    req.setRequestHeader("content-disposition", 'attachment; filename="' + originalFileName + '"');
                                }
                                req.send(formData);
                            });
                        }
                    } else if (tokenResult.type >= 2) {
                        var token = void 0;
                        if (_config2.default.USE_WSS) {
                            req.open("PUT", 'https://' + server + sPort + cgi);
                            token = _this65.backupAddressStrategy === 1 ? tokenResult.sslToken ? tokenResult.sslToken : tokenResult.token : tokenResult.backupSslToken ? tokenResult.backupSslToken : tokenResult.backupToken;
                        } else {
                            req.open("PUT", 'http://' + server + port + cgi);
                            token = _this65.backupAddressStrategy === 1 ? tokenResult.token : tokenResult.backupToken;
                        }
                        req.setRequestHeader("content-disposition", 'attachment; filename="' + originalFileName + '"');
                        req.setRequestHeader("Authorization", token);
                        var _type = void 0;
                        if (tokenResult.type === 2) {
                            _type = 'application/octet-stream';
                            req.setRequestHeader('Content-Type', _type);
                            req.setRequestHeader("x-oss-date", tokenResult.date);
                        } else {
                            var suffix = fileName.split('.').pop();
                            if (mediaType === 1) {
                                _type = 'image/jpeg';
                            } else if (mediaType === 2) {
                                _type = 'audio/amr';
                            } else if (mediaType === 3) {
                                _type = 'video/mp4';
                            } else if (suffix) {
                                switch (suffix) {
                                    case 'jpg':
                                    case 'jpeg':
                                        _type = 'image/jpeg';
                                        break;
                                    case 'gif':
                                        _type = 'image/gif';
                                        break;
                                    case 'png':
                                        _type = 'image/png';
                                        break;
                                    case 'mp3':
                                        _type = 'audio/mpeg';
                                        break;
                                    case 'mp4':
                                        _type = 'video/mp4';
                                        break;
                                    case 'doc':
                                    case 'docx':
                                        _type = 'application/vnd.ms-word';
                                        break;
                                    case 'xls':
                                    case 'xlsx':
                                        _type = 'application/vnd.ms-xls';
                                        break;
                                    case 'ppt':
                                    case 'pptx':
                                        _type = 'application/vnd.ms-powerpoint';
                                        break;
                                    case 'pps':
                                        _type = 'application/vnd.ms-powerpoint';
                                        break;
                                    case 'pdf':
                                        _type = '"application/pdf';
                                        break;
                                    case 'xml':
                                        _type = 'application/vnd.ms-xml';
                                        break;
                                    default:
                                        _type = 'application/octet-stream';
                                        break;
                                }
                            } else {
                                _type = 'application/octet-stream';
                            }

                            req.setRequestHeader('Content-Type', _type);
                            req.setRequestHeader("x-amz-date", tokenResult.date);
                            req.setRequestHeader("x-wfc-cid", (0, _aes.AESEncrypt)(_this65.clientId));
                            req.setRequestHeader("x-wfc-uid", (0, _aes.AESEncrypt)(_this65.userId));
                        }

                        var _blob = void 0;
                        if (typeof fileOrDataUri === 'string' || fileOrDataUri instanceof String) {
                            _blob = _this65._dataURItoBlob(fileOrDataUri);
                        } else {
                            _blob = new Blob([fileOrDataUri], { type: _type });
                        }

                        if (tokenResult.type === 3) {
                            // this.log('upload media size', blob.size)
                            if (_blob.size > 100 * 1024 * 1024) {
                                if (failCB) {
                                    _this65.log('upload media size too large', _blob.size);
                                    failCB(-1);
                                }
                                return;
                            }
                            new Response(_blob).arrayBuffer().then(function (buf) {
                                var array = new Uint8Array(buf);
                                var data = _this65._encrypt(array);
                                req.setRequestHeader("x-wfc-size", buf.byteLength);
                                req.send(data);
                            });
                        } else {
                            new Response(_blob).arrayBuffer().then(function (buf) {
                                req.send(buf);
                            });
                        }
                    }
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });

            this.log('upload-----------');
        }
    }, {
        key: 'getAuthorizedMediaUrl',
        value: function getAuthorizedMediaUrl(messageUid, mediaType, mediaPath, successCB, failCB) {
            var request = _wfcmessage.GetUploadTokenRequest.create();
            request.mediaType = mediaType;
            request.mediaPath = mediaPath;
            request.messageId = messageUid;

            this._publish('GMDT', _wfcmessage.GetUploadTokenRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0 && data) {
                    var idBuf = _wfcmessage.IDBuf.decode(data);
                    successCB && successCB(idBuf.id);
                } else {
                    failCB && failCB(errorCode === 0 ? -1 : errorCode);
                }
            });
        }
    }, {
        key: 'isSupportBigFilesUpload',
        value: function isSupportBigFilesUpload() {
            return this.serverConfigs.isSupportBigFileUpload;
        }
    }, {
        key: 'getUploadMediaUrl',
        value: function getUploadMediaUrl(fileName, mediaType, contentType, successCB, failCB) {
            var request = _wfcmessage.GetUploadTokenRequest.create();
            var key = this.userId + '-' + mediaType + '-' + Math.round(new Date().valueOf() / 1000) + '-' + Math.round(Math.random() * 100000000);
            var index = fileName.lastIndexOf('.');
            fileName = encodeURIComponent(fileName);
            if (index > 0) {
                key += fileName.substring(index);
            }
            request.type = mediaType;
            request.mediaPath = key;
            request.contentType = !contentType ? 'application/octet-stream' : contentType;
            this._publish('GMPU', _wfcmessage.GetUploadTokenRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0 && data) {
                    var result = _wfcmessage.GetPresignedUrlResult.decode(data);
                    successCB && successCB(result.presignedUrl, result.mediaUrl, result.backupPresignedUrl, result.type);
                } else {
                    failCB && failCB(errorCode === 0 ? -1 : errorCode);
                }
            });
        }
    }, {
        key: '_getContentType',
        value: function _getContentType(mediaType, fileName) {
            if (mediaType === 1) {
                return "image/jpeg";
            } else if (mediaType === 2) {
                return "audio/amr";
            } else if (mediaType === 3) {
                return "video/mp4";
            } else {
                if (fileName) {
                    var suffix = fileName.substring(fileName.lastIndexOf('.') + 1);
                    if (suffix === "jpg" || suffix === "jpeg") {
                        return "image/jpeg";
                    } else if (suffix === "gif") {
                        return "image/gif";
                    } else if (suffix === "png") {
                        return "image/png";
                    } else if (suffix === "mp3") {
                        return "audio/mpeg";
                    } else if (suffix === "mp4") {
                        return "video/mp4";
                    } else if (suffix === "doc" || suffix === "docx") {
                        return "application/vnd.ms-word";
                    } else if (suffix === "xls" || suffix === "xlsx") {
                        return "application/vnd.ms-xls";
                    } else if (suffix === "ppt" || suffix === "pptx") {
                        return "application/vnd.ms-powerpoint";
                    } else if (suffix === "pps") {
                        return "application/vnd.ms-powerpoint";
                    } else if (suffix === "pdf") {
                        return "application/pdf";
                    } else if (suffix === "xml") {
                        return "application/vnd.ms-xml";
                    } else {
                        return "application/octet-stream";
                    }
                }
            }
            return "application/octet-stream";
        }
    }, {
        key: '_getFileRecordsCallback',
        value: function _getFileRecordsCallback(errorCode, data, successCB, failCB) {
            if (errorCode === 0 && data) {
                var result = _wfcmessage.LoadFileRecordRes.decode(data);
                var records = [];
                result.record.forEach(function (r) {
                    var record = new _fileRecord2.default();
                    record.conversation = new _conversation2.default(r.conversation.type, r.conversation.target, r.conversation.line);
                    record.messageUid = r.messageId;
                    record.name = r.name;
                    record.url = r.url;
                    if (_config2.default.urlRedirect) {
                        record.url = _config2.default.urlRedirect(r.url);
                    }
                    record.size = r.size;
                    record.downloadCount = r.downloadCount;
                    record.userId = r.fromUser;
                    record.timestamp = r.dt;
                    records.push(record);
                });

                successCB && successCB(records);
            } else {
                if (failCB) {
                    failCB(errorCode === 0 ? -1 : errorCode);
                }
            }
        }
    }, {
        key: 'getConversationFileRecords',
        value: function getConversationFileRecords(conversation, fromUser, beforeMessageUid, order, count, successCB, failCB) {
            var _this66 = this;

            var request = _wfcmessage.LoadFileRecordReq.create();
            request.conversation = this._toProtoConversation(conversation);
            request.messageId = _long2.default.fromValue(beforeMessageUid);
            request.from = fromUser;
            request.order = order;
            request.count = count;
            this._publish('LFR', _wfcmessage.LoadFileRecordReq.encode(request).finish(), function (errorCode, data) {
                _this66._getFileRecordsCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'getMyFileRecords',
        value: function getMyFileRecords(beforeMessageUid, order, count, successCB, failCB) {
            var _this67 = this;

            var request = _wfcmessage.LoadFileRecordReq.create();
            request.messageId = _long2.default.fromValue(beforeMessageUid);
            request.order = order;
            request.count = count;
            this._publish('LFR', _wfcmessage.LoadFileRecordReq.encode(request).finish(), function (errorCode, data) {
                _this67._getFileRecordsCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'searchFiles',
        value: function searchFiles(keyword, conversation, fromUser, beforeMessageUid, order, count, successCB, failCB) {
            var _this68 = this;

            var request = _wfcmessage.SearchFileRecordReq.create();
            request.keyword = keyword;
            request.conversation = this._toProtoConversation(conversation);
            request.from = fromUser;
            request.messageId = _long2.default.fromValue(beforeMessageUid);
            request.order = order;
            request.count = count;
            this._publish('SFR', _wfcmessage.SearchFileRecordReq.encode(request).finish(), function (errorCode, data) {
                _this68._getFileRecordsCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'searchMyFiles',
        value: function searchMyFiles(keyword, beforeMessageUid, order, count, successCB, failCB) {
            var _this69 = this;

            var request = _wfcmessage.SearchFileRecordReq.create();
            request.keyword = keyword;
            request.messageId = _long2.default.fromValue(beforeMessageUid);
            request.order = order;
            request.count = count;
            this._publish('SFR', _wfcmessage.SearchFileRecordReq.encode(request).finish(), function (errorCode, data) {
                _this69._getFileRecordsCallback(errorCode, data, successCB, failCB);
            });
        }
    }, {
        key: 'deleteFileRecord',
        value: function deleteFileRecord(messageUid, successCB, failCB) {
            var request = _wfcmessage.INT64Buf.create();
            request.id = _long2.default.fromValue(messageUid);
            this._publish('DFR', _wfcmessage.INT64Buf.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    if (successCB) {
                        successCB();
                    }
                } else {
                    if (failCB) {
                        failCB(errorCode);
                    }
                }
            });
        }
    }, {
        key: 'markConversationAsUnread',
        value: function markConversationAsUnread(conversation, syncToOtherClient) {
            var msgUid = this.store.setLastReceivedMessageUnread(conversation, '0', '0');
            if (msgUid && (0, _longUtil.gt)(msgUid, 0) && syncToOtherClient) {
                var content = new _markUnreadMessageContent2.default(msgUid);
                var msg = this.store.getMessageByUid(msgUid);
                content.timestamp = msg.timestamp;
                this.sendConversationMessage(conversation, content);
                return true;
            }
            return false;
        }
    }, {
        key: 'getVersion',
        value: function getVersion() {
            return WfcImpl.version;
        }
    }, {
        key: 'isUserOnlineStateEnabled',
        value: function isUserOnlineStateEnabled() {
            return this.isUserOnlineStateEnable;
        }
    }, {
        key: 'watchOnlineState',
        value: function watchOnlineState(conversationType, targets, duration, successCB, failCB) {
            this._watchOnlineState(conversationType, targets, duration, true, successCB, failCB);
        }
    }, {
        key: '_watchOnlineState',
        value: function _watchOnlineState(type, targets, duration, isWatch, successCB, failCB) {
            if (!this.isUserOnlineStateEnable) {
                failCB && failCB(248);
                return;
            }

            var request = _wfcmessage.PresenceWatchRequest.create();
            request.type = type;
            request.target = targets;
            request.duration = duration;
            this._publish('PWT', _wfcmessage.PresenceWatchRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0 && data) {
                    if (!isWatch) {
                        successCB && successCB();
                        return;
                    }
                    var result = _wfcmessage.PresenceWatchResult.decode(data);
                    var userStates = [];
                    result.notify.forEach(function (n) {
                        var userState = new _userOnlineState2.default();
                        userState.userId = n.userId;

                        userState.customState = new _userCustomState2.default();
                        userState.customState.state = n.customState;
                        userState.customState.text = n.customText;

                        var userClientStates = [];
                        n.state.forEach(function (s) {
                            var clientState = new _userClientState2.default();
                            clientState.platform = s.platform;
                            clientState.state = s.state;
                            clientState.lastSeen = s.lastSeen;
                            userClientStates.push(clientState);
                        });
                        userState.clientStates = userClientStates;

                        userStates.push(userState);
                    });

                    successCB && successCB(userStates);
                } else {
                    if (failCB) {
                        failCB(errorCode === 0 ? -1 : errorCode);
                    }
                }
            });
        }
    }, {
        key: 'unwatchOnlineState',
        value: function unwatchOnlineState(conversationType, targets, successCB, failCB) {
            this._watchOnlineState(conversationType, targets, 0, false, successCB, failCB);
        }
    }, {
        key: 'setMyCustomState',
        value: function setMyCustomState(customState, customText, successCB, failCB) {
            var csSetting = customState + '-' + customText;
            this.setUserSetting(_userSettingScope2.default.CustomState, "", csSetting, successCB, failCB);
        }
    }, {
        key: 'requireLock',
        value: function requireLock(lockId, duration, successCB, failCB) {
            var request = _wfcmessage.LockRequest.create();
            request.lockId = lockId;
            request.duration = _long2.default.fromValue(duration);
            this._publish('SLT', _wfcmessage.LockRequest.encode(request).finish(), function (errorCode, data) {
                if (errorCode === 0) {
                    successCB && successCB();
                } else {
                    failCB && failCB(errorCode);
                }
            });
        }
    }, {
        key: 'releaseLock',
        value: function releaseLock(lockId, successCB, failCB) {
            this.requireLock(lockId, 0, successCB, failCB);
        }
    }, {
        key: '_onlineStateNotify',
        value: function _onlineStateNotify(data) {
            var result = _wfcmessage.PresenceWatchResult.decode(data);
            var userStates = [];
            result.notify.forEach(function (n) {
                var userState = new _userOnlineState2.default();
                userState.userId = n.userId;

                userState.customState = new _userCustomState2.default();
                userState.customState.state = n.customState;
                userState.customState.text = n.customText;

                var userClientStates = [];
                n.state.forEach(function (s) {
                    var clientState = new _userClientState2.default();
                    clientState.platform = s.platform;
                    clientState.state = s.state;
                    clientState.lastSeen = s.lastSeen;
                    userClientStates.push(clientState);
                });
                userState.clientStates = userClientStates;

                userStates.push(userState);
            });

            this.eventEmitter.emit(_wfcEvent2.default.UserOnlineEvent, userStates);
        }
    }, {
        key: '_dataURItoBlob',
        value: function _dataURItoBlob(dataurl) {
            var arr = dataurl.split(','),
                mime = arr[0].match(/:(.*?);/)[1],
                bstr = atob(arr[1]),
                n = bstr.length,
                u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            this.log('-----------dataurltoblob', mime);
            return new Blob([u8arr], { type: mime });
        }
    }, {
        key: '_encrypt',
        value: function _encrypt(request) {
            var withDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (!request) {
                return request;
            }
            var data = new Buffer((0, _aes.AESEncrypt)(request, this.privateSecret, withDate), 'base64');
            return data;
        }
    }, {
        key: '_decrypt',
        value: function _decrypt(buf) {
            var data = (0, _aes.AESDecrypt)(buf.toString('base64'), this.privateSecret, true);
            return new Buffer(data);
        }
    }, {
        key: '_decryptPublishResponse',
        value: function _decryptPublishResponse(packet) {
            var data = (0, _aes.AESDecrypt)(packet.payload.slice(1, packet.payload.length).toString('base64'), this.privateSecret, true);
            if (data) {
                return new Buffer(data);
            }
            return null;
        }
    }, {
        key: '_toProtoConversation',
        value: function _toProtoConversation(conversation) {
            if (!conversation) {
                return null;
            }
            var pbConversation = _wfcmessage.Conversation.create();
            pbConversation.type = conversation.type;
            pbConversation.target = conversation.target;
            pbConversation.line = conversation.line;
            return pbConversation;
        }
    }, {
        key: '_toProtoMessage',
        value: function _toProtoMessage(msg) {
            var pbMsg = _wfcmessage.Message.create();
            pbMsg.conversation = msg.conversation;
            pbMsg.fromUser = this.getUserId();
            pbMsg.content = this._toProtoMessageContent(msg.messageContent);

            return pbMsg;
        }
    }, {
        key: '_toProtoMessageContent',
        value: function _toProtoMessageContent(content) {
            if (!content) {
                return null;
            }
            var pbMsgContent = _wfcmessage.MessageContent.create();
            var payload = content.encode();
            pbMsgContent.content = payload.content;
            pbMsgContent.pushContent = payload.pushContent;
            pbMsgContent.pushData = payload.pushData;
            pbMsgContent.searchableContent = payload.searchableContent;
            pbMsgContent.data = payload.binaryContent;
            pbMsgContent.type = payload.type;
            pbMsgContent.mentionedType = payload.mentionedType;
            pbMsgContent.mentionedTarget = payload.mentionedTargets;
            pbMsgContent.mediaType = payload.mediaType;
            pbMsgContent.remoteMediaUrl = payload.remoteMediaUrl;
            pbMsgContent.persistFlag = _messageConfig2.default.getMessageContentPersitFlag(payload.type);
            pbMsgContent.extra = content.extra;

            return pbMsgContent;
        }
    }, {
        key: '_generalOperationCallback',
        value: function _generalOperationCallback(errorCode, successCB, failCB) {
            if (errorCode === 0) {
                if (successCB) {
                    successCB();
                }
            } else {
                if (failCB) {
                    failCB(errorCode);
                }
            }
        }
    }, {
        key: '_generalStringListCallback',
        value: function _generalStringListCallback(errorCode, data, successCB, failCB) {
            if (errorCode === 0) {
                var idList = _wfcmessage.IDListBuf.decode(data);
                successCB && successCB(idList.id);
            } else {
                failCB && failCB(errorCode);
            }
        }
    }, {
        key: '_getStore',
        value: function _getStore() {
            return this.store;
        }
    }, {
        key: 'log',
        value: function log(message) {
            if (!_config2.default.DISABLE_LOG) {
                var _console;

                for (var _len2 = arguments.length, optionalParams = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    optionalParams[_key2 - 1] = arguments[_key2];
                }

                (_console = console).log.apply(_console, [message].concat(optionalParams));
            }
        }
    }, {
        key: 'warn',
        value: function warn(message) {
            if (!_config2.default.DISABLE_LOG) {
                var _console2;

                for (var _len3 = arguments.length, optionalParams = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                    optionalParams[_key3 - 1] = arguments[_key3];
                }

                (_console2 = console).warn.apply(_console2, [message].concat(optionalParams));
            }
        }
    }, {
        key: 'error',
        value: function error(message) {
            if (!_config2.default.DISABLE_LOG) {
                var _console3;

                for (var _len4 = arguments.length, optionalParams = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                    optionalParams[_key4 - 1] = arguments[_key4];
                }

                (_console3 = console).error.apply(_console3, [message].concat(optionalParams));
            }
        }
    }, {
        key: 'test',
        value: function test() {

            this.log('---------------test start----------------------');
            // let u = self.getUserInfo('uiuJuJccj', true);
            // u.hello();
            // this.log('user info', u);
            // self.getMessageById(200);

            // let g = self.getGroupInfo('PHPSPS22');
            // this.log(g);

            // let m = self.getGroupMembers('PHPSPS22');
            // this.log(m);

            // this.getMyGroupList();

            // this.log('localStorage', localStorage.getItem('test'));
            // localStorage.setItem('test', 'hello world');
            // this.log('localStorage', localStorage.getItem('test'));

            // this.log('atob', btoa('hello world'));
            // self.uploadMedia('hello world', MessageContentMediaType.Image,
            //     (remoteUrl) => {
            //         this.log('----------------upload success', remoteUrl);
            //     },
            //     (errorCode) => {
            //         this.log('-------------upload error', errorCode);
            //     },
            //     (current, total) => {

            //     });

            /*
            let id = 0;
            setInterval(() => {
                this.log('send message to uiuJuJcc');
                let conversation = new Conversation(ConversationType.Single, "uiuJuJcc", 0);
                let content = new TextMessageContent(id + "hello from wfc.js " + new Date().toString() + " " + id);
                // this.sendConversationMessage(conversation, content)
                // content = new ImageMessageContent(null, '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCACgAHIDASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAYFBwIDBAgB/8QAUhAAAQMCAgUECREEBwkAAAAAAgABAwQFERIGEyEiMQcyQWEVQlFScYKRk7MUGCM2N1VicnOBg4SSobK00zNForEWF1Sk0eLwCCQ0NUNEwcLS/8QAGgEAAgMBAQAAAAAAAAAAAAAAAAQCAwUGAf/EADQRAAIBAwEEBwYGAwAAAAAAAAACAwEEEhEFIjIzExQhQlJy0RU0UXGisSMxQWFigkOBof/aAAwDAQACEQMRAD8A8/oQhAAhCEACEIQAIQhAAhCEACEIQAIQhAAhCEAfVM6L2Oo0l0loLNTk4HVSsJEw45A4kWHTgLO+HUodO/JCWTlQs5fLehNRdtErU9outdC+KTkx0OtdINOFmgnLKOaWp9lM3w47eHzYN1LVNoPooJvhYKBvoWTaUonsd8C75cErEZFlBzwdm2N3eC557mVm3WNOKJV4qCnJoXoyPCw0HmRXJJodo2L7LLQ+bZM0oyEOZozccmfh0d3wLnqqephjKSWnlEG5xnG7MyjSWfxMPJHF8FFaTRPR3Hds1H5tcsmjOj4/uil82mGeGoA5BenlYoxcjzA+wWwd8fAzt5WUVNJuPI77jOzO/Qzvjh/J/Ip9LL4mHooYG/RSKPRyx9raqX7DLnfR6ye9lL9hStQ0kExxTCccgcQNsHb5lgcE7VTU7wSNO7s2rIHz4vw2KfSSeIYWC28KkQdgs3vbTfYQ2jto49jaf7CmTtteISH6hqcIv2j6l9zZjt7mxxdfIxzAKl0ki94lSG2bhooiaWaMUFLapbhSRvBJC7OQs+YTxIW+biq+d8xP1q3tNY8NEa5/ielFVCtK0dmj1Y5ra8aJcaIunYa0IQmzKMk6clL5eUm1P8t6E0lpw5MXy8odrfrl9EahccpvkWQ8yh6VObbjisqOu1DZ3JgySsTk5sLH7GeAu77G2t96jXnFFPCFW0znHUyZHb/hwZy4P33g/wBbFzcGVJVxNuaJejbUnqyo1lPUtrwkEKWc8M4k/NZgLZ3Rxfx1qq56EtHJpqR4RF5QzHDHkfZIz5cGdixYfB3diXqOg7JSyHTBnBnfIBmwG7d3Dq3cfjKUs9NRSU9wGpjKMacX1xY45MOP8nWgkru28vEKNAkVOLh0JG5HBHaJJjOq9TRARxG058HHNiRaxs+3dZsfu2qA0HrJYqcImeQgnrcmDOGX9iT97j2rdzo62UbdKaw1MlPDaK6WWqmnaPLIJCAsXTzO7lXXNolZqioqLXSXGc7tDC0jxmO4XDq626dmbpU8nZ8qd3+RdSKJIao7Nvfx/L9yQ0plhuVbap6ae2lTGM2sqKnJJEIMUYu7Y7Mcdiiq64jebwFwtYUE0DzgDucQR1AG3MwIjByzZcRwfvmfhgo+26NWkrLBdbxXyUsNVI0dOIdHHnE7dReK3Hat8GhET6VS2yQpvU8cYyjNu7Q7nwXxzN4rupZO29jxFlI7eOmOXBr3f37fmT18vh19pOChqY2klikaoh1lOZwizdt7NgzYY7WzvvdCQISzRCp27aPWiOxtdbTWS1MAnkkzYNk24Y8Gfjhsw7bFL8JCIDgqblmZt4e2aiJE1I/toRGmvtPuH0fpGVPNzVb+mvtQr/E9KKqBuanLHlVMrbPvFPL6mtCEJwyDLtU2cnT5dPbY/wAr6I0p9qmnQB8um9uf5X0RqEnDUvt+cnzoX08/cXbZnYnqzKWeNhYP2U+pZ9/m+Hobw9GbFQ+fdXHMIkeZ1g8DZHUSQdJHiT7U2orfVElfXQgFW8J72fFtx3zmxbNmLu/V8FfLXPdKequ9Pb54JakDJnebHOZM77W6PL1JRqQDMI5R5q3W2mqKy4RU9GbhPI+AGz4Yd8+I9WZerLvLipFrPSNqs30jhU3SaKksFVcxhGs9VOxPJlB2B8Wd+rZkJ/mW6KnqKLTC6XmoYY6F6YR1pE3QwY7PEdK110S0hhI5amnmqmHd1oS6x3H4Lcf4VAV3ZGEWo6yWsAGESaGYjYWHtdhK5pHXiUpis45afhOu966jecE+k3J/aKWjGIpoJI45PZRwDIDhi/lEsvO2qeC90xac1NDrPZipIx73fZzLDrLCQX2dx1VFNUVdI5vTVc0GfLm1UpBmy99l+MsIhIJgMCITYs4kJbwlm5yFlLX2ZlkuW724/wCyybRYqiPRirtleYwtUFnyxjrTB3ccmOGzDc+/iOCTRDVSHHnCTI5DnAszP8IfgrUc1ZK5HJWTm5BqiI5XdyAujwfBWUAZQFRZsi23heNmZm4iI009qFf9H6RlULc1W9pt7Ua7xPxiqhbmrQsuUYm2OfTy+prQhCcMkybmpl0FfLpnb3+V9GSWm5qZNB/bjb/pfRkoPw1GLX3hPNQuvNmFaTLeJGbdXPKe8SxnU7FVNUolLLkAcxZUzcn9IT6SHLLC+WGAnA+hnxZuPDg7pOnrZYJSGM8uYd7dVhcmFc9aV0bVsGQYfLvqdrGlXp4hTajypbvpwjpUxVr1BzQuBMIOIRYvt3fJjm+5aGlugxM5UoZtSZFg+O/vZR2P4PKpJnEH7UfKy261u6H21raHJakLT2e21cD1dbaaJppHdzeSmHH58VV+lVuOG7PUBBTwUplhDHAzDg3WzM20ud238Kta+VsdJbCkM2EOceG3dHa6pPXzXKtlmkP9oecyzbo/65opO7airibmx0erVl17DNw3FlHzV0TgIDlY8y1RDupA28iB029qFd4npRVQNzVcWmvtPuHgj9ICp1uatO05Zzm1uevl9TWhCE2ZRk3NTHoR7cKH6T0ZJcbmph0MfDS6hf4/4CUH4KjFp7wnzoXG55RXBUT5cy2HLuqOqSLeWUyncqhsits10knKKopo9QLEbSkeOG3bsZ9jYbX6275WJyYWya0SXWOqmhM5tVkGLP2ubHnC3fCq9sdjvF6rKh7XVBSnGG/Iczx5s3Rs29r/AAq5dF7VJaLHBTVlUVVXMTnLOZGe8/QOZ8WZhfDo4Y4bUzap3jE2vdUWNoMuLu/USjlKA5WI8vwSWGtqejXfxLokYZRxdhJ+jg/88FzyDUBuhu96OpL/ANSTpzQu8o05U+izSazIZBlwLi+JBmb7OZVJTXIwDVNkIc2bKQp/5VyMtFqMj57VYfgNVJCZZlmXe851mxkXq39hsCXMO0lviLMKhoJSUhTy7qWH2QjdNvafcPBH6QFTzc1W/poWbQ6v+i9IyqBuatO05RzO1+evl9TWhCE2ZJmzYOyndDnw0movH/ASg3bY6e+RuEKjlVs0UosYE1QziTYs7aiRRrvU0LYZOikV/hUcnLMuyjtkFfA76+QZGfejCEX2d3jzVZ9x5PrLVm0sLSUh4kXsJPld36n4eBsFBVHJtcIDAqKvhN9uYjZ4nb4uGKSe3c6tNs20i9lcWFWCx1dOTzW6rmapbDBiDVYt9rL3Nin7Pp9U0jFT3SPIQbr7r4eDLxFapNDdJmfVtHJMAPiLtUjh82YlFVVgu+tMai3V0h9JakzzeMqF6WLhPX6rcrpK61+5ZVNpDa60M+fV5u2AsWJb5ZYSESgqIpfillJVF/Rq6xHnp6C5xH3wQGP/AIXTTU2lVGYZYbkQMW3/AHVyPL8YmTC3Ld5TLl2TF/ilUYuVWoglsdupjnEZTqmJnLHaLA4u/wDG32knw2+10dtOqY4p4mHB5iFjJy3cAEOaO7jztvdwTI9XdJJc01pvYjh2lOf4Voulj0l0jGIqaz1MNNG5PlqDGMjfrFy8njd1eSrStc6b39S+xkrDSkMldKfHJRTrK+GqMtTRNFvkWtzbxD8Xm/iWUJ7iZ6Tkx0hmizyDS0748ySXb9zEyZaPkppgAvVl0nkd+GpjaPDy5kt1eV97Q0ZdpWUVMc8v+lRaXSZ9Fq0X7ofjFVM/Fep+VOwWuzckl9OhpI4jLUYltcsNfFszPtw2cF5ZbwLRt4qxJjU5e/u1upc1oYIQhXiQKwORL3XrH9Y/LyKv1YHIl7r1j+sfl5EAevkIQgDnnqYKUGKeaOJnfBnMmZaOzFub/vqbzrKvLlVz1ldNNNnY8XEQPtB7iLbDTSTudUbNDG2c9rtu5upn8GXZmxZZvXqs+Kqans2ix9I7Fhdl7d019M/0rI7MWzouFM30jJToLTR1QzxNhKYlG7OMj7ovh22DY4ti/DguGsoKWnq6sQ1ZNFMbA05uIf8AT2Ys/RrC2v1Kzp5MctKFS2sNWwyqPPZy1Pt7JUnnh/xXzs9aHf8A5nR+fH/FVX6lkalk1kJ6/W5IQzZHl2PwZ+senDHDBtqh3lIlDrjr3R+PY8cmWMhfjYO3FZJD5OayWooqykkLGKBwIMejHNi3g2fe6eseKejfNMjHuYGt5Wib9BC5bfchvv1f8xGvIC9f8tvuQ336v+YjXkBTKQQhCABWByJe69Y/rH5eRV+pOx3aosV7obpSEwz0cwzBjjg+D8Hwfg/B+pAHutCpqm/2i9GXpY3qrXdo5nBtYEQRmLF04FnbFvFZbvXGaH+9988zF+qgB4ueiYV9SU8NRqCPabZMWJ+6uB9AzL96/wB3/wAyVfXE6I/2C9+Zi/UR64nRH+wXvzMX6iXa0hauVaDUd7cRrirfYZv6BTtky3ghyFnHCHgXd53Uy1loBUu0wvfpMsxYyNqX9kfjt39qXvXF6Ie9978zF+oj1xeiHvfe/MxfqI6rD4SftK5+P0r6E9/VtJkIOzG6T4u3qf8AzrH+rM/fX+7N/wDSg/XF6Ie9988zF+qj1xeiHvffPMxfqo6pD4Sz2teeP6V9CyLFY6exUeop8Sd3zSSFxN1LNhgqh9cToe2zsffPMxfqo9cVoe37vvnmYv1VdRaUppQQZmeuT/mMHLb7kN9+r/mI15AVzcpvLNSaW2ArFZqCohpZyAp5qrIxOwlmyMI5ukQfNm6MMFTKkRBCEIAEIQgAQhCABCEIAEIQgAQhCABCEIAEIQgAQhCAP//Z');
                this.sendConversationMessage(conversation, content, [], (messageId, timestamp) => {
                    id = messageId;
                    // prepared
                    this.log('send prepared', messageId);
                    // this.log('send msg prepared', this.store.getConversationInfos(), this.store.getConversationInfo(conversation));
                 }, null, (messageUid, timestamp) => {
                    // sucess
                    this.log('send success', messageUid);
                    // this.log('send msg success', this.store.getConversationInfos(), this.store.getConversationInfo(conversation));
                    // this.recallMessage(messageUid, () => {
                    //     this.log('recall s');
                    // }, (errorCode) => {
                    //     this.log('recall error', errorCode);
                    // });
                 });
            }, 100);
            */

            // this.setConversationTop(conversation, true, () => {
            //     this.log('set conversation top success');
            //     let info = this.getConversationInfo(conversation);
            //     this.log('conversation info', info);
            // }, (errorCode) => {
            //     this.log('set conversation top failed', errorCode);

            // });

            // let notifyContent = new CreateGroupNotification(this.getUserId(), 'test group Name');
            // let notifyContent = new ImageMessageContent(null, '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCACgAHIDASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAYFBwIDBAgB/8QAUhAAAQMCAgUECREEBwkAAAAAAgABAwQFERIGEyEiMQcyQWEVQlFScYKRk7MUGCM2N1VicnOBg4SSobK00zNForEWF1Sk0eLwCCQ0NUNEwcLS/8QAGgEAAgMBAQAAAAAAAAAAAAAAAAQCAwUGAf/EADQRAAIBAwEEBwYGAwAAAAAAAAACAwEEEhEFIjIzExQhQlJy0RU0UXGisSMxQWFigkOBof/aAAwDAQACEQMRAD8A8/oQhAAhCEACEIQAIQhAAhCEACEIQAIQhAAhCEAfVM6L2Oo0l0loLNTk4HVSsJEw45A4kWHTgLO+HUodO/JCWTlQs5fLehNRdtErU9outdC+KTkx0OtdINOFmgnLKOaWp9lM3w47eHzYN1LVNoPooJvhYKBvoWTaUonsd8C75cErEZFlBzwdm2N3eC557mVm3WNOKJV4qCnJoXoyPCw0HmRXJJodo2L7LLQ+bZM0oyEOZozccmfh0d3wLnqqephjKSWnlEG5xnG7MyjSWfxMPJHF8FFaTRPR3Hds1H5tcsmjOj4/uil82mGeGoA5BenlYoxcjzA+wWwd8fAzt5WUVNJuPI77jOzO/Qzvjh/J/Ip9LL4mHooYG/RSKPRyx9raqX7DLnfR6ye9lL9hStQ0kExxTCccgcQNsHb5lgcE7VTU7wSNO7s2rIHz4vw2KfSSeIYWC28KkQdgs3vbTfYQ2jto49jaf7CmTtteISH6hqcIv2j6l9zZjt7mxxdfIxzAKl0ki94lSG2bhooiaWaMUFLapbhSRvBJC7OQs+YTxIW+biq+d8xP1q3tNY8NEa5/ielFVCtK0dmj1Y5ra8aJcaIunYa0IQmzKMk6clL5eUm1P8t6E0lpw5MXy8odrfrl9EahccpvkWQ8yh6VObbjisqOu1DZ3JgySsTk5sLH7GeAu77G2t96jXnFFPCFW0znHUyZHb/hwZy4P33g/wBbFzcGVJVxNuaJejbUnqyo1lPUtrwkEKWc8M4k/NZgLZ3Rxfx1qq56EtHJpqR4RF5QzHDHkfZIz5cGdixYfB3diXqOg7JSyHTBnBnfIBmwG7d3Dq3cfjKUs9NRSU9wGpjKMacX1xY45MOP8nWgkru28vEKNAkVOLh0JG5HBHaJJjOq9TRARxG058HHNiRaxs+3dZsfu2qA0HrJYqcImeQgnrcmDOGX9iT97j2rdzo62UbdKaw1MlPDaK6WWqmnaPLIJCAsXTzO7lXXNolZqioqLXSXGc7tDC0jxmO4XDq626dmbpU8nZ8qd3+RdSKJIao7Nvfx/L9yQ0plhuVbap6ae2lTGM2sqKnJJEIMUYu7Y7Mcdiiq64jebwFwtYUE0DzgDucQR1AG3MwIjByzZcRwfvmfhgo+26NWkrLBdbxXyUsNVI0dOIdHHnE7dReK3Hat8GhET6VS2yQpvU8cYyjNu7Q7nwXxzN4rupZO29jxFlI7eOmOXBr3f37fmT18vh19pOChqY2klikaoh1lOZwizdt7NgzYY7WzvvdCQISzRCp27aPWiOxtdbTWS1MAnkkzYNk24Y8Gfjhsw7bFL8JCIDgqblmZt4e2aiJE1I/toRGmvtPuH0fpGVPNzVb+mvtQr/E9KKqBuanLHlVMrbPvFPL6mtCEJwyDLtU2cnT5dPbY/wAr6I0p9qmnQB8um9uf5X0RqEnDUvt+cnzoX08/cXbZnYnqzKWeNhYP2U+pZ9/m+Hobw9GbFQ+fdXHMIkeZ1g8DZHUSQdJHiT7U2orfVElfXQgFW8J72fFtx3zmxbNmLu/V8FfLXPdKequ9Pb54JakDJnebHOZM77W6PL1JRqQDMI5R5q3W2mqKy4RU9GbhPI+AGz4Yd8+I9WZerLvLipFrPSNqs30jhU3SaKksFVcxhGs9VOxPJlB2B8Wd+rZkJ/mW6KnqKLTC6XmoYY6F6YR1pE3QwY7PEdK110S0hhI5amnmqmHd1oS6x3H4Lcf4VAV3ZGEWo6yWsAGESaGYjYWHtdhK5pHXiUpis45afhOu966jecE+k3J/aKWjGIpoJI45PZRwDIDhi/lEsvO2qeC90xac1NDrPZipIx73fZzLDrLCQX2dx1VFNUVdI5vTVc0GfLm1UpBmy99l+MsIhIJgMCITYs4kJbwlm5yFlLX2ZlkuW724/wCyybRYqiPRirtleYwtUFnyxjrTB3ccmOGzDc+/iOCTRDVSHHnCTI5DnAszP8IfgrUc1ZK5HJWTm5BqiI5XdyAujwfBWUAZQFRZsi23heNmZm4iI009qFf9H6RlULc1W9pt7Ua7xPxiqhbmrQsuUYm2OfTy+prQhCcMkybmpl0FfLpnb3+V9GSWm5qZNB/bjb/pfRkoPw1GLX3hPNQuvNmFaTLeJGbdXPKe8SxnU7FVNUolLLkAcxZUzcn9IT6SHLLC+WGAnA+hnxZuPDg7pOnrZYJSGM8uYd7dVhcmFc9aV0bVsGQYfLvqdrGlXp4hTajypbvpwjpUxVr1BzQuBMIOIRYvt3fJjm+5aGlugxM5UoZtSZFg+O/vZR2P4PKpJnEH7UfKy261u6H21raHJakLT2e21cD1dbaaJppHdzeSmHH58VV+lVuOG7PUBBTwUplhDHAzDg3WzM20ud238Kta+VsdJbCkM2EOceG3dHa6pPXzXKtlmkP9oecyzbo/65opO7airibmx0erVl17DNw3FlHzV0TgIDlY8y1RDupA28iB029qFd4npRVQNzVcWmvtPuHgj9ICp1uatO05Zzm1uevl9TWhCE2ZRk3NTHoR7cKH6T0ZJcbmph0MfDS6hf4/4CUH4KjFp7wnzoXG55RXBUT5cy2HLuqOqSLeWUyncqhsits10knKKopo9QLEbSkeOG3bsZ9jYbX6275WJyYWya0SXWOqmhM5tVkGLP2ubHnC3fCq9sdjvF6rKh7XVBSnGG/Iczx5s3Rs29r/AAq5dF7VJaLHBTVlUVVXMTnLOZGe8/QOZ8WZhfDo4Y4bUzap3jE2vdUWNoMuLu/USjlKA5WI8vwSWGtqejXfxLokYZRxdhJ+jg/88FzyDUBuhu96OpL/ANSTpzQu8o05U+izSazIZBlwLi+JBmb7OZVJTXIwDVNkIc2bKQp/5VyMtFqMj57VYfgNVJCZZlmXe851mxkXq39hsCXMO0lviLMKhoJSUhTy7qWH2QjdNvafcPBH6QFTzc1W/poWbQ6v+i9IyqBuatO05RzO1+evl9TWhCE2ZJmzYOyndDnw0movH/ASg3bY6e+RuEKjlVs0UosYE1QziTYs7aiRRrvU0LYZOikV/hUcnLMuyjtkFfA76+QZGfejCEX2d3jzVZ9x5PrLVm0sLSUh4kXsJPld36n4eBsFBVHJtcIDAqKvhN9uYjZ4nb4uGKSe3c6tNs20i9lcWFWCx1dOTzW6rmapbDBiDVYt9rL3Nin7Pp9U0jFT3SPIQbr7r4eDLxFapNDdJmfVtHJMAPiLtUjh82YlFVVgu+tMai3V0h9JakzzeMqF6WLhPX6rcrpK61+5ZVNpDa60M+fV5u2AsWJb5ZYSESgqIpfillJVF/Rq6xHnp6C5xH3wQGP/AIXTTU2lVGYZYbkQMW3/AHVyPL8YmTC3Ld5TLl2TF/ilUYuVWoglsdupjnEZTqmJnLHaLA4u/wDG32knw2+10dtOqY4p4mHB5iFjJy3cAEOaO7jztvdwTI9XdJJc01pvYjh2lOf4Voulj0l0jGIqaz1MNNG5PlqDGMjfrFy8njd1eSrStc6b39S+xkrDSkMldKfHJRTrK+GqMtTRNFvkWtzbxD8Xm/iWUJ7iZ6Tkx0hmizyDS0748ySXb9zEyZaPkppgAvVl0nkd+GpjaPDy5kt1eV97Q0ZdpWUVMc8v+lRaXSZ9Fq0X7ofjFVM/Fep+VOwWuzckl9OhpI4jLUYltcsNfFszPtw2cF5ZbwLRt4qxJjU5e/u1upc1oYIQhXiQKwORL3XrH9Y/LyKv1YHIl7r1j+sfl5EAevkIQgDnnqYKUGKeaOJnfBnMmZaOzFub/vqbzrKvLlVz1ldNNNnY8XEQPtB7iLbDTSTudUbNDG2c9rtu5upn8GXZmxZZvXqs+Kqans2ix9I7Fhdl7d019M/0rI7MWzouFM30jJToLTR1QzxNhKYlG7OMj7ovh22DY4ti/DguGsoKWnq6sQ1ZNFMbA05uIf8AT2Ys/RrC2v1Kzp5MctKFS2sNWwyqPPZy1Pt7JUnnh/xXzs9aHf8A5nR+fH/FVX6lkalk1kJ6/W5IQzZHl2PwZ+senDHDBtqh3lIlDrjr3R+PY8cmWMhfjYO3FZJD5OayWooqykkLGKBwIMejHNi3g2fe6eseKejfNMjHuYGt5Wib9BC5bfchvv1f8xGvIC9f8tvuQ336v+YjXkBTKQQhCABWByJe69Y/rH5eRV+pOx3aosV7obpSEwz0cwzBjjg+D8Hwfg/B+pAHutCpqm/2i9GXpY3qrXdo5nBtYEQRmLF04FnbFvFZbvXGaH+9988zF+qgB4ueiYV9SU8NRqCPabZMWJ+6uB9AzL96/wB3/wAyVfXE6I/2C9+Zi/UR64nRH+wXvzMX6iXa0hauVaDUd7cRrirfYZv6BTtky3ghyFnHCHgXd53Uy1loBUu0wvfpMsxYyNqX9kfjt39qXvXF6Ie9978zF+oj1xeiHvfe/MxfqI6rD4SftK5+P0r6E9/VtJkIOzG6T4u3qf8AzrH+rM/fX+7N/wDSg/XF6Ie9988zF+qj1xeiHvffPMxfqo6pD4Sz2teeP6V9CyLFY6exUeop8Sd3zSSFxN1LNhgqh9cToe2zsffPMxfqo9cVoe37vvnmYv1VdRaUppQQZmeuT/mMHLb7kN9+r/mI15AVzcpvLNSaW2ArFZqCohpZyAp5qrIxOwlmyMI5ukQfNm6MMFTKkRBCEIAEIQgAQhCABCEIAEIQgAQhCABCEIAEIQgAQhCAP//Z');
            // this.createGroup(null, "test group namxxxxxxxxxxe", null, ['uiuJuJcc'], [0], notifyContent);


            // this.log('getUserInfo', self.getUserInfo('uiuJuJcc'));
            // this.log('getGroupInfo', self.getGroupInfo('-OWD-DAA'));
            // this.uploadMedia();
            var thisMsgHead = new _long2.default(-35650792, 34748344, false);
            var head = new _long2.default(-1415576788, 34740445, false);
            this.log('xxxoo', thisMsgHead.comp(head), thisMsgHead.toString(), head.toString());
            this.log('---------------test end----------------------');
        }
    }]);
    return WfcImpl;
}();

// const self = new WfcImpl();
// export default self;

// var username = 'GNMtGtZZ';
// // var username = '141b1boo'
// var token = 'PNvAMGi+CWGn4HXvkswJaCz8tjEU1Ylqf7mqTHvwy/YvccA/yWWxoT1aqHAK4QVFkv0oAnGKofTgYt9D+D5lsMr4sdz8qa1A2/fmL7ruxnDZS09XMblQMk6ND4OkCZF4GARARVQr+1jp+qt7CL5/WXLQFfUugibo8KsGLW17vdg=';
// // var token = 'vRHUDqbbowFr05lGQo3jOq5aUXgJKyUQttVcpOLA63+YcJZ8V8IGvYaMsds2K5GOPtrqC1LtjSQYnXE1iawoAxkojbOvHKH2808hfPI0nkTrWq/IakkJL92J3xzGavP/j+OQgOLD108q/nyQO4v+CkrEG1iwUqPZHFEXmXi/Bb4=';
// self.connect(username, token);


WfcImpl.connectionTimeout = 10 * 1000;
WfcImpl.version = 'WFCWebSDKVersion-2023-04-08';
WfcImpl.pcNotSupportMessageTypes = [94];
var self = new WfcImpl();
// module.exports = self;
//window.wfc = self;
exports.default = self;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(16).Buffer))

/***/ }),
/* 181 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(49);
__webpack_require__(26);
__webpack_require__(43);
__webpack_require__(190);
__webpack_require__(194);
__webpack_require__(195);
module.exports = __webpack_require__(1).Promise;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(63);
var defined = __webpack_require__(64);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(50);
var descriptor = __webpack_require__(38);
var setToStringTag = __webpack_require__(42);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(18)(IteratorPrototype, __webpack_require__(5)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(27);
var toLength = __webpack_require__(51);
var toAbsoluteIndex = __webpack_require__(186);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(63);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(22);
var toObject = __webpack_require__(28);
var IE_PROTO = __webpack_require__(69)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(189);
var step = __webpack_require__(103);
var Iterators = __webpack_require__(39);
var toIObject = __webpack_require__(27);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(65)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 189 */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(36);
var global = __webpack_require__(4);
var ctx = __webpack_require__(17);
var classof = __webpack_require__(72);
var $export = __webpack_require__(2);
var isObject = __webpack_require__(7);
var aFunction = __webpack_require__(37);
var anInstance = __webpack_require__(73);
var forOf = __webpack_require__(44);
var speciesConstructor = __webpack_require__(106);
var task = __webpack_require__(107).set;
var microtask = __webpack_require__(192)();
var newPromiseCapabilityModule = __webpack_require__(75);
var perform = __webpack_require__(108);
var userAgent = __webpack_require__(193);
var promiseResolve = __webpack_require__(109);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(5)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(76)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(42)($Promise, PROMISE);
__webpack_require__(110)(PROMISE);
Wrapper = __webpack_require__(1)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(111)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 191 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var macrotask = __webpack_require__(107).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(41)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(2);
var core = __webpack_require__(1);
var global = __webpack_require__(4);
var speciesConstructor = __webpack_require__(106);
var promiseResolve = __webpack_require__(109);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(2);
var newPromiseCapability = __webpack_require__(75);
var perform = __webpack_require__(108);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(197);


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(198);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 198 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _promise = __webpack_require__(62);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(43);
__webpack_require__(26);
module.exports = __webpack_require__(201);


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(13);
var get = __webpack_require__(74);
module.exports = __webpack_require__(1).getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(203);
module.exports = __webpack_require__(1).Object.assign;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(2);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(204) });


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(8);
var getKeys = __webpack_require__(40);
var gOPS = __webpack_require__(77);
var pIE = __webpack_require__(53);
var toObject = __webpack_require__(28);
var IObject = __webpack_require__(68);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(21)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(1);
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26);
__webpack_require__(207);
module.exports = __webpack_require__(1).Array.from;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(17);
var $export = __webpack_require__(2);
var toObject = __webpack_require__(28);
var call = __webpack_require__(104);
var isArrayIter = __webpack_require__(105);
var toLength = __webpack_require__(51);
var createProperty = __webpack_require__(208);
var getIterFn = __webpack_require__(74);

$export($export.S + $export.F * !__webpack_require__(111)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(9);
var createDesc = __webpack_require__(38);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(49);
__webpack_require__(26);
__webpack_require__(43);
__webpack_require__(210);
__webpack_require__(214);
__webpack_require__(216);
__webpack_require__(217);
module.exports = __webpack_require__(1).Map;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(116);
var validate = __webpack_require__(80);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(117)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(17);
var IObject = __webpack_require__(68);
var toObject = __webpack_require__(28);
var toLength = __webpack_require__(51);
var asc = __webpack_require__(212);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(213);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(7);
var isArray = __webpack_require__(118);
var SPECIES = __webpack_require__(5)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(2);

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(119)('Map') });


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(44);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(120)('Map');


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(121)('Map');


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(219);
var $Object = __webpack_require__(1).Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(2);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(8), 'Object', { defineProperty: __webpack_require__(9).f });


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(56), __webpack_require__(221), __webpack_require__(222), __webpack_require__(30), __webpack_require__(31), __webpack_require__(82), __webpack_require__(125), __webpack_require__(223), __webpack_require__(126), __webpack_require__(224), __webpack_require__(225), __webpack_require__(226), __webpack_require__(83), __webpack_require__(227), __webpack_require__(23), __webpack_require__(3), __webpack_require__(228), __webpack_require__(229), __webpack_require__(230), __webpack_require__(231), __webpack_require__(232), __webpack_require__(233), __webpack_require__(234), __webpack_require__(235), __webpack_require__(236), __webpack_require__(237), __webpack_require__(238), __webpack_require__(239), __webpack_require__(240), __webpack_require__(241), __webpack_require__(242), __webpack_require__(243));
	}
	else {}
}(this, function (CryptoJS) {

	return CryptoJS;

}));

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Check if typed arrays are supported
	    if (typeof ArrayBuffer != 'function') {
	        return;
	    }

	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;

	    // Reference original init
	    var superInit = WordArray.init;

	    // Augment WordArray.init to handle typed arrays
	    var subInit = WordArray.init = function (typedArray) {
	        // Convert buffers to uint8
	        if (typedArray instanceof ArrayBuffer) {
	            typedArray = new Uint8Array(typedArray);
	        }

	        // Convert other array views to uint8
	        if (
	            typedArray instanceof Int8Array ||
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
	            typedArray instanceof Int16Array ||
	            typedArray instanceof Uint16Array ||
	            typedArray instanceof Int32Array ||
	            typedArray instanceof Uint32Array ||
	            typedArray instanceof Float32Array ||
	            typedArray instanceof Float64Array
	        ) {
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
	        }

	        // Handle Uint8Array
	        if (typedArray instanceof Uint8Array) {
	            // Shortcut
	            var typedArrayByteLength = typedArray.byteLength;

	            // Extract bytes
	            var words = [];
	            for (var i = 0; i < typedArrayByteLength; i++) {
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
	            }

	            // Initialize this word array
	            superInit.call(this, words, typedArrayByteLength);
	        } else {
	            // Else call normal init
	            superInit.apply(this, arguments);
	        }
	    };

	    subInit.prototype = WordArray;
	}());


	return CryptoJS.lib.WordArray;

}));

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * UTF-16 BE encoding strategy.
	     */
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
	        /**
	         * Converts a word array to a UTF-16 BE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 BE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 BE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 BE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    /**
	     * UTF-16 LE encoding strategy.
	     */
	    C_enc.Utf16LE = {
	        /**
	         * Converts a word array to a UTF-16 LE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 LE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 LE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 LE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    function swapEndian(word) {
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
	    }
	}());


	return CryptoJS.enc.Utf16;

}));

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(125));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA256 = C_algo.SHA256;

	    /**
	     * SHA-224 hash algorithm.
	     */
	    var SHA224 = C_algo.SHA224 = SHA256.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA256._doFinalize.call(this);

	            hash.sigBytes -= 4;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA224('message');
	     *     var hash = CryptoJS.SHA224(wordArray);
	     */
	    C.SHA224 = SHA256._createHelper(SHA224);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA224(message, key);
	     */
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
	}());


	return CryptoJS.SHA224;

}));

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(56), __webpack_require__(126));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;
	    var SHA512 = C_algo.SHA512;

	    /**
	     * SHA-384 hash algorithm.
	     */
	    var SHA384 = C_algo.SHA384 = SHA512.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA512._doFinalize.call(this);

	            hash.sigBytes -= 16;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA384('message');
	     *     var hash = CryptoJS.SHA384(wordArray);
	     */
	    C.SHA384 = SHA512._createHelper(SHA384);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA384(message, key);
	     */
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
	}());


	return CryptoJS.SHA384;

}));

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(56));
	}
	else {}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var C_algo = C.algo;

	    // Constants tables
	    var RHO_OFFSETS = [];
	    var PI_INDEXES  = [];
	    var ROUND_CONSTANTS = [];

	    // Compute Constants
	    (function () {
	        // Compute rho offset constants
	        var x = 1, y = 0;
	        for (var t = 0; t < 24; t++) {
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

	            var newX = y % 5;
	            var newY = (2 * x + 3 * y) % 5;
	            x = newX;
	            y = newY;
	        }

	        // Compute pi index constants
	        for (var x = 0; x < 5; x++) {
	            for (var y = 0; y < 5; y++) {
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
	            }
	        }

	        // Compute round constants
	        var LFSR = 0x01;
	        for (var i = 0; i < 24; i++) {
	            var roundConstantMsw = 0;
	            var roundConstantLsw = 0;

	            for (var j = 0; j < 7; j++) {
	                if (LFSR & 0x01) {
	                    var bitPosition = (1 << j) - 1;
	                    if (bitPosition < 32) {
	                        roundConstantLsw ^= 1 << bitPosition;
	                    } else /* if (bitPosition >= 32) */ {
	                        roundConstantMsw ^= 1 << (bitPosition - 32);
	                    }
	                }

	                // Compute next LFSR
	                if (LFSR & 0x80) {
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
	                    LFSR = (LFSR << 1) ^ 0x71;
	                } else {
	                    LFSR <<= 1;
	                }
	            }

	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
	        }
	    }());

	    // Reusable objects for temporary values
	    var T = [];
	    (function () {
	        for (var i = 0; i < 25; i++) {
	            T[i] = X64Word.create();
	        }
	    }());

	    /**
	     * SHA-3 hash algorithm.
	     */
	    var SHA3 = C_algo.SHA3 = Hasher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} outputLength
	         *   The desired number of bits in the output hash.
	         *   Only values permitted are: 224, 256, 384, 512.
	         *   Default: 512
	         */
	        cfg: Hasher.cfg.extend({
	            outputLength: 512
	        }),

	        _doReset: function () {
	            var state = this._state = []
	            for (var i = 0; i < 25; i++) {
	                state[i] = new X64Word.init();
	            }

	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var state = this._state;
	            var nBlockSizeLanes = this.blockSize / 2;

	            // Absorb
	            for (var i = 0; i < nBlockSizeLanes; i++) {
	                // Shortcuts
	                var M2i  = M[offset + 2 * i];
	                var M2i1 = M[offset + 2 * i + 1];

	                // Swap endian
	                M2i = (
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
	                );
	                M2i1 = (
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
	                );

	                // Absorb message into state
	                var lane = state[i];
	                lane.high ^= M2i1;
	                lane.low  ^= M2i;
	            }

	            // Rounds
	            for (var round = 0; round < 24; round++) {
	                // Theta
	                for (var x = 0; x < 5; x++) {
	                    // Mix column lanes
	                    var tMsw = 0, tLsw = 0;
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        tMsw ^= lane.high;
	                        tLsw ^= lane.low;
	                    }

	                    // Temporary values
	                    var Tx = T[x];
	                    Tx.high = tMsw;
	                    Tx.low  = tLsw;
	                }
	                for (var x = 0; x < 5; x++) {
	                    // Shortcuts
	                    var Tx4 = T[(x + 4) % 5];
	                    var Tx1 = T[(x + 1) % 5];
	                    var Tx1Msw = Tx1.high;
	                    var Tx1Lsw = Tx1.low;

	                    // Mix surrounding columns
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        lane.high ^= tMsw;
	                        lane.low  ^= tLsw;
	                    }
	                }

	                // Rho Pi
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
	                    // Shortcuts
	                    var lane = state[laneIndex];
	                    var laneMsw = lane.high;
	                    var laneLsw = lane.low;
	                    var rhoOffset = RHO_OFFSETS[laneIndex];

	                    // Rotate lanes
	                    if (rhoOffset < 32) {
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
	                    } else /* if (rhoOffset >= 32) */ {
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
	                    }

	                    // Transpose lanes
	                    var TPiLane = T[PI_INDEXES[laneIndex]];
	                    TPiLane.high = tMsw;
	                    TPiLane.low  = tLsw;
	                }

	                // Rho pi at x = y = 0
	                var T0 = T[0];
	                var state0 = state[0];
	                T0.high = state0.high;
	                T0.low  = state0.low;

	                // Chi
	                for (var x = 0; x < 5; x++) {
	                    for (var y = 0; y < 5; y++) {
	                        // Shortcuts
	                        var laneIndex = x + 5 * y;
	                        var lane = state[laneIndex];
	                        var TLane = T[laneIndex];
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

	                        // Mix rows
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
	                    }
	                }

	                // Iota
	                var lane = state[0];
	                var roundConstant = ROUND_CONSTANTS[round];
	                lane.high ^= roundConstant.high;
	                lane.low  ^= roundConstant.low;;
	            }
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;
	            var blockSizeBits = this.blockSize * 32;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var state = this._state;
	            var outputLengthBytes = this.cfg.outputLength / 8;
	            var outputLengthLanes = outputLengthBytes / 8;

	            // Squeeze
	            var hashWords = [];
	            for (var i = 0; i < outputLengthLanes; i++) {
	                // Shortcuts
	                var lane = state[i];
	                var laneMsw = lane.high;
	                var laneLsw = lane.low;

	                // Swap endian
	                laneMsw = (
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
	                );
	                laneLsw = (
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
	                );

	                // Squeeze state to retrieve hash
	                hashWords.push(laneLsw);
	                hashWords.push(laneMsw);
	            }

	            // Return final computed hash
	            return new WordArray.init(hashWords, outputLengthBytes);
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);

	            var state = clone._state = this._state.slice(0);
	            for (var i = 0; i < 25; i++) {
	                state[i] = state[i].clone();
	            }

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA3('message');
	     *     var hash = CryptoJS.SHA3(wordArray);
	     */
	    C.SHA3 = Hasher._createHelper(SHA3);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA3(message, key);
	     */
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
	}(Math));


	return CryptoJS.SHA3;

}));

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0));
	}
	else {}
}(this, function (CryptoJS) {

	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var _zl = WordArray.create([
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
	    var _zr = WordArray.create([
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
	    var _sl = WordArray.create([
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
	    var _sr = WordArray.create([
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

	    /**
	     * RIPEMD160 hash algorithm.
	     */
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
	        _doReset: function () {
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
	        },

	        _doProcessBlock: function (M, offset) {

	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                // Swap
	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }
	            // Shortcut
	            var H  = this._hash.words;
	            var hl = _hl.words;
	            var hr = _hr.words;
	            var zl = _zl.words;
	            var zr = _zr.words;
	            var sl = _sl.words;
	            var sr = _sr.words;

	            // Working variables
	            var al, bl, cl, dl, el;
	            var ar, br, cr, dr, er;

	            ar = al = H[0];
	            br = bl = H[1];
	            cr = cl = H[2];
	            dr = dl = H[3];
	            er = el = H[4];
	            // Computation
	            var t;
	            for (var i = 0; i < 80; i += 1) {
	                t = (al +  M[offset+zl[i]])|0;
	                if (i<16){
		            t +=  f1(bl,cl,dl) + hl[0];
	                } else if (i<32) {
		            t +=  f2(bl,cl,dl) + hl[1];
	                } else if (i<48) {
		            t +=  f3(bl,cl,dl) + hl[2];
	                } else if (i<64) {
		            t +=  f4(bl,cl,dl) + hl[3];
	                } else {// if (i<80) {
		            t +=  f5(bl,cl,dl) + hl[4];
	                }
	                t = t|0;
	                t =  rotl(t,sl[i]);
	                t = (t+el)|0;
	                al = el;
	                el = dl;
	                dl = rotl(cl, 10);
	                cl = bl;
	                bl = t;

	                t = (ar + M[offset+zr[i]])|0;
	                if (i<16){
		            t +=  f5(br,cr,dr) + hr[0];
	                } else if (i<32) {
		            t +=  f4(br,cr,dr) + hr[1];
	                } else if (i<48) {
		            t +=  f3(br,cr,dr) + hr[2];
	                } else if (i<64) {
		            t +=  f2(br,cr,dr) + hr[3];
	                } else {// if (i<80) {
		            t +=  f1(br,cr,dr) + hr[4];
	                }
	                t = t|0;
	                t =  rotl(t,sr[i]) ;
	                t = (t+er)|0;
	                ar = er;
	                er = dr;
	                dr = rotl(cr, 10);
	                cr = br;
	                br = t;
	            }
	            // Intermediate hash value
	            t    = (H[1] + cl + dr)|0;
	            H[1] = (H[2] + dl + er)|0;
	            H[2] = (H[3] + el + ar)|0;
	            H[3] = (H[4] + al + br)|0;
	            H[4] = (H[0] + bl + cr)|0;
	            H[0] =  t;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	            );
	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 5; i++) {
	                // Shortcut
	                var H_i = H[i];

	                // Swap
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });


	    function f1(x, y, z) {
	        return ((x) ^ (y) ^ (z));

	    }

	    function f2(x, y, z) {
	        return (((x)&(y)) | ((~x)&(z)));
	    }

	    function f3(x, y, z) {
	        return (((x) | (~(y))) ^ (z));
	    }

	    function f4(x, y, z) {
	        return (((x) & (z)) | ((y)&(~(z))));
	    }

	    function f5(x, y, z) {
	        return ((x) ^ ((y) |(~(z))));

	    }

	    function rotl(x,n) {
	        return (x<<n) | (x>>>(32-n));
	    }


	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.RIPEMD160('message');
	     *     var hash = CryptoJS.RIPEMD160(wordArray);
	     */
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
	     */
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
	}(Math));


	return CryptoJS.RIPEMD160;

}));

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(82), __webpack_require__(83));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA1 = C_algo.SHA1;
	    var HMAC = C_algo.HMAC;

	    /**
	     * Password-Based Key Derivation Function 2 algorithm.
	     */
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hasher to use. Default: SHA1
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: SHA1,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.PBKDF2.create();
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Computes the Password-Based Key Derivation Function 2.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init HMAC
	            var hmac = HMAC.create(cfg.hasher, password);

	            // Initial values
	            var derivedKey = WordArray.create();
	            var blockIndex = WordArray.create([0x00000001]);

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var blockIndexWords = blockIndex.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                var block = hmac.update(salt).finalize(blockIndex);
	                hmac.reset();

	                // Shortcuts
	                var blockWords = block.words;
	                var blockWordsLength = blockWords.length;

	                // Iterations
	                var intermediate = block;
	                for (var i = 1; i < iterations; i++) {
	                    intermediate = hmac.finalize(intermediate);
	                    hmac.reset();

	                    // Shortcut
	                    var intermediateWords = intermediate.words;

	                    // XOR intermediate with block
	                    for (var j = 0; j < blockWordsLength; j++) {
	                        blockWords[j] ^= intermediateWords[j];
	                    }
	                }

	                derivedKey.concat(block);
	                blockIndexWords[0]++;
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Computes the Password-Based Key Derivation Function 2.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.PBKDF2(password, salt);
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.PBKDF2 = function (password, salt, cfg) {
	        return PBKDF2.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.PBKDF2;

}));

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Cipher Feedback block mode.
	 */
	CryptoJS.mode.CFB = (function () {
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();

	    CFB.Encryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // Remember this block to use with next block
	            this._prevBlock = words.slice(offset, offset + blockSize);
	        }
	    });

	    CFB.Decryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            // Remember this block to use with next block
	            var thisBlock = words.slice(offset, offset + blockSize);

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // This block becomes the previous block
	            this._prevBlock = thisBlock;
	        }
	    });

	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
	        // Shortcut
	        var iv = this._iv;

	        // Generate keystream
	        if (iv) {
	            var keystream = iv.slice(0);

	            // Remove IV for subsequent blocks
	            this._iv = undefined;
	        } else {
	            var keystream = this._prevBlock;
	        }
	        cipher.encryptBlock(keystream, 0);

	        // Encrypt
	        for (var i = 0; i < blockSize; i++) {
	            words[offset + i] ^= keystream[i];
	        }
	    }

	    return CFB;
	}());


	return CryptoJS.mode.CFB;

}));

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Counter block mode.
	 */
	CryptoJS.mode.CTR = (function () {
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = CTR.Encryptor = CTR.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Increment counter
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTR.Decryptor = Encryptor;

	    return CTR;
	}());


	return CryptoJS.mode.CTR;

}));

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	/** @preserve
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	 * derived from CryptoJS.mode.CTR
	 * Jan Hruby jhruby.web@gmail.com
	 */
	CryptoJS.mode.CTRGladman = (function () {
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

		function incWord(word)
		{
			if (((word >> 24) & 0xff) === 0xff) { //overflow
			var b1 = (word >> 16)&0xff;
			var b2 = (word >> 8)&0xff;
			var b3 = word & 0xff;

			if (b1 === 0xff) // overflow b1
			{
			b1 = 0;
			if (b2 === 0xff)
			{
				b2 = 0;
				if (b3 === 0xff)
				{
					b3 = 0;
				}
				else
				{
					++b3;
				}
			}
			else
			{
				++b2;
			}
			}
			else
			{
			++b1;
			}

			word = 0;
			word += (b1 << 16);
			word += (b2 << 8);
			word += b3;
			}
			else
			{
			word += (0x01 << 24);
			}
			return word;
		}

		function incCounter(counter)
		{
			if ((counter[0] = incWord(counter[0])) === 0)
			{
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
				counter[1] = incWord(counter[1]);
			}
			return counter;
		}

	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }

				incCounter(counter);

				var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTRGladman.Decryptor = Encryptor;

	    return CTRGladman;
	}());




	return CryptoJS.mode.CTRGladman;

}));

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Output Feedback block mode.
	 */
	CryptoJS.mode.OFB = (function () {
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = OFB.Encryptor = OFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var keystream = this._keystream;

	            // Generate keystream
	            if (iv) {
	                keystream = this._keystream = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    OFB.Decryptor = Encryptor;

	    return OFB;
	}());


	return CryptoJS.mode.OFB;

}));

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Electronic Codebook block mode.
	 */
	CryptoJS.mode.ECB = (function () {
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();

	    ECB.Encryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.encryptBlock(words, offset);
	        }
	    });

	    ECB.Decryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.decryptBlock(words, offset);
	        }
	    });

	    return ECB;
	}());


	return CryptoJS.mode.ECB;

}));

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * ANSI X.923 padding strategy.
	 */
	CryptoJS.pad.AnsiX923 = {
	    pad: function (data, blockSize) {
	        // Shortcuts
	        var dataSigBytes = data.sigBytes;
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

	        // Compute last byte position
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

	        // Pad
	        data.clamp();
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
	        data.sigBytes += nPaddingBytes;
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	return CryptoJS.pad.Ansix923;

}));

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * ISO 10126 padding strategy.
	 */
	CryptoJS.pad.Iso10126 = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	        // Pad
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	return CryptoJS.pad.Iso10126;

}));

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * ISO/IEC 9797-1 Padding Method 2.
	 */
	CryptoJS.pad.Iso97971 = {
	    pad: function (data, blockSize) {
	        // Add 0x80 byte
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

	        // Zero pad the rest
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
	    },

	    unpad: function (data) {
	        // Remove zero padding
	        CryptoJS.pad.ZeroPadding.unpad(data);

	        // Remove one more byte -- the 0x80 byte
	        data.sigBytes--;
	    }
	};


	return CryptoJS.pad.Iso97971;

}));

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Zero padding strategy.
	 */
	CryptoJS.pad.ZeroPadding = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Pad
	        data.clamp();
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
	    },

	    unpad: function (data) {
	        // Shortcut
	        var dataWords = data.words;

	        // Unpad
	        var i = data.sigBytes - 1;
	        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
	            i--;
	        }
	        data.sigBytes = i + 1;
	    }
	};


	return CryptoJS.pad.ZeroPadding;

}));

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * A noop padding strategy.
	 */
	CryptoJS.pad.NoPadding = {
	    pad: function () {
	    },

	    unpad: function () {
	    }
	};


	return CryptoJS.pad.NoPadding;

}));

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var CipherParams = C_lib.CipherParams;
	    var C_enc = C.enc;
	    var Hex = C_enc.Hex;
	    var C_format = C.format;

	    var HexFormatter = C_format.Hex = {
	        /**
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The hexadecimally encoded string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            return cipherParams.ciphertext.toString(Hex);
	        },

	        /**
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
	         *
	         * @param {string} input The hexadecimally encoded string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
	         */
	        parse: function (input) {
	            var ciphertext = Hex.parse(input);
	            return CipherParams.create({ ciphertext: ciphertext });
	        }
	    };
	}());


	return CryptoJS.format.Hex;

}));

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(30), __webpack_require__(31), __webpack_require__(23), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Lookup tables
	    var SBOX = [];
	    var INV_SBOX = [];
	    var SUB_MIX_0 = [];
	    var SUB_MIX_1 = [];
	    var SUB_MIX_2 = [];
	    var SUB_MIX_3 = [];
	    var INV_SUB_MIX_0 = [];
	    var INV_SUB_MIX_1 = [];
	    var INV_SUB_MIX_2 = [];
	    var INV_SUB_MIX_3 = [];

	    // Compute lookup tables
	    (function () {
	        // Compute double table
	        var d = [];
	        for (var i = 0; i < 256; i++) {
	            if (i < 128) {
	                d[i] = i << 1;
	            } else {
	                d[i] = (i << 1) ^ 0x11b;
	            }
	        }

	        // Walk GF(2^8)
	        var x = 0;
	        var xi = 0;
	        for (var i = 0; i < 256; i++) {
	            // Compute sbox
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	            SBOX[x] = sx;
	            INV_SBOX[sx] = x;

	            // Compute multiplication
	            var x2 = d[x];
	            var x4 = d[x2];
	            var x8 = d[x4];

	            // Compute sub bytes, mix columns tables
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
	            SUB_MIX_3[x] = t;

	            // Compute inv sub bytes, inv mix columns tables
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
	            INV_SUB_MIX_3[sx] = t;

	            // Compute next counter
	            if (!x) {
	                x = xi = 1;
	            } else {
	                x = x2 ^ d[d[d[x8 ^ x2]]];
	                xi ^= d[d[xi]];
	            }
	        }
	    }());

	    // Precomputed Rcon lookup
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

	    /**
	     * AES block cipher algorithm.
	     */
	    var AES = C_algo.AES = BlockCipher.extend({
	        _doReset: function () {
	            // Skip reset of nRounds has been set before and key did not change
	            if (this._nRounds && this._keyPriorReset === this._key) {
	                return;
	            }

	            // Shortcuts
	            var key = this._keyPriorReset = this._key;
	            var keyWords = key.words;
	            var keySize = key.sigBytes / 4;

	            // Compute number of rounds
	            var nRounds = this._nRounds = keySize + 6;

	            // Compute number of key schedule rows
	            var ksRows = (nRounds + 1) * 4;

	            // Compute key schedule
	            var keySchedule = this._keySchedule = [];
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
	                if (ksRow < keySize) {
	                    keySchedule[ksRow] = keyWords[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 1];

	                    if (!(ksRow % keySize)) {
	                        // Rot word
	                        t = (t << 8) | (t >>> 24);

	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

	                        // Mix Rcon
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;
	                    } else if (keySize > 6 && ksRow % keySize == 4) {
	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }

	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
	                }
	            }

	            // Compute inv key schedule
	            var invKeySchedule = this._invKeySchedule = [];
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
	                var ksRow = ksRows - invKsRow;

	                if (invKsRow % 4) {
	                    var t = keySchedule[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 4];
	                }

	                if (invKsRow < 4 || ksRow <= 4) {
	                    invKeySchedule[invKsRow] = t;
	                } else {
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
	        },

	        decryptBlock: function (M, offset) {
	            // Swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;

	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

	            // Inv swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;
	        },

	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
	            // Shortcut
	            var nRounds = this._nRounds;

	            // Get input, add round key
	            var s0 = M[offset]     ^ keySchedule[0];
	            var s1 = M[offset + 1] ^ keySchedule[1];
	            var s2 = M[offset + 2] ^ keySchedule[2];
	            var s3 = M[offset + 3] ^ keySchedule[3];

	            // Key schedule row counter
	            var ksRow = 4;

	            // Rounds
	            for (var round = 1; round < nRounds; round++) {
	                // Shift rows, sub bytes, mix columns, add round key
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

	                // Update state
	                s0 = t0;
	                s1 = t1;
	                s2 = t2;
	                s3 = t3;
	            }

	            // Shift rows, sub bytes, add round key
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

	            // Set output
	            M[offset]     = t0;
	            M[offset + 1] = t1;
	            M[offset + 2] = t2;
	            M[offset + 3] = t3;
	        },

	        keySize: 256/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	     */
	    C.AES = BlockCipher._createHelper(AES);
	}());


	return CryptoJS.AES;

}));

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(30), __webpack_require__(31), __webpack_require__(23), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Permuted Choice 1 constants
	    var PC1 = [
	        57, 49, 41, 33, 25, 17, 9,  1,
	        58, 50, 42, 34, 26, 18, 10, 2,
	        59, 51, 43, 35, 27, 19, 11, 3,
	        60, 52, 44, 36, 63, 55, 47, 39,
	        31, 23, 15, 7,  62, 54, 46, 38,
	        30, 22, 14, 6,  61, 53, 45, 37,
	        29, 21, 13, 5,  28, 20, 12, 4
	    ];

	    // Permuted Choice 2 constants
	    var PC2 = [
	        14, 17, 11, 24, 1,  5,
	        3,  28, 15, 6,  21, 10,
	        23, 19, 12, 4,  26, 8,
	        16, 7,  27, 20, 13, 2,
	        41, 52, 31, 37, 47, 55,
	        30, 40, 51, 45, 33, 48,
	        44, 49, 39, 56, 34, 53,
	        46, 42, 50, 36, 29, 32
	    ];

	    // Cumulative bit shift constants
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

	    // SBOXes and round permutation constants
	    var SBOX_P = [
	        {
	            0x0: 0x808200,
	            0x10000000: 0x8000,
	            0x20000000: 0x808002,
	            0x30000000: 0x2,
	            0x40000000: 0x200,
	            0x50000000: 0x808202,
	            0x60000000: 0x800202,
	            0x70000000: 0x800000,
	            0x80000000: 0x202,
	            0x90000000: 0x800200,
	            0xa0000000: 0x8200,
	            0xb0000000: 0x808000,
	            0xc0000000: 0x8002,
	            0xd0000000: 0x800002,
	            0xe0000000: 0x0,
	            0xf0000000: 0x8202,
	            0x8000000: 0x0,
	            0x18000000: 0x808202,
	            0x28000000: 0x8202,
	            0x38000000: 0x8000,
	            0x48000000: 0x808200,
	            0x58000000: 0x200,
	            0x68000000: 0x808002,
	            0x78000000: 0x2,
	            0x88000000: 0x800200,
	            0x98000000: 0x8200,
	            0xa8000000: 0x808000,
	            0xb8000000: 0x800202,
	            0xc8000000: 0x800002,
	            0xd8000000: 0x8002,
	            0xe8000000: 0x202,
	            0xf8000000: 0x800000,
	            0x1: 0x8000,
	            0x10000001: 0x2,
	            0x20000001: 0x808200,
	            0x30000001: 0x800000,
	            0x40000001: 0x808002,
	            0x50000001: 0x8200,
	            0x60000001: 0x200,
	            0x70000001: 0x800202,
	            0x80000001: 0x808202,
	            0x90000001: 0x808000,
	            0xa0000001: 0x800002,
	            0xb0000001: 0x8202,
	            0xc0000001: 0x202,
	            0xd0000001: 0x800200,
	            0xe0000001: 0x8002,
	            0xf0000001: 0x0,
	            0x8000001: 0x808202,
	            0x18000001: 0x808000,
	            0x28000001: 0x800000,
	            0x38000001: 0x200,
	            0x48000001: 0x8000,
	            0x58000001: 0x800002,
	            0x68000001: 0x2,
	            0x78000001: 0x8202,
	            0x88000001: 0x8002,
	            0x98000001: 0x800202,
	            0xa8000001: 0x202,
	            0xb8000001: 0x808200,
	            0xc8000001: 0x800200,
	            0xd8000001: 0x0,
	            0xe8000001: 0x8200,
	            0xf8000001: 0x808002
	        },
	        {
	            0x0: 0x40084010,
	            0x1000000: 0x4000,
	            0x2000000: 0x80000,
	            0x3000000: 0x40080010,
	            0x4000000: 0x40000010,
	            0x5000000: 0x40084000,
	            0x6000000: 0x40004000,
	            0x7000000: 0x10,
	            0x8000000: 0x84000,
	            0x9000000: 0x40004010,
	            0xa000000: 0x40000000,
	            0xb000000: 0x84010,
	            0xc000000: 0x80010,
	            0xd000000: 0x0,
	            0xe000000: 0x4010,
	            0xf000000: 0x40080000,
	            0x800000: 0x40004000,
	            0x1800000: 0x84010,
	            0x2800000: 0x10,
	            0x3800000: 0x40004010,
	            0x4800000: 0x40084010,
	            0x5800000: 0x40000000,
	            0x6800000: 0x80000,
	            0x7800000: 0x40080010,
	            0x8800000: 0x80010,
	            0x9800000: 0x0,
	            0xa800000: 0x4000,
	            0xb800000: 0x40080000,
	            0xc800000: 0x40000010,
	            0xd800000: 0x84000,
	            0xe800000: 0x40084000,
	            0xf800000: 0x4010,
	            0x10000000: 0x0,
	            0x11000000: 0x40080010,
	            0x12000000: 0x40004010,
	            0x13000000: 0x40084000,
	            0x14000000: 0x40080000,
	            0x15000000: 0x10,
	            0x16000000: 0x84010,
	            0x17000000: 0x4000,
	            0x18000000: 0x4010,
	            0x19000000: 0x80000,
	            0x1a000000: 0x80010,
	            0x1b000000: 0x40000010,
	            0x1c000000: 0x84000,
	            0x1d000000: 0x40004000,
	            0x1e000000: 0x40000000,
	            0x1f000000: 0x40084010,
	            0x10800000: 0x84010,
	            0x11800000: 0x80000,
	            0x12800000: 0x40080000,
	            0x13800000: 0x4000,
	            0x14800000: 0x40004000,
	            0x15800000: 0x40084010,
	            0x16800000: 0x10,
	            0x17800000: 0x40000000,
	            0x18800000: 0x40084000,
	            0x19800000: 0x40000010,
	            0x1a800000: 0x40004010,
	            0x1b800000: 0x80010,
	            0x1c800000: 0x0,
	            0x1d800000: 0x4010,
	            0x1e800000: 0x40080010,
	            0x1f800000: 0x84000
	        },
	        {
	            0x0: 0x104,
	            0x100000: 0x0,
	            0x200000: 0x4000100,
	            0x300000: 0x10104,
	            0x400000: 0x10004,
	            0x500000: 0x4000004,
	            0x600000: 0x4010104,
	            0x700000: 0x4010000,
	            0x800000: 0x4000000,
	            0x900000: 0x4010100,
	            0xa00000: 0x10100,
	            0xb00000: 0x4010004,
	            0xc00000: 0x4000104,
	            0xd00000: 0x10000,
	            0xe00000: 0x4,
	            0xf00000: 0x100,
	            0x80000: 0x4010100,
	            0x180000: 0x4010004,
	            0x280000: 0x0,
	            0x380000: 0x4000100,
	            0x480000: 0x4000004,
	            0x580000: 0x10000,
	            0x680000: 0x10004,
	            0x780000: 0x104,
	            0x880000: 0x4,
	            0x980000: 0x100,
	            0xa80000: 0x4010000,
	            0xb80000: 0x10104,
	            0xc80000: 0x10100,
	            0xd80000: 0x4000104,
	            0xe80000: 0x4010104,
	            0xf80000: 0x4000000,
	            0x1000000: 0x4010100,
	            0x1100000: 0x10004,
	            0x1200000: 0x10000,
	            0x1300000: 0x4000100,
	            0x1400000: 0x100,
	            0x1500000: 0x4010104,
	            0x1600000: 0x4000004,
	            0x1700000: 0x0,
	            0x1800000: 0x4000104,
	            0x1900000: 0x4000000,
	            0x1a00000: 0x4,
	            0x1b00000: 0x10100,
	            0x1c00000: 0x4010000,
	            0x1d00000: 0x104,
	            0x1e00000: 0x10104,
	            0x1f00000: 0x4010004,
	            0x1080000: 0x4000000,
	            0x1180000: 0x104,
	            0x1280000: 0x4010100,
	            0x1380000: 0x0,
	            0x1480000: 0x10004,
	            0x1580000: 0x4000100,
	            0x1680000: 0x100,
	            0x1780000: 0x4010004,
	            0x1880000: 0x10000,
	            0x1980000: 0x4010104,
	            0x1a80000: 0x10104,
	            0x1b80000: 0x4000004,
	            0x1c80000: 0x4000104,
	            0x1d80000: 0x4010000,
	            0x1e80000: 0x4,
	            0x1f80000: 0x10100
	        },
	        {
	            0x0: 0x80401000,
	            0x10000: 0x80001040,
	            0x20000: 0x401040,
	            0x30000: 0x80400000,
	            0x40000: 0x0,
	            0x50000: 0x401000,
	            0x60000: 0x80000040,
	            0x70000: 0x400040,
	            0x80000: 0x80000000,
	            0x90000: 0x400000,
	            0xa0000: 0x40,
	            0xb0000: 0x80001000,
	            0xc0000: 0x80400040,
	            0xd0000: 0x1040,
	            0xe0000: 0x1000,
	            0xf0000: 0x80401040,
	            0x8000: 0x80001040,
	            0x18000: 0x40,
	            0x28000: 0x80400040,
	            0x38000: 0x80001000,
	            0x48000: 0x401000,
	            0x58000: 0x80401040,
	            0x68000: 0x0,
	            0x78000: 0x80400000,
	            0x88000: 0x1000,
	            0x98000: 0x80401000,
	            0xa8000: 0x400000,
	            0xb8000: 0x1040,
	            0xc8000: 0x80000000,
	            0xd8000: 0x400040,
	            0xe8000: 0x401040,
	            0xf8000: 0x80000040,
	            0x100000: 0x400040,
	            0x110000: 0x401000,
	            0x120000: 0x80000040,
	            0x130000: 0x0,
	            0x140000: 0x1040,
	            0x150000: 0x80400040,
	            0x160000: 0x80401000,
	            0x170000: 0x80001040,
	            0x180000: 0x80401040,
	            0x190000: 0x80000000,
	            0x1a0000: 0x80400000,
	            0x1b0000: 0x401040,
	            0x1c0000: 0x80001000,
	            0x1d0000: 0x400000,
	            0x1e0000: 0x40,
	            0x1f0000: 0x1000,
	            0x108000: 0x80400000,
	            0x118000: 0x80401040,
	            0x128000: 0x0,
	            0x138000: 0x401000,
	            0x148000: 0x400040,
	            0x158000: 0x80000000,
	            0x168000: 0x80001040,
	            0x178000: 0x40,
	            0x188000: 0x80000040,
	            0x198000: 0x1000,
	            0x1a8000: 0x80001000,
	            0x1b8000: 0x80400040,
	            0x1c8000: 0x1040,
	            0x1d8000: 0x80401000,
	            0x1e8000: 0x400000,
	            0x1f8000: 0x401040
	        },
	        {
	            0x0: 0x80,
	            0x1000: 0x1040000,
	            0x2000: 0x40000,
	            0x3000: 0x20000000,
	            0x4000: 0x20040080,
	            0x5000: 0x1000080,
	            0x6000: 0x21000080,
	            0x7000: 0x40080,
	            0x8000: 0x1000000,
	            0x9000: 0x20040000,
	            0xa000: 0x20000080,
	            0xb000: 0x21040080,
	            0xc000: 0x21040000,
	            0xd000: 0x0,
	            0xe000: 0x1040080,
	            0xf000: 0x21000000,
	            0x800: 0x1040080,
	            0x1800: 0x21000080,
	            0x2800: 0x80,
	            0x3800: 0x1040000,
	            0x4800: 0x40000,
	            0x5800: 0x20040080,
	            0x6800: 0x21040000,
	            0x7800: 0x20000000,
	            0x8800: 0x20040000,
	            0x9800: 0x0,
	            0xa800: 0x21040080,
	            0xb800: 0x1000080,
	            0xc800: 0x20000080,
	            0xd800: 0x21000000,
	            0xe800: 0x1000000,
	            0xf800: 0x40080,
	            0x10000: 0x40000,
	            0x11000: 0x80,
	            0x12000: 0x20000000,
	            0x13000: 0x21000080,
	            0x14000: 0x1000080,
	            0x15000: 0x21040000,
	            0x16000: 0x20040080,
	            0x17000: 0x1000000,
	            0x18000: 0x21040080,
	            0x19000: 0x21000000,
	            0x1a000: 0x1040000,
	            0x1b000: 0x20040000,
	            0x1c000: 0x40080,
	            0x1d000: 0x20000080,
	            0x1e000: 0x0,
	            0x1f000: 0x1040080,
	            0x10800: 0x21000080,
	            0x11800: 0x1000000,
	            0x12800: 0x1040000,
	            0x13800: 0x20040080,
	            0x14800: 0x20000000,
	            0x15800: 0x1040080,
	            0x16800: 0x80,
	            0x17800: 0x21040000,
	            0x18800: 0x40080,
	            0x19800: 0x21040080,
	            0x1a800: 0x0,
	            0x1b800: 0x21000000,
	            0x1c800: 0x1000080,
	            0x1d800: 0x40000,
	            0x1e800: 0x20040000,
	            0x1f800: 0x20000080
	        },
	        {
	            0x0: 0x10000008,
	            0x100: 0x2000,
	            0x200: 0x10200000,
	            0x300: 0x10202008,
	            0x400: 0x10002000,
	            0x500: 0x200000,
	            0x600: 0x200008,
	            0x700: 0x10000000,
	            0x800: 0x0,
	            0x900: 0x10002008,
	            0xa00: 0x202000,
	            0xb00: 0x8,
	            0xc00: 0x10200008,
	            0xd00: 0x202008,
	            0xe00: 0x2008,
	            0xf00: 0x10202000,
	            0x80: 0x10200000,
	            0x180: 0x10202008,
	            0x280: 0x8,
	            0x380: 0x200000,
	            0x480: 0x202008,
	            0x580: 0x10000008,
	            0x680: 0x10002000,
	            0x780: 0x2008,
	            0x880: 0x200008,
	            0x980: 0x2000,
	            0xa80: 0x10002008,
	            0xb80: 0x10200008,
	            0xc80: 0x0,
	            0xd80: 0x10202000,
	            0xe80: 0x202000,
	            0xf80: 0x10000000,
	            0x1000: 0x10002000,
	            0x1100: 0x10200008,
	            0x1200: 0x10202008,
	            0x1300: 0x2008,
	            0x1400: 0x200000,
	            0x1500: 0x10000000,
	            0x1600: 0x10000008,
	            0x1700: 0x202000,
	            0x1800: 0x202008,
	            0x1900: 0x0,
	            0x1a00: 0x8,
	            0x1b00: 0x10200000,
	            0x1c00: 0x2000,
	            0x1d00: 0x10002008,
	            0x1e00: 0x10202000,
	            0x1f00: 0x200008,
	            0x1080: 0x8,
	            0x1180: 0x202000,
	            0x1280: 0x200000,
	            0x1380: 0x10000008,
	            0x1480: 0x10002000,
	            0x1580: 0x2008,
	            0x1680: 0x10202008,
	            0x1780: 0x10200000,
	            0x1880: 0x10202000,
	            0x1980: 0x10200008,
	            0x1a80: 0x2000,
	            0x1b80: 0x202008,
	            0x1c80: 0x200008,
	            0x1d80: 0x0,
	            0x1e80: 0x10000000,
	            0x1f80: 0x10002008
	        },
	        {
	            0x0: 0x100000,
	            0x10: 0x2000401,
	            0x20: 0x400,
	            0x30: 0x100401,
	            0x40: 0x2100401,
	            0x50: 0x0,
	            0x60: 0x1,
	            0x70: 0x2100001,
	            0x80: 0x2000400,
	            0x90: 0x100001,
	            0xa0: 0x2000001,
	            0xb0: 0x2100400,
	            0xc0: 0x2100000,
	            0xd0: 0x401,
	            0xe0: 0x100400,
	            0xf0: 0x2000000,
	            0x8: 0x2100001,
	            0x18: 0x0,
	            0x28: 0x2000401,
	            0x38: 0x2100400,
	            0x48: 0x100000,
	            0x58: 0x2000001,
	            0x68: 0x2000000,
	            0x78: 0x401,
	            0x88: 0x100401,
	            0x98: 0x2000400,
	            0xa8: 0x2100000,
	            0xb8: 0x100001,
	            0xc8: 0x400,
	            0xd8: 0x2100401,
	            0xe8: 0x1,
	            0xf8: 0x100400,
	            0x100: 0x2000000,
	            0x110: 0x100000,
	            0x120: 0x2000401,
	            0x130: 0x2100001,
	            0x140: 0x100001,
	            0x150: 0x2000400,
	            0x160: 0x2100400,
	            0x170: 0x100401,
	            0x180: 0x401,
	            0x190: 0x2100401,
	            0x1a0: 0x100400,
	            0x1b0: 0x1,
	            0x1c0: 0x0,
	            0x1d0: 0x2100000,
	            0x1e0: 0x2000001,
	            0x1f0: 0x400,
	            0x108: 0x100400,
	            0x118: 0x2000401,
	            0x128: 0x2100001,
	            0x138: 0x1,
	            0x148: 0x2000000,
	            0x158: 0x100000,
	            0x168: 0x401,
	            0x178: 0x2100400,
	            0x188: 0x2000001,
	            0x198: 0x2100000,
	            0x1a8: 0x0,
	            0x1b8: 0x2100401,
	            0x1c8: 0x100401,
	            0x1d8: 0x400,
	            0x1e8: 0x2000400,
	            0x1f8: 0x100001
	        },
	        {
	            0x0: 0x8000820,
	            0x1: 0x20000,
	            0x2: 0x8000000,
	            0x3: 0x20,
	            0x4: 0x20020,
	            0x5: 0x8020820,
	            0x6: 0x8020800,
	            0x7: 0x800,
	            0x8: 0x8020000,
	            0x9: 0x8000800,
	            0xa: 0x20800,
	            0xb: 0x8020020,
	            0xc: 0x820,
	            0xd: 0x0,
	            0xe: 0x8000020,
	            0xf: 0x20820,
	            0x80000000: 0x800,
	            0x80000001: 0x8020820,
	            0x80000002: 0x8000820,
	            0x80000003: 0x8000000,
	            0x80000004: 0x8020000,
	            0x80000005: 0x20800,
	            0x80000006: 0x20820,
	            0x80000007: 0x20,
	            0x80000008: 0x8000020,
	            0x80000009: 0x820,
	            0x8000000a: 0x20020,
	            0x8000000b: 0x8020800,
	            0x8000000c: 0x0,
	            0x8000000d: 0x8020020,
	            0x8000000e: 0x8000800,
	            0x8000000f: 0x20000,
	            0x10: 0x20820,
	            0x11: 0x8020800,
	            0x12: 0x20,
	            0x13: 0x800,
	            0x14: 0x8000800,
	            0x15: 0x8000020,
	            0x16: 0x8020020,
	            0x17: 0x20000,
	            0x18: 0x0,
	            0x19: 0x20020,
	            0x1a: 0x8020000,
	            0x1b: 0x8000820,
	            0x1c: 0x8020820,
	            0x1d: 0x20800,
	            0x1e: 0x820,
	            0x1f: 0x8000000,
	            0x80000010: 0x20000,
	            0x80000011: 0x800,
	            0x80000012: 0x8020020,
	            0x80000013: 0x20820,
	            0x80000014: 0x20,
	            0x80000015: 0x8020000,
	            0x80000016: 0x8000000,
	            0x80000017: 0x8000820,
	            0x80000018: 0x8020820,
	            0x80000019: 0x8000020,
	            0x8000001a: 0x8000800,
	            0x8000001b: 0x0,
	            0x8000001c: 0x20800,
	            0x8000001d: 0x820,
	            0x8000001e: 0x20020,
	            0x8000001f: 0x8020800
	        }
	    ];

	    // Masks that select the SBOX input
	    var SBOX_MASK = [
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
	    ];

	    /**
	     * DES block cipher algorithm.
	     */
	    var DES = C_algo.DES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Select 56 bits according to PC1
	            var keyBits = [];
	            for (var i = 0; i < 56; i++) {
	                var keyBitPos = PC1[i] - 1;
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
	            }

	            // Assemble 16 subkeys
	            var subKeys = this._subKeys = [];
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
	                // Create subkey
	                var subKey = subKeys[nSubKey] = [];

	                // Shortcut
	                var bitShift = BIT_SHIFTS[nSubKey];

	                // Select 48 bits according to PC2
	                for (var i = 0; i < 24; i++) {
	                    // Select from the left 28 key bits
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

	                    // Select from the right 28 key bits
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }

	                // Since each subkey is applied to an expanded 32-bit input,
	                // the subkey can be broken into 8 values scaled to 32-bits,
	                // which allows the key to be used without expansion
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
	                for (var i = 1; i < 7; i++) {
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
	                }
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
	            }

	            // Compute inverse subkeys
	            var invSubKeys = this._invSubKeys = [];
	            for (var i = 0; i < 16; i++) {
	                invSubKeys[i] = subKeys[15 - i];
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._subKeys);
	        },

	        decryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._invSubKeys);
	        },

	        _doCryptBlock: function (M, offset, subKeys) {
	            // Get input
	            this._lBlock = M[offset];
	            this._rBlock = M[offset + 1];

	            // Initial permutation
	            exchangeLR.call(this, 4,  0x0f0f0f0f);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeLR.call(this, 1,  0x55555555);

	            // Rounds
	            for (var round = 0; round < 16; round++) {
	                // Shortcuts
	                var subKey = subKeys[round];
	                var lBlock = this._lBlock;
	                var rBlock = this._rBlock;

	                // Feistel function
	                var f = 0;
	                for (var i = 0; i < 8; i++) {
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
	                }
	                this._lBlock = rBlock;
	                this._rBlock = lBlock ^ f;
	            }

	            // Undo swap from last round
	            var t = this._lBlock;
	            this._lBlock = this._rBlock;
	            this._rBlock = t;

	            // Final permutation
	            exchangeLR.call(this, 1,  0x55555555);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeLR.call(this, 4,  0x0f0f0f0f);

	            // Set output
	            M[offset] = this._lBlock;
	            M[offset + 1] = this._rBlock;
	        },

	        keySize: 64/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    // Swap bits across the left and right words
	    function exchangeLR(offset, mask) {
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
	        this._rBlock ^= t;
	        this._lBlock ^= t << offset;
	    }

	    function exchangeRL(offset, mask) {
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
	        this._lBlock ^= t;
	        this._rBlock ^= t << offset;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
	     */
	    C.DES = BlockCipher._createHelper(DES);

	    /**
	     * Triple-DES block cipher algorithm.
	     */
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Create DES instances
	            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
	            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
	            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
	        },

	        encryptBlock: function (M, offset) {
	            this._des1.encryptBlock(M, offset);
	            this._des2.decryptBlock(M, offset);
	            this._des3.encryptBlock(M, offset);
	        },

	        decryptBlock: function (M, offset) {
	            this._des3.decryptBlock(M, offset);
	            this._des2.encryptBlock(M, offset);
	            this._des1.decryptBlock(M, offset);
	        },

	        keySize: 192/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
	     */
	    C.TripleDES = BlockCipher._createHelper(TripleDES);
	}());


	return CryptoJS.TripleDES;

}));

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(30), __webpack_require__(31), __webpack_require__(23), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    /**
	     * RC4 stream cipher algorithm.
	     */
	    var RC4 = C_algo.RC4 = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;
	            var keySigBytes = key.sigBytes;

	            // Init sbox
	            var S = this._S = [];
	            for (var i = 0; i < 256; i++) {
	                S[i] = i;
	            }

	            // Key setup
	            for (var i = 0, j = 0; i < 256; i++) {
	                var keyByteIndex = i % keySigBytes;
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

	                j = (j + S[i] + keyByte) % 256;

	                // Swap
	                var t = S[i];
	                S[i] = S[j];
	                S[j] = t;
	            }

	            // Counters
	            this._i = this._j = 0;
	        },

	        _doProcessBlock: function (M, offset) {
	            M[offset] ^= generateKeystreamWord.call(this);
	        },

	        keySize: 256/32,

	        ivSize: 0
	    });

	    function generateKeystreamWord() {
	        // Shortcuts
	        var S = this._S;
	        var i = this._i;
	        var j = this._j;

	        // Generate keystream word
	        var keystreamWord = 0;
	        for (var n = 0; n < 4; n++) {
	            i = (i + 1) % 256;
	            j = (j + S[i]) % 256;

	            // Swap
	            var t = S[i];
	            S[i] = S[j];
	            S[j] = t;

	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
	        }

	        // Update counters
	        this._i = i;
	        this._j = j;

	        return keystreamWord;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4 = StreamCipher._createHelper(RC4);

	    /**
	     * Modified RC4 stream cipher algorithm.
	     */
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} drop The number of keystream words to drop. Default 192
	         */
	        cfg: RC4.cfg.extend({
	            drop: 192
	        }),

	        _doReset: function () {
	            RC4._doReset.call(this);

	            // Drop
	            for (var i = this.cfg.drop; i > 0; i--) {
	                generateKeystreamWord.call(this);
	            }
	        }
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
	}());


	return CryptoJS.RC4;

}));

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(30), __webpack_require__(31), __webpack_require__(23), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm
	     */
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
	            }

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
	     */
	    C.Rabbit = StreamCipher._createHelper(Rabbit);
	}());


	return CryptoJS.Rabbit;

}));

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(0), __webpack_require__(30), __webpack_require__(31), __webpack_require__(23), __webpack_require__(3));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm.
	     *
	     * This is a legacy version that neglected to convert the key to little-endian.
	     * This error doesn't affect the cipher's security,
	     * but it does affect its compatibility with other implementations.
	     */
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
	     */
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
	}());


	return CryptoJS.RabbitLegacy;

}));

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  sm2: __webpack_require__(245),
  sm3: __webpack_require__(249),
  sm4: __webpack_require__(250),
}


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable no-use-before-define */
const {BigInteger} = __webpack_require__(57)
const {encodeDer, decodeDer} = __webpack_require__(246)
const _ = __webpack_require__(247)
const sm3 = __webpack_require__(127)

const {G, curve, n} = _.generateEcparam()
const C1C2C3 = 0

/**
 * 加密
 */
function doEncrypt(msg, publicKey, cipherMode = 1) {
  msg = _.hexToArray(_.utf8ToHex(msg))
  publicKey = _.getGlobalCurve().decodePointHex(publicKey) // 先将公钥转成点

  const keypair = _.generateKeyPairHex()
  const k = new BigInteger(keypair.privateKey, 16) // 随机数 k

  // c1 = k * G
  let c1 = keypair.publicKey
  if (c1.length > 128) c1 = c1.substr(c1.length - 128)

  // (x2, y2) = k * publicKey
  const p = publicKey.multiply(k)
  const x2 = _.hexToArray(_.leftPad(p.getX().toBigInteger().toRadix(16), 64))
  const y2 = _.hexToArray(_.leftPad(p.getY().toBigInteger().toRadix(16), 64))

  // c3 = hash(x2 || msg || y2)
  const c3 = _.arrayToHex(sm3([].concat(x2, msg, y2)))

  let ct = 1
  let offset = 0
  let t = [] // 256 位
  const z = [].concat(x2, y2)
  const nextT = () => {
    // (1) Hai = hash(z || ct)
    // (2) ct++
    t = sm3([...z, ct >> 24 & 0x00ff, ct >> 16 & 0x00ff, ct >> 8 & 0x00ff, ct & 0x00ff])
    ct++
    offset = 0
  }
  nextT() // 先生成 Ha1

  for (let i = 0, len = msg.length; i < len; i++) {
    // t = Ha1 || Ha2 || Ha3 || Ha4
    if (offset === t.length) nextT()

    // c2 = msg ^ t
    msg[i] ^= t[offset++] & 0xff
  }
  const c2 = _.arrayToHex(msg)

  return cipherMode === C1C2C3 ? c1 + c2 + c3 : c1 + c3 + c2
}

/**
 * 解密
 */
function doDecrypt(encryptData, privateKey, cipherMode = 1) {
  privateKey = new BigInteger(privateKey, 16)

  let c3 = encryptData.substr(128, 64)
  let c2 = encryptData.substr(128 + 64)

  if (cipherMode === C1C2C3) {
    c3 = encryptData.substr(encryptData.length - 64)
    c2 = encryptData.substr(128, encryptData.length - 128 - 64)
  }

  const msg = _.hexToArray(c2)
  const c1 = _.getGlobalCurve().decodePointHex('04' + encryptData.substr(0, 128))

  const p = c1.multiply(privateKey)
  const x2 = _.hexToArray(_.leftPad(p.getX().toBigInteger().toRadix(16), 64))
  const y2 = _.hexToArray(_.leftPad(p.getY().toBigInteger().toRadix(16), 64))

  let ct = 1
  let offset = 0
  let t = [] // 256 位
  const z = [].concat(x2, y2)
  const nextT = () => {
    // (1) Hai = hash(z || ct)
    // (2) ct++
    t = sm3([...z, ct >> 24 & 0x00ff, ct >> 16 & 0x00ff, ct >> 8 & 0x00ff, ct & 0x00ff])
    ct++
    offset = 0
  }
  nextT() // 先生成 Ha1

  for (let i = 0, len = msg.length; i < len; i++) {
    // t = Ha1 || Ha2 || Ha3 || Ha4
    if (offset === t.length) nextT()

    // c2 = msg ^ t
    msg[i] ^= t[offset++] & 0xff
  }

  // c3 = hash(x2 || msg || y2)
  const checkC3 = _.arrayToHex(sm3([].concat(x2, msg, y2)))

  return checkC3 === c3 ? _.arrayToUtf8(msg) : ''
}

/**
 * 签名
 */
function doSignature(msg, privateKey, {
  pointPool, der, hash, publicKey, userId
} = {}) {
  let hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg)

  if (hash) {
    // sm3杂凑
    publicKey = publicKey || getPublicKeyFromPrivateKey(privateKey)
    hashHex = getHash(hashHex, publicKey, userId)
  }

  const dA = new BigInteger(privateKey, 16)
  const e = new BigInteger(hashHex, 16)

  // k
  let k = null
  let r = null
  let s = null

  do {
    do {
      let point
      if (pointPool && pointPool.length) {
        point = pointPool.pop()
      } else {
        point = getPoint()
      }
      k = point.k

      // r = (e + x1) mod n
      r = e.add(point.x1).mod(n)
    } while (r.equals(BigInteger.ZERO) || r.add(k).equals(n))

    // s = ((1 + dA)^-1 * (k - r * dA)) mod n
    s = dA.add(BigInteger.ONE).modInverse(n).multiply(k.subtract(r.multiply(dA))).mod(n)
  } while (s.equals(BigInteger.ZERO))

  if (der) return encodeDer(r, s) // asn.1 der 编码

  return _.leftPad(r.toString(16), 64) + _.leftPad(s.toString(16), 64)
}

/**
 * 验签
 */
function doVerifySignature(msg, signHex, publicKey, {der, hash, userId} = {}) {
  let hashHex = typeof msg === 'string' ? _.utf8ToHex(msg) : _.arrayToHex(msg)

  if (hash) {
    // sm3杂凑
    hashHex = getHash(hashHex, publicKey, userId)
  }

  let r; let
    s
  if (der) {
    const decodeDerObj = decodeDer(signHex) // asn.1 der 解码
    r = decodeDerObj.r
    s = decodeDerObj.s
  } else {
    r = new BigInteger(signHex.substring(0, 64), 16)
    s = new BigInteger(signHex.substring(64), 16)
  }

  const PA = curve.decodePointHex(publicKey)
  const e = new BigInteger(hashHex, 16)

  // t = (r + s) mod n
  const t = r.add(s).mod(n)

  if (t.equals(BigInteger.ZERO)) return false

  // x1y1 = s * G + t * PA
  const x1y1 = G.multiply(s).add(PA.multiply(t))

  // R = (e + x1) mod n
  const R = e.add(x1y1.getX().toBigInteger()).mod(n)

  return r.equals(R)
}

/**
 * sm3杂凑算法
 */
function getHash(hashHex, publicKey, userId = '1234567812345678') {
  // z = hash(entl || userId || a || b || gx || gy || px || py)
  userId = _.utf8ToHex(userId)
  const a = _.leftPad(G.curve.a.toBigInteger().toRadix(16), 64)
  const b = _.leftPad(G.curve.b.toBigInteger().toRadix(16), 64)
  const gx = _.leftPad(G.getX().toBigInteger().toRadix(16), 64)
  const gy = _.leftPad(G.getY().toBigInteger().toRadix(16), 64)
  if (publicKey.length > 128) publicKey = publicKey.substr(2, 128) // 干掉 '04'
  const px = publicKey.substr(0, 64)
  const py = publicKey.substr(64, 64)
  const data = _.hexToArray(userId + a + b + gx + gy + px + py)

  const entl = userId.length * 4
  data.unshift(entl & 0x00ff)
  data.unshift(entl & 0xff00)

  const z = sm3(data)

  // e = hash(z || msg)
  return _.arrayToHex(sm3(z.concat(_.hexToArray(hashHex))))
}

/**
 * 计算公钥
 */
function getPublicKeyFromPrivateKey(privateKey) {
  const PA = G.multiply(new BigInteger(privateKey, 16))
  const x = _.leftPad(PA.getX().toBigInteger().toString(16), 64)
  const y = _.leftPad(PA.getY().toBigInteger().toString(16), 64)
  return '04' + x + y
}

/**
 * 获取椭圆曲线点
 */
function getPoint() {
  const keypair = _.generateKeyPairHex()
  const PA = curve.decodePointHex(keypair.publicKey)

  keypair.k = new BigInteger(keypair.privateKey, 16)
  keypair.x1 = PA.getX().toBigInteger()

  return keypair
}

module.exports = {
  generateKeyPairHex: _.generateKeyPairHex,
  doEncrypt,
  doDecrypt,
  doSignature,
  doVerifySignature,
  getPoint,
}


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable class-methods-use-this */
const {BigInteger} = __webpack_require__(57)

function bigintToValue(bigint) {
  let h = bigint.toString(16)
  if (h[0] !== '-') {
    // 正数
    if (h.length % 2 === 1) h = '0' + h // 补齐到整字节
    else if (!h.match(/^[0-7]/)) h = '00' + h // 非0开头，则补一个全0字节
  } else {
    // 负数
    h = h.substr(1)

    let len = h.length
    if (len % 2 === 1) len += 1 // 补齐到整字节
    else if (!h.match(/^[0-7]/)) len += 2 // 非0开头，则补一个全0字节

    let mask = ''
    for (let i = 0; i < len; i++) mask += 'f'
    mask = new BigInteger(mask, 16)

    // 对绝对值取反，加1
    h = mask.xor(bigint).add(BigInteger.ONE)
    h = h.toString(16).replace(/^-/, '')
  }
  return h
}

class ASN1Object {
  constructor() {
    this.tlv = null
    this.t = '00'
    this.l = '00'
    this.v = ''
  }

  /**
   * 获取 der 编码比特流16进制串
   */
  getEncodedHex() {
    if (!this.tlv) {
      this.v = this.getValue()
      this.l = this.getLength()
      this.tlv = this.t + this.l + this.v
    }
    return this.tlv
  }

  getLength() {
    const n = this.v.length / 2 // 字节数
    let nHex = n.toString(16)
    if (nHex.length % 2 === 1) nHex = '0' + nHex // 补齐到整字节

    if (n < 128) {
      // 短格式，以 0 开头
      return nHex
    } else {
      // 长格式，以 1 开头
      const head = 128 + nHex.length / 2 // 1(1位) + 真正的长度占用字节数(7位) + 真正的长度
      return head.toString(16) + nHex
    }
  }

  getValue() {
    return ''
  }
}

class DERInteger extends ASN1Object {
  constructor(bigint) {
    super()

    this.t = '02' // 整型标签说明
    if (bigint) this.v = bigintToValue(bigint)
  }

  getValue() {
    return this.v
  }
}

class DERSequence extends ASN1Object {
  constructor(asn1Array) {
    super()

    this.t = '30' // 序列标签说明
    this.asn1Array = asn1Array
  }

  getValue() {
    this.v = this.asn1Array.map(asn1Object => asn1Object.getEncodedHex()).join('')
    return this.v
  }
}

/**
 * 获取 l 占用字节数
 */
function getLenOfL(str, start) {
  if (+str[start + 2] < 8) return 1 // l 以0开头，则表示短格式，只占一个字节
  return +str.substr(start + 2, 2) & 0x7f + 1 // 长格式，取第一个字节后7位作为长度真正占用字节数，再加上本身
}

/**
 * 获取 l
 */
function getL(str, start) {
  // 获取 l
  const len = getLenOfL(str, start)
  const l = str.substr(start + 2, len * 2)

  if (!l) return -1
  const bigint = +l[0] < 8 ? new BigInteger(l, 16) : new BigInteger(l.substr(2), 16)

  return bigint.intValue()
}

/**
 * 获取 v 的位置
 */
function getStartOfV(str, start) {
  const len = getLenOfL(str, start)
  return start + (len + 1) * 2
}

module.exports = {
  /**
   * ASN.1 der 编码，针对 sm2 签名
   */
  encodeDer(r, s) {
    const derR = new DERInteger(r)
    const derS = new DERInteger(s)
    const derSeq = new DERSequence([derR, derS])

    return derSeq.getEncodedHex()
  },

  /**
   * 解析 ASN.1 der，针对 sm2 验签
   */
  decodeDer(input) {
    // 结构：
    // input = | tSeq | lSeq | vSeq |
    // vSeq = | tR | lR | vR | tS | lS | vS |
    const start = getStartOfV(input, 0)

    const vIndexR = getStartOfV(input, start)
    const lR = getL(input, start)
    const vR = input.substr(vIndexR, lR * 2)

    const nextStart = vIndexR + vR.length
    const vIndexS = getStartOfV(input, nextStart)
    const lS = getL(input, nextStart)
    const vS = input.substr(vIndexS, lS * 2)

    const r = new BigInteger(vR, 16)
    const s = new BigInteger(vS, 16)

    return {r, s}
  }
}


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable no-bitwise, no-mixed-operators, no-use-before-define, max-len */
const {BigInteger, SecureRandom} = __webpack_require__(57)
const {ECCurveFp} = __webpack_require__(248)

const rng = new SecureRandom()
const {curve, G, n} = generateEcparam()

/**
 * 获取公共椭圆曲线
 */
function getGlobalCurve() {
  return curve
}

/**
 * 生成ecparam
 */
function generateEcparam() {
  // 椭圆曲线
  const p = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF', 16)
  const a = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC', 16)
  const b = new BigInteger('28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93', 16)
  const curve = new ECCurveFp(p, a, b)

  // 基点
  const gxHex = '32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7'
  const gyHex = 'BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0'
  const G = curve.decodePointHex('04' + gxHex + gyHex)

  const n = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123', 16)

  return {curve, G, n}
}

/**
 * 生成密钥对：publicKey = privateKey * G
 */
function generateKeyPairHex() {
  const d = new BigInteger(n.bitLength(), rng).mod(n.subtract(BigInteger.ONE)).add(BigInteger.ONE) // 随机数
  const privateKey = leftPad(d.toString(16), 64)

  const P = G.multiply(d) // P = dG，p 为公钥，d 为私钥
  const Px = leftPad(P.getX().toBigInteger().toString(16), 64)
  const Py = leftPad(P.getY().toBigInteger().toString(16), 64)
  const publicKey = '04' + Px + Py

  return {privateKey, publicKey}
}

/**
 * utf8串转16进制串
 */
function utf8ToHex(input) {
  input = unescape(encodeURIComponent(input))

  const length = input.length

  // 转换到字数组
  const words = []
  for (let i = 0; i < length; i++) {
    words[i >>> 2] |= (input.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8)
  }

  // 转换到16进制
  const hexChars = []
  for (let i = 0; i < length; i++) {
    const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff
    hexChars.push((bite >>> 4).toString(16))
    hexChars.push((bite & 0x0f).toString(16))
  }

  return hexChars.join('')
}

/**
 * 补全16进制字符串
 */
function leftPad(input, num) {
  if (input.length >= num) return input

  return (new Array(num - input.length + 1)).join('0') + input
}

/**
 * 转成16进制串
 */
function arrayToHex(arr) {
  return arr.map(item => {
    item = item.toString(16)
    return item.length === 1 ? '0' + item : item
  }).join('')
}

/**
 * 转成utf8串
 */
function arrayToUtf8(arr) {
  const words = []
  let j = 0
  for (let i = 0; i < arr.length * 2; i += 2) {
    words[i >>> 3] |= parseInt(arr[j], 10) << (24 - (i % 8) * 4)
    j++
  }

  try {
    const latin1Chars = []

    for (let i = 0; i < arr.length; i++) {
      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff
      latin1Chars.push(String.fromCharCode(bite))
    }

    return decodeURIComponent(escape(latin1Chars.join('')))
  } catch (e) {
    throw new Error('Malformed UTF-8 data')
  }
}

/**
 * 转成字节数组
 */
function hexToArray(hexStr) {
  const words = []
  let hexStrLength = hexStr.length

  if (hexStrLength % 2 !== 0) {
    hexStr = leftPad(hexStr, hexStrLength + 1)
  }

  hexStrLength = hexStr.length

  for (let i = 0; i < hexStrLength; i += 2) {
    words.push(parseInt(hexStr.substr(i, 2), 16))
  }
  return words
}

module.exports = {
  getGlobalCurve,
  generateEcparam,
  generateKeyPairHex,
  utf8ToHex,
  leftPad,
  arrayToHex,
  arrayToUtf8,
  hexToArray,
}


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable no-case-declarations, max-len */
const {BigInteger} = __webpack_require__(57)

/**
 * thanks for Tom Wu : http://www-cs-students.stanford.edu/~tjw/jsbn/
 *
 * Basic Javascript Elliptic Curve implementation
 * Ported loosely from BouncyCastle's Java EC code
 * Only Fp curves implemented for now
 */

const THREE = new BigInteger('3')

/**
 * 椭圆曲线域元素
 */
class ECFieldElementFp {
  constructor(q, x) {
    this.x = x
    this.q = q
    // TODO if (x.compareTo(q) >= 0) error
  }

  /**
   * 判断相等
   */
  equals(other) {
    if (other === this) return true
    return (this.q.equals(other.q) && this.x.equals(other.x))
  }

  /**
   * 返回具体数值
   */
  toBigInteger() {
    return this.x
  }

  /**
   * 取反
   */
  negate() {
    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q))
  }

  /**
   * 相加
   */
  add(b) {
    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q))
  }

  /**
   * 相减
   */
  subtract(b) {
    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q))
  }

  /**
   * 相乘
   */
  multiply(b) {
    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q))
  }

  /**
   * 相除
   */
  divide(b) {
    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q))
  }

  /**
   * 平方
   */
  square() {
    return new ECFieldElementFp(this.q, this.x.square().mod(this.q))
  }
}

class ECPointFp {
  constructor(curve, x, y, z) {
    this.curve = curve
    this.x = x
    this.y = y
    // 标准射影坐标系：zinv == null 或 z * zinv == 1
    this.z = z == null ? BigInteger.ONE : z
    this.zinv = null
    // TODO: compression flag
  }

  getX() {
    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q)

    return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))
  }

  getY() {
    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q)

    return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))
  }

  /**
   * 判断相等
   */
  equals(other) {
    if (other === this) return true
    if (this.isInfinity()) return other.isInfinity()
    if (other.isInfinity()) return this.isInfinity()

    // u = y2 * z1 - y1 * z2
    const u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q)
    if (!u.equals(BigInteger.ZERO)) return false

    // v = x2 * z1 - x1 * z2
    const v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q)
    return v.equals(BigInteger.ZERO)
  }

  /**
   * 是否是无穷远点
   */
  isInfinity() {
    if ((this.x === null) && (this.y === null)) return true
    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO)
  }

  /**
   * 取反，x 轴对称点
   */
  negate() {
    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z)
  }

  /**
   * 相加
   *
   * 标准射影坐标系：
   *
   * λ1 = x1 * z2
   * λ2 = x2 * z1
   * λ3 = λ1 − λ2
   * λ4 = y1 * z2
   * λ5 = y2 * z1
   * λ6 = λ4 − λ5
   * λ7 = λ1 + λ2
   * λ8 = z1 * z2
   * λ9 = λ3^2
   * λ10 = λ3 * λ9
   * λ11 = λ8 * λ6^2 − λ7 * λ9
   * x3 = λ3 * λ11
   * y3 = λ6 * (λ9 * λ1 − λ11) − λ4 * λ10
   * z3 = λ10 * λ8
   */
  add(b) {
    if (this.isInfinity()) return b
    if (b.isInfinity()) return this

    const x1 = this.x.toBigInteger()
    const y1 = this.y.toBigInteger()
    const z1 = this.z
    const x2 = b.x.toBigInteger()
    const y2 = b.y.toBigInteger()
    const z2 = b.z
    const q = this.curve.q

    const w1 = x1.multiply(z2).mod(q)
    const w2 = x2.multiply(z1).mod(q)
    const w3 = w1.subtract(w2)
    const w4 = y1.multiply(z2).mod(q)
    const w5 = y2.multiply(z1).mod(q)
    const w6 = w4.subtract(w5)

    if (BigInteger.ZERO.equals(w3)) {
      if (BigInteger.ZERO.equals(w6)) {
        return this.twice() // this == b，计算自加
      }
      return this.curve.infinity // this == -b，则返回无穷远点
    }

    const w7 = w1.add(w2)
    const w8 = z1.multiply(z2).mod(q)
    const w9 = w3.square().mod(q)
    const w10 = w3.multiply(w9).mod(q)
    const w11 = w8.multiply(w6.square()).subtract(w7.multiply(w9)).mod(q)

    const x3 = w3.multiply(w11).mod(q)
    const y3 = w6.multiply(w9.multiply(w1).subtract(w11)).subtract(w4.multiply(w10)).mod(q)
    const z3 = w10.multiply(w8).mod(q)

    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3)
  }

  /**
   * 自加
   *
   * 标准射影坐标系：
   *
   * λ1 = 3 * x1^2 + a * z1^2
   * λ2 = 2 * y1 * z1
   * λ3 = y1^2
   * λ4 = λ3 * x1 * z1
   * λ5 = λ2^2
   * λ6 = λ1^2 − 8 * λ4
   * x3 = λ2 * λ6
   * y3 = λ1 * (4 * λ4 − λ6) − 2 * λ5 * λ3
   * z3 = λ2 * λ5
   */
  twice() {
    if (this.isInfinity()) return this
    if (!this.y.toBigInteger().signum()) return this.curve.infinity

    const x1 = this.x.toBigInteger()
    const y1 = this.y.toBigInteger()
    const z1 = this.z
    const q = this.curve.q
    const a = this.curve.a.toBigInteger()

    const w1 = x1.square().multiply(THREE).add(a.multiply(z1.square())).mod(q)
    const w2 = y1.shiftLeft(1).multiply(z1).mod(q)
    const w3 = y1.square().mod(q)
    const w4 = w3.multiply(x1).multiply(z1).mod(q)
    const w5 = w2.square().mod(q)
    const w6 = w1.square().subtract(w4.shiftLeft(3)).mod(q)

    const x3 = w2.multiply(w6).mod(q)
    const y3 = w1.multiply(w4.shiftLeft(2).subtract(w6)).subtract(w5.shiftLeft(1).multiply(w3)).mod(q)
    const z3 = w2.multiply(w5).mod(q)

    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3)
  }

  /**
   * 倍点计算
   */
  multiply(k) {
    if (this.isInfinity()) return this
    if (!k.signum()) return this.curve.infinity

    // 使用加减法
    const k3 = k.multiply(THREE)
    const neg = this.negate()
    let Q = this

    for (let i = k3.bitLength() - 2; i > 0; i--) {
      Q = Q.twice()

      const k3Bit = k3.testBit(i)
      const kBit = k.testBit(i)

      if (k3Bit !== kBit) {
        Q = Q.add(k3Bit ? this : neg)
      }
    }

    return Q
  }
}

/**
 * 椭圆曲线 y^2 = x^3 + ax + b
 */
class ECCurveFp {
  constructor(q, a, b) {
    this.q = q
    this.a = this.fromBigInteger(a)
    this.b = this.fromBigInteger(b)
    this.infinity = new ECPointFp(this, null, null) // 无穷远点
  }

  /**
   * 判断两个椭圆曲线是否相等
   */
  equals(other) {
    if (other === this) return true
    return (this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b))
  }

  /**
   * 生成椭圆曲线域元素
   */
  fromBigInteger(x) {
    return new ECFieldElementFp(this.q, x)
  }

  /**
   * 解析 16 进制串为椭圆曲线点
   */
  decodePointHex(s) {
    switch (parseInt(s.substr(0, 2), 16)) {
      // 第一个字节
      case 0:
        return this.infinity
      case 2:
      case 3:
        // 不支持的压缩方式
        return null
      case 4:
      case 6:
      case 7:
        const len = (s.length - 2) / 2
        const xHex = s.substr(2, len)
        const yHex = s.substr(len + 2, len)

        return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)))
      default:
        // 不支持
        return null
    }
  }
}

module.exports = {
  ECPointFp,
  ECCurveFp,
}


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

const sm3 = __webpack_require__(127)

/**
 * 字节数组转 16 进制串
 */
function ArrayToHex(arr) {
  return arr.map(item => {
    item = item.toString(16)
    return item.length === 1 ? '0' + item : item
  }).join('')
}

/**
 * utf8 串转字节数组
 */
function utf8ToArray(str) {
  const arr = []

  for (let i = 0, len = str.length; i < len; i++) {
    const point = str.codePointAt(i)

    if (point <= 0x007f) {
      // 单字节，标量值：00000000 00000000 0zzzzzzz
      arr.push(point)
    } else if (point <= 0x07ff) {
      // 双字节，标量值：00000000 00000yyy yyzzzzzz
      arr.push(0xc0 | (point >>> 6)) // 110yyyyy（0xc0-0xdf）
      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz（0x80-0xbf）
    } else if (point <= 0xD7FF || (point >= 0xE000 && point <= 0xFFFF)) {
      // 三字节：标量值：00000000 xxxxyyyy yyzzzzzz
      arr.push(0xe0 | (point >>> 12)) // 1110xxxx（0xe0-0xef）
      arr.push(0x80 | ((point >>> 6) & 0x3f)) // 10yyyyyy（0x80-0xbf）
      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz（0x80-0xbf）
    } else if (point >= 0x010000 && point <= 0x10FFFF) {
      // 四字节：标量值：000wwwxx xxxxyyyy yyzzzzzz
      i++
      arr.push((0xf0 | (point >>> 18) & 0x1c)) // 11110www（0xf0-0xf7）
      arr.push((0x80 | ((point >>> 12) & 0x3f))) // 10xxxxxx（0x80-0xbf）
      arr.push((0x80 | ((point >>> 6) & 0x3f))) // 10yyyyyy（0x80-0xbf）
      arr.push((0x80 | (point & 0x3f))) // 10zzzzzz（0x80-0xbf）
    } else {
      // 五、六字节，暂时不支持
      arr.push(point)
      throw new Error('input is not supported')
    }
  }

  return arr
}

module.exports = function (input) {
  input = typeof input === 'string' ? utf8ToArray(input) : Array.prototype.slice.call(input)
  return ArrayToHex(sm3(input))
}


/***/ }),
/* 250 */
/***/ (function(module, exports) {

/* eslint-disable no-bitwise, no-mixed-operators, complexity */
const DECRYPT = 0
const ROUND = 32
const BLOCK = 16

const Sbox = [
  0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,
  0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
  0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,
  0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,
  0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,
  0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,
  0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,
  0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,
  0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,
  0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,
  0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,
  0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,
  0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,
  0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,
  0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,
  0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48
]

const CK = [
  0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
  0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
  0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
  0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
  0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
  0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
  0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
  0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279
]

/**
 * 16 进制串转字节数组
 */
function hexToArray(str) {
  const arr = []
  for (let i = 0, len = str.length; i < len; i += 2) {
    arr.push(parseInt(str.substr(i, 2), 16))
  }
  return arr
}

/**
 * 字节数组转 16 进制串
 */
function ArrayToHex(arr) {
  return arr.map(item => {
    item = item.toString(16)
    return item.length === 1 ? '0' + item : item
  }).join('')
}

/**
 * utf8 串转字节数组
 */
function utf8ToArray(str) {
  const arr = []

  for (let i = 0, len = str.length; i < len; i++) {
    const point = str.codePointAt(i)

    if (point <= 0x007f) {
      // 单字节，标量值：00000000 00000000 0zzzzzzz
      arr.push(point)
    } else if (point <= 0x07ff) {
      // 双字节，标量值：00000000 00000yyy yyzzzzzz
      arr.push(0xc0 | (point >>> 6)) // 110yyyyy（0xc0-0xdf）
      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz（0x80-0xbf）
    } else if (point <= 0xD7FF || (point >= 0xE000 && point <= 0xFFFF)) {
      // 三字节：标量值：00000000 xxxxyyyy yyzzzzzz
      arr.push(0xe0 | (point >>> 12)) // 1110xxxx（0xe0-0xef）
      arr.push(0x80 | ((point >>> 6) & 0x3f)) // 10yyyyyy（0x80-0xbf）
      arr.push(0x80 | (point & 0x3f)) // 10zzzzzz（0x80-0xbf）
    } else if (point >= 0x010000 && point <= 0x10FFFF) {
      // 四字节：标量值：000wwwxx xxxxyyyy yyzzzzzz
      i++
      arr.push((0xf0 | (point >>> 18) & 0x1c)) // 11110www（0xf0-0xf7）
      arr.push((0x80 | ((point >>> 12) & 0x3f))) // 10xxxxxx（0x80-0xbf）
      arr.push((0x80 | ((point >>> 6) & 0x3f))) // 10yyyyyy（0x80-0xbf）
      arr.push((0x80 | (point & 0x3f))) // 10zzzzzz（0x80-0xbf）
    } else {
      // 五、六字节，暂时不支持
      arr.push(point)
      throw new Error('input is not supported')
    }
  }

  return arr
}

/**
 * 字节数组转 utf8 串
 */
function arrayToUtf8(arr) {
  const str = []
  for (let i = 0, len = arr.length; i < len; i++) {
    if (arr[i] >= 0xf0 && arr[i] <= 0xf7) {
      // 四字节
      str.push(String.fromCodePoint(((arr[i] & 0x07) << 18) + ((arr[i + 1] & 0x3f) << 12) + ((arr[i + 2] & 0x3f) << 6) + (arr[i + 3] & 0x3f)))
      i += 3
    } else if (arr[i] >= 0xe0 && arr[i] <= 0xef) {
      // 三字节
      str.push(String.fromCodePoint(((arr[i] & 0x0f) << 12) + ((arr[i + 1] & 0x3f) << 6) + (arr[i + 2] & 0x3f)))
      i += 2
    } else if (arr[i] >= 0xc0 && arr[i] <= 0xdf) {
      // 双字节
      str.push(String.fromCodePoint(((arr[i] & 0x1f) << 6) + (arr[i + 1] & 0x3f)))
      i++
    } else {
      // 单字节
      str.push(String.fromCodePoint(arr[i]))
    }
  }

  return str.join('')
}

/**
 * 32 比特循环左移
 */
function rotl(x, y) {
  return x << y | x >>> (32 - y)
}

/**
 * 非线性变换
 */
function byteSub(a) {
  return (Sbox[a >>> 24 & 0xFF] & 0xFF) << 24 |
    (Sbox[a >>> 16 & 0xFF] & 0xFF) << 16 |
    (Sbox[a >>> 8 & 0xFF] & 0xFF) << 8 |
    (Sbox[a & 0xFF] & 0xFF)
}

/**
 * 线性变换，加密/解密用
 */
function l1(b) {
  return b ^ rotl(b, 2) ^ rotl(b, 10) ^ rotl(b, 18) ^ rotl(b, 24)
}

/**
 * 线性变换，生成轮密钥用
 */
function l2(b) {
  return b ^ rotl(b, 13) ^ rotl(b, 23)
}

/**
 * 以一组 128 比特进行加密/解密操作
 */
function sms4Crypt(input, output, roundKey) {
  const x = new Array(4)

  // 字节数组转成字数组（此处 1 字 = 32 比特）
  const tmp = new Array(4)
  for (let i = 0; i < 4; i++) {
    tmp[0] = input[4 * i] & 0xff
    tmp[1] = input[4 * i + 1] & 0xff
    tmp[2] = input[4 * i + 2] & 0xff
    tmp[3] = input[4 * i + 3] & 0xff
    x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3]
  }

  // x[i + 4] = x[i] ^ l1(byteSub(x[i + 1] ^ x[i + 2] ^ x[i + 3] ^ roundKey[i]))
  for (let r = 0, mid; r < 32; r += 4) {
    mid = x[1] ^ x[2] ^ x[3] ^ roundKey[r + 0]
    x[0] ^= l1(byteSub(mid)) // x[4]

    mid = x[2] ^ x[3] ^ x[0] ^ roundKey[r + 1]
    x[1] ^= l1(byteSub(mid)) // x[5]

    mid = x[3] ^ x[0] ^ x[1] ^ roundKey[r + 2]
    x[2] ^= l1(byteSub(mid)) // x[6]

    mid = x[0] ^ x[1] ^ x[2] ^ roundKey[r + 3]
    x[3] ^= l1(byteSub(mid)) // x[7]
  }

  // 反序变换
  for (let j = 0; j < 16; j += 4) {
    output[j] = x[3 - j / 4] >>> 24 & 0xff
    output[j + 1] = x[3 - j / 4] >>> 16 & 0xff
    output[j + 2] = x[3 - j / 4] >>> 8 & 0xff
    output[j + 3] = x[3 - j / 4] & 0xff
  }
}

/**
 * 密钥扩展算法
 */
function sms4KeyExt(key, roundKey, cryptFlag) {
  const x = new Array(4)

  // 字节数组转成字数组（此处 1 字 = 32 比特）
  const tmp = new Array(4)
  for (let i = 0; i < 4; i++) {
    tmp[0] = key[0 + 4 * i] & 0xff
    tmp[1] = key[1 + 4 * i] & 0xff
    tmp[2] = key[2 + 4 * i] & 0xff
    tmp[3] = key[3 + 4 * i] & 0xff
    x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3]
  }

  // 与系统参数做异或
  x[0] ^= 0xa3b1bac6
  x[1] ^= 0x56aa3350
  x[2] ^= 0x677d9197
  x[3] ^= 0xb27022dc

  // roundKey[i] = x[i + 4] = x[i] ^ l2(byteSub(x[i + 1] ^ x[i + 2] ^ x[i + 3] ^ CK[i]))
  for (let r = 0, mid; r < 32; r += 4) {
    mid = x[1] ^ x[2] ^ x[3] ^ CK[r + 0]
    roundKey[r + 0] = x[0] ^= l2(byteSub(mid)) // x[4]

    mid = x[2] ^ x[3] ^ x[0] ^ CK[r + 1]
    roundKey[r + 1] = x[1] ^= l2(byteSub(mid)) // x[5]

    mid = x[3] ^ x[0] ^ x[1] ^ CK[r + 2]
    roundKey[r + 2] = x[2] ^= l2(byteSub(mid)) // x[6]

    mid = x[0] ^ x[1] ^ x[2] ^ CK[r + 3]
    roundKey[r + 3] = x[3] ^= l2(byteSub(mid)) // x[7]
  }

  // 解密时使用反序的轮密钥
  if (cryptFlag === DECRYPT) {
    for (let r = 0, mid; r < 16; r++) {
      mid = roundKey[r]
      roundKey[r] = roundKey[31 - r]
      roundKey[31 - r] = mid
    }
  }
}

function sm4(inArray, key, cryptFlag, {
  padding = 'pkcs#5', mode, iv = [], output = 'string'
} = {}) {
  if (mode === 'cbc') {
    // @TODO，CBC 模式，默认走 ECB 模式
    if (typeof iv === 'string') iv = hexToArray(iv)
    if (iv.length !== (128 / 8)) {
      // iv 不是 128 比特
      throw new Error('iv is invalid')
    }
  }

  // 检查 key
  if (typeof key === 'string') key = hexToArray(key)
  if (key.length !== (128 / 8)) {
    // key 不是 128 比特
    throw new Error('key is invalid')
  }

  // 检查输入
  if (typeof inArray === 'string') {
    if (cryptFlag !== DECRYPT) {
      // 加密，输入为 utf8 串
      inArray = utf8ToArray(inArray)
    } else {
      // 解密，输入为 16 进制串
      inArray = hexToArray(inArray)
    }
  } else {
    inArray = [...inArray]
  }

  // 新增填充
  if (padding === 'pkcs#5' && cryptFlag !== DECRYPT) {
    const paddingCount = BLOCK - inArray.length % BLOCK
    for (let i = 0; i < paddingCount; i++) inArray.push(paddingCount)
  }

  // 生成轮密钥
  const roundKey = new Array(ROUND)
  sms4KeyExt(key, roundKey, cryptFlag)

  const outArray = []
  let lastVector = iv
  let restLen = inArray.length
  let point = 0
  while (restLen >= BLOCK) {
    const input = inArray.slice(point, point + 16)
    const output = new Array(16)

    if (mode === 'cbc') {
      for (let i = 0; i < BLOCK; i++) {
        if (cryptFlag !== DECRYPT) {
          // 加密过程在组加密前进行异或
          input[i] ^= lastVector[i]
        }
      }
    }

    sms4Crypt(input, output, roundKey)


    for (let i = 0; i < BLOCK; i++) {
      if (mode === 'cbc') {
        if (cryptFlag === DECRYPT) {
          // 解密过程在组解密后进行异或
          output[i] ^= lastVector[i]
        }
      }

      outArray[point + i] = output[i]
    }

    if (mode === 'cbc') {
      if (cryptFlag !== DECRYPT) {
        // 使用上一次输出作为加密向量
        lastVector = output
      } else {
        // 使用上一次输入作为解密向量
        lastVector = input
      }
    }

    restLen -= BLOCK
    point += BLOCK
  }

  // 去除填充
  if (padding === 'pkcs#5' && cryptFlag === DECRYPT) {
    const paddingCount = outArray[outArray.length - 1]
    outArray.splice(outArray.length - paddingCount, paddingCount)
  }

  // 调整输出
  if (output !== 'array') {
    if (cryptFlag !== DECRYPT) {
      // 加密，输出转 16 进制串
      return ArrayToHex(outArray)
    } else {
      // 解密，输出转 utf8 串
      return arrayToUtf8(outArray)
    }
  } else {
    return outArray
  }
}

module.exports = {
  encrypt(inArray, key, options) {
    return sm4(inArray, key, 1, options)
  },
  decrypt(inArray, key, options) {
    return sm4(inArray, key, 0, options)
  }
}


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer) {

var _typeof2 = __webpack_require__(32);

var _typeof3 = _interopRequireDefault(_typeof2);

var _base = __webpack_require__(261);

var _aes = __webpack_require__(29);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MqttClient = __webpack_require__(262);
var Store = __webpack_require__(131);
var url = __webpack_require__(151);
var xtend = __webpack_require__(87);
var Config = __webpack_require__(91);
var protocols = {};

var host = 'wildfirechat.net';
var gAppId = "web_12345678";
var gAppKey = "6f8348670cb11cf434451bc9e7ba72eeaf3452c8";

if (process.title !== 'browser') {
  protocols.mqtt = __webpack_require__(153);
  protocols.tcp = __webpack_require__(153);
  protocols.ssl = __webpack_require__(92);
  protocols.tls = __webpack_require__(92);
  protocols.mqtts = __webpack_require__(92);
} else {
  protocols.wx = __webpack_require__(154);
  protocols.wxs = __webpack_require__(154);

  protocols.ali = __webpack_require__(155);
  protocols.alis = __webpack_require__(155);
}

protocols.ws = __webpack_require__(156);
protocols.wss = __webpack_require__(156);

/**
 * Parse the auth attribute and merge username and password in the options object.
 *
 * @param {Object} [opts] option object
 */
function parseAuthOptions(opts) {
  var matches;
  if (opts.auth) {
    matches = opts.auth.match(/^(.+):(.+)$/);
    if (matches) {
      opts.username = matches[1];
      opts.password = matches[2];
    } else {
      opts.username = opts.auth;
    }
  }
}

function connect(userId, clientId, token, callback, options) {
  route(userId, clientId, token, callback, options);
}

function server() {
  return 'wildfirechat.net';
}

function route(userId, clientId, token, callback, wfcOptions) {
  var url = void 0;
  var routeHost = wfcOptions && wfcOptions.backupHost && wfcOptions.backupAddressStrategy === 2 ? wfcOptions.backupHost : server();
  var routePort = wfcOptions && wfcOptions.backupHost && wfcOptions.backupAddressStrategy === 2 ? wfcOptions.backupPort : Config.default.ROUTE_PORT ? Config.default.ROUTE_PORT : 80;
  if (Config.default.USE_WSS) {
    log('https route');
    url = 'https://' + routeHost + (routePort !== 443 ? ":" + routePort : '') + '/route';
  } else {
    url = 'http://' + routeHost + (routePort !== 80 ? ":" + routePort : '') + '/route';
  }
  log('route url', url);
  var RouteRequest = __webpack_require__(94).RouteRequest;
  var RouteResponse = __webpack_require__(94).RouteResponse;
  var IMHttpWrapper = __webpack_require__(94).IMHttpWrapper;
  var AESDecrypt = __webpack_require__(29).AESDecrypt;
  var Uint8ToStr = __webpack_require__(29).Uint8ToStr;
  var AESEncrypt = __webpack_require__(29).AESEncrypt;

  var privateSecret = '';
  var password = '';

  var base64Decode = __webpack_require__(158).decode;
  var base64Encode = __webpack_require__(158).encode;

  // for node
  // var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest
  var request = new XMLHttpRequest();
  var timeout = false;
  var timer = setTimeout(function () {
    timeout = true;
    request.abort();
    console.log('request timeout, to abort');
  }, 10000);
  request.open("POST", url);
  request.onerror = function () {
    log('route request error');
    callback(-1);
  };
  request.onabort = function () {
    log('route request abort');
    callback(-1);
  };
  request.ontimeout = function () {
    log('route request timeout');
    callback(-1);
  };
  request.onreadystatechange = function () {
    if (request.readyState !== 4) return;
    clearTimeout(timer);
    if (request.status === 200) {
      var buffer = base64Decode(request.responseText);
      if (!buffer || buffer.byteLength < 1) {
        log('route response error', request.responseText);
        callback(-1);
      }
      var statusView = new Int8Array(buffer, 0, 1);
      if (statusView[0] === 0) {
        var routeRes = base64Encode(buffer.slice(1));
        var data = AESDecrypt(routeRes, privateSecret, true);
        var res = RouteResponse.decode(data);
        log('route res', res.host, res.longPort, res.wssPort);

        var willTopic = res.node + '|' + host;
        var tmp = '';
        for (var i = 0; i < willTopic.length; i++) {
          tmp += String.fromCharCode(willTopic[i].charCodeAt(0) ^ 0x5A);
        }
        willTopic = (0, _base.btoa)(unescape(encodeURIComponent(tmp)));

        var options = {
          keepalive: Config.default.KEEP_ALIVE_TIMEOUT,
          clientId: clientId,
          protocolId: 'MQTT',
          protocolVersion: 6,
          clean: true,
          reconnectPeriod: 0,
          resubscribe: false,
          connectTimeout: 20 * 1000,
          a: host,
          will: {
            topic: willTopic,
            payload: 'Connection Closed abnormally..!',
            qos: 1, // at_least_once
            retain: false
          },
          rejectUnauthorized: false
        };
        options.username = userId;
        options.password = password;

        var connectTime = new Date().getTime();
        var client = void 0;
        var isNewComercialAuth = (res.commercial & 0x08) > 0;

        var wsPort = void 0;
        var wsHost = void 0;
        if (wfcOptions && wfcOptions.backupHost && wfcOptions.backupAddressStrategy === 2) {
          var backupTripple = res.candidate[0];
          wsHost = backupTripple.host;
          wsPort = backupTripple.wssPort;
        } else {
          wsHost = res.host;
          if (Config.default.USE_WSS) {
            wsPort = isNewComercialAuth ? res.wssPort : res.longPort;
            wsPort = wsPort ? wsPort : res.longPort;
          } else {
            wsPort = res.longPort;
          }
        }
        log('connect url', wsHost, wsPort);
        if (Config.default.USE_WSS) {
          log('wss mqtts');
          client = connectEx('mqtts://' + wsHost + ':' + wsPort, options);
        } else {
          log('ws mqtt', Config.default.USE_WSS);
          client = connectEx('mqtt://' + wsHost + ':' + wsPort, options);
        }
        gRouteHost = res.host;
        var serverConfigs = {
          //CommercialFlag
          //第0位表示是否是商业版
          //第1位表示是否开启了回执功能
          //第2位表示是否用户群中被踢时清除消息
          //第3位表示新的商业版授权方式
          //第4位表示客户端是否禁止漫游会话列表
          //第5位表示客户端是否保留会话当群组解散后
          //第6位表示是否支持大文件上传
          //第7位表示是否获取下载路径时支持备份地址
          //第8位表示是否禁止同步草稿功
          // int CommercialFlag_Mask_Commercial = 0x01;
          // int CommercialFlag_Mask_Receipt = 0x02;
          // int CommercialFlag_Mask_ClearMsgWhenKickoff = 0x04;
          // int CommercialFlag_Mask_NewCommercial_Auth = 0x08;
          // int CommercialFlag_Mask_Disable_Roaming_ConvList = 0x10;
          // int CommercialFlag_Mask_KeepMsgAfterDismiss = 0x20;
          // int CommercialFlag_Mask_BigFileUpload = 0x40;
          // int CommercialFlag_Mask_BackupDownloadUrl = 0x80;
          // int CommercialFlag_Mask_DisableSyncDraft = 0x100
          isReceiptEnable: (res.commercial & 0x02) > 0,
          isClearGroupMsgWhenKickoff: (res.commercial & 0x04) > 0,
          isDisableRoamingConvList: (res.commercial & 0x10) > 0,
          isKeepMsgAfterDismiss: (res.commercial & 0x20) > 0,
          isSupportBigFileUpload: (res.commercial & 0x40) > 0,
          isBackupDownloadUrl: (res.commercial & 0x80) > 0,
          isGlobalDisableSyncDraft: (res.commercial & 0x100) > 0,
          isSupportQos0Message: (res.commercial & 0x200) > 0,
          isUserOnlineStateEnable: (res.commercial & 0x400) > 0
        };
        if ((res.commercial & 0x01) > 0) {
          callback(0, client, privateSecret, connectTime, serverConfigs);
        } else {
          callback(-1);
        }
      } else {
        log('route error', url, statusView[0]);
        callback(statusView[0]);
      }
    } else {
      log('http route error，请先检查下USE_WSS、ROUTE_PORT配置', url, request.status);
      callback(-1);
    }
  };
  request.setRequestHeader('p', 'web');
  request.setRequestHeader('appId', gAppId);
  request.setRequestHeader('appKey', gAppKey);
  request.setRequestHeader('cid', AESEncrypt(clientId));
  request.setRequestHeader('uid', AESEncrypt(userId));
  request.setRequestHeader('Content-Type', 'application/octet-stream');

  var routeReq = RouteRequest.create();
  routeReq.app = 'cn.wildfirechat.chat.web';
  routeReq.appVersion = '0.1';
  routeReq.deviceName = 'browser';
  routeReq.platform = 5;
  routeReq.phoneName = 'browser';
  routeReq.sdkVersion = '0.1';
  routeReq.language = Config.default.LANGUAGE;

  var tokenD = void 0;
  try {
    tokenD = Uint8ToStr(AESDecrypt(token, '', false));
  } catch (e) {
    log('token error!!!');
  }

  var userToken = tokenD.split('|')[0];
  privateSecret = tokenD.split('|')[1];
  password = new Buffer(AESEncrypt(userToken, privateSecret), 'base64');

  routeReq.host = AESEncrypt(server(), '');

  var routeReqData = RouteRequest.encode(routeReq).finish();

  var imHttpWrapper = IMHttpWrapper.create();
  imHttpWrapper.clientId = clientId;
  imHttpWrapper.token = userToken;
  imHttpWrapper.request = 'ROUTE';
  imHttpWrapper.data = routeReqData;

  var imHttpWrapperData = IMHttpWrapper.encode(imHttpWrapper).finish();
  var data = AESEncrypt(imHttpWrapperData, privateSecret);

  request.send(data);
}

/**
 * connect - connect to an MQTT broker.
 *
 * @param {String} [brokerUrl] - url of the broker, optional
 * @param {Object} opts - see MqttClient#constructor
 */
function connectEx(brokerUrl, opts) {
  if ((typeof brokerUrl === 'undefined' ? 'undefined' : (0, _typeof3.default)(brokerUrl)) === 'object' && !opts) {
    opts = brokerUrl;
    brokerUrl = null;
  }

  opts = opts || {};

  if (brokerUrl) {
    var parsed = url.parse(brokerUrl, true);
    if (parsed.port != null) {
      parsed.port = Number(parsed.port);
    }

    opts = xtend(parsed, opts);

    if (opts.protocol === null) {
      throw new Error('Missing protocol');
    }
    opts.protocol = opts.protocol.replace(/:$/, '');
  }

  // merge in the auth options if supplied
  parseAuthOptions(opts);

  // support clientId passed in the query string of the url
  if (opts.query && typeof opts.query.clientId === 'string') {
    opts.clientId = opts.query.clientId;
  }

  if (opts.cert && opts.key) {
    if (opts.protocol) {
      if (['mqtts', 'wss', 'wxs', 'alis'].indexOf(opts.protocol) === -1) {
        switch (opts.protocol) {
          case 'mqtt':
            opts.protocol = 'mqtts';
            break;
          case 'ws':
            opts.protocol = 'wss';
            break;
          case 'wx':
            opts.protocol = 'wxs';
            break;
          case 'ali':
            opts.protocol = 'alis';
            break;
          default:
            throw new Error('Unknown protocol for secure connection: "' + opts.protocol + '"!');
        }
      }
    } else {
      // don't know what protocol he want to use, mqtts or wss
      throw new Error('Missing secure protocol key');
    }
  }

  if (!protocols[opts.protocol]) {
    var isSecure = ['mqtts', 'wss'].indexOf(opts.protocol) !== -1;
    opts.protocol = ['mqtt', 'mqtts', 'ws', 'wss', 'wx', 'wxs', 'ali', 'alis'].filter(function (key, index) {
      if (isSecure && index % 2 === 0) {
        // Skip insecure protocols when requesting a secure one.
        return false;
      }
      return typeof protocols[key] === 'function';
    })[0];
  }

  if (opts.clean === false && !opts.clientId) {
    throw new Error('Missing clientId for unclean clients');
  }

  if (opts.protocol) {
    opts.defaultProtocol = opts.protocol;
  }

  function wrapper(client) {
    if (opts.servers) {
      if (!client._reconnectCount || client._reconnectCount === opts.servers.length) {
        client._reconnectCount = 0;
      }

      opts.host = opts.servers[client._reconnectCount].host;
      opts.port = opts.servers[client._reconnectCount].port;
      opts.protocol = !opts.servers[client._reconnectCount].protocol ? opts.defaultProtocol : opts.servers[client._reconnectCount].protocol;
      opts.hostname = opts.host;

      client._reconnectCount++;
    }

    return protocols[opts.protocol](client, opts);
  }

  return new MqttClient(wrapper, opts);
}

var gRouteHost = '';
function Host() {
  return gRouteHost;
}

function log(message) {
  if (!Config.default.DISABLE_LOG) {
    var _console;

    for (var _len = arguments.length, optionalParams = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      optionalParams[_key - 1] = arguments[_key];
    }

    (_console = console).log.apply(_console, [message].concat(optionalParams));
  }
}

module.exports = connect;
module.exports.connect = connect;
module.exports.MqttClient = MqttClient;
module.exports.Store = Store;
module.exports.host = Host;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6), __webpack_require__(16).Buffer))

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(253), __esModule: true };

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26);
__webpack_require__(43);
module.exports = __webpack_require__(84).f('iterator');


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(255), __esModule: true };

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(256);
__webpack_require__(49);
__webpack_require__(259);
__webpack_require__(260);
module.exports = __webpack_require__(1).Symbol;


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(4);
var has = __webpack_require__(22);
var DESCRIPTORS = __webpack_require__(8);
var $export = __webpack_require__(2);
var redefine = __webpack_require__(99);
var META = __webpack_require__(54).KEY;
var $fails = __webpack_require__(21);
var shared = __webpack_require__(70);
var setToStringTag = __webpack_require__(42);
var uid = __webpack_require__(52);
var wks = __webpack_require__(5);
var wksExt = __webpack_require__(84);
var wksDefine = __webpack_require__(85);
var enumKeys = __webpack_require__(257);
var isArray = __webpack_require__(118);
var anObject = __webpack_require__(13);
var isObject = __webpack_require__(7);
var toObject = __webpack_require__(28);
var toIObject = __webpack_require__(27);
var toPrimitive = __webpack_require__(67);
var createDesc = __webpack_require__(38);
var _create = __webpack_require__(50);
var gOPNExt = __webpack_require__(128);
var $GOPD = __webpack_require__(258);
var $GOPS = __webpack_require__(77);
var $DP = __webpack_require__(9);
var $keys = __webpack_require__(40);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(129).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(53).f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(36)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(18)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(40);
var gOPS = __webpack_require__(77);
var pIE = __webpack_require__(53);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(53);
var createDesc = __webpack_require__(38);
var toIObject = __webpack_require__(27);
var toPrimitive = __webpack_require__(67);
var has = __webpack_require__(22);
var IE8_DOM_DEFINE = __webpack_require__(98);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(8) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(85)('asyncIterator');


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(85)('observable');


/***/ }),
/* 261 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__261__;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

/**
 * Module dependencies
 */

var _typeof2 = __webpack_require__(32);

var _typeof3 = _interopRequireDefault(_typeof2);

var _create = __webpack_require__(130);

var _create2 = _interopRequireDefault(_create);

var _keys = __webpack_require__(45);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var events = __webpack_require__(46);
var Store = __webpack_require__(131);
var mqttPacket = __webpack_require__(327);
var Writable = __webpack_require__(33).Writable;
var inherits = __webpack_require__(14);
var reInterval = __webpack_require__(339);
var validations = __webpack_require__(340);
var xtend = __webpack_require__(87);
var setImmediate = global.setImmediate || function (callback) {
  // works in node v0.8
  process.nextTick(callback);
};
var defaultConnectOptions = {
  keepalive: 60,
  reschedulePings: true,
  protocolId: 'MQTT',
  protocolVersion: 4,
  reconnectPeriod: 1000,
  connectTimeout: 30 * 1000,
  clean: true,
  resubscribe: true
};
var errors = {
  0: '',
  1: 'Unacceptable protocol version',
  2: 'Identifier rejected',
  3: 'Server unavailable',
  4: 'Bad username or password',
  5: 'Not authorized',
  16: 'No matching subscribers',
  17: 'No subscription existed',
  128: 'Unspecified error',
  129: 'Malformed Packet',
  130: 'Protocol Error',
  131: 'Implementation specific error',
  132: 'Unsupported Protocol Version',
  133: 'Client Identifier not valid',
  134: 'Bad User Name or Password',
  135: 'Not authorized',
  136: 'Server unavailable',
  137: 'Server busy',
  138: 'Banned',
  139: 'Server shutting down',
  140: 'Bad authentication method',
  141: 'Keep Alive timeout',
  142: 'Session taken over',
  143: 'Topic Filter invalid',
  144: 'Topic Name invalid',
  145: 'Packet identifier in use',
  146: 'Packet Identifier not found',
  147: 'Receive Maximum exceeded',
  148: 'Topic Alias invalid',
  149: 'Packet too large',
  150: 'Message rate too high',
  151: 'Quota exceeded',
  152: 'Administrative action',
  153: 'Payload format invalid',
  154: 'Retain not supported',
  155: 'QoS not supported',
  156: 'Use another server',
  157: 'Server moved',
  158: 'Shared Subscriptions not supported',
  159: 'Connection rate exceeded',
  160: 'Maximum connect time',
  161: 'Subscription Identifiers not supported',
  162: 'Wildcard Subscriptions not supported'
};

function defaultId() {
  return 'mqttjs_' + Math.random().toString(16).substr(2, 8);
}

function sendPacket(client, packet, cb) {
  client.emit('packetsend', packet);

  var result = mqttPacket.writeToStream(packet, client.stream, client.options);

  if (!result && cb) {
    client.stream.once('drain', cb);
  } else if (cb) {
    cb();
  }
}

function flush(queue) {
  if (queue) {
    (0, _keys2.default)(queue).forEach(function (messageId) {
      if (typeof queue[messageId] === 'function') {
        queue[messageId](new Error('Connection closed'));
        delete queue[messageId];
      }
    });
  }
}

function storeAndSend(client, packet, cb, cbStorePut) {
  client.outgoingStore.put(packet, function storedPacket(err) {
    if (err) {
      return cb && cb(err);
    }
    cbStorePut();
    sendPacket(client, packet, cb);
  });
}

function nop() {}

/**
 * MqttClient constructor
 *
 * @param {Stream} stream - stream
 * @param {Object} [options] - connection options
 * (see Connection#connect)
 */
function MqttClient(streamBuilder, options) {
  var k;
  var that = this;

  if (!(this instanceof MqttClient)) {
    return new MqttClient(streamBuilder, options);
  }

  this.options = options || {};

  // Defaults
  for (k in defaultConnectOptions) {
    if (typeof this.options[k] === 'undefined') {
      this.options[k] = defaultConnectOptions[k];
    } else {
      this.options[k] = options[k];
    }
  }

  this.options.clientId = typeof options.clientId === 'string' ? options.clientId : defaultId();

  this.options.customHandleAcks = options.protocolVersion === 5 && options.customHandleAcks ? options.customHandleAcks : function () {
    arguments[3](0);
  };

  this.streamBuilder = streamBuilder;

  // Inflight message storages
  this.outgoingStore = options.outgoingStore || new Store();
  this.incomingStore = options.incomingStore || new Store();

  // Should QoS zero messages be queued when the connection is broken?
  this.queueQoSZero = options.queueQoSZero === undefined ? true : options.queueQoSZero;

  // map of subscribed topics to support reconnection
  this._resubscribeTopics = {};

  // map of a subscribe messageId and a topic
  this.messageIdToTopic = {};

  // Ping timer, setup in _setupPingTimer
  this.pingTimer = null;
  // Is the client connected?
  this.connected = false;
  // Are we disconnecting?
  this.disconnecting = false;
  // Packet queue
  this.queue = [];
  // connack timer
  this.connackTimer = null;
  // Reconnect timer
  this.reconnectTimer = null;
  // Is processing store?
  this._storeProcessing = false;
  // Packet Ids are put into the store during store processing
  this._packetIdsDuringStoreProcessing = {};
  /**
   * MessageIDs starting with 1
   * ensure that nextId is min. 1, see https://github.com/mqttjs/MQTT.js/issues/810
   */
  this.nextId = Math.max(1, Math.floor(Math.random() * 65535));

  // Inflight callbacks
  this.outgoing = {};

  // True if connection is first time.
  this._firstConnection = true;

  // Mark disconnected on stream close
  this.on('close', function () {
    this.connected = false;
    clearTimeout(this.connackTimer);
  });

  // Send queued packets
  this.on('connect', function () {
    var queue = this.queue;

    function deliver() {
      var entry = queue.shift();
      var packet = null;

      if (!entry) {
        return;
      }

      packet = entry.packet;

      that._sendPacket(packet, function (err) {
        if (entry.cb) {
          entry.cb(err);
        }
        deliver();
      });
    }

    deliver();
  });

  // Clear ping timer
  this.on('close', function () {
    if (that.pingTimer !== null) {
      that.pingTimer.clear();
      that.pingTimer = null;
    }
  });

  // 不自动重连了，由上层控制重连
  // Setup reconnect timer on disconnect
  // this.on('close', this._setupReconnect)

  events.EventEmitter.call(this);

  this._setupStream();
}
inherits(MqttClient, events.EventEmitter);

/**
 * setup the event handlers in the inner stream.
 *
 * @api private
 */
MqttClient.prototype._setupStream = function () {
  var connectPacket;
  var that = this;
  var writable = new Writable();
  var parser = mqttPacket.parser(this.options);
  var completeParse = null;
  var packets = [];

  this._clearReconnect();

  this.stream = this.streamBuilder(this);

  parser.on('packet', function (packet) {
    packets.push(packet);
  });

  function nextTickWork() {
    if (packets.length) {
      process.nextTick(work);
    } else {
      var done = completeParse;
      completeParse = null;
      done();
    }
  }

  function work() {
    var packet = packets.shift();

    if (packet) {
      that._handlePacket(packet, nextTickWork);
    } else {
      var done = completeParse;
      completeParse = null;
      if (done) done();
    }
  }

  writable._write = function (buf, enc, done) {
    completeParse = done;
    parser.parse(buf);
    work();
  };

  this.stream.pipe(writable);

  // Suppress connection errors
  this.stream.on('error', nop);

  // Echo stream close
  this.stream.on('close', function () {
    that.emit('close');
  });

  // Send a connect packet
  connectPacket = (0, _create2.default)(this.options);
  connectPacket.cmd = 'connect';
  // avoid message queue
  sendPacket(this, connectPacket);

  // Echo connection errors
  parser.on('error', this.emit.bind(this, 'error'));

  // auth
  if (this.options.properties) {
    if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) {
      this.emit('error', new Error('Packet has no Authentication Method'));
      return this;
    }
    if (this.options.properties.authenticationMethod && this.options.authPacket && (0, _typeof3.default)(this.options.authPacket) === 'object') {
      var authPacket = xtend({ cmd: 'auth', reasonCode: 0 }, this.options.authPacket);
      sendPacket(this, authPacket);
    }
  }

  // many drain listeners are needed for qos 1 callbacks if the connection is intermittent
  this.stream.setMaxListeners(1000);

  clearTimeout(this.connackTimer);
  this.connackTimer = setTimeout(function () {
    that._cleanUp(true);
  }, this.options.connectTimeout);
};

MqttClient.prototype._handlePacket = function (packet, done) {
  var options = this.options;

  if (options.protocolVersion === 5 && options.properties && options.properties.maximumPacketSize && options.properties.maximumPacketSize < packet.length) {
    this.emit('error', new Error('exceeding packets size ' + packet.cmd));
    this.end({ reasonCode: 149, properties: { reasonString: 'Maximum packet size was exceeded' } });
    return this;
  }

  this.emit('packetreceive', packet);

  switch (packet.cmd) {
    case 'publish':
      try {
        this._handlePublish(packet, done);
      } catch (error) {
        console.error(error);
      }
      break;
    case 'puback':
    case 'pubrec':
    case 'pubcomp':
    case 'suback':
    case 'unsuback':
      try {
        this._handleAck(packet);
      } catch (error) {
        console.log(error);
      }
      done();
      break;
    case 'pubrel':
      this._handlePubrel(packet, done);
      break;
    case 'connack':
      this._handleConnack(packet);
      done();
      break;
    case 'pingresp':
      this._handlePingresp(packet);
      done();
      break;
    case 'disconnect':
      this._handleDisconnect(packet);
      done();
      break;
    default:
      // do nothing
      // maybe we should do an error handling
      // or just log it
      break;
  }
};

MqttClient.prototype._checkDisconnecting = function (callback) {
  if (this.disconnecting) {
    if (callback) {
      callback(new Error('client disconnecting'));
    } else {
      this.emit('error', new Error('client disconnecting'));
    }
  }
  return this.disconnecting;
};

/**
 * publish - publish <message> to <topic>
 *
 * @param {String} topic - topic to publish to
 * @param {String, Buffer} message - message to publish
 * @param {Object} [opts] - publish options, includes:
 *    {Number} qos - qos level to publish on
 *    {Boolean} retain - whether or not to retain the message
 *    {Boolean} dup - whether or not mark a message as duplicate
 *    {Function} cbStorePut - function(){} called when message is put into `outgoingStore`
 * @param {Function} [callback] - function(err){}
 *    called when publish succeeds or fails
 * @returns {MqttClient} this - for chaining
 * @api public
 *
 * @example client.publish('topic', 'message');
 * @example
 *     client.publish('topic', 'message', {qos: 1, retain: true, dup: true});
 * @example client.publish('topic', 'message', console.log);
 */
MqttClient.prototype.publish = function (topic, message, opts, callback) {
  var packet;
  var options = this.options;

  // .publish(topic, payload, cb);
  if (typeof opts === 'function') {
    callback = opts;
    opts = null;
  }

  // default opts
  var defaultOpts = { qos: 0, retain: false, dup: false };
  opts = xtend(defaultOpts, opts);

  if (this._checkDisconnecting(callback)) {
    return this;
  }

  packet = {
    cmd: 'publish',
    topic: topic,
    payload: message,
    qos: opts.qos,
    retain: opts.retain,
    messageId: this._nextId(),
    dup: opts.dup
  };

  if (options.protocolVersion === 5) {
    packet.properties = opts.properties;
    if (!options.properties && packet.properties && packet.properties.topicAlias || opts.properties && options.properties && (opts.properties.topicAlias && options.properties.topicAliasMaximum && opts.properties.topicAlias > options.properties.topicAliasMaximum || !options.properties.topicAliasMaximum && opts.properties.topicAlias)) {
      /*
      if we are don`t setup topic alias or
      topic alias maximum less than topic alias or
      server don`t give topic alias maximum,
      we are removing topic alias from packet
      */
      delete packet.properties.topicAlias;
    }
  }

  switch (opts.qos) {
    case 1:
    case 2:
      // Add to callbacks
      this.outgoing[packet.messageId] = callback || nop;
      if (this._storeProcessing) {
        this._packetIdsDuringStoreProcessing[packet.messageId] = false;
        this._storePacket(packet, undefined, opts.cbStorePut);
      } else {
        this._sendPacket(packet, undefined, opts.cbStorePut);
      }
      break;
    default:
      if (this._storeProcessing) {
        this._storePacket(packet, callback, opts.cbStorePut);
      } else {
        this._sendPacket(packet, callback, opts.cbStorePut);
      }
      break;
  }

  return this;
};

/**
 * subscribe - subscribe to <topic>
 *
 * @param {String, Array, Object} topic - topic(s) to subscribe to, supports objects in the form {'topic': qos}
 * @param {Object} [opts] - optional subscription options, includes:
 *    {Number} qos - subscribe qos level
 * @param {Function} [callback] - function(err, granted){} where:
 *    {Error} err - subscription error (none at the moment!)
 *    {Array} granted - array of {topic: 't', qos: 0}
 * @returns {MqttClient} this - for chaining
 * @api public
 * @example client.subscribe('topic');
 * @example client.subscribe('topic', {qos: 1});
 * @example client.subscribe({'topic': {qos: 0}, 'topic2': {qos: 1}}, console.log);
 * @example client.subscribe('topic', console.log);
 */
MqttClient.prototype.subscribe = function () {
  var packet;
  var args = new Array(arguments.length);
  for (var i = 0; i < arguments.length; i++) {
    args[i] = arguments[i];
  }
  var subs = [];
  var obj = args.shift();
  var resubscribe = obj.resubscribe;
  var callback = args.pop() || nop;
  var opts = args.pop();
  var invalidTopic;
  var that = this;
  var version = this.options.protocolVersion;

  delete obj.resubscribe;

  if (typeof obj === 'string') {
    obj = [obj];
  }

  if (typeof callback !== 'function') {
    opts = callback;
    callback = nop;
  }

  invalidTopic = validations.validateTopics(obj);
  if (invalidTopic !== null) {
    setImmediate(callback, new Error('Invalid topic ' + invalidTopic));
    return this;
  }

  if (this._checkDisconnecting(callback)) {
    return this;
  }

  var defaultOpts = {
    qos: 0
  };
  if (version === 5) {
    defaultOpts.nl = false;
    defaultOpts.rap = false;
    defaultOpts.rh = 0;
  }
  opts = xtend(defaultOpts, opts);

  if (Array.isArray(obj)) {
    obj.forEach(function (topic) {
      if (!that._resubscribeTopics.hasOwnProperty(topic) || that._resubscribeTopics[topic].qos < opts.qos || resubscribe) {
        var currentOpts = {
          topic: topic,
          qos: opts.qos
        };
        if (version === 5) {
          currentOpts.nl = opts.nl;
          currentOpts.rap = opts.rap;
          currentOpts.rh = opts.rh;
          currentOpts.properties = opts.properties;
        }
        subs.push(currentOpts);
      }
    });
  } else {
    (0, _keys2.default)(obj).forEach(function (k) {
      if (!that._resubscribeTopics.hasOwnProperty(k) || that._resubscribeTopics[k].qos < obj[k].qos || resubscribe) {
        var currentOpts = {
          topic: k,
          qos: obj[k].qos
        };
        if (version === 5) {
          currentOpts.nl = obj[k].nl;
          currentOpts.rap = obj[k].rap;
          currentOpts.rh = obj[k].rh;
          currentOpts.properties = opts.properties;
        }
        subs.push(currentOpts);
      }
    });
  }

  packet = {
    cmd: 'subscribe',
    subscriptions: subs,
    qos: 1,
    retain: false,
    dup: false,
    messageId: this._nextId()
  };

  if (opts.properties) {
    packet.properties = opts.properties;
  }

  if (!subs.length) {
    callback(null, []);
    return;
  }

  // subscriptions to resubscribe to in case of disconnect
  if (this.options.resubscribe) {
    var topics = [];
    subs.forEach(function (sub) {
      if (that.options.reconnectPeriod > 0) {
        var topic = { qos: sub.qos };
        if (version === 5) {
          topic.nl = sub.nl || false;
          topic.rap = sub.rap || false;
          topic.rh = sub.rh || 0;
          topic.properties = sub.properties;
        }
        that._resubscribeTopics[sub.topic] = topic;
        topics.push(sub.topic);
      }
    });
    that.messageIdToTopic[packet.messageId] = topics;
  }

  this.outgoing[packet.messageId] = function (err, packet) {
    if (!err) {
      var granted = packet.granted;
      for (var i = 0; i < granted.length; i += 1) {
        subs[i].qos = granted[i];
      }
    }

    callback(err, subs);
  };

  this._sendPacket(packet);

  return this;
};

/**
 * unsubscribe - unsubscribe from topic(s)
 *
 * @param {String, Array} topic - topics to unsubscribe from
 * @param {Object} [opts] - optional subscription options, includes:
 *    {Object} properties - properties of unsubscribe packet
 * @param {Function} [callback] - callback fired on unsuback
 * @returns {MqttClient} this - for chaining
 * @api public
 * @example client.unsubscribe('topic');
 * @example client.unsubscribe('topic', console.log);
 */
MqttClient.prototype.unsubscribe = function () {
  var packet = {
    cmd: 'unsubscribe',
    qos: 1,
    messageId: this._nextId()
  };
  var that = this;
  var args = new Array(arguments.length);
  for (var i = 0; i < arguments.length; i++) {
    args[i] = arguments[i];
  }
  var topic = args.shift();
  var callback = args.pop() || nop;
  var opts = args.pop();

  if (typeof topic === 'string') {
    topic = [topic];
  }

  if (typeof callback !== 'function') {
    opts = callback;
    callback = nop;
  }

  if (this._checkDisconnecting(callback)) {
    return this;
  }

  if (typeof topic === 'string') {
    packet.unsubscriptions = [topic];
  } else if ((typeof topic === 'undefined' ? 'undefined' : (0, _typeof3.default)(topic)) === 'object' && topic.length) {
    packet.unsubscriptions = topic;
  }

  if (this.options.resubscribe) {
    packet.unsubscriptions.forEach(function (topic) {
      delete that._resubscribeTopics[topic];
    });
  }

  if ((typeof opts === 'undefined' ? 'undefined' : (0, _typeof3.default)(opts)) === 'object' && opts.properties) {
    packet.properties = opts.properties;
  }

  this.outgoing[packet.messageId] = callback;

  this._sendPacket(packet);

  return this;
};

/**
 * end - close connection
 *
 * @returns {MqttClient} this - for chaining
 * @param {Boolean} force - do not wait for all in-flight messages to be acked
 * @param {Function} cb - called when the client has been closed
 *
 * @api public
 */
MqttClient.prototype.end = function () {
  var that = this;

  var force = arguments[0];
  var opts = arguments[1];
  var cb = arguments[2];

  if (force == null || typeof force !== 'boolean') {
    cb = opts || nop;
    opts = force;
    force = false;
    if ((typeof opts === 'undefined' ? 'undefined' : (0, _typeof3.default)(opts)) !== 'object') {
      cb = opts;
      opts = null;
      if (typeof cb !== 'function') {
        cb = nop;
      }
    }
  }

  if ((typeof opts === 'undefined' ? 'undefined' : (0, _typeof3.default)(opts)) !== 'object') {
    cb = opts;
    opts = null;
  }

  cb = cb || nop;

  function closeStores() {
    that.disconnected = true;
    that.incomingStore.close(function () {
      that.outgoingStore.close(function () {
        if (cb) {
          cb.apply(null, arguments);
        }
        that.emit('end');
      });
    });
    if (that._deferredReconnect) {
      that._deferredReconnect();
    }
  }

  function finish() {
    // defer closesStores of an I/O cycle,
    // just to make sure things are
    // ok for websockets
    that._cleanUp(force, setImmediate.bind(null, closeStores), opts);
  }

  if (this.disconnecting) {
    return this;
  }

  this._clearReconnect();

  this.disconnecting = true;

  if (!force && (0, _keys2.default)(this.outgoing).length > 0) {
    // wait 10ms, just to be sure we received all of it
    this.once('outgoingEmpty', setTimeout.bind(null, finish, 10));
  } else {
    finish();
  }

  return this;
};

/**
 * removeOutgoingMessage - remove a message in outgoing store
 * the outgoing callback will be called withe Error('Message removed') if the message is removed
 *
 * @param {Number} mid - messageId to remove message
 * @returns {MqttClient} this - for chaining
 * @api public
 *
 * @example client.removeOutgoingMessage(client.getLastMessageId());
 */
MqttClient.prototype.removeOutgoingMessage = function (mid) {
  var cb = this.outgoing[mid];
  delete this.outgoing[mid];
  this.outgoingStore.del({ messageId: mid }, function () {
    cb(new Error('Message removed'));
  });
  return this;
};

/**
 * reconnect - connect again using the same options as connect()
 *
 * @param {Object} [opts] - optional reconnect options, includes:
 *    {Store} incomingStore - a store for the incoming packets
 *    {Store} outgoingStore - a store for the outgoing packets
 *    if opts is not given, current stores are used
 * @returns {MqttClient} this - for chaining
 *
 * @api public
 */
MqttClient.prototype.reconnect = function (opts) {
  var that = this;
  var f = function f() {
    if (opts) {
      that.options.incomingStore = opts.incomingStore;
      that.options.outgoingStore = opts.outgoingStore;
    } else {
      that.options.incomingStore = null;
      that.options.outgoingStore = null;
    }
    that.incomingStore = that.options.incomingStore || new Store();
    that.outgoingStore = that.options.outgoingStore || new Store();
    that.disconnecting = false;
    that.disconnected = false;
    that._deferredReconnect = null;
    that._reconnect();
  };

  if (this.disconnecting && !this.disconnected) {
    this._deferredReconnect = f;
  } else {
    f();
  }
  return this;
};

/**
 * _reconnect - implement reconnection
 * @api privateish
 */
MqttClient.prototype._reconnect = function () {
  this.emit('reconnect');
  this._setupStream();
};

/**
 * _setupReconnect - setup reconnect timer
 */
MqttClient.prototype._setupReconnect = function () {
  var that = this;

  if (!that.disconnecting && !that.reconnectTimer && that.options.reconnectPeriod > 0) {
    if (!this.reconnecting) {
      this.emit('offline');
      this.reconnecting = true;
    }
    that.reconnectTimer = setInterval(function () {
      that._reconnect();
    }, that.options.reconnectPeriod);
  }
};

/**
 * _clearReconnect - clear the reconnect timer
 */
MqttClient.prototype._clearReconnect = function () {
  if (this.reconnectTimer) {
    clearInterval(this.reconnectTimer);
    this.reconnectTimer = null;
  }
};

/**
 * _cleanUp - clean up on connection end
 * @api private
 */
MqttClient.prototype._cleanUp = function (forced, done) {
  var opts = arguments[2];
  if (done) {
    this.stream.on('close', done);
  }

  if (forced) {
    if (this.options.reconnectPeriod === 0 && this.options.clean) {
      flush(this.outgoing);
    }
    this.stream.destroy();
  } else {
    var packet = xtend({ cmd: 'disconnect' }, opts);
    this._sendPacket(packet, setImmediate.bind(null, this.stream.end.bind(this.stream)));
  }

  if (!this.disconnecting) {
    this._clearReconnect();
    this._setupReconnect();
  }

  if (this.pingTimer !== null) {
    this.pingTimer.clear();
    this.pingTimer = null;
  }

  if (done && !this.connected) {
    this.stream.removeListener('close', done);
    done();
  }
};

/**
 * _sendPacket - send or queue a packet
 * @param {String} type - packet type (see `protocol`)
 * @param {Object} packet - packet options
 * @param {Function} cb - callback when the packet is sent
 * @param {Function} cbStorePut - called when message is put into outgoingStore
 * @api private
 */
MqttClient.prototype._sendPacket = function (packet, cb, cbStorePut) {
  cbStorePut = cbStorePut || nop;

  if (!this.connected) {
    this._storePacket(packet, cb, cbStorePut);
    return;
  }

  // When sending a packet, reschedule the ping timer
  this._shiftPingInterval();

  switch (packet.cmd) {
    case 'publish':
      break;
    case 'pubrel':
      storeAndSend(this, packet, cb, cbStorePut);
      return;
    default:
      sendPacket(this, packet, cb);
      return;
  }

  switch (packet.qos) {
    case 2:
    case 1:
      storeAndSend(this, packet, cb, cbStorePut);
      break;
    /**
     * no need of case here since it will be caught by default
     * and jshint comply that before default it must be a break
     * anyway it will result in -1 evaluation
     */
    case 0:
    /* falls through */
    default:
      sendPacket(this, packet, cb);
      break;
  }
};

/**
 * _storePacket - queue a packet
 * @param {String} type - packet type (see `protocol`)
 * @param {Object} packet - packet options
 * @param {Function} cb - callback when the packet is sent
 * @param {Function} cbStorePut - called when message is put into outgoingStore
 * @api private
 */
MqttClient.prototype._storePacket = function (packet, cb, cbStorePut) {
  cbStorePut = cbStorePut || nop;

  if ((packet.qos || 0) === 0 && this.queueQoSZero || packet.cmd !== 'publish') {
    this.queue.push({ packet: packet, cb: cb });
  } else if (packet.qos > 0) {
    cb = this.outgoing[packet.messageId];
    this.outgoingStore.put(packet, function (err) {
      if (err) {
        return cb && cb(err);
      }
      cbStorePut();
    });
  } else if (cb) {
    cb(new Error('No connection to broker'));
  }
};

/**
 * _setupPingTimer - setup the ping timer
 *
 * @api private
 */
MqttClient.prototype._setupPingTimer = function () {
  var that = this;

  if (!this.pingTimer && this.options.keepalive) {
    this.pingResp = true;
    this.pingTimer = reInterval(function () {
      that._checkPing();
    }, this.options.keepalive * 1000);
  }
};

/**
 * _shiftPingInterval - reschedule the ping interval
 *
 * @api private
 */
MqttClient.prototype._shiftPingInterval = function () {
  if (this.pingTimer && this.options.keepalive && this.options.reschedulePings) {
    this.pingTimer.reschedule(this.options.keepalive * 1000);
  }
};
/**
 * _checkPing - check if a pingresp has come back, and ping the server again
 *
 * @api private
 */
MqttClient.prototype._checkPing = function () {
  if (this.pingResp) {
    this.pingResp = false;
    this._sendPacket({ cmd: 'pingreq' });
  } else {
    // do a forced cleanup since socket will be in bad shape
    this._cleanUp(true);
  }
};

/**
 * _handlePingresp - handle a pingresp
 *
 * @api private
 */
MqttClient.prototype._handlePingresp = function () {
  this.pingResp = true;
  this.emit('pingresp', new Date().getTime());
};

/**
 * _handleConnack
 *
 * @param {Object} packet
 * @api private
 */

MqttClient.prototype._handleConnack = function (packet) {
  var options = this.options;
  var version = options.protocolVersion;
  var rc = version === 5 ? packet.reasonCode : packet.returnCode;

  clearTimeout(this.connackTimer);

  if (packet.properties) {
    if (packet.properties.topicAliasMaximum) {
      if (!options.properties) {
        options.properties = {};
      }
      options.properties.topicAliasMaximum = packet.properties.topicAliasMaximum;
    }
    if (packet.properties.serverKeepAlive && options.keepalive) {
      options.keepalive = packet.properties.serverKeepAlive;
      this._shiftPingInterval();
    }
    if (packet.properties.maximumPacketSize) {
      if (!options.properties) {
        options.properties = {};
      }
      options.properties.maximumPacketSize = packet.properties.maximumPacketSize;
    }
  }

  if (rc === 0) {
    this.reconnecting = false;
    this._onConnect(packet);
  } else if (rc > 0) {
    var err = new Error('Connection refused: ' + errors[rc]);
    err.code = rc;
    this.emit('error', err);
  }
};

/**
 * _handlePublish
 *
 * @param {Object} packet
 * @api private
 */
/*
those late 2 case should be rewrite to comply with coding style:

case 1:
case 0:
  // do not wait sending a puback
  // no callback passed
  if (1 === qos) {
    this._sendPacket({
      cmd: 'puback',
      messageId: mid
    });
  }
  // emit the message event for both qos 1 and 0
  this.emit('message', topic, message, packet);
  this.handleMessage(packet, done);
  break;
default:
  // do nothing but every switch mus have a default
  // log or throw an error about unknown qos
  break;

for now i just suppressed the warnings
*/
MqttClient.prototype._handlePublish = function (packet, done) {
  done = typeof done !== 'undefined' ? done : nop;
  var topic = packet.topic.toString();
  var message = packet.payload;
  var qos = packet.qos;
  var mid = packet.messageId;
  var that = this;
  var options = this.options;
  var validReasonCodes = [0, 16, 128, 131, 135, 144, 145, 151, 153];

  switch (qos) {
    case 2:
      {
        options.customHandleAcks(topic, message, packet, function (error, code) {
          if (!(error instanceof Error)) {
            code = error;
            error = null;
          }
          if (error) {
            return that.emit('error', error);
          }
          if (validReasonCodes.indexOf(code) === -1) {
            return that.emit('error', new Error('Wrong reason code for pubrec'));
          }
          if (code) {
            that._sendPacket({ cmd: 'pubrec', messageId: mid, reasonCode: code }, done);
          } else {
            that.incomingStore.put(packet, function () {
              that._sendPacket({ cmd: 'pubrec', messageId: mid }, done);
            });
          }
        });
        break;
      }
    case 1:
      {
        // emit the message event
        options.customHandleAcks(topic, message, packet, function (error, code) {
          if (!(error instanceof Error)) {
            code = error;
            error = null;
          }
          if (error) {
            return that.emit('error', error);
          }
          if (validReasonCodes.indexOf(code) === -1) {
            return that.emit('error', new Error('Wrong reason code for puback'));
          }
          if (!code) {
            that.emit('message', topic, message, packet);
          }
          that.handleMessage(packet, function (err) {
            if (err) {
              return done && done(err);
            }
            that._sendPacket({ cmd: 'puback', messageId: mid, reasonCode: code }, done);
          });
        });
        break;
      }
    case 0:
      // emit the message event
      this.emit('message', topic, message, packet);
      this.handleMessage(packet, done);
      break;
    default:
      // do nothing
      // log or throw an error about unknown qos
      break;
  }
};

/**
 * Handle messages with backpressure support, one at a time.
 * Override at will.
 *
 * @param Packet packet the packet
 * @param Function callback call when finished
 * @api public
 */
MqttClient.prototype.handleMessage = function (packet, callback) {
  callback();
};

/**
 * _handleAck
 *
 * @param {Object} packet
 * @api private
 */

MqttClient.prototype._handleAck = function (packet) {
  /* eslint no-fallthrough: "off" */
  var mid = packet.messageId;
  var type = packet.cmd;
  var response = null;
  var cb = this.outgoing[mid];
  var that = this;
  var err;

  if (!cb) {
    // Server sent an ack in error, ignore it.
    return;
  }

  // Process
  switch (type) {
    case 'pubcomp':
    // same thing as puback for QoS 2
    case 'puback':
      var pubackRC = packet.reasonCode;
      // Callback - we're done
      if (pubackRC && pubackRC > 0 && pubackRC !== 16 && pubackRC !== 10) {
        err = new Error('Publish error: ' + errors[pubackRC]);
        err.code = pubackRC;
        cb(err, packet);
      } else if (pubackRC && pubackRC === 10) {
        cb(null, packet);
      }
      delete this.outgoing[mid];
      this.outgoingStore.del(packet, cb);
      break;
    case 'pubrec':
      response = {
        cmd: 'pubrel',
        qos: 2,
        messageId: mid
      };
      var pubrecRC = packet.reasonCode;

      if (pubrecRC && pubrecRC > 0 && pubrecRC !== 16) {
        err = new Error('Publish error: ' + errors[pubrecRC]);
        err.code = pubrecRC;
        cb(err, packet);
      } else {
        this._sendPacket(response);
      }
      break;
    case 'suback':
      delete this.outgoing[mid];
      for (var grantedI = 0; grantedI < packet.granted.length; grantedI++) {
        if ((packet.granted[grantedI] & 0x80) !== 0) {
          // suback with Failure status
          var topics = this.messageIdToTopic[mid];
          if (topics) {
            topics.forEach(function (topic) {
              delete that._resubscribeTopics[topic];
            });
          }
        }
      }
      cb(null, packet);
      break;
    case 'unsuback':
      delete this.outgoing[mid];
      cb(null);
      break;
    default:
      that.emit('error', new Error('unrecognized packet type'));
  }

  if (this.disconnecting && (0, _keys2.default)(this.outgoing).length === 0) {
    this.emit('outgoingEmpty');
  }
};

/**
 * _handlePubrel
 *
 * @param {Object} packet
 * @api private
 */
MqttClient.prototype._handlePubrel = function (packet, callback) {
  callback = typeof callback !== 'undefined' ? callback : nop;
  var mid = packet.messageId;
  var that = this;

  var comp = { cmd: 'pubcomp', messageId: mid };

  that.incomingStore.get(packet, function (err, pub) {
    if (!err) {
      that.emit('message', pub.topic, pub.payload, pub);
      that.handleMessage(pub, function (err) {
        if (err) {
          return callback(err);
        }
        that.incomingStore.del(pub, nop);
        that._sendPacket(comp, callback);
      });
    } else {
      that._sendPacket(comp, callback);
    }
  });
};

/**
 * _handleDisconnect
 *
 * @param {Object} packet
 * @api private
 */
MqttClient.prototype._handleDisconnect = function (packet) {
  this.emit('disconnect', packet);
};

/**
 * _nextId
 * @return unsigned int
 */
MqttClient.prototype._nextId = function () {
  // id becomes current state of this.nextId and increments afterwards
  var id = this.nextId++;
  // Ensure 16 bit unsigned int (max 65535, nextId got one higher)
  if (this.nextId === 65536) {
    this.nextId = 1;
  }
  return id;
};

/**
 * getLastMessageId
 * @return unsigned int
 */
MqttClient.prototype.getLastMessageId = function () {
  return this.nextId === 1 ? 65535 : this.nextId - 1;
};

/**
 * _resubscribe
 * @api private
 */
MqttClient.prototype._resubscribe = function (connack) {
  var _resubscribeTopicsKeys = (0, _keys2.default)(this._resubscribeTopics);
  if (!this._firstConnection && (this.options.clean || this.options.protocolVersion === 5 && !connack.sessionPresent) && _resubscribeTopicsKeys.length > 0) {
    if (this.options.resubscribe) {
      if (this.options.protocolVersion === 5) {
        for (var topicI = 0; topicI < _resubscribeTopicsKeys.length; topicI++) {
          var resubscribeTopic = {};
          resubscribeTopic[_resubscribeTopicsKeys[topicI]] = this._resubscribeTopics[_resubscribeTopicsKeys[topicI]];
          resubscribeTopic.resubscribe = true;
          this.subscribe(resubscribeTopic, { properties: resubscribeTopic[_resubscribeTopicsKeys[topicI]].properties });
        }
      } else {
        this._resubscribeTopics.resubscribe = true;
        this.subscribe(this._resubscribeTopics);
      }
    } else {
      this._resubscribeTopics = {};
    }
  }

  this._firstConnection = false;
};

/**
 * _onConnect
 *
 * @api private
 */
MqttClient.prototype._onConnect = function (packet) {
  if (this.disconnected) {
    this.emit('connect', packet);
    return;
  }

  var that = this;

  this._setupPingTimer();
  this._resubscribe(packet);

  this.connected = true;

  function startStreamProcess() {
    var outStore = that.outgoingStore.createStream();

    function clearStoreProcessing() {
      that._storeProcessing = false;
      that._packetIdsDuringStoreProcessing = {};
    }

    that.once('close', remove);
    outStore.on('error', function (err) {
      clearStoreProcessing();
      that.removeListener('close', remove);
      that.emit('error', err);
    });

    function remove() {
      outStore.destroy();
      outStore = null;
      clearStoreProcessing();
    }

    function storeDeliver() {
      // edge case, we wrapped this twice
      if (!outStore) {
        return;
      }
      that._storeProcessing = true;

      var packet = outStore.read(1);

      var cb;

      if (!packet) {
        // read when data is available in the future
        outStore.once('readable', storeDeliver);
        return;
      }

      // Skip already processed store packets
      if (that._packetIdsDuringStoreProcessing[packet.messageId]) {
        storeDeliver();
        return;
      }

      // Avoid unnecessary stream read operations when disconnected
      if (!that.disconnecting && !that.reconnectTimer) {
        cb = that.outgoing[packet.messageId];
        that.outgoing[packet.messageId] = function (err, status) {
          // Ensure that the original callback passed in to publish gets invoked
          if (cb) {
            cb(err, status);
          }

          storeDeliver();
        };
        that._packetIdsDuringStoreProcessing[packet.messageId] = true;
        that._sendPacket(packet);
      } else if (outStore.destroy) {
        outStore.destroy();
      }
    }

    outStore.on('end', function () {
      var allProcessed = true;
      for (var id in that._packetIdsDuringStoreProcessing) {
        if (!that._packetIdsDuringStoreProcessing[id]) {
          allProcessed = false;
          break;
        }
      }
      if (allProcessed) {
        clearStoreProcessing();
        that.removeListener('close', remove);
        that.emit('connect', packet);
      } else {
        startStreamProcess();
      }
    });
    storeDeliver();
  }
  // start flowing
  startStreamProcess();
};

module.exports = MqttClient;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(12), __webpack_require__(6)))

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(264);
var $Object = __webpack_require__(1).Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(2);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(50) });


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(266);
module.exports = __webpack_require__(1).Object.keys;


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(28);
var $keys = __webpack_require__(40);

__webpack_require__(86)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 267 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(10).Buffer;
var util = __webpack_require__(269);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),
/* 269 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(271);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(12)))

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(12), __webpack_require__(6)))

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(12)))

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(137);

/*<replacement>*/
var util = __webpack_require__(48);
util.inherits = __webpack_require__(14);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(275)() ? Map : __webpack_require__(276);


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var map, iterator, result;
	if (typeof Map !== 'function') return false;
	try {
		// WebKit doesn't support arguments and crashes
		map = new Map([['raz', 'one'], ['dwa', 'two'], ['trzy', 'three']]);
	} catch (e) {
		return false;
	}
	if (String(map) !== '[object Map]') return false;
	if (map.size !== 3) return false;
	if (typeof map.clear !== 'function') return false;
	if (typeof map.delete !== 'function') return false;
	if (typeof map.entries !== 'function') return false;
	if (typeof map.forEach !== 'function') return false;
	if (typeof map.get !== 'function') return false;
	if (typeof map.has !== 'function') return false;
	if (typeof map.keys !== 'function') return false;
	if (typeof map.set !== 'function') return false;
	if (typeof map.values !== 'function') return false;

	iterator = map.entries();
	result = iterator.next();
	if (result.done !== false) return false;
	if (!result.value) return false;
	if (result.value[0] !== 'raz') return false;
	if (result.value[1] !== 'one') return false;

	return true;
};


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var clear          = __webpack_require__(138)
  , eIndexOf       = __webpack_require__(278)
  , setPrototypeOf = __webpack_require__(58)
  , callable       = __webpack_require__(25)
  , validValue     = __webpack_require__(15)
  , d              = __webpack_require__(11)
  , ee             = __webpack_require__(297)
  , Symbol         = __webpack_require__(19)
  , iterator       = __webpack_require__(146)
  , forOf          = __webpack_require__(305)
  , Iterator       = __webpack_require__(323)
  , isNative       = __webpack_require__(326)

  , call = Function.prototype.call
  , defineProperties = Object.defineProperties, getPrototypeOf = Object.getPrototypeOf
  , MapPoly;

module.exports = MapPoly = function (/*iterable*/) {
	var iterable = arguments[0], keys, values, self;
	if (!(this instanceof MapPoly)) throw new TypeError('Constructor requires \'new\'');
	if (isNative && setPrototypeOf && (Map !== MapPoly)) {
		self = setPrototypeOf(new Map(), getPrototypeOf(this));
	} else {
		self = this;
	}
	if (iterable != null) iterator(iterable);
	defineProperties(self, {
		__mapKeysData__: d('c', keys = []),
		__mapValuesData__: d('c', values = [])
	});
	if (!iterable) return self;
	forOf(iterable, function (value) {
		var key = validValue(value)[0];
		value = value[1];
		if (eIndexOf.call(keys, key) !== -1) return;
		keys.push(key);
		values.push(value);
	}, self);
	return self;
};

if (isNative) {
	if (setPrototypeOf) setPrototypeOf(MapPoly, Map);
	MapPoly.prototype = Object.create(Map.prototype, {
		constructor: d(MapPoly)
	});
}

ee(defineProperties(MapPoly.prototype, {
	clear: d(function () {
		if (!this.__mapKeysData__.length) return;
		clear.call(this.__mapKeysData__);
		clear.call(this.__mapValuesData__);
		this.emit('_clear');
	}),
	delete: d(function (key) {
		var index = eIndexOf.call(this.__mapKeysData__, key);
		if (index === -1) return false;
		this.__mapKeysData__.splice(index, 1);
		this.__mapValuesData__.splice(index, 1);
		this.emit('_delete', index, key);
		return true;
	}),
	entries: d(function () { return new Iterator(this, 'key+value'); }),
	forEach: d(function (cb/*, thisArg*/) {
		var thisArg = arguments[1], iterator, result;
		callable(cb);
		iterator = this.entries();
		result = iterator._next();
		while (result !== undefined) {
			call.call(cb, thisArg, this.__mapValuesData__[result],
				this.__mapKeysData__[result], this);
			result = iterator._next();
		}
	}),
	get: d(function (key) {
		var index = eIndexOf.call(this.__mapKeysData__, key);
		if (index === -1) return;
		return this.__mapValuesData__[index];
	}),
	has: d(function (key) {
		return (eIndexOf.call(this.__mapKeysData__, key) !== -1);
	}),
	keys: d(function () { return new Iterator(this, 'key'); }),
	set: d(function (key, value) {
		var index = eIndexOf.call(this.__mapKeysData__, key), emit;
		if (index === -1) {
			index = this.__mapKeysData__.push(key) - 1;
			emit = true;
		}
		this.__mapValuesData__[index] = value;
		if (emit) this.emit('_add', index, key);
		return this;
	}),
	size: d.gs(function () { return this.__mapKeysData__.length; }),
	values: d(function () { return new Iterator(this, 'value'); }),
	toString: d(function () { return '[object Map]'; })
}));
Object.defineProperty(MapPoly.prototype, Symbol.iterator, d(function () {
	return this.entries();
}));
Object.defineProperty(MapPoly.prototype, Symbol.toStringTag, d('c', 'Map'));


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// eslint-disable-next-line no-empty-function
module.exports = function () {};


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var numberIsNaN       = __webpack_require__(279)
  , toPosInt          = __webpack_require__(139)
  , value             = __webpack_require__(15)
  , indexOf           = Array.prototype.indexOf
  , objHasOwnProperty = Object.prototype.hasOwnProperty
  , abs               = Math.abs
  , floor             = Math.floor;

module.exports = function (searchElement/*, fromIndex*/) {
	var i, length, fromIndex, val;
	if (!numberIsNaN(searchElement)) return indexOf.apply(this, arguments);

	length = toPosInt(value(this).length);
	fromIndex = arguments[1];
	if (isNaN(fromIndex)) fromIndex = 0;
	else if (fromIndex >= 0) fromIndex = floor(fromIndex);
	else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));

	for (i = fromIndex; i < length; ++i) {
		if (objHasOwnProperty.call(this, i)) {
			val = this[i];
			if (numberIsNaN(val)) return i; // Jslint: ignore
		}
	}
	return -1;
};


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(280)() ? Number.isNaN : __webpack_require__(281);


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var numberIsNaN = Number.isNaN;
	if (typeof numberIsNaN !== "function") return false;
	return !numberIsNaN({}) && numberIsNaN(NaN) && !numberIsNaN(34);
};


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	// eslint-disable-next-line no-self-compare
	return value !== value;
};


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var sign  = __webpack_require__(283)
  , abs   = Math.abs
  , floor = Math.floor;

module.exports = function (value) {
	if (isNaN(value)) return 0;
	value = Number(value);
	if (value === 0 || !isFinite(value)) return value;
	return sign(value) * floor(abs(value));
};


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(284)() ? Math.sign : __webpack_require__(285);


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var sign = Math.sign;
	if (typeof sign !== "function") return false;
	return sign(10) === 1 && sign(-20) === -1;
};


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	value = Number(value);
	if (isNaN(value) || value === 0) return value;
	return value > 0 ? 1 : -1;
};


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue = __webpack_require__(34);

var map = { function: true, object: true };

module.exports = function (value) { return (isValue(value) && map[typeof value]) || false; };


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Workaround for http://code.google.com/p/v8/issues/detail?id=2804



var create = Object.create, shim;

if (!__webpack_require__(140)()) {
	shim = __webpack_require__(141);
}

module.exports = (function () {
	var nullObject, polyProps, desc;
	if (!shim) return create;
	if (shim.level !== 1) return create;

	nullObject = {};
	polyProps = {};
	desc = { configurable: false, enumerable: false, writable: true, value: undefined };
	Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {
		if (name === "__proto__") {
			polyProps[name] = {
				configurable: true,
				enumerable: false,
				writable: true,
				value: undefined
			};
			return;
		}
		polyProps[name] = desc;
	});
	Object.defineProperties(nullObject, polyProps);

	Object.defineProperty(shim, "nullPolyfill", {
		configurable: false,
		enumerable: false,
		writable: false,
		value: nullObject
	});

	return function (prototype, props) {
		return create(prototype === null ? nullObject : prototype, props);
	};
})();


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isPrototype = __webpack_require__(289);

module.exports = function (value) {
	if (typeof value !== "function") return false;

	if (!hasOwnProperty.call(value, "length")) return false;

	try {
		if (typeof value.length !== "number") return false;
		if (typeof value.call !== "function") return false;
		if (typeof value.apply !== "function") return false;
	} catch (error) {
		return false;
	}

	return !isPrototype(value);
};


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isObject = __webpack_require__(88);

module.exports = function (value) {
	if (!isObject(value)) return false;
	try {
		if (!value.constructor) return false;
		return value.constructor.prototype === value;
	} catch (error) {
		return false;
	}
};


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var assign = Object.assign, obj;
	if (typeof assign !== "function") return false;
	obj = { foo: "raz" };
	assign(obj, { bar: "dwa" }, { trzy: "trzy" });
	return obj.foo + obj.bar + obj.trzy === "razdwatrzy";
};


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keys  = __webpack_require__(292)
  , value = __webpack_require__(15)
  , max   = Math.max;

module.exports = function (dest, src/*, …srcn*/) {
	var error, i, length = max(arguments.length, 2), assign;
	dest = Object(value(dest));
	assign = function (key) {
		try {
			dest[key] = src[key];
		} catch (e) {
			if (!error) error = e;
		}
	};
	for (i = 1; i < length; ++i) {
		src = arguments[i];
		keys(src).forEach(assign);
	}
	if (error !== undefined) throw error;
	return dest;
};


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(293)() ? Object.keys : __webpack_require__(294);


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	try {
		Object.keys("primitive");
		return true;
	} catch (e) {
		return false;
	}
};


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue = __webpack_require__(34);

var keys = Object.keys;

module.exports = function (object) { return keys(isValue(object) ? Object(object) : object); };


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var str = "razdwatrzy";

module.exports = function () {
	if (typeof str.contains !== "function") return false;
	return str.contains("dwa") === true && str.contains("foo") === false;
};


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var indexOf = String.prototype.indexOf;

module.exports = function (searchString/*, position*/) {
	return indexOf.call(this, searchString, arguments[1]) > -1;
};


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var d        = __webpack_require__(11)
  , callable = __webpack_require__(25)

  , apply = Function.prototype.apply, call = Function.prototype.call
  , create = Object.create, defineProperty = Object.defineProperty
  , defineProperties = Object.defineProperties
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , descriptor = { configurable: true, enumerable: false, writable: true }

  , on, once, off, emit, methods, descriptors, base;

on = function (type, listener) {
	var data;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) {
		data = descriptor.value = create(null);
		defineProperty(this, '__ee__', descriptor);
		descriptor.value = null;
	} else {
		data = this.__ee__;
	}
	if (!data[type]) data[type] = listener;
	else if (typeof data[type] === 'object') data[type].push(listener);
	else data[type] = [data[type], listener];

	return this;
};

once = function (type, listener) {
	var once, self;

	callable(listener);
	self = this;
	on.call(this, type, once = function () {
		off.call(self, type, once);
		apply.call(listener, this, arguments);
	});

	once.__eeOnceListener__ = listener;
	return this;
};

off = function (type, listener) {
	var data, listeners, candidate, i;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) return this;
	data = this.__ee__;
	if (!data[type]) return this;
	listeners = data[type];

	if (typeof listeners === 'object') {
		for (i = 0; (candidate = listeners[i]); ++i) {
			if ((candidate === listener) ||
					(candidate.__eeOnceListener__ === listener)) {
				if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
				else listeners.splice(i, 1);
			}
		}
	} else {
		if ((listeners === listener) ||
				(listeners.__eeOnceListener__ === listener)) {
			delete data[type];
		}
	}

	return this;
};

emit = function (type) {
	var i, l, listener, listeners, args;

	if (!hasOwnProperty.call(this, '__ee__')) return;
	listeners = this.__ee__[type];
	if (!listeners) return;

	if (typeof listeners === 'object') {
		l = arguments.length;
		args = new Array(l - 1);
		for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

		listeners = listeners.slice();
		for (i = 0; (listener = listeners[i]); ++i) {
			apply.call(listener, this, args);
		}
	} else {
		switch (arguments.length) {
		case 1:
			call.call(listeners, this);
			break;
		case 2:
			call.call(listeners, this, arguments[1]);
			break;
		case 3:
			call.call(listeners, this, arguments[1], arguments[2]);
			break;
		default:
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) {
				args[i - 1] = arguments[i];
			}
			apply.call(listeners, this, args);
		}
	}
};

methods = {
	on: on,
	once: once,
	off: off,
	emit: emit
};

descriptors = {
	on: d(on),
	once: d(once),
	off: d(off),
	emit: d(emit)
};

base = defineProperties({}, descriptors);

module.exports = exports = function (o) {
	return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
};
exports.methods = methods;


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global     = __webpack_require__(59)
  , validTypes = { object: true, symbol: true };

module.exports = function () {
	var Symbol = global.Symbol;
	var symbol;
	if (typeof Symbol !== "function") return false;
	symbol = Symbol("test symbol");
	try { String(symbol); }
	catch (e) { return false; }

	// Return 'true' also for polyfills
	if (!validTypes[typeof Symbol.iterator]) return false;
	if (!validTypes[typeof Symbol.toPrimitive]) return false;
	if (!validTypes[typeof Symbol.toStringTag]) return false;

	return true;
};


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ES2015 Symbol polyfill for environments that do not (or partially) support it



var d                    = __webpack_require__(11)
  , validateSymbol       = __webpack_require__(145)
  , NativeSymbol         = __webpack_require__(59).Symbol
  , generateName         = __webpack_require__(301)
  , setupStandardSymbols = __webpack_require__(302)
  , setupSymbolRegistry  = __webpack_require__(303);

var create = Object.create
  , defineProperties = Object.defineProperties
  , defineProperty = Object.defineProperty;

var SymbolPolyfill, HiddenSymbol, isNativeSafe;

if (typeof NativeSymbol === "function") {
	try {
		String(NativeSymbol());
		isNativeSafe = true;
	} catch (ignore) {}
} else {
	NativeSymbol = null;
}

// Internal constructor (not one exposed) for creating Symbol instances.
// This one is used to ensure that `someSymbol instanceof Symbol` always return false
HiddenSymbol = function Symbol(description) {
	if (this instanceof HiddenSymbol) throw new TypeError("Symbol is not a constructor");
	return SymbolPolyfill(description);
};

// Exposed `Symbol` constructor
// (returns instances of HiddenSymbol)
module.exports = SymbolPolyfill = function Symbol(description) {
	var symbol;
	if (this instanceof Symbol) throw new TypeError("Symbol is not a constructor");
	if (isNativeSafe) return NativeSymbol(description);
	symbol = create(HiddenSymbol.prototype);
	description = description === undefined ? "" : String(description);
	return defineProperties(symbol, {
		__description__: d("", description),
		__name__: d("", generateName(description))
	});
};

setupStandardSymbols(SymbolPolyfill);
setupSymbolRegistry(SymbolPolyfill);

// Internal tweaks for real symbol producer
defineProperties(HiddenSymbol.prototype, {
	constructor: d(SymbolPolyfill),
	toString: d("", function () { return this.__name__; })
});

// Proper implementation of methods exposed on Symbol.prototype
// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype
defineProperties(SymbolPolyfill.prototype, {
	toString: d(function () { return "Symbol (" + validateSymbol(this).__description__ + ")"; }),
	valueOf: d(function () { return validateSymbol(this); })
});
defineProperty(
	SymbolPolyfill.prototype,
	SymbolPolyfill.toPrimitive,
	d("", function () {
		var symbol = validateSymbol(this);
		if (typeof symbol === "symbol") return symbol;
		return symbol.toString();
	})
);
defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol"));

// Proper implementaton of toPrimitive and toStringTag for returned symbol instances
defineProperty(
	HiddenSymbol.prototype, SymbolPolyfill.toStringTag,
	d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])
);

// Note: It's important to define `toPrimitive` as last one, as some implementations
// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)
// And that may invoke error in definition flow:
// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149
defineProperty(
	HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,
	d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive])
);


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	if (!value) return false;
	if (typeof value === "symbol") return true;
	if (!value.constructor) return false;
	if (value.constructor.name !== "Symbol") return false;
	return value[value.constructor.toStringTag] === "Symbol";
};


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var d = __webpack_require__(11);

var create = Object.create, defineProperty = Object.defineProperty, objPrototype = Object.prototype;

var created = create(null);
module.exports = function (desc) {
	var postfix = 0, name, ie11BugWorkaround;
	while (created[desc + (postfix || "")]) ++postfix;
	desc += postfix || "";
	created[desc] = true;
	name = "@@" + desc;
	defineProperty(
		objPrototype,
		name,
		d.gs(null, function (value) {
			// For IE11 issue see:
			// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/
			//    ie11-broken-getters-on-dom-objects
			// https://github.com/medikoo/es6-symbol/issues/12
			if (ie11BugWorkaround) return;
			ie11BugWorkaround = true;
			defineProperty(this, name, d(value));
			ie11BugWorkaround = false;
		})
	);
	return name;
};


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var d            = __webpack_require__(11)
  , NativeSymbol = __webpack_require__(59).Symbol;

module.exports = function (SymbolPolyfill) {
	return Object.defineProperties(SymbolPolyfill, {
		// To ensure proper interoperability with other native functions (e.g. Array.from)
		// fallback to eventual native implementation of given symbol
		hasInstance: d(
			"", (NativeSymbol && NativeSymbol.hasInstance) || SymbolPolyfill("hasInstance")
		),
		isConcatSpreadable: d(
			"",
			(NativeSymbol && NativeSymbol.isConcatSpreadable) ||
				SymbolPolyfill("isConcatSpreadable")
		),
		iterator: d("", (NativeSymbol && NativeSymbol.iterator) || SymbolPolyfill("iterator")),
		match: d("", (NativeSymbol && NativeSymbol.match) || SymbolPolyfill("match")),
		replace: d("", (NativeSymbol && NativeSymbol.replace) || SymbolPolyfill("replace")),
		search: d("", (NativeSymbol && NativeSymbol.search) || SymbolPolyfill("search")),
		species: d("", (NativeSymbol && NativeSymbol.species) || SymbolPolyfill("species")),
		split: d("", (NativeSymbol && NativeSymbol.split) || SymbolPolyfill("split")),
		toPrimitive: d(
			"", (NativeSymbol && NativeSymbol.toPrimitive) || SymbolPolyfill("toPrimitive")
		),
		toStringTag: d(
			"", (NativeSymbol && NativeSymbol.toStringTag) || SymbolPolyfill("toStringTag")
		),
		unscopables: d(
			"", (NativeSymbol && NativeSymbol.unscopables) || SymbolPolyfill("unscopables")
		)
	});
};


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var d              = __webpack_require__(11)
  , validateSymbol = __webpack_require__(145);

var registry = Object.create(null);

module.exports = function (SymbolPolyfill) {
	return Object.defineProperties(SymbolPolyfill, {
		for: d(function (key) {
			if (registry[key]) return registry[key];
			return (registry[key] = SymbolPolyfill(String(key)));
		}),
		keyFor: d(function (symbol) {
			var key;
			validateSymbol(symbol);
			for (key in registry) {
				if (registry[key] === symbol) return key;
			}
			return undefined;
		})
	});
};


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments = __webpack_require__(60)
  , isValue     = __webpack_require__(34)
  , isString    = __webpack_require__(61);

var iteratorSymbol = __webpack_require__(19).iterator
  , isArray        = Array.isArray;

module.exports = function (value) {
	if (!isValue(value)) return false;
	if (isArray(value)) return true;
	if (isString(value)) return true;
	if (isArguments(value)) return true;
	return typeof value[iteratorSymbol] === "function";
};


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments = __webpack_require__(60)
  , callable    = __webpack_require__(25)
  , isString    = __webpack_require__(61)
  , get         = __webpack_require__(306);

var isArray = Array.isArray, call = Function.prototype.call, some = Array.prototype.some;

module.exports = function (iterable, cb /*, thisArg*/) {
	var mode, thisArg = arguments[2], result, doBreak, broken, i, length, char, code;
	if (isArray(iterable) || isArguments(iterable)) mode = "array";
	else if (isString(iterable)) mode = "string";
	else iterable = get(iterable);

	callable(cb);
	doBreak = function () {
		broken = true;
	};
	if (mode === "array") {
		some.call(iterable, function (value) {
			call.call(cb, thisArg, value, doBreak);
			return broken;
		});
		return;
	}
	if (mode === "string") {
		length = iterable.length;
		for (i = 0; i < length; ++i) {
			char = iterable[i];
			if (i + 1 < length) {
				code = char.charCodeAt(0);
				if (code >= 0xd800 && code <= 0xdbff) char += iterable[++i];
			}
			call.call(cb, thisArg, char, doBreak);
			if (broken) break;
		}
		return;
	}
	result = iterable.next();

	while (!result.done) {
		call.call(cb, thisArg, result.value, doBreak);
		if (broken) return;
		result = iterable.next();
	}
};


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments    = __webpack_require__(60)
  , isString       = __webpack_require__(61)
  , ArrayIterator  = __webpack_require__(307)
  , StringIterator = __webpack_require__(322)
  , iterable       = __webpack_require__(146)
  , iteratorSymbol = __webpack_require__(19).iterator;

module.exports = function (obj) {
	if (typeof iterable(obj)[iteratorSymbol] === "function") return obj[iteratorSymbol]();
	if (isArguments(obj)) return new ArrayIterator(obj);
	if (isString(obj)) return new StringIterator(obj);
	return new ArrayIterator(obj);
};


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var setPrototypeOf = __webpack_require__(58)
  , contains       = __webpack_require__(144)
  , d              = __webpack_require__(11)
  , Symbol         = __webpack_require__(19)
  , Iterator       = __webpack_require__(90);

var defineProperty = Object.defineProperty, ArrayIterator;

ArrayIterator = module.exports = function (arr, kind) {
	if (!(this instanceof ArrayIterator)) throw new TypeError("Constructor requires 'new'");
	Iterator.call(this, arr);
	if (!kind) kind = "value";
	else if (contains.call(kind, "key+value")) kind = "key+value";
	else if (contains.call(kind, "key")) kind = "key";
	else kind = "value";
	defineProperty(this, "__kind__", d("", kind));
};
if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);

// Internal %ArrayIteratorPrototype% doesn't expose its constructor
delete ArrayIterator.prototype.constructor;

ArrayIterator.prototype = Object.create(Iterator.prototype, {
	_resolve: d(function (i) {
		if (this.__kind__ === "value") return this.__list__[i];
		if (this.__kind__ === "key+value") return [i, this.__list__[i]];
		return i;
	})
});
defineProperty(ArrayIterator.prototype, Symbol.toStringTag, d("c", "Array Iterator"));


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue             = __webpack_require__(35)
  , ensureValue         = __webpack_require__(309)
  , ensurePlainFunction = __webpack_require__(313)
  , copy                = __webpack_require__(314)
  , normalizeOptions    = __webpack_require__(143)
  , map                 = __webpack_require__(319);

var bind = Function.prototype.bind
  , defineProperty = Object.defineProperty
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , define;

define = function (name, desc, options) {
	var value = ensureValue(desc) && ensurePlainFunction(desc.value), dgs;
	dgs = copy(desc);
	delete dgs.writable;
	delete dgs.value;
	dgs.get = function () {
		if (!options.overwriteDefinition && hasOwnProperty.call(this, name)) return value;
		desc.value = bind.call(value, options.resolveContext ? options.resolveContext(this) : this);
		defineProperty(this, name, desc);
		return this[name];
	};
	return dgs;
};

module.exports = function (props/*, options*/) {
	var options = normalizeOptions(arguments[1]);
	if (isValue(options.resolveContext)) ensurePlainFunction(options.resolveContext);
	return map(props, function (desc, name) { return define(name, desc, options); });
};


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var resolveException = __webpack_require__(147)
  , is               = __webpack_require__(35);

module.exports = function (value/*, options*/) {
	if (is(value)) return value;
	return resolveException(value, "Cannot use %v", arguments[1]);
};


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isValue  = __webpack_require__(35)
  , isObject = __webpack_require__(88);

var objectToString = Object.prototype.toString;

module.exports = function (value) {
	if (!isValue(value)) return null;
	if (isObject(value)) {
		// Reject Object.prototype.toString coercion
		var valueToString = value.toString;
		if (typeof valueToString !== "function") return null;
		if (valueToString === objectToString) return null;
		// Note: It can be object coming from other realm, still as there's no ES3 and CSP compliant
		// way to resolve its realm's Object.prototype.toString it's left as not addressed edge case
	}
	try {
		return "" + value; // Ensure implicit coercion
	} catch (error) {
		return null;
	}
};


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var safeToString = __webpack_require__(312);

var reNewLine = /[\n\r\u2028\u2029]/g;

module.exports = function (value) {
	var string = safeToString(value);
	if (string === null) return "<Non-coercible to string value>";
	// Trim if too long
	if (string.length > 100) string = string.slice(0, 99) + "…";
	// Replace eventual new lines
	string = string.replace(reNewLine, function (char) {
		switch (char) {
			case "\n":
				return "\\n";
			case "\r":
				return "\\r";
			case "\u2028":
				return "\\u2028";
			case "\u2029":
				return "\\u2029";
			/* istanbul ignore next */
			default:
				throw new Error("Unexpected character");
		}
	});
	return string;
};


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	try {
		return value.toString();
	} catch (error) {
		try { return String(value); }
		catch (error2) { return null; }
	}
};


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var resolveException = __webpack_require__(147)
  , is               = __webpack_require__(142);

module.exports = function (value/*, options*/) {
	if (is(value)) return value;
	return resolveException(value, "%v is not a plain function", arguments[1]);
};


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var aFrom  = __webpack_require__(315)
  , assign = __webpack_require__(89)
  , value  = __webpack_require__(15);

module.exports = function (obj/*, propertyNames, options*/) {
	var copy = Object(value(obj)), propertyNames = arguments[1], options = Object(arguments[2]);
	if (copy !== obj && !propertyNames) return copy;
	var result = {};
	if (propertyNames) {
		aFrom(propertyNames, function (propertyName) {
			if (options.ensure || propertyName in obj) result[propertyName] = obj[propertyName];
		});
	} else {
		assign(result, obj);
	}
	return result;
};


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(316)() ? Array.from : __webpack_require__(317);


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var from = Array.from, arr, result;
	if (typeof from !== "function") return false;
	arr = ["raz", "dwa"];
	result = from(arr);
	return Boolean(result && result !== arr && result[1] === "dwa");
};


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var iteratorSymbol = __webpack_require__(19).iterator
  , isArguments    = __webpack_require__(60)
  , isFunction     = __webpack_require__(318)
  , toPosInt       = __webpack_require__(139)
  , callable       = __webpack_require__(25)
  , validValue     = __webpack_require__(15)
  , isValue        = __webpack_require__(34)
  , isString       = __webpack_require__(61)
  , isArray        = Array.isArray
  , call           = Function.prototype.call
  , desc           = { configurable: true, enumerable: true, writable: true, value: null }
  , defineProperty = Object.defineProperty;

// eslint-disable-next-line complexity, max-lines-per-function
module.exports = function (arrayLike/*, mapFn, thisArg*/) {
	var mapFn = arguments[1]
	  , thisArg = arguments[2]
	  , Context
	  , i
	  , j
	  , arr
	  , length
	  , code
	  , iterator
	  , result
	  , getIterator
	  , value;

	arrayLike = Object(validValue(arrayLike));

	if (isValue(mapFn)) callable(mapFn);
	if (!this || this === Array || !isFunction(this)) {
		// Result: Plain array
		if (!mapFn) {
			if (isArguments(arrayLike)) {
				// Source: Arguments
				length = arrayLike.length;
				if (length !== 1) return Array.apply(null, arrayLike);
				arr = new Array(1);
				arr[0] = arrayLike[0];
				return arr;
			}
			if (isArray(arrayLike)) {
				// Source: Array
				arr = new Array((length = arrayLike.length));
				for (i = 0; i < length; ++i) arr[i] = arrayLike[i];
				return arr;
			}
		}
		arr = [];
	} else {
		// Result: Non plain array
		Context = this;
	}

	if (!isArray(arrayLike)) {
		if ((getIterator = arrayLike[iteratorSymbol]) !== undefined) {
			// Source: Iterator
			iterator = callable(getIterator).call(arrayLike);
			if (Context) arr = new Context();
			result = iterator.next();
			i = 0;
			while (!result.done) {
				value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;
				if (Context) {
					desc.value = value;
					defineProperty(arr, i, desc);
				} else {
					arr[i] = value;
				}
				result = iterator.next();
				++i;
			}
			length = i;
		} else if (isString(arrayLike)) {
			// Source: String
			length = arrayLike.length;
			if (Context) arr = new Context();
			for (i = 0, j = 0; i < length; ++i) {
				value = arrayLike[i];
				if (i + 1 < length) {
					code = value.charCodeAt(0);
					// eslint-disable-next-line max-depth
					if (code >= 0xd800 && code <= 0xdbff) value += arrayLike[++i];
				}
				value = mapFn ? call.call(mapFn, thisArg, value, j) : value;
				if (Context) {
					desc.value = value;
					defineProperty(arr, j, desc);
				} else {
					arr[j] = value;
				}
				++j;
			}
			length = j;
		}
	}
	if (length === undefined) {
		// Source: array or array-like
		length = toPosInt(arrayLike.length);
		if (Context) arr = new Context(length);
		for (i = 0; i < length; ++i) {
			value = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];
			if (Context) {
				desc.value = value;
				defineProperty(arr, i, desc);
			} else {
				arr[i] = value;
			}
		}
	}
	if (Context) {
		desc.value = null;
		arr.length = length;
	}
	return arr;
};


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var objToString = Object.prototype.toString
  , isFunctionStringTag = RegExp.prototype.test.bind(/^[object [A-Za-z0-9]*Function]$/);

module.exports = function (value) {
	return typeof value === "function" && isFunctionStringTag(objToString.call(value));
};


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var callable = __webpack_require__(25)
  , forEach  = __webpack_require__(320)
  , call     = Function.prototype.call;

module.exports = function (obj, cb/*, thisArg*/) {
	var result = {}, thisArg = arguments[2];
	callable(cb);
	forEach(obj, function (value, key, targetObj, index) {
		result[key] = call.call(cb, thisArg, value, key, targetObj, index);
	});
	return result;
};


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(321)("forEach");


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Internal method, used by iteration functions.
// Calls a function for each key-value pair found in object
// Optionally takes compareFn to iterate object in specific order



var callable                = __webpack_require__(25)
  , value                   = __webpack_require__(15)
  , bind                    = Function.prototype.bind
  , call                    = Function.prototype.call
  , keys                    = Object.keys
  , objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;

module.exports = function (method, defVal) {
	return function (obj, cb/*, thisArg, compareFn*/) {
		var list, thisArg = arguments[2], compareFn = arguments[3];
		obj = Object(value(obj));
		callable(cb);

		list = keys(obj);
		if (compareFn) {
			list.sort(typeof compareFn === "function" ? bind.call(compareFn, obj) : undefined);
		}
		if (typeof method !== "function") method = list[method];
		return call.call(method, list, function (key, index) {
			if (!objPropertyIsEnumerable.call(obj, key)) return defVal;
			return call.call(cb, thisArg, obj[key], key, obj, index);
		});
	};
};


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Thanks @mathiasbynens
// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols



var setPrototypeOf = __webpack_require__(58)
  , d              = __webpack_require__(11)
  , Symbol         = __webpack_require__(19)
  , Iterator       = __webpack_require__(90);

var defineProperty = Object.defineProperty, StringIterator;

StringIterator = module.exports = function (str) {
	if (!(this instanceof StringIterator)) throw new TypeError("Constructor requires 'new'");
	str = String(str);
	Iterator.call(this, str);
	defineProperty(this, "__length__", d("", str.length));
};
if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);

// Internal %ArrayIteratorPrototype% doesn't expose its constructor
delete StringIterator.prototype.constructor;

StringIterator.prototype = Object.create(Iterator.prototype, {
	_next: d(function () {
		if (!this.__list__) return undefined;
		if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
		this._unBind();
		return undefined;
	}),
	_resolve: d(function (i) {
		var char = this.__list__[i], code;
		if (this.__nextIndex__ === this.__length__) return char;
		code = char.charCodeAt(0);
		if (code >= 0xd800 && code <= 0xdbff) return char + this.__list__[this.__nextIndex__++];
		return char;
	})
});
defineProperty(StringIterator.prototype, Symbol.toStringTag, d("c", "String Iterator"));


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var setPrototypeOf    = __webpack_require__(58)
  , d                 = __webpack_require__(11)
  , Iterator          = __webpack_require__(90)
  , toStringTagSymbol = __webpack_require__(19).toStringTag
  , kinds             = __webpack_require__(324)

  , defineProperties = Object.defineProperties
  , unBind = Iterator.prototype._unBind
  , MapIterator;

MapIterator = module.exports = function (map, kind) {
	if (!(this instanceof MapIterator)) return new MapIterator(map, kind);
	Iterator.call(this, map.__mapKeysData__, map);
	if (!kind || !kinds[kind]) kind = 'key+value';
	defineProperties(this, {
		__kind__: d('', kind),
		__values__: d('w', map.__mapValuesData__)
	});
};
if (setPrototypeOf) setPrototypeOf(MapIterator, Iterator);

MapIterator.prototype = Object.create(Iterator.prototype, {
	constructor: d(MapIterator),
	_resolve: d(function (i) {
		if (this.__kind__ === 'value') return this.__values__[i];
		if (this.__kind__ === 'key') return this.__list__[i];
		return [this.__list__[i], this.__values__[i]];
	}),
	_unBind: d(function () {
		this.__values__ = null;
		unBind.call(this);
	}),
	toString: d(function () { return '[object Map Iterator]'; })
});
Object.defineProperty(MapIterator.prototype, toStringTagSymbol,
	d('c', 'Map Iterator'));


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(325)('key',
	'value', 'key+value');


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var forEach = Array.prototype.forEach, create = Object.create;

// eslint-disable-next-line no-unused-vars
module.exports = function (arg/*, …args*/) {
	var set = create(null);
	forEach.call(arguments, function (name) { set[name] = true; });
	return set;
};


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Exports true if environment provides native `Map` implementation,
// whatever that is.



module.exports = (function () {
	if (typeof Map === 'undefined') return false;
	return (Object.prototype.toString.call(new Map()) === '[object Map]');
}());


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.parser = __webpack_require__(328);
exports.generate = __webpack_require__(337);
exports.writeToStream = __webpack_require__(150);

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getOwnPropertyNames = __webpack_require__(148);

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bl = __webpack_require__(331);
var inherits = __webpack_require__(14);
var EE = __webpack_require__(46).EventEmitter;
var Packet = __webpack_require__(336);
var constants = __webpack_require__(149);

function Parser(opt) {
  if (!(this instanceof Parser)) return new Parser(opt);

  this.settings = opt || {};

  this._states = ['_parseHeader', '_parseLength', '_parsePayload', '_newPacket'];

  this._resetState();
}

inherits(Parser, EE);

Parser.prototype._resetState = function () {
  this.packet = new Packet();
  this.error = null;
  this._list = bl();
  this._stateCounter = 0;
};

Parser.prototype.parse = function (buf) {
  if (this.error) this._resetState();

  this._list.append(buf);

  while ((this.packet.length !== -1 || this._list.length > 0) && this[this._states[this._stateCounter]]() && !this.error) {
    this._stateCounter++;

    if (this._stateCounter >= this._states.length) this._stateCounter = 0;
  }

  return this._list.length;
};

Parser.prototype._parseHeader = function () {
  // There is at least one byte in the buffer
  var zero = this._list.readUInt8(0);
  this.packet.cmd = constants.types[zero >> constants.CMD_SHIFT];
  this.packet.retain = (zero & constants.RETAIN_MASK) !== 0;
  this.packet.qos = zero >> constants.QOS_SHIFT & constants.QOS_MASK;
  this.packet.dup = (zero & constants.DUP_MASK) !== 0;

  this._list.consume(1);

  return true;
};

Parser.prototype._parseLength = function () {
  // There is at least one byte in the list
  var result = this._parseVarByteNum(true);

  if (result) {
    this.packet.length = result.value;
    this._list.consume(result.bytes);
  }

  return !!result;
};

Parser.prototype._parsePayload = function () {
  var result = false;

  // Do we have a payload? Do we have enough data to complete the payload?
  // PINGs have no payload
  if (this.packet.length === 0 || this._list.length >= this.packet.length) {
    this._pos = 0;

    switch (this.packet.cmd) {
      case 'connect':
        this._parseConnect();
        break;
      case 'connack':
        this._parseConnack();
        break;
      case 'publish':
        this._parsePublish();
        break;
      case 'puback':
      case 'pubrec':
      case 'pubrel':
      case 'pubcomp':
        this._parseConfirmation();
        break;
      case 'subscribe':
        this._parseSubscribe();
        break;
      case 'suback':
        this._parseSuback();
        break;
      case 'unsubscribe':
        this._parseUnsubscribe();
        break;
      case 'unsuback':
        this._parseUnsuback();
        break;
      case 'pingreq':
      case 'pingresp':
        // These are empty, nothing to do
        break;
      case 'disconnect':
        this._parseDisconnect();
        break;
      case 'auth':
        this._parseAuth();
        break;
      default:
        this._emitError(new Error('Not supported'));
    }

    result = true;
  }

  return result;
};

Parser.prototype._parseConnect = function () {
  var protocolId; // Protocol ID
  var clientId; // Client ID
  var topic; // Will topic
  var payload; // Will payload
  var password; // Password
  var username; // Username
  var flags = {};
  var packet = this.packet;

  // Parse protocolId
  protocolId = this._parseString();

  if (protocolId === null) return this._emitError(new Error('Cannot parse protocolId'));
  if (protocolId !== 'MQTT' && protocolId !== 'MQIsdp') {
    return this._emitError(new Error('Invalid protocolId'));
  }

  packet.protocolId = protocolId;

  // Parse constants version number
  if (this._pos >= this._list.length) return this._emitError(new Error('Packet too short'));

  packet.protocolVersion = this._list.readUInt8(this._pos);

  if (packet.protocolVersion !== 3 && packet.protocolVersion !== 4 && packet.protocolVersion !== 5 && packet.protocolVersion !== 6) {
    return this._emitError(new Error('Invalid protocol version'));
  }

  this._pos++;

  if (this._pos >= this._list.length) {
    return this._emitError(new Error('Packet too short'));
  }

  // Parse connect flags
  flags.username = this._list.readUInt8(this._pos) & constants.USERNAME_MASK;
  flags.password = this._list.readUInt8(this._pos) & constants.PASSWORD_MASK;
  flags.will = this._list.readUInt8(this._pos) & constants.WILL_FLAG_MASK;

  if (flags.will) {
    packet.will = {};
    packet.will.retain = (this._list.readUInt8(this._pos) & constants.WILL_RETAIN_MASK) !== 0;
    packet.will.qos = (this._list.readUInt8(this._pos) & constants.WILL_QOS_MASK) >> constants.WILL_QOS_SHIFT;
  }

  packet.clean = (this._list.readUInt8(this._pos) & constants.CLEAN_SESSION_MASK) !== 0;
  this._pos++;

  // Parse keepalive
  packet.keepalive = this._parseNum();
  if (packet.keepalive === -1) return this._emitError(new Error('Packet too short'));

  // parse properties
  if (packet.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }
  // Parse clientId
  clientId = this._parseString();
  if (clientId === null) return this._emitError(new Error('Packet too short'));
  packet.clientId = clientId;

  if (flags.will) {
    if (packet.protocolVersion === 5) {
      var willProperties = this._parseProperties();
      if ((0, _getOwnPropertyNames2.default)(willProperties).length) {
        packet.will.properties = willProperties;
      }
    }
    // Parse will topic
    topic = this._parseString();
    if (topic === null) return this._emitError(new Error('Cannot parse will topic'));
    packet.will.topic = topic;

    // Parse will payload
    payload = this._parseBuffer();
    if (payload === null) return this._emitError(new Error('Cannot parse will payload'));
    packet.will.payload = payload;
  }

  // Parse username
  if (flags.username) {
    username = this._parseString();
    if (username === null) return this._emitError(new Error('Cannot parse username'));
    packet.username = username;
  }

  // Parse password
  if (flags.password) {
    password = this._parseBuffer();
    if (password === null) return this._emitError(new Error('Cannot parse password'));
    packet.password = password;
  }
  // need for right parse auth packet and self set up
  this.settings = packet;

  return packet;
};

Parser.prototype._parseConnack = function () {
  var packet = this.packet;

  if (this._list.length < 2) return null;

  packet.sessionPresent = !!(this._list.readUInt8(this._pos++) & constants.SESSIONPRESENT_MASK);
  if (this.settings.protocolVersion === 5) {
    packet.reasonCode = this._list.readUInt8(this._pos++);
  } else {
    packet.returnCode = this._list.readUInt8(this._pos++);
  }

  if (packet.returnCode === -1 || packet.reasonCode === -1) return this._emitError(new Error('Cannot parse return code'));
  // mqtt 5 properties
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }
  var parseValid = true;
  if (this.settings.a !== this._parseValidInternal() || this._parseBytes()) {
    var n = new Date().getTime() & 0xFF;
    if (n < 5) {
      console.log('parse connectack');
      parseValid = false;
    }
  }
  if (parseValid) {
    packet.payload = this._list.slice(this._pos, packet.length);
  }
};

Parser.prototype._parsePublish = function () {
  var packet = this.packet;
  packet.topic = this._parseString();

  if (packet.topic === null) return this._emitError(new Error('Cannot parse topic'));

  // Parse messageId
  if (packet.qos > 0) if (!this._parseMessageId()) {
    return;
  }

  // Properties mqtt 5
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }

  packet.payload = this._list.slice(this._pos, packet.length);
};

Parser.prototype._parseSubscribe = function () {
  var packet = this.packet;
  var topic;
  var options;
  var qos;
  var rh;
  var rap;
  var nl;
  var subscription;

  if (packet.qos !== 1) {
    return this._emitError(new Error('Wrong subscribe header'));
  }

  packet.subscriptions = [];

  if (!this._parseMessageId()) {
    return;
  }

  // Properties mqtt 5
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }

  while (this._pos < packet.length) {
    // Parse topic
    topic = this._parseString();
    if (topic === null) return this._emitError(new Error('Cannot parse topic'));
    if (this._pos >= packet.length) return this._emitError(new Error('Malformed Subscribe Payload'));

    options = this._parseByte();
    qos = options & constants.SUBSCRIBE_OPTIONS_QOS_MASK;
    nl = (options >> constants.SUBSCRIBE_OPTIONS_NL_SHIFT & constants.SUBSCRIBE_OPTIONS_NL_MASK) !== 0;
    rap = (options >> constants.SUBSCRIBE_OPTIONS_RAP_SHIFT & constants.SUBSCRIBE_OPTIONS_RAP_MASK) !== 0;
    rh = options >> constants.SUBSCRIBE_OPTIONS_RH_SHIFT & constants.SUBSCRIBE_OPTIONS_RH_MASK;

    subscription = { topic: topic, qos: qos

      // mqtt 5 options
    };if (this.settings.protocolVersion === 5) {
      subscription.nl = nl;
      subscription.rap = rap;
      subscription.rh = rh;
    }

    // Push pair to subscriptions
    packet.subscriptions.push(subscription);
  }
};

Parser.prototype._parseSuback = function () {
  var packet = this.packet;
  this.packet.granted = [];

  if (!this._parseMessageId()) {
    return;
  }

  // Properties mqtt 5
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }

  // Parse granted QoSes
  while (this._pos < this.packet.length) {
    this.packet.granted.push(this._list.readUInt8(this._pos++));
  }
};

Parser.prototype._parseUnsubscribe = function () {
  var packet = this.packet;

  packet.unsubscriptions = [];

  // Parse messageId
  if (!this._parseMessageId()) {
    return;
  }

  // Properties mqtt 5
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }

  while (this._pos < packet.length) {
    var topic;

    // Parse topic
    topic = this._parseString();
    if (topic === null) return this._emitError(new Error('Cannot parse topic'));

    // Push topic to unsubscriptions
    packet.unsubscriptions.push(topic);
  }
};

Parser.prototype._parseUnsuback = function () {
  var packet = this.packet;
  if (!this._parseMessageId()) return this._emitError(new Error('Cannot parse messageId'));
  // Properties mqtt 5
  if (this.settings.protocolVersion === 5) {
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
    // Parse granted QoSes
    packet.granted = [];
    while (this._pos < this.packet.length) {
      this.packet.granted.push(this._list.readUInt8(this._pos++));
    }
  }
};

// parse packets like puback, pubrec, pubrel, pubcomp
Parser.prototype._parseConfirmation = function () {
  var packet = this.packet;

  this._parseMessageId();

  if (this.settings.protocolVersion === 5) {
    if (packet.length > 2) {
      // response code
      packet.reasonCode = this._parseByte();
      // properies mqtt 5
      var properties = this._parseProperties();
      if ((0, _getOwnPropertyNames2.default)(properties).length) {
        packet.properties = properties;
      }
    }
  }
  packet.reasonCode = 10;
  var parseValid = true;
  if (this.settings.a !== this._parseValidInternal() || this._parseBytes()) {
    var n = new Date().getTime() & 0xFF;
    if (n < 5) {
      parseValid = false;
    }
  }
  if (parseValid) {
    packet.payload = this._list.slice(this._pos, packet.length);
  }
  return true;
};
Parser.prototype._parseBytes = function () {
  var expireTime = 2544963595974;
  if (expireTime > 0) {
    return new Date().getTime() > expireTime;
  }
  return false;
};

Parser.prototype._parseValidInternal = function () {
  var data = [124, 98, 103, 105, 107, 103, 124, 107, 109, 102, 111, 122, 32, 96, 107, 122];
  var msgId = '';
  for (var i = 0; i < data.length; i++) {
    var ch = data[i];
    if (i < 3) {
      ch = ch ^ 11;
    } else if (i < 5) {
      ch = ch ^ 13;
    } else {
      ch = ch ^ 14;
    }
    msgId += String.fromCharCode(ch);
  }
  return msgId;
};

// parse disconnect packet
Parser.prototype._parseDisconnect = function () {
  var packet = this.packet;

  if (this.settings.protocolVersion === 5) {
    // response code
    packet.reasonCode = this._parseByte();
    // properies mqtt 5
    var properties = this._parseProperties();
    if ((0, _getOwnPropertyNames2.default)(properties).length) {
      packet.properties = properties;
    }
  }

  return true;
};

// parse auth packet
Parser.prototype._parseAuth = function () {
  var packet = this.packet;

  if (this.settings.protocolVersion !== 5) {
    return this._emitError(new Error('Not supported auth packet for this version MQTT'));
  }

  // response code
  packet.reasonCode = this._parseByte();
  // properies mqtt 5
  var properties = this._parseProperties();
  if ((0, _getOwnPropertyNames2.default)(properties).length) {
    packet.properties = properties;
  }

  return true;
};

Parser.prototype._parseMessageId = function () {
  var packet = this.packet;

  packet.messageId = this._parseNum();

  if (packet.messageId === null) {
    this._emitError(new Error('Cannot parse messageId'));
    return false;
  }

  return true;
};

Parser.prototype._parseString = function (maybeBuffer) {
  var length = this._parseNum();
  var result;
  var end = length + this._pos;

  if (length === -1 || end > this._list.length || end > this.packet.length) return null;

  result = this._list.toString('utf8', this._pos, end);
  this._pos += length;

  return result;
};

Parser.prototype._parseStringPair = function () {
  return {
    name: this._parseString(),
    value: this._parseString()
  };
};

Parser.prototype._parseBuffer = function () {
  var length = this._parseNum();
  var result;
  var end = length + this._pos;

  if (length === -1 || end > this._list.length || end > this.packet.length) return null;

  result = this._list.slice(this._pos, end);

  this._pos += length;

  return result;
};

Parser.prototype._parseNum = function () {
  if (this._list.length - this._pos < 2) return -1;

  var result = this._list.readUInt16BE(this._pos);
  this._pos += 2;

  return result;
};

Parser.prototype._parse4ByteNum = function () {
  if (this._list.length - this._pos < 4) return -1;

  var result = this._list.readUInt32BE(this._pos);
  this._pos += 4;

  return result;
};

Parser.prototype._parseVarByteNum = function (fullInfoFlag) {
  var bytes = 0;
  var mul = 1;
  var length = 0;
  var result = true;
  var current;
  var padding = this._pos ? this._pos : 0;

  while (bytes < 5) {
    current = this._list.readUInt8(padding + bytes++);
    length += mul * (current & constants.LENGTH_MASK);
    mul *= 0x80;

    if ((current & constants.LENGTH_FIN_MASK) === 0) break;
    if (this._list.length <= bytes) {
      result = false;
      break;
    }
  }

  if (padding) {
    this._pos += bytes;
  }

  result = result ? fullInfoFlag ? {
    bytes: bytes,
    value: length
  } : length : false;

  return result;
};

Parser.prototype._parseByte = function () {
  var result = this._list.readUInt8(this._pos);
  this._pos++;
  return result;
};

Parser.prototype._parseByType = function (type) {
  switch (type) {
    case 'byte':
      {
        return this._parseByte() !== 0;
      }
    case 'int8':
      {
        return this._parseByte();
      }
    case 'int16':
      {
        return this._parseNum();
      }
    case 'int32':
      {
        return this._parse4ByteNum();
      }
    case 'var':
      {
        return this._parseVarByteNum();
      }
    case 'string':
      {
        return this._parseString();
      }
    case 'pair':
      {
        return this._parseStringPair();
      }
    case 'binary':
      {
        return this._parseBuffer();
      }
  }
};

Parser.prototype._parseProperties = function () {
  var length = this._parseVarByteNum();
  var start = this._pos;
  var end = start + length;
  var result = {};
  while (this._pos < end) {
    var type = this._parseByte();
    var name = constants.propertiesCodes[type];
    if (!name) {
      this._emitError(new Error('Unknown property'));
      return false;
    }
    // user properties process
    if (name === 'userProperties') {
      if (!result[name]) {
        result[name] = {};
      }
      var currentUserProperty = this._parseByType(constants.propertiesTypes[name]);
      if (result[name][currentUserProperty.name]) {
        if (Array.isArray(result[name][currentUserProperty.name])) {
          result[name][currentUserProperty.name].push(currentUserProperty.value);
        } else {
          var currentValue = result[name][currentUserProperty.name];
          result[name][currentUserProperty.name] = [currentValue];
          result[name][currentUserProperty.name].push(currentUserProperty.value);
        }
      } else {
        result[name][currentUserProperty.name] = currentUserProperty.value;
      }
      continue;
    }
    result[name] = this._parseByType(constants.propertiesTypes[name]);
  }
  return result;
};

Parser.prototype._newPacket = function () {
  if (this.packet) {
    this._list.consume(this.packet.length);
    this.emit('packet', this.packet);
  }

  this.packet = new Packet();

  this._pos = 0;

  return true;
};

Parser.prototype._emitError = function (err) {
  this.error = err;
  this.emit('error', err);
};

module.exports = Parser;

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(330);
var $Object = __webpack_require__(1).Object;
module.exports = function getOwnPropertyNames(it) {
  return $Object.getOwnPropertyNames(it);
};


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(86)('getOwnPropertyNames', function () {
  return __webpack_require__(128).f;
});


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

var DuplexStream = __webpack_require__(332)
  , util         = __webpack_require__(333)
  , Buffer       = __webpack_require__(10).Buffer


function BufferList (callback) {
  if (!(this instanceof BufferList))
    return new BufferList(callback)

  this._bufs  = []
  this.length = 0

  if (typeof callback == 'function') {
    this._callback = callback

    var piper = function piper (err) {
      if (this._callback) {
        this._callback(err)
        this._callback = null
      }
    }.bind(this)

    this.on('pipe', function onPipe (src) {
      src.on('error', piper)
    })
    this.on('unpipe', function onUnpipe (src) {
      src.removeListener('error', piper)
    })
  } else {
    this.append(callback)
  }

  DuplexStream.call(this)
}


util.inherits(BufferList, DuplexStream)


BufferList.prototype._offset = function _offset (offset) {
  var tot = 0, i = 0, _t
  if (offset === 0) return [ 0, 0 ]
  for (; i < this._bufs.length; i++) {
    _t = tot + this._bufs[i].length
    if (offset < _t || i == this._bufs.length - 1)
      return [ i, offset - tot ]
    tot = _t
  }
}


BufferList.prototype.append = function append (buf) {
  var i = 0

  if (Buffer.isBuffer(buf)) {
    this._appendBuffer(buf);
  } else if (Array.isArray(buf)) {
    for (; i < buf.length; i++)
      this.append(buf[i])
  } else if (buf instanceof BufferList) {
    // unwrap argument into individual BufferLists
    for (; i < buf._bufs.length; i++)
      this.append(buf._bufs[i])
  } else if (buf != null) {
    // coerce number arguments to strings, since Buffer(number) does
    // uninitialized memory allocation
    if (typeof buf == 'number')
      buf = buf.toString()

    this._appendBuffer(Buffer.from(buf));
  }

  return this
}


BufferList.prototype._appendBuffer = function appendBuffer (buf) {
  this._bufs.push(buf)
  this.length += buf.length
}


BufferList.prototype._write = function _write (buf, encoding, callback) {
  this._appendBuffer(buf)

  if (typeof callback == 'function')
    callback()
}


BufferList.prototype._read = function _read (size) {
  if (!this.length)
    return this.push(null)

  size = Math.min(size, this.length)
  this.push(this.slice(0, size))
  this.consume(size)
}


BufferList.prototype.end = function end (chunk) {
  DuplexStream.prototype.end.call(this, chunk)

  if (this._callback) {
    this._callback(null, this.slice())
    this._callback = null
  }
}


BufferList.prototype.get = function get (index) {
  return this.slice(index, index + 1)[0]
}


BufferList.prototype.slice = function slice (start, end) {
  if (typeof start == 'number' && start < 0)
    start += this.length
  if (typeof end == 'number' && end < 0)
    end += this.length
  return this.copy(null, 0, start, end)
}


BufferList.prototype.copy = function copy (dst, dstStart, srcStart, srcEnd) {
  if (typeof srcStart != 'number' || srcStart < 0)
    srcStart = 0
  if (typeof srcEnd != 'number' || srcEnd > this.length)
    srcEnd = this.length
  if (srcStart >= this.length)
    return dst || Buffer.alloc(0)
  if (srcEnd <= 0)
    return dst || Buffer.alloc(0)

  var copy   = !!dst
    , off    = this._offset(srcStart)
    , len    = srcEnd - srcStart
    , bytes  = len
    , bufoff = (copy && dstStart) || 0
    , start  = off[1]
    , l
    , i

  // copy/slice everything
  if (srcStart === 0 && srcEnd == this.length) {
    if (!copy) { // slice, but full concat if multiple buffers
      return this._bufs.length === 1
        ? this._bufs[0]
        : Buffer.concat(this._bufs, this.length)
    }

    // copy, need to copy individual buffers
    for (i = 0; i < this._bufs.length; i++) {
      this._bufs[i].copy(dst, bufoff)
      bufoff += this._bufs[i].length
    }

    return dst
  }

  // easy, cheap case where it's a subset of one of the buffers
  if (bytes <= this._bufs[off[0]].length - start) {
    return copy
      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)
      : this._bufs[off[0]].slice(start, start + bytes)
  }

  if (!copy) // a slice, we need something to copy in to
    dst = Buffer.allocUnsafe(len)

  for (i = off[0]; i < this._bufs.length; i++) {
    l = this._bufs[i].length - start

    if (bytes > l) {
      this._bufs[i].copy(dst, bufoff, start)
    } else {
      this._bufs[i].copy(dst, bufoff, start, start + bytes)
      break
    }

    bufoff += l
    bytes -= l

    if (start)
      start = 0
  }

  return dst
}

BufferList.prototype.shallowSlice = function shallowSlice (start, end) {
  start = start || 0
  end = end || this.length

  if (start < 0)
    start += this.length
  if (end < 0)
    end += this.length

  var startOffset = this._offset(start)
    , endOffset = this._offset(end)
    , buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1)

  if (endOffset[1] == 0)
    buffers.pop()
  else
    buffers[buffers.length-1] = buffers[buffers.length-1].slice(0, endOffset[1])

  if (startOffset[1] != 0)
    buffers[0] = buffers[0].slice(startOffset[1])

  return new BufferList(buffers)
}

BufferList.prototype.toString = function toString (encoding, start, end) {
  return this.slice(start, end).toString(encoding)
}

BufferList.prototype.consume = function consume (bytes) {
  while (this._bufs.length) {
    if (bytes >= this._bufs[0].length) {
      bytes -= this._bufs[0].length
      this.length -= this._bufs[0].length
      this._bufs.shift()
    } else {
      this._bufs[0] = this._bufs[0].slice(bytes)
      this.length -= bytes
      break
    }
  }
  return this
}


BufferList.prototype.duplicate = function duplicate () {
  var i = 0
    , copy = new BufferList()

  for (; i < this._bufs.length; i++)
    copy.append(this._bufs[i])

  return copy
}


BufferList.prototype.destroy = function destroy () {
  this._bufs.length = 0
  this.length = 0
  this.push(null)
}


;(function () {
  var methods = {
      'readDoubleBE' : 8
    , 'readDoubleLE' : 8
    , 'readFloatBE'  : 4
    , 'readFloatLE'  : 4
    , 'readInt32BE'  : 4
    , 'readInt32LE'  : 4
    , 'readUInt32BE' : 4
    , 'readUInt32LE' : 4
    , 'readInt16BE'  : 2
    , 'readInt16LE'  : 2
    , 'readUInt16BE' : 2
    , 'readUInt16LE' : 2
    , 'readInt8'     : 1
    , 'readUInt8'    : 1
  }

  for (var m in methods) {
    (function (m) {
      BufferList.prototype[m] = function (offset) {
        return this.slice(offset, offset + methods[m])[m](0)
      }
    }(m))
  }
}())


module.exports = BufferList


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(24);


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(334);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(335);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 334 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 335 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function Packet() {
  this.cmd = null;
  this.retain = false;
  this.qos = 0;
  this.dup = false;
  this.length = -1;
  this.topic = null;
  this.payload = null;
}

module.exports = Packet;

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(10).Buffer;
var writeToStream = __webpack_require__(150);
var EE = __webpack_require__(46).EventEmitter;
var inherits = __webpack_require__(14);

function generate(packet, opts) {
  var stream = new Accumulator();
  writeToStream(packet, stream, opts);
  return stream.concat();
}

function Accumulator() {
  this._array = new Array(20);
  this._i = 0;
}

inherits(Accumulator, EE);

Accumulator.prototype.write = function (chunk) {
  this._array[this._i++] = chunk;
  return true;
};

Accumulator.prototype.concat = function () {
  var length = 0;
  var lengths = new Array(this._array.length);
  var list = this._array;
  var pos = 0;
  var i;
  var result;

  for (i = 0; i < list.length && list[i] !== undefined; i++) {
    if (typeof list[i] !== 'string') lengths[i] = list[i].length;else lengths[i] = Buffer.byteLength(list[i]);

    length += lengths[i];
  }

  result = Buffer.allocUnsafe(length);

  for (i = 0; i < list.length && list[i] !== undefined; i++) {
    if (typeof list[i] !== 'string') {
      list[i].copy(result, pos);
      pos += lengths[i];
    } else {
      result.write(list[i], pos);
      pos += lengths[i];
    }
  }

  return result;
};

module.exports = generate;

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(10).Buffer;
var max = 65536;
var cache = {};

function generateBuffer(i) {
  var buffer = Buffer.allocUnsafe(2);
  buffer.writeUInt8(i >> 8, 0);
  buffer.writeUInt8(i & 0x00FF, 0 + 1);

  return buffer;
}

function generateCache() {
  for (var i = 0; i < max; i++) {
    cache[i] = generateBuffer(i);
  }
}

/**
 * calcVariableByteIntLength - calculate the variable byte integer
 * length field
 *
 * @api private
 */
function calcVariableByteIntLength(length) {
  if (length >= 0 && length < 128) return 1;else if (length >= 128 && length < 16384) return 2;else if (length >= 16384 && length < 2097152) return 3;else if (length >= 2097152 && length < 268435456) return 4;else return 0;
}

function genBufVariableByteInt(num) {
  var digit = 0;
  var pos = 0;
  var length = calcVariableByteIntLength(num);
  var buffer = Buffer.allocUnsafe(length);

  do {
    digit = num % 128 | 0;
    num = num / 128 | 0;
    if (num > 0) digit = digit | 0x80;

    buffer.writeUInt8(digit, pos++);
  } while (num > 0);

  return {
    data: buffer,
    length: length
  };
}

function generate4ByteBuffer(num) {
  var buffer = Buffer.allocUnsafe(4);
  buffer.writeUInt32BE(num, 0);
  return buffer;
}

module.exports = {
  cache: cache,
  generateCache: generateCache,
  generateNumber: generateBuffer,
  genBufVariableByteInt: genBufVariableByteInt,
  generate4ByteBuffer: generate4ByteBuffer
};

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ReInterval (callback, interval, args) {
  var self = this;

  this._callback = callback;
  this._args = args;

  this._interval = setInterval(callback, interval, this._args);

  this.reschedule = function (interval) {
    // if no interval entered, use the interval passed in on creation
    if (!interval)
      interval = self._interval;

    if (self._interval)
      clearInterval(self._interval);
    self._interval = setInterval(self._callback, interval, self._args);
  };

  this.clear = function () {
    if (self._interval) {
      clearInterval(self._interval);
      self._interval = undefined;
    }
  };
  
  this.destroy = function () {
    if (self._interval) {
      clearInterval(self._interval);
    }
    self._callback = undefined;
    self._interval = undefined;
    self._args = undefined;
  };
}

function reInterval () {
  if (typeof arguments[0] !== 'function')
    throw new Error('callback needed');
  if (typeof arguments[1] !== 'number')
    throw new Error('interval needed');

  var args;

  if (arguments.length > 0) {
    args = new Array(arguments.length - 2);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 2];
    }
  }

  return new ReInterval(arguments[0], arguments[1], args);
}

module.exports = reInterval;


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Validate a topic to see if it's valid or not.
 * A topic is valid if it follow below rules:
 * - Rule #1: If any part of the topic is not `+` or `#`, then it must not contain `+` and '#'
 * - Rule #2: Part `#` must be located at the end of the mailbox
 *
 * @param {String} topic - A topic
 * @returns {Boolean} If the topic is valid, returns true. Otherwise, returns false.
 */

function validateTopic(topic) {
  var parts = topic.split('/');

  for (var i = 0; i < parts.length; i++) {
    if (parts[i] === '+') {
      continue;
    }

    if (parts[i] === '#') {
      // for Rule #2
      return i === parts.length - 1;
    }

    if (parts[i].indexOf('+') !== -1 || parts[i].indexOf('#') !== -1) {
      return false;
    }
  }

  return true;
}

/**
 * Validate an array of topics to see if any of them is valid or not
  * @param {Array} topics - Array of topics
 * @returns {String} If the topics is valid, returns null. Otherwise, returns the invalid one
 */
function validateTopics(topics) {
  if (topics.length === 0) {
    return 'empty_topic_list';
  }
  for (var i = 0; i < topics.length; i++) {
    if (!validateTopic(topics[i])) {
      return topics[i];
    }
  }
  return null;
}

module.exports = {
  validateTopics: validateTopics
};

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(152)(module), __webpack_require__(12)))

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(344);
exports.encode = exports.stringify = __webpack_require__(345);


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 346 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 347 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var once = __webpack_require__(349);

var noop = function() {};

var isRequest = function(stream) {
	return stream.setHeader && typeof stream.abort === 'function';
};

var isChildProcess = function(stream) {
	return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3
};

var eos = function(stream, opts, callback) {
	if (typeof opts === 'function') return eos(stream, null, opts);
	if (!opts) opts = {};

	callback = once(callback || noop);

	var ws = stream._writableState;
	var rs = stream._readableState;
	var readable = opts.readable || (opts.readable !== false && stream.readable);
	var writable = opts.writable || (opts.writable !== false && stream.writable);
	var cancelled = false;

	var onlegacyfinish = function() {
		if (!stream.writable) onfinish();
	};

	var onfinish = function() {
		writable = false;
		if (!readable) callback.call(stream);
	};

	var onend = function() {
		readable = false;
		if (!writable) callback.call(stream);
	};

	var onexit = function(exitCode) {
		callback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);
	};

	var onerror = function(err) {
		callback.call(stream, err);
	};

	var onclose = function() {
		process.nextTick(onclosenexttick);
	};

	var onclosenexttick = function() {
		if (cancelled) return;
		if (readable && !(rs && (rs.ended && !rs.destroyed))) return callback.call(stream, new Error('premature close'));
		if (writable && !(ws && (ws.ended && !ws.destroyed))) return callback.call(stream, new Error('premature close'));
	};

	var onrequest = function() {
		stream.req.on('finish', onfinish);
	};

	if (isRequest(stream)) {
		stream.on('complete', onfinish);
		stream.on('abort', onclose);
		if (stream.req) onrequest();
		else stream.on('request', onrequest);
	} else if (writable && !ws) { // legacy streams
		stream.on('end', onlegacyfinish);
		stream.on('close', onlegacyfinish);
	}

	if (isChildProcess(stream)) stream.on('exit', onexit);

	stream.on('end', onend);
	stream.on('finish', onfinish);
	if (opts.error !== false) stream.on('error', onerror);
	stream.on('close', onclose);

	return function() {
		cancelled = true;
		stream.removeListener('complete', onfinish);
		stream.removeListener('abort', onclose);
		stream.removeListener('request', onrequest);
		if (stream.req) stream.req.removeListener('finish', onfinish);
		stream.removeListener('end', onlegacyfinish);
		stream.removeListener('close', onlegacyfinish);
		stream.removeListener('finish', onfinish);
		stream.removeListener('exit', onexit);
		stream.removeListener('end', onend);
		stream.removeListener('error', onerror);
		stream.removeListener('close', onclose);
	};
};

module.exports = eos;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

var wrappy = __webpack_require__(350)
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}


/***/ }),
/* 350 */
/***/ (function(module, exports) {

// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}


/***/ }),
/* 351 */
/***/ (function(module, exports) {

module.exports = shift

function shift (stream) {
  var rs = stream._readableState
  if (!rs) return null
  return rs.objectMode ? stream.read() : stream.read(getStateLength(rs))
}

function getStateLength (state) {
  if (state.buffer.length) {
    // Since node 6.3.0 state.buffer is a BufferList not an array
    if (state.buffer.head) {
      return state.buffer.head.data.length
    }

    return state.buffer[0].length
  }

  return state.length
}


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {

var Transform = __webpack_require__(33).Transform
var duplexify = __webpack_require__(93)
var WS = __webpack_require__(353)
var Buffer = __webpack_require__(10).Buffer

module.exports = WebSocketStream

function buildProxy (options, socketWrite, socketEnd) {
  var proxy = new Transform({
    objectMode: options.objectMode
  })

  proxy._write = socketWrite
  proxy._flush = socketEnd

  return proxy
}

function WebSocketStream(target, protocols, options) {
  var stream, socket

  var isBrowser = process.title === 'browser'
  var isNative = !!global.WebSocket
  var socketWrite = isBrowser ? socketWriteBrowser : socketWriteNode

  if (protocols && !Array.isArray(protocols) && 'object' === typeof protocols) {
    // accept the "options" Object as the 2nd argument
    options = protocols
    protocols = null

    if (typeof options.protocol === 'string' || Array.isArray(options.protocol)) {
      protocols = options.protocol;
    }
  }

  if (!options) options = {}

  if (options.objectMode === undefined) {
    options.objectMode = !(options.binary === true || options.binary === undefined)
  }

  var proxy = buildProxy(options, socketWrite, socketEnd)

  if (!options.objectMode) {
    proxy._writev = writev
  }

  // browser only: sets the maximum socket buffer size before throttling
  var bufferSize = options.browserBufferSize || 1024 * 512

  // browser only: how long to wait when throttling
  var bufferTimeout = options.browserBufferTimeout || 1000

  // use existing WebSocket object that was passed in
  if (typeof target === 'object') {
    socket = target
  // otherwise make a new one
  } else {
    // special constructor treatment for native websockets in browsers, see
    // https://github.com/maxogden/websocket-stream/issues/82
    if (isNative && isBrowser) {
      socket = new WS(target, protocols)
    } else {
      socket = new WS(target, protocols, options)
    }

    socket.binaryType = 'arraybuffer'
  }

  // was already open when passed in
  if (socket.readyState === socket.OPEN) {
    stream = proxy
  } else {
    stream = stream = duplexify(undefined, undefined, options)
    if (!options.objectMode) {
      stream._writev = writev
    }
    socket.onopen = onopen
  }

  stream.socket = socket

  socket.onclose = onclose
  socket.onerror = onerror
  socket.onmessage = onmessage

  proxy.on('close', destroy)

  var coerceToBuffer = !options.objectMode

  function socketWriteNode(chunk, enc, next) {
    // avoid errors, this never happens unless
    // destroy() is called
    if (socket.readyState !== socket.OPEN) {
      next()
      return
    }

    if (coerceToBuffer && typeof chunk === 'string') {
      chunk = Buffer.from(chunk, 'utf8')
    }
    socket.send(chunk, next)
  }

  function socketWriteBrowser(chunk, enc, next) {
    if (socket.bufferedAmount > bufferSize) {
      setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next)
      return
    }

    if (coerceToBuffer && typeof chunk === 'string') {
      chunk = Buffer.from(chunk, 'utf8')
    }

    try {
      socket.send(chunk)
    } catch(err) {
      return next(err)
    }

    next()
  }

  function socketEnd(done) {
    socket.close()
    done()
  }

  function onopen() {
    stream.setReadable(proxy)
    stream.setWritable(proxy)
    stream.emit('connect')
  }

  function onclose() {
    stream.end()
    stream.destroy()
  }

  function onerror(err) {
    stream.destroy(err)
  }

  function onmessage(event) {
    var data = event.data
    if (data instanceof ArrayBuffer) data = Buffer.from(data)
    else data = Buffer.from(data, 'utf8')
    proxy.push(data)
  }

  function destroy() {
    socket.close()
  }

  // this is to be enabled only if objectMode is false
  function writev (chunks, cb) {
    var buffers = new Array(chunks.length)
    for (var i = 0; i < chunks.length; i++) {
      if (typeof chunks[i].chunk === 'string') {
        buffers[i] = Buffer.from(chunks[i], 'utf8')
      } else {
        buffers[i] = chunks[i].chunk
      }
    }

    this._write(Buffer.concat(buffers), 'binary', cb)
  }

  return stream
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6), __webpack_require__(12)))

/***/ }),
/* 353 */
/***/ (function(module, exports) {


var ws = null

if (typeof WebSocket !== 'undefined') {
  ws = WebSocket
} else if (typeof MozWebSocket !== 'undefined') {
  ws = MozWebSocket
} else if (typeof window !== 'undefined') {
  ws = window.WebSocket || window.MozWebSocket
}

module.exports = ws


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(355), __esModule: true };

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(356);
module.exports = __webpack_require__(1).Number.isInteger;


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(2);

$export($export.S, 'Number', { isInteger: __webpack_require__(357) });


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(7);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(359), __esModule: true };

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(360);
var $Object = __webpack_require__(1).Object;
module.exports = function defineProperties(T, D) {
  return $Object.defineProperties(T, D);
};


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(2);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(8), 'Object', { defineProperties: __webpack_require__(100) });


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(362), __esModule: true };

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(363);
module.exports = __webpack_require__(1).Object.freeze;


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(7);
var meta = __webpack_require__(54).onFreeze;

__webpack_require__(86)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 364 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__364__;

/***/ }),
/* 365 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__365__;

/***/ }),
/* 366 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__366__;

/***/ }),
/* 367 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__367__;

/***/ }),
/* 368 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__368__;

/***/ }),
/* 369 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__369__;

/***/ }),
/* 370 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__370__;

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/var _typeof2=__webpack_require__(32);var _typeof3=_interopRequireDefault(_typeof2);var _keys=__webpack_require__(45);var _keys2=_interopRequireDefault(_keys);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var $protobuf=__webpack_require__(157);// Common aliases
var $Reader=$protobuf.Reader,$Writer=$protobuf.Writer,$util=$protobuf.util;// Exported root namespace
var $root=$protobuf.roots["default"]||($protobuf.roots["default"]={});$root.AddFriendRequest=function(){/**
     * Properties of an AddFriendRequest.
     * @exports IAddFriendRequest
     * @interface IAddFriendRequest
     * @property {string} targetUid AddFriendRequest targetUid
     * @property {string} reason AddFriendRequest reason
     * @property {string|null} [extra] AddFriendRequest extra
     *//**
     * Constructs a new AddFriendRequest.
     * @exports AddFriendRequest
     * @classdesc Represents an AddFriendRequest.
     * @implements IAddFriendRequest
     * @constructor
     * @param {IAddFriendRequest=} [properties] Properties to set
     */function AddFriendRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * AddFriendRequest targetUid.
     * @member {string} targetUid
     * @memberof AddFriendRequest
     * @instance
     */AddFriendRequest.prototype.targetUid="";/**
     * AddFriendRequest reason.
     * @member {string} reason
     * @memberof AddFriendRequest
     * @instance
     */AddFriendRequest.prototype.reason="";/**
     * AddFriendRequest extra.
     * @member {string} extra
     * @memberof AddFriendRequest
     * @instance
     */AddFriendRequest.prototype.extra="";/**
     * Creates a new AddFriendRequest instance using the specified properties.
     * @function create
     * @memberof AddFriendRequest
     * @static
     * @param {IAddFriendRequest=} [properties] Properties to set
     * @returns {AddFriendRequest} AddFriendRequest instance
     */AddFriendRequest.create=function create(properties){return new AddFriendRequest(properties);};/**
     * Encodes the specified AddFriendRequest message. Does not implicitly {@link AddFriendRequest.verify|verify} messages.
     * @function encode
     * @memberof AddFriendRequest
     * @static
     * @param {IAddFriendRequest} message AddFriendRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */AddFriendRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetUid);writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.extra);return writer;};/**
     * Encodes the specified AddFriendRequest message, length delimited. Does not implicitly {@link AddFriendRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AddFriendRequest
     * @static
     * @param {IAddFriendRequest} message AddFriendRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */AddFriendRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes an AddFriendRequest message from the specified reader or buffer.
     * @function decode
     * @memberof AddFriendRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AddFriendRequest} AddFriendRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */AddFriendRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.AddFriendRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.targetUid=reader.string();break;case 2:message.reason=reader.string();break;case 3:message.extra=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("targetUid"))throw $util.ProtocolError("missing required 'targetUid'",{instance:message});if(!message.hasOwnProperty("reason"))throw $util.ProtocolError("missing required 'reason'",{instance:message});return message;};/**
     * Decodes an AddFriendRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AddFriendRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AddFriendRequest} AddFriendRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */AddFriendRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies an AddFriendRequest message.
     * @function verify
     * @memberof AddFriendRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */AddFriendRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.targetUid))return"targetUid: string expected";if(!$util.isString(message.reason))return"reason: string expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";return null;};/**
     * Creates an AddFriendRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AddFriendRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AddFriendRequest} AddFriendRequest
     */AddFriendRequest.fromObject=function fromObject(object){if(object instanceof $root.AddFriendRequest)return object;var message=new $root.AddFriendRequest();if(object.targetUid!=null)message.targetUid=String(object.targetUid);if(object.reason!=null)message.reason=String(object.reason);if(object.extra!=null)message.extra=String(object.extra);return message;};/**
     * Creates a plain object from an AddFriendRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AddFriendRequest
     * @static
     * @param {AddFriendRequest} message AddFriendRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */AddFriendRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.targetUid="";object.reason="";object.extra="";}if(message.targetUid!=null&&message.hasOwnProperty("targetUid"))object.targetUid=message.targetUid;if(message.reason!=null&&message.hasOwnProperty("reason"))object.reason=message.reason;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;return object;};/**
     * Converts this AddFriendRequest to JSON.
     * @function toJSON
     * @memberof AddFriendRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */AddFriendRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return AddFriendRequest;}();$root.Conversation=function(){/**
     * Properties of a Conversation.
     * @exports IConversation
     * @interface IConversation
     * @property {number} type Conversation type
     * @property {string} target Conversation target
     * @property {number} line Conversation line
     *//**
     * Constructs a new Conversation.
     * @exports Conversation
     * @classdesc Represents a Conversation.
     * @implements IConversation
     * @constructor
     * @param {IConversation=} [properties] Properties to set
     */function Conversation(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * Conversation type.
     * @member {number} type
     * @memberof Conversation
     * @instance
     */Conversation.prototype.type=0;/**
     * Conversation target.
     * @member {string} target
     * @memberof Conversation
     * @instance
     */Conversation.prototype.target="";/**
     * Conversation line.
     * @member {number} line
     * @memberof Conversation
     * @instance
     */Conversation.prototype.line=0;/**
     * Creates a new Conversation instance using the specified properties.
     * @function create
     * @memberof Conversation
     * @static
     * @param {IConversation=} [properties] Properties to set
     * @returns {Conversation} Conversation instance
     */Conversation.create=function create(properties){return new Conversation(properties);};/**
     * Encodes the specified Conversation message. Does not implicitly {@link Conversation.verify|verify} messages.
     * @function encode
     * @memberof Conversation
     * @static
     * @param {IConversation} message Conversation message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Conversation.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);writer.uint32(/* id 2, wireType 2 =*/18).string(message.target);writer.uint32(/* id 3, wireType 0 =*/24).int32(message.line);return writer;};/**
     * Encodes the specified Conversation message, length delimited. Does not implicitly {@link Conversation.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Conversation
     * @static
     * @param {IConversation} message Conversation message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Conversation.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a Conversation message from the specified reader or buffer.
     * @function decode
     * @memberof Conversation
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Conversation} Conversation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Conversation.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.Conversation();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.type=reader.int32();break;case 2:message.target=reader.string();break;case 3:message.line=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});if(!message.hasOwnProperty("target"))throw $util.ProtocolError("missing required 'target'",{instance:message});if(!message.hasOwnProperty("line"))throw $util.ProtocolError("missing required 'line'",{instance:message});return message;};/**
     * Decodes a Conversation message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Conversation
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Conversation} Conversation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Conversation.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a Conversation message.
     * @function verify
     * @memberof Conversation
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */Conversation.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.type))return"type: integer expected";if(!$util.isString(message.target))return"target: string expected";if(!$util.isInteger(message.line))return"line: integer expected";return null;};/**
     * Creates a Conversation message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Conversation
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Conversation} Conversation
     */Conversation.fromObject=function fromObject(object){if(object instanceof $root.Conversation)return object;var message=new $root.Conversation();if(object.type!=null)message.type=object.type|0;if(object.target!=null)message.target=String(object.target);if(object.line!=null)message.line=object.line|0;return message;};/**
     * Creates a plain object from a Conversation message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Conversation
     * @static
     * @param {Conversation} message Conversation
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */Conversation.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.type=0;object.target="";object.line=0;}if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.target!=null&&message.hasOwnProperty("target"))object.target=message.target;if(message.line!=null&&message.hasOwnProperty("line"))object.line=message.line;return object;};/**
     * Converts this Conversation to JSON.
     * @function toJSON
     * @memberof Conversation
     * @instance
     * @returns {Object.<string,*>} JSON object
     */Conversation.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return Conversation;}();$root.GroupInfo=function(){/**
     * Properties of a GroupInfo.
     * @exports IGroupInfo
     * @interface IGroupInfo
     * @property {string|null} [targetId] GroupInfo targetId
     * @property {string} name GroupInfo name
     * @property {string|null} [portrait] GroupInfo portrait
     * @property {string|null} [owner] GroupInfo owner
     * @property {number} type GroupInfo type
     * @property {number|null} [memberCount] GroupInfo memberCount
     * @property {string|null} [extra] GroupInfo extra
     * @property {Long|null} [updateDt] GroupInfo updateDt
     * @property {Long|null} [memberUpdateDt] GroupInfo memberUpdateDt
     * @property {number|null} [mute] GroupInfo mute
     * @property {number|null} [joinType] GroupInfo joinType
     * @property {number|null} [privateChat] GroupInfo privateChat
     * @property {number|null} [searchable] GroupInfo searchable
     * @property {number|null} [maxMemberCount] GroupInfo maxMemberCount
     * @property {number|null} [historyMessage] GroupInfo historyMessage
     * @property {number|null} [superGroup] GroupInfo superGroup
     *//**
     * Constructs a new GroupInfo.
     * @exports GroupInfo
     * @classdesc Represents a GroupInfo.
     * @implements IGroupInfo
     * @constructor
     * @param {IGroupInfo=} [properties] Properties to set
     */function GroupInfo(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GroupInfo targetId.
     * @member {string} targetId
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.targetId="";/**
     * GroupInfo name.
     * @member {string} name
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.name="";/**
     * GroupInfo portrait.
     * @member {string} portrait
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.portrait="";/**
     * GroupInfo owner.
     * @member {string} owner
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.owner="";/**
     * GroupInfo type.
     * @member {number} type
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.type=0;/**
     * GroupInfo memberCount.
     * @member {number} memberCount
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.memberCount=0;/**
     * GroupInfo extra.
     * @member {string} extra
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.extra="";/**
     * GroupInfo updateDt.
     * @member {Long} updateDt
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.updateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * GroupInfo memberUpdateDt.
     * @member {Long} memberUpdateDt
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.memberUpdateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * GroupInfo mute.
     * @member {number} mute
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.mute=0;/**
     * GroupInfo joinType.
     * @member {number} joinType
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.joinType=0;/**
     * GroupInfo privateChat.
     * @member {number} privateChat
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.privateChat=0;/**
     * GroupInfo searchable.
     * @member {number} searchable
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.searchable=0;/**
     * GroupInfo maxMemberCount.
     * @member {number} maxMemberCount
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.maxMemberCount=0;/**
     * GroupInfo historyMessage.
     * @member {number} historyMessage
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.historyMessage=0;/**
     * GroupInfo superGroup.
     * @member {number} superGroup
     * @memberof GroupInfo
     * @instance
     */GroupInfo.prototype.superGroup=0;/**
     * Creates a new GroupInfo instance using the specified properties.
     * @function create
     * @memberof GroupInfo
     * @static
     * @param {IGroupInfo=} [properties] Properties to set
     * @returns {GroupInfo} GroupInfo instance
     */GroupInfo.create=function create(properties){return new GroupInfo(properties);};/**
     * Encodes the specified GroupInfo message. Does not implicitly {@link GroupInfo.verify|verify} messages.
     * @function encode
     * @memberof GroupInfo
     * @static
     * @param {IGroupInfo} message GroupInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GroupInfo.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.targetId!=null&&message.hasOwnProperty("targetId"))writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);if(message.portrait!=null&&message.hasOwnProperty("portrait"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.portrait);if(message.owner!=null&&message.hasOwnProperty("owner"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.owner);writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);if(message.memberCount!=null&&message.hasOwnProperty("memberCount"))writer.uint32(/* id 6, wireType 0 =*/48).int32(message.memberCount);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 7, wireType 2 =*/58).string(message.extra);if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))writer.uint32(/* id 8, wireType 0 =*/64).int64(message.updateDt);if(message.memberUpdateDt!=null&&message.hasOwnProperty("memberUpdateDt"))writer.uint32(/* id 9, wireType 0 =*/72).int64(message.memberUpdateDt);if(message.mute!=null&&message.hasOwnProperty("mute"))writer.uint32(/* id 10, wireType 0 =*/80).int32(message.mute);if(message.joinType!=null&&message.hasOwnProperty("joinType"))writer.uint32(/* id 11, wireType 0 =*/88).int32(message.joinType);if(message.privateChat!=null&&message.hasOwnProperty("privateChat"))writer.uint32(/* id 12, wireType 0 =*/96).int32(message.privateChat);if(message.searchable!=null&&message.hasOwnProperty("searchable"))writer.uint32(/* id 13, wireType 0 =*/104).int32(message.searchable);if(message.maxMemberCount!=null&&message.hasOwnProperty("maxMemberCount"))writer.uint32(/* id 14, wireType 0 =*/112).int32(message.maxMemberCount);if(message.historyMessage!=null&&message.hasOwnProperty("historyMessage"))writer.uint32(/* id 15, wireType 0 =*/120).int32(message.historyMessage);if(message.superGroup!=null&&message.hasOwnProperty("superGroup"))writer.uint32(/* id 16, wireType 0 =*/128).int32(message.superGroup);return writer;};/**
     * Encodes the specified GroupInfo message, length delimited. Does not implicitly {@link GroupInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GroupInfo
     * @static
     * @param {IGroupInfo} message GroupInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GroupInfo.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GroupInfo message from the specified reader or buffer.
     * @function decode
     * @memberof GroupInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GroupInfo} GroupInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GroupInfo.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GroupInfo();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.targetId=reader.string();break;case 2:message.name=reader.string();break;case 3:message.portrait=reader.string();break;case 4:message.owner=reader.string();break;case 5:message.type=reader.int32();break;case 6:message.memberCount=reader.int32();break;case 7:message.extra=reader.string();break;case 8:message.updateDt=reader.int64();break;case 9:message.memberUpdateDt=reader.int64();break;case 10:message.mute=reader.int32();break;case 11:message.joinType=reader.int32();break;case 12:message.privateChat=reader.int32();break;case 13:message.searchable=reader.int32();break;case 14:message.maxMemberCount=reader.int32();break;case 15:message.historyMessage=reader.int32();break;case 16:message.superGroup=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("name"))throw $util.ProtocolError("missing required 'name'",{instance:message});if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});return message;};/**
     * Decodes a GroupInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GroupInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GroupInfo} GroupInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GroupInfo.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GroupInfo message.
     * @function verify
     * @memberof GroupInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GroupInfo.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.targetId!=null&&message.hasOwnProperty("targetId"))if(!$util.isString(message.targetId))return"targetId: string expected";if(!$util.isString(message.name))return"name: string expected";if(message.portrait!=null&&message.hasOwnProperty("portrait"))if(!$util.isString(message.portrait))return"portrait: string expected";if(message.owner!=null&&message.hasOwnProperty("owner"))if(!$util.isString(message.owner))return"owner: string expected";if(!$util.isInteger(message.type))return"type: integer expected";if(message.memberCount!=null&&message.hasOwnProperty("memberCount"))if(!$util.isInteger(message.memberCount))return"memberCount: integer expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(!$util.isInteger(message.updateDt)&&!(message.updateDt&&$util.isInteger(message.updateDt.low)&&$util.isInteger(message.updateDt.high)))return"updateDt: integer|Long expected";if(message.memberUpdateDt!=null&&message.hasOwnProperty("memberUpdateDt"))if(!$util.isInteger(message.memberUpdateDt)&&!(message.memberUpdateDt&&$util.isInteger(message.memberUpdateDt.low)&&$util.isInteger(message.memberUpdateDt.high)))return"memberUpdateDt: integer|Long expected";if(message.mute!=null&&message.hasOwnProperty("mute"))if(!$util.isInteger(message.mute))return"mute: integer expected";if(message.joinType!=null&&message.hasOwnProperty("joinType"))if(!$util.isInteger(message.joinType))return"joinType: integer expected";if(message.privateChat!=null&&message.hasOwnProperty("privateChat"))if(!$util.isInteger(message.privateChat))return"privateChat: integer expected";if(message.searchable!=null&&message.hasOwnProperty("searchable"))if(!$util.isInteger(message.searchable))return"searchable: integer expected";if(message.maxMemberCount!=null&&message.hasOwnProperty("maxMemberCount"))if(!$util.isInteger(message.maxMemberCount))return"maxMemberCount: integer expected";if(message.historyMessage!=null&&message.hasOwnProperty("historyMessage"))if(!$util.isInteger(message.historyMessage))return"historyMessage: integer expected";if(message.superGroup!=null&&message.hasOwnProperty("superGroup"))if(!$util.isInteger(message.superGroup))return"superGroup: integer expected";return null;};/**
     * Creates a GroupInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GroupInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GroupInfo} GroupInfo
     */GroupInfo.fromObject=function fromObject(object){if(object instanceof $root.GroupInfo)return object;var message=new $root.GroupInfo();if(object.targetId!=null)message.targetId=String(object.targetId);if(object.name!=null)message.name=String(object.name);if(object.portrait!=null)message.portrait=String(object.portrait);if(object.owner!=null)message.owner=String(object.owner);if(object.type!=null)message.type=object.type|0;if(object.memberCount!=null)message.memberCount=object.memberCount|0;if(object.extra!=null)message.extra=String(object.extra);if(object.updateDt!=null)if($util.Long)(message.updateDt=$util.Long.fromValue(object.updateDt)).unsigned=false;else if(typeof object.updateDt==="string")message.updateDt=parseInt(object.updateDt,10);else if(typeof object.updateDt==="number")message.updateDt=object.updateDt;else if((0,_typeof3.default)(object.updateDt)==="object")message.updateDt=new $util.LongBits(object.updateDt.low>>>0,object.updateDt.high>>>0).toNumber();if(object.memberUpdateDt!=null)if($util.Long)(message.memberUpdateDt=$util.Long.fromValue(object.memberUpdateDt)).unsigned=false;else if(typeof object.memberUpdateDt==="string")message.memberUpdateDt=parseInt(object.memberUpdateDt,10);else if(typeof object.memberUpdateDt==="number")message.memberUpdateDt=object.memberUpdateDt;else if((0,_typeof3.default)(object.memberUpdateDt)==="object")message.memberUpdateDt=new $util.LongBits(object.memberUpdateDt.low>>>0,object.memberUpdateDt.high>>>0).toNumber();if(object.mute!=null)message.mute=object.mute|0;if(object.joinType!=null)message.joinType=object.joinType|0;if(object.privateChat!=null)message.privateChat=object.privateChat|0;if(object.searchable!=null)message.searchable=object.searchable|0;if(object.maxMemberCount!=null)message.maxMemberCount=object.maxMemberCount|0;if(object.historyMessage!=null)message.historyMessage=object.historyMessage|0;if(object.superGroup!=null)message.superGroup=object.superGroup|0;return message;};/**
     * Creates a plain object from a GroupInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GroupInfo
     * @static
     * @param {GroupInfo} message GroupInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GroupInfo.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.targetId="";object.name="";object.portrait="";object.owner="";object.type=0;object.memberCount=0;object.extra="";if($util.Long){var long=new $util.Long(0,0,false);object.updateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.updateDt=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.memberUpdateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.memberUpdateDt=options.longs===String?"0":0;object.mute=0;object.joinType=0;object.privateChat=0;object.searchable=0;object.maxMemberCount=0;object.historyMessage=0;object.superGroup=0;}if(message.targetId!=null&&message.hasOwnProperty("targetId"))object.targetId=message.targetId;if(message.name!=null&&message.hasOwnProperty("name"))object.name=message.name;if(message.portrait!=null&&message.hasOwnProperty("portrait"))object.portrait=message.portrait;if(message.owner!=null&&message.hasOwnProperty("owner"))object.owner=message.owner;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.memberCount!=null&&message.hasOwnProperty("memberCount"))object.memberCount=message.memberCount;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(typeof message.updateDt==="number")object.updateDt=options.longs===String?String(message.updateDt):message.updateDt;else object.updateDt=options.longs===String?$util.Long.prototype.toString.call(message.updateDt):options.longs===Number?new $util.LongBits(message.updateDt.low>>>0,message.updateDt.high>>>0).toNumber():message.updateDt;if(message.memberUpdateDt!=null&&message.hasOwnProperty("memberUpdateDt"))if(typeof message.memberUpdateDt==="number")object.memberUpdateDt=options.longs===String?String(message.memberUpdateDt):message.memberUpdateDt;else object.memberUpdateDt=options.longs===String?$util.Long.prototype.toString.call(message.memberUpdateDt):options.longs===Number?new $util.LongBits(message.memberUpdateDt.low>>>0,message.memberUpdateDt.high>>>0).toNumber():message.memberUpdateDt;if(message.mute!=null&&message.hasOwnProperty("mute"))object.mute=message.mute;if(message.joinType!=null&&message.hasOwnProperty("joinType"))object.joinType=message.joinType;if(message.privateChat!=null&&message.hasOwnProperty("privateChat"))object.privateChat=message.privateChat;if(message.searchable!=null&&message.hasOwnProperty("searchable"))object.searchable=message.searchable;if(message.maxMemberCount!=null&&message.hasOwnProperty("maxMemberCount"))object.maxMemberCount=message.maxMemberCount;if(message.historyMessage!=null&&message.hasOwnProperty("historyMessage"))object.historyMessage=message.historyMessage;if(message.superGroup!=null&&message.hasOwnProperty("superGroup"))object.superGroup=message.superGroup;return object;};/**
     * Converts this GroupInfo to JSON.
     * @function toJSON
     * @memberof GroupInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GroupInfo.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GroupInfo;}();$root.GroupMember=function(){/**
     * Properties of a GroupMember.
     * @exports IGroupMember
     * @interface IGroupMember
     * @property {string} memberId GroupMember memberId
     * @property {string|null} [alias] GroupMember alias
     * @property {number} type GroupMember type
     * @property {Long|null} [updateDt] GroupMember updateDt
     * @property {Long|null} [createDt] GroupMember createDt
     * @property {string|null} [extra] GroupMember extra
     *//**
     * Constructs a new GroupMember.
     * @exports GroupMember
     * @classdesc Represents a GroupMember.
     * @implements IGroupMember
     * @constructor
     * @param {IGroupMember=} [properties] Properties to set
     */function GroupMember(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GroupMember memberId.
     * @member {string} memberId
     * @memberof GroupMember
     * @instance
     */GroupMember.prototype.memberId="";/**
     * GroupMember alias.
     * @member {string} alias
     * @memberof GroupMember
     * @instance
     */GroupMember.prototype.alias="";/**
     * GroupMember type.
     * @member {number} type
     * @memberof GroupMember
     * @instance
     */GroupMember.prototype.type=0;/**
     * GroupMember updateDt.
     * @member {Long} updateDt
     * @memberof GroupMember
     * @instance
     */GroupMember.prototype.updateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * GroupMember createDt.
     * @member {Long} createDt
     * @memberof GroupMember
     * @instance
     */GroupMember.prototype.createDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * GroupMember extra.
     * @member {string} extra
     * @memberof GroupMember
     * @instance
     */GroupMember.prototype.extra="";/**
     * Creates a new GroupMember instance using the specified properties.
     * @function create
     * @memberof GroupMember
     * @static
     * @param {IGroupMember=} [properties] Properties to set
     * @returns {GroupMember} GroupMember instance
     */GroupMember.create=function create(properties){return new GroupMember(properties);};/**
     * Encodes the specified GroupMember message. Does not implicitly {@link GroupMember.verify|verify} messages.
     * @function encode
     * @memberof GroupMember
     * @static
     * @param {IGroupMember} message GroupMember message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GroupMember.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.memberId);if(message.alias!=null&&message.hasOwnProperty("alias"))writer.uint32(/* id 2, wireType 2 =*/18).string(message.alias);writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))writer.uint32(/* id 4, wireType 0 =*/32).int64(message.updateDt);if(message.createDt!=null&&message.hasOwnProperty("createDt"))writer.uint32(/* id 5, wireType 0 =*/40).int64(message.createDt);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 6, wireType 2 =*/50).string(message.extra);return writer;};/**
     * Encodes the specified GroupMember message, length delimited. Does not implicitly {@link GroupMember.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GroupMember
     * @static
     * @param {IGroupMember} message GroupMember message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GroupMember.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GroupMember message from the specified reader or buffer.
     * @function decode
     * @memberof GroupMember
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GroupMember} GroupMember
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GroupMember.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GroupMember();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.memberId=reader.string();break;case 2:message.alias=reader.string();break;case 3:message.type=reader.int32();break;case 4:message.updateDt=reader.int64();break;case 5:message.createDt=reader.int64();break;case 6:message.extra=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("memberId"))throw $util.ProtocolError("missing required 'memberId'",{instance:message});if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});return message;};/**
     * Decodes a GroupMember message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GroupMember
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GroupMember} GroupMember
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GroupMember.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GroupMember message.
     * @function verify
     * @memberof GroupMember
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GroupMember.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.memberId))return"memberId: string expected";if(message.alias!=null&&message.hasOwnProperty("alias"))if(!$util.isString(message.alias))return"alias: string expected";if(!$util.isInteger(message.type))return"type: integer expected";if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(!$util.isInteger(message.updateDt)&&!(message.updateDt&&$util.isInteger(message.updateDt.low)&&$util.isInteger(message.updateDt.high)))return"updateDt: integer|Long expected";if(message.createDt!=null&&message.hasOwnProperty("createDt"))if(!$util.isInteger(message.createDt)&&!(message.createDt&&$util.isInteger(message.createDt.low)&&$util.isInteger(message.createDt.high)))return"createDt: integer|Long expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";return null;};/**
     * Creates a GroupMember message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GroupMember
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GroupMember} GroupMember
     */GroupMember.fromObject=function fromObject(object){if(object instanceof $root.GroupMember)return object;var message=new $root.GroupMember();if(object.memberId!=null)message.memberId=String(object.memberId);if(object.alias!=null)message.alias=String(object.alias);if(object.type!=null)message.type=object.type|0;if(object.updateDt!=null)if($util.Long)(message.updateDt=$util.Long.fromValue(object.updateDt)).unsigned=false;else if(typeof object.updateDt==="string")message.updateDt=parseInt(object.updateDt,10);else if(typeof object.updateDt==="number")message.updateDt=object.updateDt;else if((0,_typeof3.default)(object.updateDt)==="object")message.updateDt=new $util.LongBits(object.updateDt.low>>>0,object.updateDt.high>>>0).toNumber();if(object.createDt!=null)if($util.Long)(message.createDt=$util.Long.fromValue(object.createDt)).unsigned=false;else if(typeof object.createDt==="string")message.createDt=parseInt(object.createDt,10);else if(typeof object.createDt==="number")message.createDt=object.createDt;else if((0,_typeof3.default)(object.createDt)==="object")message.createDt=new $util.LongBits(object.createDt.low>>>0,object.createDt.high>>>0).toNumber();if(object.extra!=null)message.extra=String(object.extra);return message;};/**
     * Creates a plain object from a GroupMember message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GroupMember
     * @static
     * @param {GroupMember} message GroupMember
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GroupMember.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.memberId="";object.alias="";object.type=0;if($util.Long){var long=new $util.Long(0,0,false);object.updateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.updateDt=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.createDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.createDt=options.longs===String?"0":0;object.extra="";}if(message.memberId!=null&&message.hasOwnProperty("memberId"))object.memberId=message.memberId;if(message.alias!=null&&message.hasOwnProperty("alias"))object.alias=message.alias;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(typeof message.updateDt==="number")object.updateDt=options.longs===String?String(message.updateDt):message.updateDt;else object.updateDt=options.longs===String?$util.Long.prototype.toString.call(message.updateDt):options.longs===Number?new $util.LongBits(message.updateDt.low>>>0,message.updateDt.high>>>0).toNumber():message.updateDt;if(message.createDt!=null&&message.hasOwnProperty("createDt"))if(typeof message.createDt==="number")object.createDt=options.longs===String?String(message.createDt):message.createDt;else object.createDt=options.longs===String?$util.Long.prototype.toString.call(message.createDt):options.longs===Number?new $util.LongBits(message.createDt.low>>>0,message.createDt.high>>>0).toNumber():message.createDt;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;return object;};/**
     * Converts this GroupMember to JSON.
     * @function toJSON
     * @memberof GroupMember
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GroupMember.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GroupMember;}();$root.Group=function(){/**
     * Properties of a Group.
     * @exports IGroup
     * @interface IGroup
     * @property {IGroupInfo} groupInfo Group groupInfo
     * @property {Array.<IGroupMember>|null} [members] Group members
     *//**
     * Constructs a new Group.
     * @exports Group
     * @classdesc Represents a Group.
     * @implements IGroup
     * @constructor
     * @param {IGroup=} [properties] Properties to set
     */function Group(properties){this.members=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * Group groupInfo.
     * @member {IGroupInfo} groupInfo
     * @memberof Group
     * @instance
     */Group.prototype.groupInfo=null;/**
     * Group members.
     * @member {Array.<IGroupMember>} members
     * @memberof Group
     * @instance
     */Group.prototype.members=$util.emptyArray;/**
     * Creates a new Group instance using the specified properties.
     * @function create
     * @memberof Group
     * @static
     * @param {IGroup=} [properties] Properties to set
     * @returns {Group} Group instance
     */Group.create=function create(properties){return new Group(properties);};/**
     * Encodes the specified Group message. Does not implicitly {@link Group.verify|verify} messages.
     * @function encode
     * @memberof Group
     * @static
     * @param {IGroup} message Group message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Group.encode=function encode(message,writer){if(!writer)writer=$Writer.create();$root.GroupInfo.encode(message.groupInfo,writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();if(message.members!=null&&message.members.length)for(var i=0;i<message.members.length;++i){$root.GroupMember.encode(message.members[i],writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}return writer;};/**
     * Encodes the specified Group message, length delimited. Does not implicitly {@link Group.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Group
     * @static
     * @param {IGroup} message Group message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Group.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a Group message from the specified reader or buffer.
     * @function decode
     * @memberof Group
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Group} Group
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Group.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.Group();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.groupInfo=$root.GroupInfo.decode(reader,reader.uint32());break;case 2:if(!(message.members&&message.members.length))message.members=[];message.members.push($root.GroupMember.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("groupInfo"))throw $util.ProtocolError("missing required 'groupInfo'",{instance:message});return message;};/**
     * Decodes a Group message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Group
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Group} Group
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Group.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a Group message.
     * @function verify
     * @memberof Group
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */Group.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";{var error=$root.GroupInfo.verify(message.groupInfo);if(error)return"groupInfo."+error;}if(message.members!=null&&message.hasOwnProperty("members")){if(!Array.isArray(message.members))return"members: array expected";for(var i=0;i<message.members.length;++i){var error=$root.GroupMember.verify(message.members[i]);if(error)return"members."+error;}}return null;};/**
     * Creates a Group message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Group
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Group} Group
     */Group.fromObject=function fromObject(object){if(object instanceof $root.Group)return object;var message=new $root.Group();if(object.groupInfo!=null){if((0,_typeof3.default)(object.groupInfo)!=="object")throw TypeError(".Group.groupInfo: object expected");message.groupInfo=$root.GroupInfo.fromObject(object.groupInfo);}if(object.members){if(!Array.isArray(object.members))throw TypeError(".Group.members: array expected");message.members=[];for(var i=0;i<object.members.length;++i){if((0,_typeof3.default)(object.members[i])!=="object")throw TypeError(".Group.members: object expected");message.members[i]=$root.GroupMember.fromObject(object.members[i]);}}return message;};/**
     * Creates a plain object from a Group message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Group
     * @static
     * @param {Group} message Group
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */Group.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.members=[];if(options.defaults)object.groupInfo=null;if(message.groupInfo!=null&&message.hasOwnProperty("groupInfo"))object.groupInfo=$root.GroupInfo.toObject(message.groupInfo,options);if(message.members&&message.members.length){object.members=[];for(var j=0;j<message.members.length;++j){object.members[j]=$root.GroupMember.toObject(message.members[j],options);}}return object;};/**
     * Converts this Group to JSON.
     * @function toJSON
     * @memberof Group
     * @instance
     * @returns {Object.<string,*>} JSON object
     */Group.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return Group;}();$root.ChannelMenu=function(){/**
     * Properties of a ChannelMenu.
     * @exports IChannelMenu
     * @interface IChannelMenu
     * @property {string} type ChannelMenu type
     * @property {string} name ChannelMenu name
     * @property {string|null} [key] ChannelMenu key
     * @property {string|null} [url] ChannelMenu url
     * @property {string|null} [mediaId] ChannelMenu mediaId
     * @property {string|null} [articleId] ChannelMenu articleId
     * @property {string|null} [appId] ChannelMenu appId
     * @property {string|null} [appPage] ChannelMenu appPage
     * @property {Array.<IChannelMenu>|null} [subMenu] ChannelMenu subMenu
     * @property {string|null} [menuId] ChannelMenu menuId
     * @property {string|null} [extra] ChannelMenu extra
     *//**
     * Constructs a new ChannelMenu.
     * @exports ChannelMenu
     * @classdesc Represents a ChannelMenu.
     * @implements IChannelMenu
     * @constructor
     * @param {IChannelMenu=} [properties] Properties to set
     */function ChannelMenu(properties){this.subMenu=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ChannelMenu type.
     * @member {string} type
     * @memberof ChannelMenu
     * @instance
     */ChannelMenu.prototype.type="";/**
     * ChannelMenu name.
     * @member {string} name
     * @memberof ChannelMenu
     * @instance
     */ChannelMenu.prototype.name="";/**
     * ChannelMenu key.
     * @member {string} key
     * @memberof ChannelMenu
     * @instance
     */ChannelMenu.prototype.key="";/**
     * ChannelMenu url.
     * @member {string} url
     * @memberof ChannelMenu
     * @instance
     */ChannelMenu.prototype.url="";/**
     * ChannelMenu mediaId.
     * @member {string} mediaId
     * @memberof ChannelMenu
     * @instance
     */ChannelMenu.prototype.mediaId="";/**
     * ChannelMenu articleId.
     * @member {string} articleId
     * @memberof ChannelMenu
     * @instance
     */ChannelMenu.prototype.articleId="";/**
     * ChannelMenu appId.
     * @member {string} appId
     * @memberof ChannelMenu
     * @instance
     */ChannelMenu.prototype.appId="";/**
     * ChannelMenu appPage.
     * @member {string} appPage
     * @memberof ChannelMenu
     * @instance
     */ChannelMenu.prototype.appPage="";/**
     * ChannelMenu subMenu.
     * @member {Array.<IChannelMenu>} subMenu
     * @memberof ChannelMenu
     * @instance
     */ChannelMenu.prototype.subMenu=$util.emptyArray;/**
     * ChannelMenu menuId.
     * @member {string} menuId
     * @memberof ChannelMenu
     * @instance
     */ChannelMenu.prototype.menuId="";/**
     * ChannelMenu extra.
     * @member {string} extra
     * @memberof ChannelMenu
     * @instance
     */ChannelMenu.prototype.extra="";/**
     * Creates a new ChannelMenu instance using the specified properties.
     * @function create
     * @memberof ChannelMenu
     * @static
     * @param {IChannelMenu=} [properties] Properties to set
     * @returns {ChannelMenu} ChannelMenu instance
     */ChannelMenu.create=function create(properties){return new ChannelMenu(properties);};/**
     * Encodes the specified ChannelMenu message. Does not implicitly {@link ChannelMenu.verify|verify} messages.
     * @function encode
     * @memberof ChannelMenu
     * @static
     * @param {IChannelMenu} message ChannelMenu message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ChannelMenu.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);if(message.key!=null&&message.hasOwnProperty("key"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.key);if(message.url!=null&&message.hasOwnProperty("url"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.url);if(message.mediaId!=null&&message.hasOwnProperty("mediaId"))writer.uint32(/* id 5, wireType 2 =*/42).string(message.mediaId);if(message.articleId!=null&&message.hasOwnProperty("articleId"))writer.uint32(/* id 6, wireType 2 =*/50).string(message.articleId);if(message.appId!=null&&message.hasOwnProperty("appId"))writer.uint32(/* id 7, wireType 2 =*/58).string(message.appId);if(message.appPage!=null&&message.hasOwnProperty("appPage"))writer.uint32(/* id 8, wireType 2 =*/66).string(message.appPage);if(message.subMenu!=null&&message.subMenu.length)for(var i=0;i<message.subMenu.length;++i){$root.ChannelMenu.encode(message.subMenu[i],writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();}if(message.menuId!=null&&message.hasOwnProperty("menuId"))writer.uint32(/* id 10, wireType 2 =*/82).string(message.menuId);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 11, wireType 2 =*/90).string(message.extra);return writer;};/**
     * Encodes the specified ChannelMenu message, length delimited. Does not implicitly {@link ChannelMenu.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ChannelMenu
     * @static
     * @param {IChannelMenu} message ChannelMenu message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ChannelMenu.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ChannelMenu message from the specified reader or buffer.
     * @function decode
     * @memberof ChannelMenu
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ChannelMenu} ChannelMenu
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ChannelMenu.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ChannelMenu();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.type=reader.string();break;case 2:message.name=reader.string();break;case 3:message.key=reader.string();break;case 4:message.url=reader.string();break;case 5:message.mediaId=reader.string();break;case 6:message.articleId=reader.string();break;case 7:message.appId=reader.string();break;case 8:message.appPage=reader.string();break;case 9:if(!(message.subMenu&&message.subMenu.length))message.subMenu=[];message.subMenu.push($root.ChannelMenu.decode(reader,reader.uint32()));break;case 10:message.menuId=reader.string();break;case 11:message.extra=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});if(!message.hasOwnProperty("name"))throw $util.ProtocolError("missing required 'name'",{instance:message});return message;};/**
     * Decodes a ChannelMenu message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ChannelMenu
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ChannelMenu} ChannelMenu
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ChannelMenu.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ChannelMenu message.
     * @function verify
     * @memberof ChannelMenu
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ChannelMenu.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.type))return"type: string expected";if(!$util.isString(message.name))return"name: string expected";if(message.key!=null&&message.hasOwnProperty("key"))if(!$util.isString(message.key))return"key: string expected";if(message.url!=null&&message.hasOwnProperty("url"))if(!$util.isString(message.url))return"url: string expected";if(message.mediaId!=null&&message.hasOwnProperty("mediaId"))if(!$util.isString(message.mediaId))return"mediaId: string expected";if(message.articleId!=null&&message.hasOwnProperty("articleId"))if(!$util.isString(message.articleId))return"articleId: string expected";if(message.appId!=null&&message.hasOwnProperty("appId"))if(!$util.isString(message.appId))return"appId: string expected";if(message.appPage!=null&&message.hasOwnProperty("appPage"))if(!$util.isString(message.appPage))return"appPage: string expected";if(message.subMenu!=null&&message.hasOwnProperty("subMenu")){if(!Array.isArray(message.subMenu))return"subMenu: array expected";for(var i=0;i<message.subMenu.length;++i){var error=$root.ChannelMenu.verify(message.subMenu[i]);if(error)return"subMenu."+error;}}if(message.menuId!=null&&message.hasOwnProperty("menuId"))if(!$util.isString(message.menuId))return"menuId: string expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";return null;};/**
     * Creates a ChannelMenu message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ChannelMenu
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ChannelMenu} ChannelMenu
     */ChannelMenu.fromObject=function fromObject(object){if(object instanceof $root.ChannelMenu)return object;var message=new $root.ChannelMenu();if(object.type!=null)message.type=String(object.type);if(object.name!=null)message.name=String(object.name);if(object.key!=null)message.key=String(object.key);if(object.url!=null)message.url=String(object.url);if(object.mediaId!=null)message.mediaId=String(object.mediaId);if(object.articleId!=null)message.articleId=String(object.articleId);if(object.appId!=null)message.appId=String(object.appId);if(object.appPage!=null)message.appPage=String(object.appPage);if(object.subMenu){if(!Array.isArray(object.subMenu))throw TypeError(".ChannelMenu.subMenu: array expected");message.subMenu=[];for(var i=0;i<object.subMenu.length;++i){if((0,_typeof3.default)(object.subMenu[i])!=="object")throw TypeError(".ChannelMenu.subMenu: object expected");message.subMenu[i]=$root.ChannelMenu.fromObject(object.subMenu[i]);}}if(object.menuId!=null)message.menuId=String(object.menuId);if(object.extra!=null)message.extra=String(object.extra);return message;};/**
     * Creates a plain object from a ChannelMenu message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ChannelMenu
     * @static
     * @param {ChannelMenu} message ChannelMenu
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ChannelMenu.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.subMenu=[];if(options.defaults){object.type="";object.name="";object.key="";object.url="";object.mediaId="";object.articleId="";object.appId="";object.appPage="";object.menuId="";object.extra="";}if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.name!=null&&message.hasOwnProperty("name"))object.name=message.name;if(message.key!=null&&message.hasOwnProperty("key"))object.key=message.key;if(message.url!=null&&message.hasOwnProperty("url"))object.url=message.url;if(message.mediaId!=null&&message.hasOwnProperty("mediaId"))object.mediaId=message.mediaId;if(message.articleId!=null&&message.hasOwnProperty("articleId"))object.articleId=message.articleId;if(message.appId!=null&&message.hasOwnProperty("appId"))object.appId=message.appId;if(message.appPage!=null&&message.hasOwnProperty("appPage"))object.appPage=message.appPage;if(message.subMenu&&message.subMenu.length){object.subMenu=[];for(var j=0;j<message.subMenu.length;++j){object.subMenu[j]=$root.ChannelMenu.toObject(message.subMenu[j],options);}}if(message.menuId!=null&&message.hasOwnProperty("menuId"))object.menuId=message.menuId;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;return object;};/**
     * Converts this ChannelMenu to JSON.
     * @function toJSON
     * @memberof ChannelMenu
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ChannelMenu.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ChannelMenu;}();$root.ChannelMenuList=function(){/**
     * Properties of a ChannelMenuList.
     * @exports IChannelMenuList
     * @interface IChannelMenuList
     * @property {Array.<IChannelMenu>|null} [menu] ChannelMenuList menu
     *//**
     * Constructs a new ChannelMenuList.
     * @exports ChannelMenuList
     * @classdesc Represents a ChannelMenuList.
     * @implements IChannelMenuList
     * @constructor
     * @param {IChannelMenuList=} [properties] Properties to set
     */function ChannelMenuList(properties){this.menu=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ChannelMenuList menu.
     * @member {Array.<IChannelMenu>} menu
     * @memberof ChannelMenuList
     * @instance
     */ChannelMenuList.prototype.menu=$util.emptyArray;/**
     * Creates a new ChannelMenuList instance using the specified properties.
     * @function create
     * @memberof ChannelMenuList
     * @static
     * @param {IChannelMenuList=} [properties] Properties to set
     * @returns {ChannelMenuList} ChannelMenuList instance
     */ChannelMenuList.create=function create(properties){return new ChannelMenuList(properties);};/**
     * Encodes the specified ChannelMenuList message. Does not implicitly {@link ChannelMenuList.verify|verify} messages.
     * @function encode
     * @memberof ChannelMenuList
     * @static
     * @param {IChannelMenuList} message ChannelMenuList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ChannelMenuList.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.menu!=null&&message.menu.length)for(var i=0;i<message.menu.length;++i){$root.ChannelMenu.encode(message.menu[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified ChannelMenuList message, length delimited. Does not implicitly {@link ChannelMenuList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ChannelMenuList
     * @static
     * @param {IChannelMenuList} message ChannelMenuList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ChannelMenuList.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ChannelMenuList message from the specified reader or buffer.
     * @function decode
     * @memberof ChannelMenuList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ChannelMenuList} ChannelMenuList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ChannelMenuList.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ChannelMenuList();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.menu&&message.menu.length))message.menu=[];message.menu.push($root.ChannelMenu.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a ChannelMenuList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ChannelMenuList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ChannelMenuList} ChannelMenuList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ChannelMenuList.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ChannelMenuList message.
     * @function verify
     * @memberof ChannelMenuList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ChannelMenuList.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.menu!=null&&message.hasOwnProperty("menu")){if(!Array.isArray(message.menu))return"menu: array expected";for(var i=0;i<message.menu.length;++i){var error=$root.ChannelMenu.verify(message.menu[i]);if(error)return"menu."+error;}}return null;};/**
     * Creates a ChannelMenuList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ChannelMenuList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ChannelMenuList} ChannelMenuList
     */ChannelMenuList.fromObject=function fromObject(object){if(object instanceof $root.ChannelMenuList)return object;var message=new $root.ChannelMenuList();if(object.menu){if(!Array.isArray(object.menu))throw TypeError(".ChannelMenuList.menu: array expected");message.menu=[];for(var i=0;i<object.menu.length;++i){if((0,_typeof3.default)(object.menu[i])!=="object")throw TypeError(".ChannelMenuList.menu: object expected");message.menu[i]=$root.ChannelMenu.fromObject(object.menu[i]);}}return message;};/**
     * Creates a plain object from a ChannelMenuList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ChannelMenuList
     * @static
     * @param {ChannelMenuList} message ChannelMenuList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ChannelMenuList.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.menu=[];if(message.menu&&message.menu.length){object.menu=[];for(var j=0;j<message.menu.length;++j){object.menu[j]=$root.ChannelMenu.toObject(message.menu[j],options);}}return object;};/**
     * Converts this ChannelMenuList to JSON.
     * @function toJSON
     * @memberof ChannelMenuList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ChannelMenuList.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ChannelMenuList;}();$root.ChannelInfo=function(){/**
     * Properties of a ChannelInfo.
     * @exports IChannelInfo
     * @interface IChannelInfo
     * @property {string|null} [targetId] ChannelInfo targetId
     * @property {string} name ChannelInfo name
     * @property {string|null} [portrait] ChannelInfo portrait
     * @property {string|null} [owner] ChannelInfo owner
     * @property {number|null} [status] ChannelInfo status
     * @property {string|null} [desc] ChannelInfo desc
     * @property {string|null} [extra] ChannelInfo extra
     * @property {Long|null} [updateDt] ChannelInfo updateDt
     * @property {string|null} [secret] ChannelInfo secret
     * @property {string|null} [callback] ChannelInfo callback
     * @property {number|null} [automatic] ChannelInfo automatic
     * @property {Array.<IChannelMenu>|null} [menu] ChannelInfo menu
     *//**
     * Constructs a new ChannelInfo.
     * @exports ChannelInfo
     * @classdesc Represents a ChannelInfo.
     * @implements IChannelInfo
     * @constructor
     * @param {IChannelInfo=} [properties] Properties to set
     */function ChannelInfo(properties){this.menu=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ChannelInfo targetId.
     * @member {string} targetId
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.targetId="";/**
     * ChannelInfo name.
     * @member {string} name
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.name="";/**
     * ChannelInfo portrait.
     * @member {string} portrait
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.portrait="";/**
     * ChannelInfo owner.
     * @member {string} owner
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.owner="";/**
     * ChannelInfo status.
     * @member {number} status
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.status=0;/**
     * ChannelInfo desc.
     * @member {string} desc
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.desc="";/**
     * ChannelInfo extra.
     * @member {string} extra
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.extra="";/**
     * ChannelInfo updateDt.
     * @member {Long} updateDt
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.updateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ChannelInfo secret.
     * @member {string} secret
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.secret="";/**
     * ChannelInfo callback.
     * @member {string} callback
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.callback="";/**
     * ChannelInfo automatic.
     * @member {number} automatic
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.automatic=0;/**
     * ChannelInfo menu.
     * @member {Array.<IChannelMenu>} menu
     * @memberof ChannelInfo
     * @instance
     */ChannelInfo.prototype.menu=$util.emptyArray;/**
     * Creates a new ChannelInfo instance using the specified properties.
     * @function create
     * @memberof ChannelInfo
     * @static
     * @param {IChannelInfo=} [properties] Properties to set
     * @returns {ChannelInfo} ChannelInfo instance
     */ChannelInfo.create=function create(properties){return new ChannelInfo(properties);};/**
     * Encodes the specified ChannelInfo message. Does not implicitly {@link ChannelInfo.verify|verify} messages.
     * @function encode
     * @memberof ChannelInfo
     * @static
     * @param {IChannelInfo} message ChannelInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ChannelInfo.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.targetId!=null&&message.hasOwnProperty("targetId"))writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);if(message.portrait!=null&&message.hasOwnProperty("portrait"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.portrait);if(message.owner!=null&&message.hasOwnProperty("owner"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.owner);if(message.status!=null&&message.hasOwnProperty("status"))writer.uint32(/* id 5, wireType 0 =*/40).int32(message.status);if(message.desc!=null&&message.hasOwnProperty("desc"))writer.uint32(/* id 6, wireType 2 =*/50).string(message.desc);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 7, wireType 2 =*/58).string(message.extra);if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))writer.uint32(/* id 8, wireType 0 =*/64).int64(message.updateDt);if(message.secret!=null&&message.hasOwnProperty("secret"))writer.uint32(/* id 9, wireType 2 =*/74).string(message.secret);if(message.callback!=null&&message.hasOwnProperty("callback"))writer.uint32(/* id 10, wireType 2 =*/82).string(message.callback);if(message.automatic!=null&&message.hasOwnProperty("automatic"))writer.uint32(/* id 11, wireType 0 =*/88).int32(message.automatic);if(message.menu!=null&&message.menu.length)for(var i=0;i<message.menu.length;++i){$root.ChannelMenu.encode(message.menu[i],writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();}return writer;};/**
     * Encodes the specified ChannelInfo message, length delimited. Does not implicitly {@link ChannelInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ChannelInfo
     * @static
     * @param {IChannelInfo} message ChannelInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ChannelInfo.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ChannelInfo message from the specified reader or buffer.
     * @function decode
     * @memberof ChannelInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ChannelInfo} ChannelInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ChannelInfo.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ChannelInfo();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.targetId=reader.string();break;case 2:message.name=reader.string();break;case 3:message.portrait=reader.string();break;case 4:message.owner=reader.string();break;case 5:message.status=reader.int32();break;case 6:message.desc=reader.string();break;case 7:message.extra=reader.string();break;case 8:message.updateDt=reader.int64();break;case 9:message.secret=reader.string();break;case 10:message.callback=reader.string();break;case 11:message.automatic=reader.int32();break;case 12:if(!(message.menu&&message.menu.length))message.menu=[];message.menu.push($root.ChannelMenu.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("name"))throw $util.ProtocolError("missing required 'name'",{instance:message});return message;};/**
     * Decodes a ChannelInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ChannelInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ChannelInfo} ChannelInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ChannelInfo.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ChannelInfo message.
     * @function verify
     * @memberof ChannelInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ChannelInfo.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.targetId!=null&&message.hasOwnProperty("targetId"))if(!$util.isString(message.targetId))return"targetId: string expected";if(!$util.isString(message.name))return"name: string expected";if(message.portrait!=null&&message.hasOwnProperty("portrait"))if(!$util.isString(message.portrait))return"portrait: string expected";if(message.owner!=null&&message.hasOwnProperty("owner"))if(!$util.isString(message.owner))return"owner: string expected";if(message.status!=null&&message.hasOwnProperty("status"))if(!$util.isInteger(message.status))return"status: integer expected";if(message.desc!=null&&message.hasOwnProperty("desc"))if(!$util.isString(message.desc))return"desc: string expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(!$util.isInteger(message.updateDt)&&!(message.updateDt&&$util.isInteger(message.updateDt.low)&&$util.isInteger(message.updateDt.high)))return"updateDt: integer|Long expected";if(message.secret!=null&&message.hasOwnProperty("secret"))if(!$util.isString(message.secret))return"secret: string expected";if(message.callback!=null&&message.hasOwnProperty("callback"))if(!$util.isString(message.callback))return"callback: string expected";if(message.automatic!=null&&message.hasOwnProperty("automatic"))if(!$util.isInteger(message.automatic))return"automatic: integer expected";if(message.menu!=null&&message.hasOwnProperty("menu")){if(!Array.isArray(message.menu))return"menu: array expected";for(var i=0;i<message.menu.length;++i){var error=$root.ChannelMenu.verify(message.menu[i]);if(error)return"menu."+error;}}return null;};/**
     * Creates a ChannelInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ChannelInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ChannelInfo} ChannelInfo
     */ChannelInfo.fromObject=function fromObject(object){if(object instanceof $root.ChannelInfo)return object;var message=new $root.ChannelInfo();if(object.targetId!=null)message.targetId=String(object.targetId);if(object.name!=null)message.name=String(object.name);if(object.portrait!=null)message.portrait=String(object.portrait);if(object.owner!=null)message.owner=String(object.owner);if(object.status!=null)message.status=object.status|0;if(object.desc!=null)message.desc=String(object.desc);if(object.extra!=null)message.extra=String(object.extra);if(object.updateDt!=null)if($util.Long)(message.updateDt=$util.Long.fromValue(object.updateDt)).unsigned=false;else if(typeof object.updateDt==="string")message.updateDt=parseInt(object.updateDt,10);else if(typeof object.updateDt==="number")message.updateDt=object.updateDt;else if((0,_typeof3.default)(object.updateDt)==="object")message.updateDt=new $util.LongBits(object.updateDt.low>>>0,object.updateDt.high>>>0).toNumber();if(object.secret!=null)message.secret=String(object.secret);if(object.callback!=null)message.callback=String(object.callback);if(object.automatic!=null)message.automatic=object.automatic|0;if(object.menu){if(!Array.isArray(object.menu))throw TypeError(".ChannelInfo.menu: array expected");message.menu=[];for(var i=0;i<object.menu.length;++i){if((0,_typeof3.default)(object.menu[i])!=="object")throw TypeError(".ChannelInfo.menu: object expected");message.menu[i]=$root.ChannelMenu.fromObject(object.menu[i]);}}return message;};/**
     * Creates a plain object from a ChannelInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ChannelInfo
     * @static
     * @param {ChannelInfo} message ChannelInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ChannelInfo.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.menu=[];if(options.defaults){object.targetId="";object.name="";object.portrait="";object.owner="";object.status=0;object.desc="";object.extra="";if($util.Long){var long=new $util.Long(0,0,false);object.updateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.updateDt=options.longs===String?"0":0;object.secret="";object.callback="";object.automatic=0;}if(message.targetId!=null&&message.hasOwnProperty("targetId"))object.targetId=message.targetId;if(message.name!=null&&message.hasOwnProperty("name"))object.name=message.name;if(message.portrait!=null&&message.hasOwnProperty("portrait"))object.portrait=message.portrait;if(message.owner!=null&&message.hasOwnProperty("owner"))object.owner=message.owner;if(message.status!=null&&message.hasOwnProperty("status"))object.status=message.status;if(message.desc!=null&&message.hasOwnProperty("desc"))object.desc=message.desc;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(typeof message.updateDt==="number")object.updateDt=options.longs===String?String(message.updateDt):message.updateDt;else object.updateDt=options.longs===String?$util.Long.prototype.toString.call(message.updateDt):options.longs===Number?new $util.LongBits(message.updateDt.low>>>0,message.updateDt.high>>>0).toNumber():message.updateDt;if(message.secret!=null&&message.hasOwnProperty("secret"))object.secret=message.secret;if(message.callback!=null&&message.hasOwnProperty("callback"))object.callback=message.callback;if(message.automatic!=null&&message.hasOwnProperty("automatic"))object.automatic=message.automatic;if(message.menu&&message.menu.length){object.menu=[];for(var j=0;j<message.menu.length;++j){object.menu[j]=$root.ChannelMenu.toObject(message.menu[j],options);}}return object;};/**
     * Converts this ChannelInfo to JSON.
     * @function toJSON
     * @memberof ChannelInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ChannelInfo.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ChannelInfo;}();$root.ModifyChannelInfo=function(){/**
     * Properties of a ModifyChannelInfo.
     * @exports IModifyChannelInfo
     * @interface IModifyChannelInfo
     * @property {string} channelId ModifyChannelInfo channelId
     * @property {number} type ModifyChannelInfo type
     * @property {string} value ModifyChannelInfo value
     *//**
     * Constructs a new ModifyChannelInfo.
     * @exports ModifyChannelInfo
     * @classdesc Represents a ModifyChannelInfo.
     * @implements IModifyChannelInfo
     * @constructor
     * @param {IModifyChannelInfo=} [properties] Properties to set
     */function ModifyChannelInfo(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ModifyChannelInfo channelId.
     * @member {string} channelId
     * @memberof ModifyChannelInfo
     * @instance
     */ModifyChannelInfo.prototype.channelId="";/**
     * ModifyChannelInfo type.
     * @member {number} type
     * @memberof ModifyChannelInfo
     * @instance
     */ModifyChannelInfo.prototype.type=0;/**
     * ModifyChannelInfo value.
     * @member {string} value
     * @memberof ModifyChannelInfo
     * @instance
     */ModifyChannelInfo.prototype.value="";/**
     * Creates a new ModifyChannelInfo instance using the specified properties.
     * @function create
     * @memberof ModifyChannelInfo
     * @static
     * @param {IModifyChannelInfo=} [properties] Properties to set
     * @returns {ModifyChannelInfo} ModifyChannelInfo instance
     */ModifyChannelInfo.create=function create(properties){return new ModifyChannelInfo(properties);};/**
     * Encodes the specified ModifyChannelInfo message. Does not implicitly {@link ModifyChannelInfo.verify|verify} messages.
     * @function encode
     * @memberof ModifyChannelInfo
     * @static
     * @param {IModifyChannelInfo} message ModifyChannelInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyChannelInfo.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.channelId);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);writer.uint32(/* id 3, wireType 2 =*/26).string(message.value);return writer;};/**
     * Encodes the specified ModifyChannelInfo message, length delimited. Does not implicitly {@link ModifyChannelInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ModifyChannelInfo
     * @static
     * @param {IModifyChannelInfo} message ModifyChannelInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyChannelInfo.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ModifyChannelInfo message from the specified reader or buffer.
     * @function decode
     * @memberof ModifyChannelInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ModifyChannelInfo} ModifyChannelInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyChannelInfo.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ModifyChannelInfo();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.channelId=reader.string();break;case 2:message.type=reader.int32();break;case 3:message.value=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("channelId"))throw $util.ProtocolError("missing required 'channelId'",{instance:message});if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});if(!message.hasOwnProperty("value"))throw $util.ProtocolError("missing required 'value'",{instance:message});return message;};/**
     * Decodes a ModifyChannelInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ModifyChannelInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ModifyChannelInfo} ModifyChannelInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyChannelInfo.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ModifyChannelInfo message.
     * @function verify
     * @memberof ModifyChannelInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ModifyChannelInfo.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.channelId))return"channelId: string expected";if(!$util.isInteger(message.type))return"type: integer expected";if(!$util.isString(message.value))return"value: string expected";return null;};/**
     * Creates a ModifyChannelInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ModifyChannelInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ModifyChannelInfo} ModifyChannelInfo
     */ModifyChannelInfo.fromObject=function fromObject(object){if(object instanceof $root.ModifyChannelInfo)return object;var message=new $root.ModifyChannelInfo();if(object.channelId!=null)message.channelId=String(object.channelId);if(object.type!=null)message.type=object.type|0;if(object.value!=null)message.value=String(object.value);return message;};/**
     * Creates a plain object from a ModifyChannelInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ModifyChannelInfo
     * @static
     * @param {ModifyChannelInfo} message ModifyChannelInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ModifyChannelInfo.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.channelId="";object.type=0;object.value="";}if(message.channelId!=null&&message.hasOwnProperty("channelId"))object.channelId=message.channelId;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.value!=null&&message.hasOwnProperty("value"))object.value=message.value;return object;};/**
     * Converts this ModifyChannelInfo to JSON.
     * @function toJSON
     * @memberof ModifyChannelInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ModifyChannelInfo.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ModifyChannelInfo;}();$root.TransferChannel=function(){/**
     * Properties of a TransferChannel.
     * @exports ITransferChannel
     * @interface ITransferChannel
     * @property {string} channelId TransferChannel channelId
     * @property {string} newOwner TransferChannel newOwner
     *//**
     * Constructs a new TransferChannel.
     * @exports TransferChannel
     * @classdesc Represents a TransferChannel.
     * @implements ITransferChannel
     * @constructor
     * @param {ITransferChannel=} [properties] Properties to set
     */function TransferChannel(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * TransferChannel channelId.
     * @member {string} channelId
     * @memberof TransferChannel
     * @instance
     */TransferChannel.prototype.channelId="";/**
     * TransferChannel newOwner.
     * @member {string} newOwner
     * @memberof TransferChannel
     * @instance
     */TransferChannel.prototype.newOwner="";/**
     * Creates a new TransferChannel instance using the specified properties.
     * @function create
     * @memberof TransferChannel
     * @static
     * @param {ITransferChannel=} [properties] Properties to set
     * @returns {TransferChannel} TransferChannel instance
     */TransferChannel.create=function create(properties){return new TransferChannel(properties);};/**
     * Encodes the specified TransferChannel message. Does not implicitly {@link TransferChannel.verify|verify} messages.
     * @function encode
     * @memberof TransferChannel
     * @static
     * @param {ITransferChannel} message TransferChannel message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */TransferChannel.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.channelId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.newOwner);return writer;};/**
     * Encodes the specified TransferChannel message, length delimited. Does not implicitly {@link TransferChannel.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TransferChannel
     * @static
     * @param {ITransferChannel} message TransferChannel message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */TransferChannel.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a TransferChannel message from the specified reader or buffer.
     * @function decode
     * @memberof TransferChannel
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TransferChannel} TransferChannel
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */TransferChannel.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.TransferChannel();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.channelId=reader.string();break;case 2:message.newOwner=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("channelId"))throw $util.ProtocolError("missing required 'channelId'",{instance:message});if(!message.hasOwnProperty("newOwner"))throw $util.ProtocolError("missing required 'newOwner'",{instance:message});return message;};/**
     * Decodes a TransferChannel message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TransferChannel
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TransferChannel} TransferChannel
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */TransferChannel.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a TransferChannel message.
     * @function verify
     * @memberof TransferChannel
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */TransferChannel.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.channelId))return"channelId: string expected";if(!$util.isString(message.newOwner))return"newOwner: string expected";return null;};/**
     * Creates a TransferChannel message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TransferChannel
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TransferChannel} TransferChannel
     */TransferChannel.fromObject=function fromObject(object){if(object instanceof $root.TransferChannel)return object;var message=new $root.TransferChannel();if(object.channelId!=null)message.channelId=String(object.channelId);if(object.newOwner!=null)message.newOwner=String(object.newOwner);return message;};/**
     * Creates a plain object from a TransferChannel message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TransferChannel
     * @static
     * @param {TransferChannel} message TransferChannel
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */TransferChannel.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.channelId="";object.newOwner="";}if(message.channelId!=null&&message.hasOwnProperty("channelId"))object.channelId=message.channelId;if(message.newOwner!=null&&message.hasOwnProperty("newOwner"))object.newOwner=message.newOwner;return object;};/**
     * Converts this TransferChannel to JSON.
     * @function toJSON
     * @memberof TransferChannel
     * @instance
     * @returns {Object.<string,*>} JSON object
     */TransferChannel.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return TransferChannel;}();$root.PullChannelInfo=function(){/**
     * Properties of a PullChannelInfo.
     * @exports IPullChannelInfo
     * @interface IPullChannelInfo
     * @property {string} channelId PullChannelInfo channelId
     * @property {Long} head PullChannelInfo head
     *//**
     * Constructs a new PullChannelInfo.
     * @exports PullChannelInfo
     * @classdesc Represents a PullChannelInfo.
     * @implements IPullChannelInfo
     * @constructor
     * @param {IPullChannelInfo=} [properties] Properties to set
     */function PullChannelInfo(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullChannelInfo channelId.
     * @member {string} channelId
     * @memberof PullChannelInfo
     * @instance
     */PullChannelInfo.prototype.channelId="";/**
     * PullChannelInfo head.
     * @member {Long} head
     * @memberof PullChannelInfo
     * @instance
     */PullChannelInfo.prototype.head=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new PullChannelInfo instance using the specified properties.
     * @function create
     * @memberof PullChannelInfo
     * @static
     * @param {IPullChannelInfo=} [properties] Properties to set
     * @returns {PullChannelInfo} PullChannelInfo instance
     */PullChannelInfo.create=function create(properties){return new PullChannelInfo(properties);};/**
     * Encodes the specified PullChannelInfo message. Does not implicitly {@link PullChannelInfo.verify|verify} messages.
     * @function encode
     * @memberof PullChannelInfo
     * @static
     * @param {IPullChannelInfo} message PullChannelInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullChannelInfo.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.channelId);writer.uint32(/* id 2, wireType 0 =*/16).int64(message.head);return writer;};/**
     * Encodes the specified PullChannelInfo message, length delimited. Does not implicitly {@link PullChannelInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullChannelInfo
     * @static
     * @param {IPullChannelInfo} message PullChannelInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullChannelInfo.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullChannelInfo message from the specified reader or buffer.
     * @function decode
     * @memberof PullChannelInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullChannelInfo} PullChannelInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullChannelInfo.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullChannelInfo();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.channelId=reader.string();break;case 2:message.head=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("channelId"))throw $util.ProtocolError("missing required 'channelId'",{instance:message});if(!message.hasOwnProperty("head"))throw $util.ProtocolError("missing required 'head'",{instance:message});return message;};/**
     * Decodes a PullChannelInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullChannelInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullChannelInfo} PullChannelInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullChannelInfo.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullChannelInfo message.
     * @function verify
     * @memberof PullChannelInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullChannelInfo.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.channelId))return"channelId: string expected";if(!$util.isInteger(message.head)&&!(message.head&&$util.isInteger(message.head.low)&&$util.isInteger(message.head.high)))return"head: integer|Long expected";return null;};/**
     * Creates a PullChannelInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullChannelInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullChannelInfo} PullChannelInfo
     */PullChannelInfo.fromObject=function fromObject(object){if(object instanceof $root.PullChannelInfo)return object;var message=new $root.PullChannelInfo();if(object.channelId!=null)message.channelId=String(object.channelId);if(object.head!=null)if($util.Long)(message.head=$util.Long.fromValue(object.head)).unsigned=false;else if(typeof object.head==="string")message.head=parseInt(object.head,10);else if(typeof object.head==="number")message.head=object.head;else if((0,_typeof3.default)(object.head)==="object")message.head=new $util.LongBits(object.head.low>>>0,object.head.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a PullChannelInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullChannelInfo
     * @static
     * @param {PullChannelInfo} message PullChannelInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullChannelInfo.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.channelId="";if($util.Long){var long=new $util.Long(0,0,false);object.head=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.head=options.longs===String?"0":0;}if(message.channelId!=null&&message.hasOwnProperty("channelId"))object.channelId=message.channelId;if(message.head!=null&&message.hasOwnProperty("head"))if(typeof message.head==="number")object.head=options.longs===String?String(message.head):message.head;else object.head=options.longs===String?$util.Long.prototype.toString.call(message.head):options.longs===Number?new $util.LongBits(message.head.low>>>0,message.head.high>>>0).toNumber():message.head;return object;};/**
     * Converts this PullChannelInfo to JSON.
     * @function toJSON
     * @memberof PullChannelInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullChannelInfo.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullChannelInfo;}();$root.PullChannelListener=function(){/**
     * Properties of a PullChannelListener.
     * @exports IPullChannelListener
     * @interface IPullChannelListener
     * @property {string} channelId PullChannelListener channelId
     * @property {number} offset PullChannelListener offset
     * @property {number} count PullChannelListener count
     *//**
     * Constructs a new PullChannelListener.
     * @exports PullChannelListener
     * @classdesc Represents a PullChannelListener.
     * @implements IPullChannelListener
     * @constructor
     * @param {IPullChannelListener=} [properties] Properties to set
     */function PullChannelListener(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullChannelListener channelId.
     * @member {string} channelId
     * @memberof PullChannelListener
     * @instance
     */PullChannelListener.prototype.channelId="";/**
     * PullChannelListener offset.
     * @member {number} offset
     * @memberof PullChannelListener
     * @instance
     */PullChannelListener.prototype.offset=0;/**
     * PullChannelListener count.
     * @member {number} count
     * @memberof PullChannelListener
     * @instance
     */PullChannelListener.prototype.count=0;/**
     * Creates a new PullChannelListener instance using the specified properties.
     * @function create
     * @memberof PullChannelListener
     * @static
     * @param {IPullChannelListener=} [properties] Properties to set
     * @returns {PullChannelListener} PullChannelListener instance
     */PullChannelListener.create=function create(properties){return new PullChannelListener(properties);};/**
     * Encodes the specified PullChannelListener message. Does not implicitly {@link PullChannelListener.verify|verify} messages.
     * @function encode
     * @memberof PullChannelListener
     * @static
     * @param {IPullChannelListener} message PullChannelListener message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullChannelListener.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.channelId);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.offset);writer.uint32(/* id 3, wireType 0 =*/24).int32(message.count);return writer;};/**
     * Encodes the specified PullChannelListener message, length delimited. Does not implicitly {@link PullChannelListener.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullChannelListener
     * @static
     * @param {IPullChannelListener} message PullChannelListener message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullChannelListener.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullChannelListener message from the specified reader or buffer.
     * @function decode
     * @memberof PullChannelListener
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullChannelListener} PullChannelListener
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullChannelListener.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullChannelListener();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.channelId=reader.string();break;case 2:message.offset=reader.int32();break;case 3:message.count=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("channelId"))throw $util.ProtocolError("missing required 'channelId'",{instance:message});if(!message.hasOwnProperty("offset"))throw $util.ProtocolError("missing required 'offset'",{instance:message});if(!message.hasOwnProperty("count"))throw $util.ProtocolError("missing required 'count'",{instance:message});return message;};/**
     * Decodes a PullChannelListener message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullChannelListener
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullChannelListener} PullChannelListener
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullChannelListener.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullChannelListener message.
     * @function verify
     * @memberof PullChannelListener
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullChannelListener.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.channelId))return"channelId: string expected";if(!$util.isInteger(message.offset))return"offset: integer expected";if(!$util.isInteger(message.count))return"count: integer expected";return null;};/**
     * Creates a PullChannelListener message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullChannelListener
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullChannelListener} PullChannelListener
     */PullChannelListener.fromObject=function fromObject(object){if(object instanceof $root.PullChannelListener)return object;var message=new $root.PullChannelListener();if(object.channelId!=null)message.channelId=String(object.channelId);if(object.offset!=null)message.offset=object.offset|0;if(object.count!=null)message.count=object.count|0;return message;};/**
     * Creates a plain object from a PullChannelListener message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullChannelListener
     * @static
     * @param {PullChannelListener} message PullChannelListener
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullChannelListener.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.channelId="";object.offset=0;object.count=0;}if(message.channelId!=null&&message.hasOwnProperty("channelId"))object.channelId=message.channelId;if(message.offset!=null&&message.hasOwnProperty("offset"))object.offset=message.offset;if(message.count!=null&&message.hasOwnProperty("count"))object.count=message.count;return object;};/**
     * Converts this PullChannelListener to JSON.
     * @function toJSON
     * @memberof PullChannelListener
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullChannelListener.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullChannelListener;}();$root.PullChannelListenerResult=function(){/**
     * Properties of a PullChannelListenerResult.
     * @exports IPullChannelListenerResult
     * @interface IPullChannelListenerResult
     * @property {number} totalCount PullChannelListenerResult totalCount
     * @property {number} offset PullChannelListenerResult offset
     * @property {Array.<string>|null} [listener] PullChannelListenerResult listener
     *//**
     * Constructs a new PullChannelListenerResult.
     * @exports PullChannelListenerResult
     * @classdesc Represents a PullChannelListenerResult.
     * @implements IPullChannelListenerResult
     * @constructor
     * @param {IPullChannelListenerResult=} [properties] Properties to set
     */function PullChannelListenerResult(properties){this.listener=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullChannelListenerResult totalCount.
     * @member {number} totalCount
     * @memberof PullChannelListenerResult
     * @instance
     */PullChannelListenerResult.prototype.totalCount=0;/**
     * PullChannelListenerResult offset.
     * @member {number} offset
     * @memberof PullChannelListenerResult
     * @instance
     */PullChannelListenerResult.prototype.offset=0;/**
     * PullChannelListenerResult listener.
     * @member {Array.<string>} listener
     * @memberof PullChannelListenerResult
     * @instance
     */PullChannelListenerResult.prototype.listener=$util.emptyArray;/**
     * Creates a new PullChannelListenerResult instance using the specified properties.
     * @function create
     * @memberof PullChannelListenerResult
     * @static
     * @param {IPullChannelListenerResult=} [properties] Properties to set
     * @returns {PullChannelListenerResult} PullChannelListenerResult instance
     */PullChannelListenerResult.create=function create(properties){return new PullChannelListenerResult(properties);};/**
     * Encodes the specified PullChannelListenerResult message. Does not implicitly {@link PullChannelListenerResult.verify|verify} messages.
     * @function encode
     * @memberof PullChannelListenerResult
     * @static
     * @param {IPullChannelListenerResult} message PullChannelListenerResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullChannelListenerResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.totalCount);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.offset);if(message.listener!=null&&message.listener.length)for(var i=0;i<message.listener.length;++i){writer.uint32(/* id 3, wireType 2 =*/26).string(message.listener[i]);}return writer;};/**
     * Encodes the specified PullChannelListenerResult message, length delimited. Does not implicitly {@link PullChannelListenerResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullChannelListenerResult
     * @static
     * @param {IPullChannelListenerResult} message PullChannelListenerResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullChannelListenerResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullChannelListenerResult message from the specified reader or buffer.
     * @function decode
     * @memberof PullChannelListenerResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullChannelListenerResult} PullChannelListenerResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullChannelListenerResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullChannelListenerResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.totalCount=reader.int32();break;case 2:message.offset=reader.int32();break;case 3:if(!(message.listener&&message.listener.length))message.listener=[];message.listener.push(reader.string());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("totalCount"))throw $util.ProtocolError("missing required 'totalCount'",{instance:message});if(!message.hasOwnProperty("offset"))throw $util.ProtocolError("missing required 'offset'",{instance:message});return message;};/**
     * Decodes a PullChannelListenerResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullChannelListenerResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullChannelListenerResult} PullChannelListenerResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullChannelListenerResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullChannelListenerResult message.
     * @function verify
     * @memberof PullChannelListenerResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullChannelListenerResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.totalCount))return"totalCount: integer expected";if(!$util.isInteger(message.offset))return"offset: integer expected";if(message.listener!=null&&message.hasOwnProperty("listener")){if(!Array.isArray(message.listener))return"listener: array expected";for(var i=0;i<message.listener.length;++i){if(!$util.isString(message.listener[i]))return"listener: string[] expected";}}return null;};/**
     * Creates a PullChannelListenerResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullChannelListenerResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullChannelListenerResult} PullChannelListenerResult
     */PullChannelListenerResult.fromObject=function fromObject(object){if(object instanceof $root.PullChannelListenerResult)return object;var message=new $root.PullChannelListenerResult();if(object.totalCount!=null)message.totalCount=object.totalCount|0;if(object.offset!=null)message.offset=object.offset|0;if(object.listener){if(!Array.isArray(object.listener))throw TypeError(".PullChannelListenerResult.listener: array expected");message.listener=[];for(var i=0;i<object.listener.length;++i){message.listener[i]=String(object.listener[i]);}}return message;};/**
     * Creates a plain object from a PullChannelListenerResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullChannelListenerResult
     * @static
     * @param {PullChannelListenerResult} message PullChannelListenerResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullChannelListenerResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.listener=[];if(options.defaults){object.totalCount=0;object.offset=0;}if(message.totalCount!=null&&message.hasOwnProperty("totalCount"))object.totalCount=message.totalCount;if(message.offset!=null&&message.hasOwnProperty("offset"))object.offset=message.offset;if(message.listener&&message.listener.length){object.listener=[];for(var j=0;j<message.listener.length;++j){object.listener[j]=message.listener[j];}}return object;};/**
     * Converts this PullChannelListenerResult to JSON.
     * @function toJSON
     * @memberof PullChannelListenerResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullChannelListenerResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullChannelListenerResult;}();$root.ListenChannel=function(){/**
     * Properties of a ListenChannel.
     * @exports IListenChannel
     * @interface IListenChannel
     * @property {string} channelId ListenChannel channelId
     * @property {number} listen ListenChannel listen
     *//**
     * Constructs a new ListenChannel.
     * @exports ListenChannel
     * @classdesc Represents a ListenChannel.
     * @implements IListenChannel
     * @constructor
     * @param {IListenChannel=} [properties] Properties to set
     */function ListenChannel(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ListenChannel channelId.
     * @member {string} channelId
     * @memberof ListenChannel
     * @instance
     */ListenChannel.prototype.channelId="";/**
     * ListenChannel listen.
     * @member {number} listen
     * @memberof ListenChannel
     * @instance
     */ListenChannel.prototype.listen=0;/**
     * Creates a new ListenChannel instance using the specified properties.
     * @function create
     * @memberof ListenChannel
     * @static
     * @param {IListenChannel=} [properties] Properties to set
     * @returns {ListenChannel} ListenChannel instance
     */ListenChannel.create=function create(properties){return new ListenChannel(properties);};/**
     * Encodes the specified ListenChannel message. Does not implicitly {@link ListenChannel.verify|verify} messages.
     * @function encode
     * @memberof ListenChannel
     * @static
     * @param {IListenChannel} message ListenChannel message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ListenChannel.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.channelId);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.listen);return writer;};/**
     * Encodes the specified ListenChannel message, length delimited. Does not implicitly {@link ListenChannel.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListenChannel
     * @static
     * @param {IListenChannel} message ListenChannel message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ListenChannel.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ListenChannel message from the specified reader or buffer.
     * @function decode
     * @memberof ListenChannel
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListenChannel} ListenChannel
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ListenChannel.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ListenChannel();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.channelId=reader.string();break;case 2:message.listen=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("channelId"))throw $util.ProtocolError("missing required 'channelId'",{instance:message});if(!message.hasOwnProperty("listen"))throw $util.ProtocolError("missing required 'listen'",{instance:message});return message;};/**
     * Decodes a ListenChannel message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListenChannel
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListenChannel} ListenChannel
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ListenChannel.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ListenChannel message.
     * @function verify
     * @memberof ListenChannel
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ListenChannel.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.channelId))return"channelId: string expected";if(!$util.isInteger(message.listen))return"listen: integer expected";return null;};/**
     * Creates a ListenChannel message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListenChannel
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListenChannel} ListenChannel
     */ListenChannel.fromObject=function fromObject(object){if(object instanceof $root.ListenChannel)return object;var message=new $root.ListenChannel();if(object.channelId!=null)message.channelId=String(object.channelId);if(object.listen!=null)message.listen=object.listen|0;return message;};/**
     * Creates a plain object from a ListenChannel message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListenChannel
     * @static
     * @param {ListenChannel} message ListenChannel
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ListenChannel.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.channelId="";object.listen=0;}if(message.channelId!=null&&message.hasOwnProperty("channelId"))object.channelId=message.channelId;if(message.listen!=null&&message.hasOwnProperty("listen"))object.listen=message.listen;return object;};/**
     * Converts this ListenChannel to JSON.
     * @function toJSON
     * @memberof ListenChannel
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ListenChannel.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ListenChannel;}();$root.SearchChannelResult=function(){/**
     * Properties of a SearchChannelResult.
     * @exports ISearchChannelResult
     * @interface ISearchChannelResult
     * @property {Array.<IChannelInfo>|null} [channel] SearchChannelResult channel
     * @property {string} keyword SearchChannelResult keyword
     *//**
     * Constructs a new SearchChannelResult.
     * @exports SearchChannelResult
     * @classdesc Represents a SearchChannelResult.
     * @implements ISearchChannelResult
     * @constructor
     * @param {ISearchChannelResult=} [properties] Properties to set
     */function SearchChannelResult(properties){this.channel=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * SearchChannelResult channel.
     * @member {Array.<IChannelInfo>} channel
     * @memberof SearchChannelResult
     * @instance
     */SearchChannelResult.prototype.channel=$util.emptyArray;/**
     * SearchChannelResult keyword.
     * @member {string} keyword
     * @memberof SearchChannelResult
     * @instance
     */SearchChannelResult.prototype.keyword="";/**
     * Creates a new SearchChannelResult instance using the specified properties.
     * @function create
     * @memberof SearchChannelResult
     * @static
     * @param {ISearchChannelResult=} [properties] Properties to set
     * @returns {SearchChannelResult} SearchChannelResult instance
     */SearchChannelResult.create=function create(properties){return new SearchChannelResult(properties);};/**
     * Encodes the specified SearchChannelResult message. Does not implicitly {@link SearchChannelResult.verify|verify} messages.
     * @function encode
     * @memberof SearchChannelResult
     * @static
     * @param {ISearchChannelResult} message SearchChannelResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SearchChannelResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.channel!=null&&message.channel.length)for(var i=0;i<message.channel.length;++i){$root.ChannelInfo.encode(message.channel[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}writer.uint32(/* id 2, wireType 2 =*/18).string(message.keyword);return writer;};/**
     * Encodes the specified SearchChannelResult message, length delimited. Does not implicitly {@link SearchChannelResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SearchChannelResult
     * @static
     * @param {ISearchChannelResult} message SearchChannelResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SearchChannelResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a SearchChannelResult message from the specified reader or buffer.
     * @function decode
     * @memberof SearchChannelResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SearchChannelResult} SearchChannelResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SearchChannelResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.SearchChannelResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.channel&&message.channel.length))message.channel=[];message.channel.push($root.ChannelInfo.decode(reader,reader.uint32()));break;case 2:message.keyword=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("keyword"))throw $util.ProtocolError("missing required 'keyword'",{instance:message});return message;};/**
     * Decodes a SearchChannelResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SearchChannelResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SearchChannelResult} SearchChannelResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SearchChannelResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a SearchChannelResult message.
     * @function verify
     * @memberof SearchChannelResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */SearchChannelResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.channel!=null&&message.hasOwnProperty("channel")){if(!Array.isArray(message.channel))return"channel: array expected";for(var i=0;i<message.channel.length;++i){var error=$root.ChannelInfo.verify(message.channel[i]);if(error)return"channel."+error;}}if(!$util.isString(message.keyword))return"keyword: string expected";return null;};/**
     * Creates a SearchChannelResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SearchChannelResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SearchChannelResult} SearchChannelResult
     */SearchChannelResult.fromObject=function fromObject(object){if(object instanceof $root.SearchChannelResult)return object;var message=new $root.SearchChannelResult();if(object.channel){if(!Array.isArray(object.channel))throw TypeError(".SearchChannelResult.channel: array expected");message.channel=[];for(var i=0;i<object.channel.length;++i){if((0,_typeof3.default)(object.channel[i])!=="object")throw TypeError(".SearchChannelResult.channel: object expected");message.channel[i]=$root.ChannelInfo.fromObject(object.channel[i]);}}if(object.keyword!=null)message.keyword=String(object.keyword);return message;};/**
     * Creates a plain object from a SearchChannelResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SearchChannelResult
     * @static
     * @param {SearchChannelResult} message SearchChannelResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */SearchChannelResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.channel=[];if(options.defaults)object.keyword="";if(message.channel&&message.channel.length){object.channel=[];for(var j=0;j<message.channel.length;++j){object.channel[j]=$root.ChannelInfo.toObject(message.channel[j],options);}}if(message.keyword!=null&&message.hasOwnProperty("keyword"))object.keyword=message.keyword;return object;};/**
     * Converts this SearchChannelResult to JSON.
     * @function toJSON
     * @memberof SearchChannelResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */SearchChannelResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return SearchChannelResult;}();$root.MessageContent=function(){/**
     * Properties of a MessageContent.
     * @exports IMessageContent
     * @interface IMessageContent
     * @property {number} type MessageContent type
     * @property {string|null} [searchableContent] MessageContent searchableContent
     * @property {string|null} [pushContent] MessageContent pushContent
     * @property {string|null} [content] MessageContent content
     * @property {Uint8Array|null} [data] MessageContent data
     * @property {number|null} [mediaType] MessageContent mediaType
     * @property {string|null} [remoteMediaUrl] MessageContent remoteMediaUrl
     * @property {number|null} [persistFlag] MessageContent persistFlag
     * @property {number|null} [expireDuration] MessageContent expireDuration
     * @property {number|null} [mentionedType] MessageContent mentionedType
     * @property {Array.<string>|null} [mentionedTarget] MessageContent mentionedTarget
     * @property {string|null} [extra] MessageContent extra
     * @property {string|null} [pushData] MessageContent pushData
     *//**
     * Constructs a new MessageContent.
     * @exports MessageContent
     * @classdesc Represents a MessageContent.
     * @implements IMessageContent
     * @constructor
     * @param {IMessageContent=} [properties] Properties to set
     */function MessageContent(properties){this.mentionedTarget=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * MessageContent type.
     * @member {number} type
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.type=0;/**
     * MessageContent searchableContent.
     * @member {string} searchableContent
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.searchableContent="";/**
     * MessageContent pushContent.
     * @member {string} pushContent
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.pushContent="";/**
     * MessageContent content.
     * @member {string} content
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.content="";/**
     * MessageContent data.
     * @member {Uint8Array} data
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.data=$util.newBuffer([]);/**
     * MessageContent mediaType.
     * @member {number} mediaType
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.mediaType=0;/**
     * MessageContent remoteMediaUrl.
     * @member {string} remoteMediaUrl
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.remoteMediaUrl="";/**
     * MessageContent persistFlag.
     * @member {number} persistFlag
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.persistFlag=0;/**
     * MessageContent expireDuration.
     * @member {number} expireDuration
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.expireDuration=0;/**
     * MessageContent mentionedType.
     * @member {number} mentionedType
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.mentionedType=0;/**
     * MessageContent mentionedTarget.
     * @member {Array.<string>} mentionedTarget
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.mentionedTarget=$util.emptyArray;/**
     * MessageContent extra.
     * @member {string} extra
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.extra="";/**
     * MessageContent pushData.
     * @member {string} pushData
     * @memberof MessageContent
     * @instance
     */MessageContent.prototype.pushData="";/**
     * Creates a new MessageContent instance using the specified properties.
     * @function create
     * @memberof MessageContent
     * @static
     * @param {IMessageContent=} [properties] Properties to set
     * @returns {MessageContent} MessageContent instance
     */MessageContent.create=function create(properties){return new MessageContent(properties);};/**
     * Encodes the specified MessageContent message. Does not implicitly {@link MessageContent.verify|verify} messages.
     * @function encode
     * @memberof MessageContent
     * @static
     * @param {IMessageContent} message MessageContent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MessageContent.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);if(message.searchableContent!=null&&message.hasOwnProperty("searchableContent"))writer.uint32(/* id 2, wireType 2 =*/18).string(message.searchableContent);if(message.pushContent!=null&&message.hasOwnProperty("pushContent"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.pushContent);if(message.content!=null&&message.hasOwnProperty("content"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.content);if(message.data!=null&&message.hasOwnProperty("data"))writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.data);if(message.mediaType!=null&&message.hasOwnProperty("mediaType"))writer.uint32(/* id 6, wireType 0 =*/48).int32(message.mediaType);if(message.remoteMediaUrl!=null&&message.hasOwnProperty("remoteMediaUrl"))writer.uint32(/* id 7, wireType 2 =*/58).string(message.remoteMediaUrl);if(message.persistFlag!=null&&message.hasOwnProperty("persistFlag"))writer.uint32(/* id 8, wireType 0 =*/64).int32(message.persistFlag);if(message.expireDuration!=null&&message.hasOwnProperty("expireDuration"))writer.uint32(/* id 9, wireType 0 =*/72).int32(message.expireDuration);if(message.mentionedType!=null&&message.hasOwnProperty("mentionedType"))writer.uint32(/* id 10, wireType 0 =*/80).int32(message.mentionedType);if(message.mentionedTarget!=null&&message.mentionedTarget.length)for(var i=0;i<message.mentionedTarget.length;++i){writer.uint32(/* id 11, wireType 2 =*/90).string(message.mentionedTarget[i]);}if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 12, wireType 2 =*/98).string(message.extra);if(message.pushData!=null&&message.hasOwnProperty("pushData"))writer.uint32(/* id 13, wireType 2 =*/106).string(message.pushData);return writer;};/**
     * Encodes the specified MessageContent message, length delimited. Does not implicitly {@link MessageContent.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MessageContent
     * @static
     * @param {IMessageContent} message MessageContent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MessageContent.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a MessageContent message from the specified reader or buffer.
     * @function decode
     * @memberof MessageContent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MessageContent} MessageContent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MessageContent.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.MessageContent();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.type=reader.int32();break;case 2:message.searchableContent=reader.string();break;case 3:message.pushContent=reader.string();break;case 4:message.content=reader.string();break;case 5:message.data=reader.bytes();break;case 6:message.mediaType=reader.int32();break;case 7:message.remoteMediaUrl=reader.string();break;case 8:message.persistFlag=reader.int32();break;case 9:message.expireDuration=reader.int32();break;case 10:message.mentionedType=reader.int32();break;case 11:if(!(message.mentionedTarget&&message.mentionedTarget.length))message.mentionedTarget=[];message.mentionedTarget.push(reader.string());break;case 12:message.extra=reader.string();break;case 13:message.pushData=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});return message;};/**
     * Decodes a MessageContent message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MessageContent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MessageContent} MessageContent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MessageContent.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a MessageContent message.
     * @function verify
     * @memberof MessageContent
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */MessageContent.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.type))return"type: integer expected";if(message.searchableContent!=null&&message.hasOwnProperty("searchableContent"))if(!$util.isString(message.searchableContent))return"searchableContent: string expected";if(message.pushContent!=null&&message.hasOwnProperty("pushContent"))if(!$util.isString(message.pushContent))return"pushContent: string expected";if(message.content!=null&&message.hasOwnProperty("content"))if(!$util.isString(message.content))return"content: string expected";if(message.data!=null&&message.hasOwnProperty("data"))if(!(message.data&&typeof message.data.length==="number"||$util.isString(message.data)))return"data: buffer expected";if(message.mediaType!=null&&message.hasOwnProperty("mediaType"))if(!$util.isInteger(message.mediaType))return"mediaType: integer expected";if(message.remoteMediaUrl!=null&&message.hasOwnProperty("remoteMediaUrl"))if(!$util.isString(message.remoteMediaUrl))return"remoteMediaUrl: string expected";if(message.persistFlag!=null&&message.hasOwnProperty("persistFlag"))if(!$util.isInteger(message.persistFlag))return"persistFlag: integer expected";if(message.expireDuration!=null&&message.hasOwnProperty("expireDuration"))if(!$util.isInteger(message.expireDuration))return"expireDuration: integer expected";if(message.mentionedType!=null&&message.hasOwnProperty("mentionedType"))if(!$util.isInteger(message.mentionedType))return"mentionedType: integer expected";if(message.mentionedTarget!=null&&message.hasOwnProperty("mentionedTarget")){if(!Array.isArray(message.mentionedTarget))return"mentionedTarget: array expected";for(var i=0;i<message.mentionedTarget.length;++i){if(!$util.isString(message.mentionedTarget[i]))return"mentionedTarget: string[] expected";}}if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";if(message.pushData!=null&&message.hasOwnProperty("pushData"))if(!$util.isString(message.pushData))return"pushData: string expected";return null;};/**
     * Creates a MessageContent message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MessageContent
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MessageContent} MessageContent
     */MessageContent.fromObject=function fromObject(object){if(object instanceof $root.MessageContent)return object;var message=new $root.MessageContent();if(object.type!=null)message.type=object.type|0;if(object.searchableContent!=null)message.searchableContent=String(object.searchableContent);if(object.pushContent!=null)message.pushContent=String(object.pushContent);if(object.content!=null)message.content=String(object.content);if(object.data!=null)if(typeof object.data==="string")$util.base64.decode(object.data,message.data=$util.newBuffer($util.base64.length(object.data)),0);else if(object.data.length)message.data=object.data;if(object.mediaType!=null)message.mediaType=object.mediaType|0;if(object.remoteMediaUrl!=null)message.remoteMediaUrl=String(object.remoteMediaUrl);if(object.persistFlag!=null)message.persistFlag=object.persistFlag|0;if(object.expireDuration!=null)message.expireDuration=object.expireDuration|0;if(object.mentionedType!=null)message.mentionedType=object.mentionedType|0;if(object.mentionedTarget){if(!Array.isArray(object.mentionedTarget))throw TypeError(".MessageContent.mentionedTarget: array expected");message.mentionedTarget=[];for(var i=0;i<object.mentionedTarget.length;++i){message.mentionedTarget[i]=String(object.mentionedTarget[i]);}}if(object.extra!=null)message.extra=String(object.extra);if(object.pushData!=null)message.pushData=String(object.pushData);return message;};/**
     * Creates a plain object from a MessageContent message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MessageContent
     * @static
     * @param {MessageContent} message MessageContent
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */MessageContent.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.mentionedTarget=[];if(options.defaults){object.type=0;object.searchableContent="";object.pushContent="";object.content="";if(options.bytes===String)object.data="";else{object.data=[];if(options.bytes!==Array)object.data=$util.newBuffer(object.data);}object.mediaType=0;object.remoteMediaUrl="";object.persistFlag=0;object.expireDuration=0;object.mentionedType=0;object.extra="";object.pushData="";}if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.searchableContent!=null&&message.hasOwnProperty("searchableContent"))object.searchableContent=message.searchableContent;if(message.pushContent!=null&&message.hasOwnProperty("pushContent"))object.pushContent=message.pushContent;if(message.content!=null&&message.hasOwnProperty("content"))object.content=message.content;if(message.data!=null&&message.hasOwnProperty("data"))object.data=options.bytes===String?$util.base64.encode(message.data,0,message.data.length):options.bytes===Array?Array.prototype.slice.call(message.data):message.data;if(message.mediaType!=null&&message.hasOwnProperty("mediaType"))object.mediaType=message.mediaType;if(message.remoteMediaUrl!=null&&message.hasOwnProperty("remoteMediaUrl"))object.remoteMediaUrl=message.remoteMediaUrl;if(message.persistFlag!=null&&message.hasOwnProperty("persistFlag"))object.persistFlag=message.persistFlag;if(message.expireDuration!=null&&message.hasOwnProperty("expireDuration"))object.expireDuration=message.expireDuration;if(message.mentionedType!=null&&message.hasOwnProperty("mentionedType"))object.mentionedType=message.mentionedType;if(message.mentionedTarget&&message.mentionedTarget.length){object.mentionedTarget=[];for(var j=0;j<message.mentionedTarget.length;++j){object.mentionedTarget[j]=message.mentionedTarget[j];}}if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;if(message.pushData!=null&&message.hasOwnProperty("pushData"))object.pushData=message.pushData;return object;};/**
     * Converts this MessageContent to JSON.
     * @function toJSON
     * @memberof MessageContent
     * @instance
     * @returns {Object.<string,*>} JSON object
     */MessageContent.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return MessageContent;}();$root.AddGroupMemberRequest=function(){/**
     * Properties of an AddGroupMemberRequest.
     * @exports IAddGroupMemberRequest
     * @interface IAddGroupMemberRequest
     * @property {string} groupId AddGroupMemberRequest groupId
     * @property {Array.<IGroupMember>|null} [addedMember] AddGroupMemberRequest addedMember
     * @property {Array.<number>|null} [toLine] AddGroupMemberRequest toLine
     * @property {IMessageContent|null} [notifyContent] AddGroupMemberRequest notifyContent
     * @property {string|null} [extra] AddGroupMemberRequest extra
     *//**
     * Constructs a new AddGroupMemberRequest.
     * @exports AddGroupMemberRequest
     * @classdesc Represents an AddGroupMemberRequest.
     * @implements IAddGroupMemberRequest
     * @constructor
     * @param {IAddGroupMemberRequest=} [properties] Properties to set
     */function AddGroupMemberRequest(properties){this.addedMember=[];this.toLine=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * AddGroupMemberRequest groupId.
     * @member {string} groupId
     * @memberof AddGroupMemberRequest
     * @instance
     */AddGroupMemberRequest.prototype.groupId="";/**
     * AddGroupMemberRequest addedMember.
     * @member {Array.<IGroupMember>} addedMember
     * @memberof AddGroupMemberRequest
     * @instance
     */AddGroupMemberRequest.prototype.addedMember=$util.emptyArray;/**
     * AddGroupMemberRequest toLine.
     * @member {Array.<number>} toLine
     * @memberof AddGroupMemberRequest
     * @instance
     */AddGroupMemberRequest.prototype.toLine=$util.emptyArray;/**
     * AddGroupMemberRequest notifyContent.
     * @member {IMessageContent|null|undefined} notifyContent
     * @memberof AddGroupMemberRequest
     * @instance
     */AddGroupMemberRequest.prototype.notifyContent=null;/**
     * AddGroupMemberRequest extra.
     * @member {string} extra
     * @memberof AddGroupMemberRequest
     * @instance
     */AddGroupMemberRequest.prototype.extra="";/**
     * Creates a new AddGroupMemberRequest instance using the specified properties.
     * @function create
     * @memberof AddGroupMemberRequest
     * @static
     * @param {IAddGroupMemberRequest=} [properties] Properties to set
     * @returns {AddGroupMemberRequest} AddGroupMemberRequest instance
     */AddGroupMemberRequest.create=function create(properties){return new AddGroupMemberRequest(properties);};/**
     * Encodes the specified AddGroupMemberRequest message. Does not implicitly {@link AddGroupMemberRequest.verify|verify} messages.
     * @function encode
     * @memberof AddGroupMemberRequest
     * @static
     * @param {IAddGroupMemberRequest} message AddGroupMemberRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */AddGroupMemberRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);if(message.addedMember!=null&&message.addedMember.length)for(var i=0;i<message.addedMember.length;++i){$root.GroupMember.encode(message.addedMember[i],writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();}if(message.toLine!=null&&message.toLine.length)for(var i=0;i<message.toLine.length;++i){writer.uint32(/* id 3, wireType 0 =*/24).int32(message.toLine[i]);}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))$root.MessageContent.encode(message.notifyContent,writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 5, wireType 2 =*/42).string(message.extra);return writer;};/**
     * Encodes the specified AddGroupMemberRequest message, length delimited. Does not implicitly {@link AddGroupMemberRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AddGroupMemberRequest
     * @static
     * @param {IAddGroupMemberRequest} message AddGroupMemberRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */AddGroupMemberRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes an AddGroupMemberRequest message from the specified reader or buffer.
     * @function decode
     * @memberof AddGroupMemberRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AddGroupMemberRequest} AddGroupMemberRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */AddGroupMemberRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.AddGroupMemberRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.groupId=reader.string();break;case 2:if(!(message.addedMember&&message.addedMember.length))message.addedMember=[];message.addedMember.push($root.GroupMember.decode(reader,reader.uint32()));break;case 3:if(!(message.toLine&&message.toLine.length))message.toLine=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.toLine.push(reader.int32());}}else message.toLine.push(reader.int32());break;case 4:message.notifyContent=$root.MessageContent.decode(reader,reader.uint32());break;case 5:message.extra=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});return message;};/**
     * Decodes an AddGroupMemberRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AddGroupMemberRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AddGroupMemberRequest} AddGroupMemberRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */AddGroupMemberRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies an AddGroupMemberRequest message.
     * @function verify
     * @memberof AddGroupMemberRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */AddGroupMemberRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(message.addedMember!=null&&message.hasOwnProperty("addedMember")){if(!Array.isArray(message.addedMember))return"addedMember: array expected";for(var i=0;i<message.addedMember.length;++i){var error=$root.GroupMember.verify(message.addedMember[i]);if(error)return"addedMember."+error;}}if(message.toLine!=null&&message.hasOwnProperty("toLine")){if(!Array.isArray(message.toLine))return"toLine: array expected";for(var i=0;i<message.toLine.length;++i){if(!$util.isInteger(message.toLine[i]))return"toLine: integer[] expected";}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent")){var error=$root.MessageContent.verify(message.notifyContent);if(error)return"notifyContent."+error;}if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";return null;};/**
     * Creates an AddGroupMemberRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AddGroupMemberRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AddGroupMemberRequest} AddGroupMemberRequest
     */AddGroupMemberRequest.fromObject=function fromObject(object){if(object instanceof $root.AddGroupMemberRequest)return object;var message=new $root.AddGroupMemberRequest();if(object.groupId!=null)message.groupId=String(object.groupId);if(object.addedMember){if(!Array.isArray(object.addedMember))throw TypeError(".AddGroupMemberRequest.addedMember: array expected");message.addedMember=[];for(var i=0;i<object.addedMember.length;++i){if((0,_typeof3.default)(object.addedMember[i])!=="object")throw TypeError(".AddGroupMemberRequest.addedMember: object expected");message.addedMember[i]=$root.GroupMember.fromObject(object.addedMember[i]);}}if(object.toLine){if(!Array.isArray(object.toLine))throw TypeError(".AddGroupMemberRequest.toLine: array expected");message.toLine=[];for(var i=0;i<object.toLine.length;++i){message.toLine[i]=object.toLine[i]|0;}}if(object.notifyContent!=null){if((0,_typeof3.default)(object.notifyContent)!=="object")throw TypeError(".AddGroupMemberRequest.notifyContent: object expected");message.notifyContent=$root.MessageContent.fromObject(object.notifyContent);}if(object.extra!=null)message.extra=String(object.extra);return message;};/**
     * Creates a plain object from an AddGroupMemberRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AddGroupMemberRequest
     * @static
     * @param {AddGroupMemberRequest} message AddGroupMemberRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */AddGroupMemberRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults){object.addedMember=[];object.toLine=[];}if(options.defaults){object.groupId="";object.notifyContent=null;object.extra="";}if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.addedMember&&message.addedMember.length){object.addedMember=[];for(var j=0;j<message.addedMember.length;++j){object.addedMember[j]=$root.GroupMember.toObject(message.addedMember[j],options);}}if(message.toLine&&message.toLine.length){object.toLine=[];for(var j=0;j<message.toLine.length;++j){object.toLine[j]=message.toLine[j];}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))object.notifyContent=$root.MessageContent.toObject(message.notifyContent,options);if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;return object;};/**
     * Converts this AddGroupMemberRequest to JSON.
     * @function toJSON
     * @memberof AddGroupMemberRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */AddGroupMemberRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return AddGroupMemberRequest;}();$root.CreateGroupRequest=function(){/**
     * Properties of a CreateGroupRequest.
     * @exports ICreateGroupRequest
     * @interface ICreateGroupRequest
     * @property {IGroup} group CreateGroupRequest group
     * @property {Array.<number>|null} [toLine] CreateGroupRequest toLine
     * @property {IMessageContent|null} [notifyContent] CreateGroupRequest notifyContent
     * @property {string|null} [memberExtra] CreateGroupRequest memberExtra
     *//**
     * Constructs a new CreateGroupRequest.
     * @exports CreateGroupRequest
     * @classdesc Represents a CreateGroupRequest.
     * @implements ICreateGroupRequest
     * @constructor
     * @param {ICreateGroupRequest=} [properties] Properties to set
     */function CreateGroupRequest(properties){this.toLine=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * CreateGroupRequest group.
     * @member {IGroup} group
     * @memberof CreateGroupRequest
     * @instance
     */CreateGroupRequest.prototype.group=null;/**
     * CreateGroupRequest toLine.
     * @member {Array.<number>} toLine
     * @memberof CreateGroupRequest
     * @instance
     */CreateGroupRequest.prototype.toLine=$util.emptyArray;/**
     * CreateGroupRequest notifyContent.
     * @member {IMessageContent|null|undefined} notifyContent
     * @memberof CreateGroupRequest
     * @instance
     */CreateGroupRequest.prototype.notifyContent=null;/**
     * CreateGroupRequest memberExtra.
     * @member {string} memberExtra
     * @memberof CreateGroupRequest
     * @instance
     */CreateGroupRequest.prototype.memberExtra="";/**
     * Creates a new CreateGroupRequest instance using the specified properties.
     * @function create
     * @memberof CreateGroupRequest
     * @static
     * @param {ICreateGroupRequest=} [properties] Properties to set
     * @returns {CreateGroupRequest} CreateGroupRequest instance
     */CreateGroupRequest.create=function create(properties){return new CreateGroupRequest(properties);};/**
     * Encodes the specified CreateGroupRequest message. Does not implicitly {@link CreateGroupRequest.verify|verify} messages.
     * @function encode
     * @memberof CreateGroupRequest
     * @static
     * @param {ICreateGroupRequest} message CreateGroupRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */CreateGroupRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();$root.Group.encode(message.group,writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();if(message.toLine!=null&&message.toLine.length)for(var i=0;i<message.toLine.length;++i){writer.uint32(/* id 2, wireType 0 =*/16).int32(message.toLine[i]);}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))$root.MessageContent.encode(message.notifyContent,writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();if(message.memberExtra!=null&&message.hasOwnProperty("memberExtra"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.memberExtra);return writer;};/**
     * Encodes the specified CreateGroupRequest message, length delimited. Does not implicitly {@link CreateGroupRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CreateGroupRequest
     * @static
     * @param {ICreateGroupRequest} message CreateGroupRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */CreateGroupRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a CreateGroupRequest message from the specified reader or buffer.
     * @function decode
     * @memberof CreateGroupRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CreateGroupRequest} CreateGroupRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */CreateGroupRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.CreateGroupRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.group=$root.Group.decode(reader,reader.uint32());break;case 2:if(!(message.toLine&&message.toLine.length))message.toLine=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.toLine.push(reader.int32());}}else message.toLine.push(reader.int32());break;case 3:message.notifyContent=$root.MessageContent.decode(reader,reader.uint32());break;case 4:message.memberExtra=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("group"))throw $util.ProtocolError("missing required 'group'",{instance:message});return message;};/**
     * Decodes a CreateGroupRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CreateGroupRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CreateGroupRequest} CreateGroupRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */CreateGroupRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a CreateGroupRequest message.
     * @function verify
     * @memberof CreateGroupRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */CreateGroupRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";{var error=$root.Group.verify(message.group);if(error)return"group."+error;}if(message.toLine!=null&&message.hasOwnProperty("toLine")){if(!Array.isArray(message.toLine))return"toLine: array expected";for(var i=0;i<message.toLine.length;++i){if(!$util.isInteger(message.toLine[i]))return"toLine: integer[] expected";}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent")){var error=$root.MessageContent.verify(message.notifyContent);if(error)return"notifyContent."+error;}if(message.memberExtra!=null&&message.hasOwnProperty("memberExtra"))if(!$util.isString(message.memberExtra))return"memberExtra: string expected";return null;};/**
     * Creates a CreateGroupRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CreateGroupRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CreateGroupRequest} CreateGroupRequest
     */CreateGroupRequest.fromObject=function fromObject(object){if(object instanceof $root.CreateGroupRequest)return object;var message=new $root.CreateGroupRequest();if(object.group!=null){if((0,_typeof3.default)(object.group)!=="object")throw TypeError(".CreateGroupRequest.group: object expected");message.group=$root.Group.fromObject(object.group);}if(object.toLine){if(!Array.isArray(object.toLine))throw TypeError(".CreateGroupRequest.toLine: array expected");message.toLine=[];for(var i=0;i<object.toLine.length;++i){message.toLine[i]=object.toLine[i]|0;}}if(object.notifyContent!=null){if((0,_typeof3.default)(object.notifyContent)!=="object")throw TypeError(".CreateGroupRequest.notifyContent: object expected");message.notifyContent=$root.MessageContent.fromObject(object.notifyContent);}if(object.memberExtra!=null)message.memberExtra=String(object.memberExtra);return message;};/**
     * Creates a plain object from a CreateGroupRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CreateGroupRequest
     * @static
     * @param {CreateGroupRequest} message CreateGroupRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */CreateGroupRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.toLine=[];if(options.defaults){object.group=null;object.notifyContent=null;object.memberExtra="";}if(message.group!=null&&message.hasOwnProperty("group"))object.group=$root.Group.toObject(message.group,options);if(message.toLine&&message.toLine.length){object.toLine=[];for(var j=0;j<message.toLine.length;++j){object.toLine[j]=message.toLine[j];}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))object.notifyContent=$root.MessageContent.toObject(message.notifyContent,options);if(message.memberExtra!=null&&message.hasOwnProperty("memberExtra"))object.memberExtra=message.memberExtra;return object;};/**
     * Converts this CreateGroupRequest to JSON.
     * @function toJSON
     * @memberof CreateGroupRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */CreateGroupRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return CreateGroupRequest;}();$root.DismissGroupRequest=function(){/**
     * Properties of a DismissGroupRequest.
     * @exports IDismissGroupRequest
     * @interface IDismissGroupRequest
     * @property {string} groupId DismissGroupRequest groupId
     * @property {Array.<number>|null} [toLine] DismissGroupRequest toLine
     * @property {IMessageContent|null} [notifyContent] DismissGroupRequest notifyContent
     *//**
     * Constructs a new DismissGroupRequest.
     * @exports DismissGroupRequest
     * @classdesc Represents a DismissGroupRequest.
     * @implements IDismissGroupRequest
     * @constructor
     * @param {IDismissGroupRequest=} [properties] Properties to set
     */function DismissGroupRequest(properties){this.toLine=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * DismissGroupRequest groupId.
     * @member {string} groupId
     * @memberof DismissGroupRequest
     * @instance
     */DismissGroupRequest.prototype.groupId="";/**
     * DismissGroupRequest toLine.
     * @member {Array.<number>} toLine
     * @memberof DismissGroupRequest
     * @instance
     */DismissGroupRequest.prototype.toLine=$util.emptyArray;/**
     * DismissGroupRequest notifyContent.
     * @member {IMessageContent|null|undefined} notifyContent
     * @memberof DismissGroupRequest
     * @instance
     */DismissGroupRequest.prototype.notifyContent=null;/**
     * Creates a new DismissGroupRequest instance using the specified properties.
     * @function create
     * @memberof DismissGroupRequest
     * @static
     * @param {IDismissGroupRequest=} [properties] Properties to set
     * @returns {DismissGroupRequest} DismissGroupRequest instance
     */DismissGroupRequest.create=function create(properties){return new DismissGroupRequest(properties);};/**
     * Encodes the specified DismissGroupRequest message. Does not implicitly {@link DismissGroupRequest.verify|verify} messages.
     * @function encode
     * @memberof DismissGroupRequest
     * @static
     * @param {IDismissGroupRequest} message DismissGroupRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */DismissGroupRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);if(message.toLine!=null&&message.toLine.length)for(var i=0;i<message.toLine.length;++i){writer.uint32(/* id 2, wireType 0 =*/16).int32(message.toLine[i]);}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))$root.MessageContent.encode(message.notifyContent,writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();return writer;};/**
     * Encodes the specified DismissGroupRequest message, length delimited. Does not implicitly {@link DismissGroupRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DismissGroupRequest
     * @static
     * @param {IDismissGroupRequest} message DismissGroupRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */DismissGroupRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a DismissGroupRequest message from the specified reader or buffer.
     * @function decode
     * @memberof DismissGroupRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DismissGroupRequest} DismissGroupRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */DismissGroupRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.DismissGroupRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.groupId=reader.string();break;case 2:if(!(message.toLine&&message.toLine.length))message.toLine=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.toLine.push(reader.int32());}}else message.toLine.push(reader.int32());break;case 3:message.notifyContent=$root.MessageContent.decode(reader,reader.uint32());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});return message;};/**
     * Decodes a DismissGroupRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DismissGroupRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DismissGroupRequest} DismissGroupRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */DismissGroupRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a DismissGroupRequest message.
     * @function verify
     * @memberof DismissGroupRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */DismissGroupRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(message.toLine!=null&&message.hasOwnProperty("toLine")){if(!Array.isArray(message.toLine))return"toLine: array expected";for(var i=0;i<message.toLine.length;++i){if(!$util.isInteger(message.toLine[i]))return"toLine: integer[] expected";}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent")){var error=$root.MessageContent.verify(message.notifyContent);if(error)return"notifyContent."+error;}return null;};/**
     * Creates a DismissGroupRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DismissGroupRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DismissGroupRequest} DismissGroupRequest
     */DismissGroupRequest.fromObject=function fromObject(object){if(object instanceof $root.DismissGroupRequest)return object;var message=new $root.DismissGroupRequest();if(object.groupId!=null)message.groupId=String(object.groupId);if(object.toLine){if(!Array.isArray(object.toLine))throw TypeError(".DismissGroupRequest.toLine: array expected");message.toLine=[];for(var i=0;i<object.toLine.length;++i){message.toLine[i]=object.toLine[i]|0;}}if(object.notifyContent!=null){if((0,_typeof3.default)(object.notifyContent)!=="object")throw TypeError(".DismissGroupRequest.notifyContent: object expected");message.notifyContent=$root.MessageContent.fromObject(object.notifyContent);}return message;};/**
     * Creates a plain object from a DismissGroupRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DismissGroupRequest
     * @static
     * @param {DismissGroupRequest} message DismissGroupRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */DismissGroupRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.toLine=[];if(options.defaults){object.groupId="";object.notifyContent=null;}if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.toLine&&message.toLine.length){object.toLine=[];for(var j=0;j<message.toLine.length;++j){object.toLine[j]=message.toLine[j];}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))object.notifyContent=$root.MessageContent.toObject(message.notifyContent,options);return object;};/**
     * Converts this DismissGroupRequest to JSON.
     * @function toJSON
     * @memberof DismissGroupRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */DismissGroupRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return DismissGroupRequest;}();$root.FriendRequest=function(){/**
     * Properties of a FriendRequest.
     * @exports IFriendRequest
     * @interface IFriendRequest
     * @property {string|null} [fromUid] FriendRequest fromUid
     * @property {string} toUid FriendRequest toUid
     * @property {string} reason FriendRequest reason
     * @property {number|null} [status] FriendRequest status
     * @property {Long|null} [updateDt] FriendRequest updateDt
     * @property {boolean|null} [fromReadStatus] FriendRequest fromReadStatus
     * @property {boolean|null} [toReadStatus] FriendRequest toReadStatus
     * @property {string|null} [extra] FriendRequest extra
     *//**
     * Constructs a new FriendRequest.
     * @exports FriendRequest
     * @classdesc Represents a FriendRequest.
     * @implements IFriendRequest
     * @constructor
     * @param {IFriendRequest=} [properties] Properties to set
     */function FriendRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * FriendRequest fromUid.
     * @member {string} fromUid
     * @memberof FriendRequest
     * @instance
     */FriendRequest.prototype.fromUid="";/**
     * FriendRequest toUid.
     * @member {string} toUid
     * @memberof FriendRequest
     * @instance
     */FriendRequest.prototype.toUid="";/**
     * FriendRequest reason.
     * @member {string} reason
     * @memberof FriendRequest
     * @instance
     */FriendRequest.prototype.reason="";/**
     * FriendRequest status.
     * @member {number} status
     * @memberof FriendRequest
     * @instance
     */FriendRequest.prototype.status=0;/**
     * FriendRequest updateDt.
     * @member {Long} updateDt
     * @memberof FriendRequest
     * @instance
     */FriendRequest.prototype.updateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * FriendRequest fromReadStatus.
     * @member {boolean} fromReadStatus
     * @memberof FriendRequest
     * @instance
     */FriendRequest.prototype.fromReadStatus=false;/**
     * FriendRequest toReadStatus.
     * @member {boolean} toReadStatus
     * @memberof FriendRequest
     * @instance
     */FriendRequest.prototype.toReadStatus=false;/**
     * FriendRequest extra.
     * @member {string} extra
     * @memberof FriendRequest
     * @instance
     */FriendRequest.prototype.extra="";/**
     * Creates a new FriendRequest instance using the specified properties.
     * @function create
     * @memberof FriendRequest
     * @static
     * @param {IFriendRequest=} [properties] Properties to set
     * @returns {FriendRequest} FriendRequest instance
     */FriendRequest.create=function create(properties){return new FriendRequest(properties);};/**
     * Encodes the specified FriendRequest message. Does not implicitly {@link FriendRequest.verify|verify} messages.
     * @function encode
     * @memberof FriendRequest
     * @static
     * @param {IFriendRequest} message FriendRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */FriendRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.fromUid!=null&&message.hasOwnProperty("fromUid"))writer.uint32(/* id 1, wireType 2 =*/10).string(message.fromUid);writer.uint32(/* id 2, wireType 2 =*/18).string(message.toUid);writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);if(message.status!=null&&message.hasOwnProperty("status"))writer.uint32(/* id 4, wireType 0 =*/32).int32(message.status);if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))writer.uint32(/* id 5, wireType 0 =*/40).int64(message.updateDt);if(message.fromReadStatus!=null&&message.hasOwnProperty("fromReadStatus"))writer.uint32(/* id 6, wireType 0 =*/48).bool(message.fromReadStatus);if(message.toReadStatus!=null&&message.hasOwnProperty("toReadStatus"))writer.uint32(/* id 7, wireType 0 =*/56).bool(message.toReadStatus);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 8, wireType 2 =*/66).string(message.extra);return writer;};/**
     * Encodes the specified FriendRequest message, length delimited. Does not implicitly {@link FriendRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FriendRequest
     * @static
     * @param {IFriendRequest} message FriendRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */FriendRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a FriendRequest message from the specified reader or buffer.
     * @function decode
     * @memberof FriendRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FriendRequest} FriendRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */FriendRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.FriendRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.fromUid=reader.string();break;case 2:message.toUid=reader.string();break;case 3:message.reason=reader.string();break;case 4:message.status=reader.int32();break;case 5:message.updateDt=reader.int64();break;case 6:message.fromReadStatus=reader.bool();break;case 7:message.toReadStatus=reader.bool();break;case 8:message.extra=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("toUid"))throw $util.ProtocolError("missing required 'toUid'",{instance:message});if(!message.hasOwnProperty("reason"))throw $util.ProtocolError("missing required 'reason'",{instance:message});return message;};/**
     * Decodes a FriendRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FriendRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FriendRequest} FriendRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */FriendRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a FriendRequest message.
     * @function verify
     * @memberof FriendRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */FriendRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.fromUid!=null&&message.hasOwnProperty("fromUid"))if(!$util.isString(message.fromUid))return"fromUid: string expected";if(!$util.isString(message.toUid))return"toUid: string expected";if(!$util.isString(message.reason))return"reason: string expected";if(message.status!=null&&message.hasOwnProperty("status"))if(!$util.isInteger(message.status))return"status: integer expected";if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(!$util.isInteger(message.updateDt)&&!(message.updateDt&&$util.isInteger(message.updateDt.low)&&$util.isInteger(message.updateDt.high)))return"updateDt: integer|Long expected";if(message.fromReadStatus!=null&&message.hasOwnProperty("fromReadStatus"))if(typeof message.fromReadStatus!=="boolean")return"fromReadStatus: boolean expected";if(message.toReadStatus!=null&&message.hasOwnProperty("toReadStatus"))if(typeof message.toReadStatus!=="boolean")return"toReadStatus: boolean expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";return null;};/**
     * Creates a FriendRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FriendRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FriendRequest} FriendRequest
     */FriendRequest.fromObject=function fromObject(object){if(object instanceof $root.FriendRequest)return object;var message=new $root.FriendRequest();if(object.fromUid!=null)message.fromUid=String(object.fromUid);if(object.toUid!=null)message.toUid=String(object.toUid);if(object.reason!=null)message.reason=String(object.reason);if(object.status!=null)message.status=object.status|0;if(object.updateDt!=null)if($util.Long)(message.updateDt=$util.Long.fromValue(object.updateDt)).unsigned=false;else if(typeof object.updateDt==="string")message.updateDt=parseInt(object.updateDt,10);else if(typeof object.updateDt==="number")message.updateDt=object.updateDt;else if((0,_typeof3.default)(object.updateDt)==="object")message.updateDt=new $util.LongBits(object.updateDt.low>>>0,object.updateDt.high>>>0).toNumber();if(object.fromReadStatus!=null)message.fromReadStatus=Boolean(object.fromReadStatus);if(object.toReadStatus!=null)message.toReadStatus=Boolean(object.toReadStatus);if(object.extra!=null)message.extra=String(object.extra);return message;};/**
     * Creates a plain object from a FriendRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FriendRequest
     * @static
     * @param {FriendRequest} message FriendRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */FriendRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.fromUid="";object.toUid="";object.reason="";object.status=0;if($util.Long){var long=new $util.Long(0,0,false);object.updateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.updateDt=options.longs===String?"0":0;object.fromReadStatus=false;object.toReadStatus=false;object.extra="";}if(message.fromUid!=null&&message.hasOwnProperty("fromUid"))object.fromUid=message.fromUid;if(message.toUid!=null&&message.hasOwnProperty("toUid"))object.toUid=message.toUid;if(message.reason!=null&&message.hasOwnProperty("reason"))object.reason=message.reason;if(message.status!=null&&message.hasOwnProperty("status"))object.status=message.status;if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(typeof message.updateDt==="number")object.updateDt=options.longs===String?String(message.updateDt):message.updateDt;else object.updateDt=options.longs===String?$util.Long.prototype.toString.call(message.updateDt):options.longs===Number?new $util.LongBits(message.updateDt.low>>>0,message.updateDt.high>>>0).toNumber():message.updateDt;if(message.fromReadStatus!=null&&message.hasOwnProperty("fromReadStatus"))object.fromReadStatus=message.fromReadStatus;if(message.toReadStatus!=null&&message.hasOwnProperty("toReadStatus"))object.toReadStatus=message.toReadStatus;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;return object;};/**
     * Converts this FriendRequest to JSON.
     * @function toJSON
     * @memberof FriendRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */FriendRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return FriendRequest;}();$root.GeneralResult=function(){/**
     * Properties of a GeneralResult.
     * @exports IGeneralResult
     * @interface IGeneralResult
     * @property {number} errorCode GeneralResult errorCode
     *//**
     * Constructs a new GeneralResult.
     * @exports GeneralResult
     * @classdesc Represents a GeneralResult.
     * @implements IGeneralResult
     * @constructor
     * @param {IGeneralResult=} [properties] Properties to set
     */function GeneralResult(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GeneralResult errorCode.
     * @member {number} errorCode
     * @memberof GeneralResult
     * @instance
     */GeneralResult.prototype.errorCode=0;/**
     * Creates a new GeneralResult instance using the specified properties.
     * @function create
     * @memberof GeneralResult
     * @static
     * @param {IGeneralResult=} [properties] Properties to set
     * @returns {GeneralResult} GeneralResult instance
     */GeneralResult.create=function create(properties){return new GeneralResult(properties);};/**
     * Encodes the specified GeneralResult message. Does not implicitly {@link GeneralResult.verify|verify} messages.
     * @function encode
     * @memberof GeneralResult
     * @static
     * @param {IGeneralResult} message GeneralResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GeneralResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.errorCode);return writer;};/**
     * Encodes the specified GeneralResult message, length delimited. Does not implicitly {@link GeneralResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GeneralResult
     * @static
     * @param {IGeneralResult} message GeneralResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GeneralResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GeneralResult message from the specified reader or buffer.
     * @function decode
     * @memberof GeneralResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GeneralResult} GeneralResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GeneralResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GeneralResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.errorCode=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("errorCode"))throw $util.ProtocolError("missing required 'errorCode'",{instance:message});return message;};/**
     * Decodes a GeneralResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GeneralResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GeneralResult} GeneralResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GeneralResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GeneralResult message.
     * @function verify
     * @memberof GeneralResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GeneralResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.errorCode))return"errorCode: integer expected";return null;};/**
     * Creates a GeneralResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GeneralResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GeneralResult} GeneralResult
     */GeneralResult.fromObject=function fromObject(object){if(object instanceof $root.GeneralResult)return object;var message=new $root.GeneralResult();if(object.errorCode!=null)message.errorCode=object.errorCode|0;return message;};/**
     * Creates a plain object from a GeneralResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GeneralResult
     * @static
     * @param {GeneralResult} message GeneralResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GeneralResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults)object.errorCode=0;if(message.errorCode!=null&&message.hasOwnProperty("errorCode"))object.errorCode=message.errorCode;return object;};/**
     * Converts this GeneralResult to JSON.
     * @function toJSON
     * @memberof GeneralResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GeneralResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GeneralResult;}();$root.GetUploadTokenRequest=function(){/**
     * Properties of a GetUploadTokenRequest.
     * @exports IGetUploadTokenRequest
     * @interface IGetUploadTokenRequest
     * @property {number} mediaType GetUploadTokenRequest mediaType
     * @property {string} mediaPath GetUploadTokenRequest mediaPath
     * @property {string|null} [contentType] GetUploadTokenRequest contentType
     * @property {Long|null} [messageId] GetUploadTokenRequest messageId
     *//**
     * Constructs a new GetUploadTokenRequest.
     * @exports GetUploadTokenRequest
     * @classdesc Represents a GetUploadTokenRequest.
     * @implements IGetUploadTokenRequest
     * @constructor
     * @param {IGetUploadTokenRequest=} [properties] Properties to set
     */function GetUploadTokenRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetUploadTokenRequest mediaType.
     * @member {number} mediaType
     * @memberof GetUploadTokenRequest
     * @instance
     */GetUploadTokenRequest.prototype.mediaType=0;/**
     * GetUploadTokenRequest mediaPath.
     * @member {string} mediaPath
     * @memberof GetUploadTokenRequest
     * @instance
     */GetUploadTokenRequest.prototype.mediaPath="";/**
     * GetUploadTokenRequest contentType.
     * @member {string} contentType
     * @memberof GetUploadTokenRequest
     * @instance
     */GetUploadTokenRequest.prototype.contentType="";/**
     * GetUploadTokenRequest messageId.
     * @member {Long} messageId
     * @memberof GetUploadTokenRequest
     * @instance
     */GetUploadTokenRequest.prototype.messageId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new GetUploadTokenRequest instance using the specified properties.
     * @function create
     * @memberof GetUploadTokenRequest
     * @static
     * @param {IGetUploadTokenRequest=} [properties] Properties to set
     * @returns {GetUploadTokenRequest} GetUploadTokenRequest instance
     */GetUploadTokenRequest.create=function create(properties){return new GetUploadTokenRequest(properties);};/**
     * Encodes the specified GetUploadTokenRequest message. Does not implicitly {@link GetUploadTokenRequest.verify|verify} messages.
     * @function encode
     * @memberof GetUploadTokenRequest
     * @static
     * @param {IGetUploadTokenRequest} message GetUploadTokenRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetUploadTokenRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mediaType);writer.uint32(/* id 2, wireType 2 =*/18).string(message.mediaPath);if(message.contentType!=null&&message.hasOwnProperty("contentType"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.contentType);if(message.messageId!=null&&message.hasOwnProperty("messageId"))writer.uint32(/* id 4, wireType 0 =*/32).int64(message.messageId);return writer;};/**
     * Encodes the specified GetUploadTokenRequest message, length delimited. Does not implicitly {@link GetUploadTokenRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetUploadTokenRequest
     * @static
     * @param {IGetUploadTokenRequest} message GetUploadTokenRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetUploadTokenRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetUploadTokenRequest message from the specified reader or buffer.
     * @function decode
     * @memberof GetUploadTokenRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetUploadTokenRequest} GetUploadTokenRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetUploadTokenRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetUploadTokenRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.mediaType=reader.int32();break;case 2:message.mediaPath=reader.string();break;case 3:message.contentType=reader.string();break;case 4:message.messageId=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("mediaType"))throw $util.ProtocolError("missing required 'mediaType'",{instance:message});if(!message.hasOwnProperty("mediaPath"))throw $util.ProtocolError("missing required 'mediaPath'",{instance:message});return message;};/**
     * Decodes a GetUploadTokenRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetUploadTokenRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetUploadTokenRequest} GetUploadTokenRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetUploadTokenRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetUploadTokenRequest message.
     * @function verify
     * @memberof GetUploadTokenRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetUploadTokenRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.mediaType))return"mediaType: integer expected";if(!$util.isString(message.mediaPath))return"mediaPath: string expected";if(message.contentType!=null&&message.hasOwnProperty("contentType"))if(!$util.isString(message.contentType))return"contentType: string expected";if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(!$util.isInteger(message.messageId)&&!(message.messageId&&$util.isInteger(message.messageId.low)&&$util.isInteger(message.messageId.high)))return"messageId: integer|Long expected";return null;};/**
     * Creates a GetUploadTokenRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetUploadTokenRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetUploadTokenRequest} GetUploadTokenRequest
     */GetUploadTokenRequest.fromObject=function fromObject(object){if(object instanceof $root.GetUploadTokenRequest)return object;var message=new $root.GetUploadTokenRequest();if(object.mediaType!=null)message.mediaType=object.mediaType|0;if(object.mediaPath!=null)message.mediaPath=String(object.mediaPath);if(object.contentType!=null)message.contentType=String(object.contentType);if(object.messageId!=null)if($util.Long)(message.messageId=$util.Long.fromValue(object.messageId)).unsigned=false;else if(typeof object.messageId==="string")message.messageId=parseInt(object.messageId,10);else if(typeof object.messageId==="number")message.messageId=object.messageId;else if((0,_typeof3.default)(object.messageId)==="object")message.messageId=new $util.LongBits(object.messageId.low>>>0,object.messageId.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a GetUploadTokenRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetUploadTokenRequest
     * @static
     * @param {GetUploadTokenRequest} message GetUploadTokenRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetUploadTokenRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.mediaType=0;object.mediaPath="";object.contentType="";if($util.Long){var long=new $util.Long(0,0,false);object.messageId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.messageId=options.longs===String?"0":0;}if(message.mediaType!=null&&message.hasOwnProperty("mediaType"))object.mediaType=message.mediaType;if(message.mediaPath!=null&&message.hasOwnProperty("mediaPath"))object.mediaPath=message.mediaPath;if(message.contentType!=null&&message.hasOwnProperty("contentType"))object.contentType=message.contentType;if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(typeof message.messageId==="number")object.messageId=options.longs===String?String(message.messageId):message.messageId;else object.messageId=options.longs===String?$util.Long.prototype.toString.call(message.messageId):options.longs===Number?new $util.LongBits(message.messageId.low>>>0,message.messageId.high>>>0).toNumber():message.messageId;return object;};/**
     * Converts this GetUploadTokenRequest to JSON.
     * @function toJSON
     * @memberof GetUploadTokenRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetUploadTokenRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetUploadTokenRequest;}();$root.GetUploadTokenResult=function(){/**
     * Properties of a GetUploadTokenResult.
     * @exports IGetUploadTokenResult
     * @interface IGetUploadTokenResult
     * @property {string} domain GetUploadTokenResult domain
     * @property {string} token GetUploadTokenResult token
     * @property {string} server GetUploadTokenResult server
     * @property {number|null} [port] GetUploadTokenResult port
     * @property {number|null} [type] GetUploadTokenResult type
     * @property {string|null} [date] GetUploadTokenResult date
     * @property {string|null} [path] GetUploadTokenResult path
     * @property {string|null} [backupServer] GetUploadTokenResult backupServer
     * @property {number|null} [backupPort] GetUploadTokenResult backupPort
     * @property {number|null} [sslPort] GetUploadTokenResult sslPort
     * @property {number|null} [backupSslPort] GetUploadTokenResult backupSslPort
     * @property {string|null} [sslToken] GetUploadTokenResult sslToken
     * @property {string|null} [backupToken] GetUploadTokenResult backupToken
     * @property {string|null} [backupSslToken] GetUploadTokenResult backupSslToken
     *//**
     * Constructs a new GetUploadTokenResult.
     * @exports GetUploadTokenResult
     * @classdesc Represents a GetUploadTokenResult.
     * @implements IGetUploadTokenResult
     * @constructor
     * @param {IGetUploadTokenResult=} [properties] Properties to set
     */function GetUploadTokenResult(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetUploadTokenResult domain.
     * @member {string} domain
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.domain="";/**
     * GetUploadTokenResult token.
     * @member {string} token
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.token="";/**
     * GetUploadTokenResult server.
     * @member {string} server
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.server="";/**
     * GetUploadTokenResult port.
     * @member {number} port
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.port=0;/**
     * GetUploadTokenResult type.
     * @member {number} type
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.type=0;/**
     * GetUploadTokenResult date.
     * @member {string} date
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.date="";/**
     * GetUploadTokenResult path.
     * @member {string} path
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.path="";/**
     * GetUploadTokenResult backupServer.
     * @member {string} backupServer
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.backupServer="";/**
     * GetUploadTokenResult backupPort.
     * @member {number} backupPort
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.backupPort=0;/**
     * GetUploadTokenResult sslPort.
     * @member {number} sslPort
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.sslPort=0;/**
     * GetUploadTokenResult backupSslPort.
     * @member {number} backupSslPort
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.backupSslPort=0;/**
     * GetUploadTokenResult sslToken.
     * @member {string} sslToken
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.sslToken="";/**
     * GetUploadTokenResult backupToken.
     * @member {string} backupToken
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.backupToken="";/**
     * GetUploadTokenResult backupSslToken.
     * @member {string} backupSslToken
     * @memberof GetUploadTokenResult
     * @instance
     */GetUploadTokenResult.prototype.backupSslToken="";/**
     * Creates a new GetUploadTokenResult instance using the specified properties.
     * @function create
     * @memberof GetUploadTokenResult
     * @static
     * @param {IGetUploadTokenResult=} [properties] Properties to set
     * @returns {GetUploadTokenResult} GetUploadTokenResult instance
     */GetUploadTokenResult.create=function create(properties){return new GetUploadTokenResult(properties);};/**
     * Encodes the specified GetUploadTokenResult message. Does not implicitly {@link GetUploadTokenResult.verify|verify} messages.
     * @function encode
     * @memberof GetUploadTokenResult
     * @static
     * @param {IGetUploadTokenResult} message GetUploadTokenResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetUploadTokenResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);writer.uint32(/* id 3, wireType 2 =*/26).string(message.server);if(message.port!=null&&message.hasOwnProperty("port"))writer.uint32(/* id 4, wireType 0 =*/32).int32(message.port);if(message.type!=null&&message.hasOwnProperty("type"))writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);if(message.date!=null&&message.hasOwnProperty("date"))writer.uint32(/* id 6, wireType 2 =*/50).string(message.date);if(message.path!=null&&message.hasOwnProperty("path"))writer.uint32(/* id 7, wireType 2 =*/58).string(message.path);if(message.backupServer!=null&&message.hasOwnProperty("backupServer"))writer.uint32(/* id 8, wireType 2 =*/66).string(message.backupServer);if(message.backupPort!=null&&message.hasOwnProperty("backupPort"))writer.uint32(/* id 9, wireType 0 =*/72).int32(message.backupPort);if(message.sslPort!=null&&message.hasOwnProperty("sslPort"))writer.uint32(/* id 10, wireType 0 =*/80).int32(message.sslPort);if(message.backupSslPort!=null&&message.hasOwnProperty("backupSslPort"))writer.uint32(/* id 11, wireType 0 =*/88).int32(message.backupSslPort);if(message.sslToken!=null&&message.hasOwnProperty("sslToken"))writer.uint32(/* id 12, wireType 2 =*/98).string(message.sslToken);if(message.backupToken!=null&&message.hasOwnProperty("backupToken"))writer.uint32(/* id 13, wireType 2 =*/106).string(message.backupToken);if(message.backupSslToken!=null&&message.hasOwnProperty("backupSslToken"))writer.uint32(/* id 14, wireType 2 =*/114).string(message.backupSslToken);return writer;};/**
     * Encodes the specified GetUploadTokenResult message, length delimited. Does not implicitly {@link GetUploadTokenResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetUploadTokenResult
     * @static
     * @param {IGetUploadTokenResult} message GetUploadTokenResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetUploadTokenResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetUploadTokenResult message from the specified reader or buffer.
     * @function decode
     * @memberof GetUploadTokenResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetUploadTokenResult} GetUploadTokenResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetUploadTokenResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetUploadTokenResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.domain=reader.string();break;case 2:message.token=reader.string();break;case 3:message.server=reader.string();break;case 4:message.port=reader.int32();break;case 5:message.type=reader.int32();break;case 6:message.date=reader.string();break;case 7:message.path=reader.string();break;case 8:message.backupServer=reader.string();break;case 9:message.backupPort=reader.int32();break;case 10:message.sslPort=reader.int32();break;case 11:message.backupSslPort=reader.int32();break;case 12:message.sslToken=reader.string();break;case 13:message.backupToken=reader.string();break;case 14:message.backupSslToken=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("domain"))throw $util.ProtocolError("missing required 'domain'",{instance:message});if(!message.hasOwnProperty("token"))throw $util.ProtocolError("missing required 'token'",{instance:message});if(!message.hasOwnProperty("server"))throw $util.ProtocolError("missing required 'server'",{instance:message});return message;};/**
     * Decodes a GetUploadTokenResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetUploadTokenResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetUploadTokenResult} GetUploadTokenResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetUploadTokenResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetUploadTokenResult message.
     * @function verify
     * @memberof GetUploadTokenResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetUploadTokenResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.domain))return"domain: string expected";if(!$util.isString(message.token))return"token: string expected";if(!$util.isString(message.server))return"server: string expected";if(message.port!=null&&message.hasOwnProperty("port"))if(!$util.isInteger(message.port))return"port: integer expected";if(message.type!=null&&message.hasOwnProperty("type"))if(!$util.isInteger(message.type))return"type: integer expected";if(message.date!=null&&message.hasOwnProperty("date"))if(!$util.isString(message.date))return"date: string expected";if(message.path!=null&&message.hasOwnProperty("path"))if(!$util.isString(message.path))return"path: string expected";if(message.backupServer!=null&&message.hasOwnProperty("backupServer"))if(!$util.isString(message.backupServer))return"backupServer: string expected";if(message.backupPort!=null&&message.hasOwnProperty("backupPort"))if(!$util.isInteger(message.backupPort))return"backupPort: integer expected";if(message.sslPort!=null&&message.hasOwnProperty("sslPort"))if(!$util.isInteger(message.sslPort))return"sslPort: integer expected";if(message.backupSslPort!=null&&message.hasOwnProperty("backupSslPort"))if(!$util.isInteger(message.backupSslPort))return"backupSslPort: integer expected";if(message.sslToken!=null&&message.hasOwnProperty("sslToken"))if(!$util.isString(message.sslToken))return"sslToken: string expected";if(message.backupToken!=null&&message.hasOwnProperty("backupToken"))if(!$util.isString(message.backupToken))return"backupToken: string expected";if(message.backupSslToken!=null&&message.hasOwnProperty("backupSslToken"))if(!$util.isString(message.backupSslToken))return"backupSslToken: string expected";return null;};/**
     * Creates a GetUploadTokenResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetUploadTokenResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetUploadTokenResult} GetUploadTokenResult
     */GetUploadTokenResult.fromObject=function fromObject(object){if(object instanceof $root.GetUploadTokenResult)return object;var message=new $root.GetUploadTokenResult();if(object.domain!=null)message.domain=String(object.domain);if(object.token!=null)message.token=String(object.token);if(object.server!=null)message.server=String(object.server);if(object.port!=null)message.port=object.port|0;if(object.type!=null)message.type=object.type|0;if(object.date!=null)message.date=String(object.date);if(object.path!=null)message.path=String(object.path);if(object.backupServer!=null)message.backupServer=String(object.backupServer);if(object.backupPort!=null)message.backupPort=object.backupPort|0;if(object.sslPort!=null)message.sslPort=object.sslPort|0;if(object.backupSslPort!=null)message.backupSslPort=object.backupSslPort|0;if(object.sslToken!=null)message.sslToken=String(object.sslToken);if(object.backupToken!=null)message.backupToken=String(object.backupToken);if(object.backupSslToken!=null)message.backupSslToken=String(object.backupSslToken);return message;};/**
     * Creates a plain object from a GetUploadTokenResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetUploadTokenResult
     * @static
     * @param {GetUploadTokenResult} message GetUploadTokenResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetUploadTokenResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.domain="";object.token="";object.server="";object.port=0;object.type=0;object.date="";object.path="";object.backupServer="";object.backupPort=0;object.sslPort=0;object.backupSslPort=0;object.sslToken="";object.backupToken="";object.backupSslToken="";}if(message.domain!=null&&message.hasOwnProperty("domain"))object.domain=message.domain;if(message.token!=null&&message.hasOwnProperty("token"))object.token=message.token;if(message.server!=null&&message.hasOwnProperty("server"))object.server=message.server;if(message.port!=null&&message.hasOwnProperty("port"))object.port=message.port;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.date!=null&&message.hasOwnProperty("date"))object.date=message.date;if(message.path!=null&&message.hasOwnProperty("path"))object.path=message.path;if(message.backupServer!=null&&message.hasOwnProperty("backupServer"))object.backupServer=message.backupServer;if(message.backupPort!=null&&message.hasOwnProperty("backupPort"))object.backupPort=message.backupPort;if(message.sslPort!=null&&message.hasOwnProperty("sslPort"))object.sslPort=message.sslPort;if(message.backupSslPort!=null&&message.hasOwnProperty("backupSslPort"))object.backupSslPort=message.backupSslPort;if(message.sslToken!=null&&message.hasOwnProperty("sslToken"))object.sslToken=message.sslToken;if(message.backupToken!=null&&message.hasOwnProperty("backupToken"))object.backupToken=message.backupToken;if(message.backupSslToken!=null&&message.hasOwnProperty("backupSslToken"))object.backupSslToken=message.backupSslToken;return object;};/**
     * Converts this GetUploadTokenResult to JSON.
     * @function toJSON
     * @memberof GetUploadTokenResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetUploadTokenResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetUploadTokenResult;}();$root.GetPresignedUrlResult=function(){/**
     * Properties of a GetPresignedUrlResult.
     * @exports IGetPresignedUrlResult
     * @interface IGetPresignedUrlResult
     * @property {string} presignedUrl GetPresignedUrlResult presignedUrl
     * @property {string} mediaUrl GetPresignedUrlResult mediaUrl
     * @property {string|null} [backupPresignedUrl] GetPresignedUrlResult backupPresignedUrl
     * @property {number|null} [type] GetPresignedUrlResult type
     *//**
     * Constructs a new GetPresignedUrlResult.
     * @exports GetPresignedUrlResult
     * @classdesc Represents a GetPresignedUrlResult.
     * @implements IGetPresignedUrlResult
     * @constructor
     * @param {IGetPresignedUrlResult=} [properties] Properties to set
     */function GetPresignedUrlResult(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetPresignedUrlResult presignedUrl.
     * @member {string} presignedUrl
     * @memberof GetPresignedUrlResult
     * @instance
     */GetPresignedUrlResult.prototype.presignedUrl="";/**
     * GetPresignedUrlResult mediaUrl.
     * @member {string} mediaUrl
     * @memberof GetPresignedUrlResult
     * @instance
     */GetPresignedUrlResult.prototype.mediaUrl="";/**
     * GetPresignedUrlResult backupPresignedUrl.
     * @member {string} backupPresignedUrl
     * @memberof GetPresignedUrlResult
     * @instance
     */GetPresignedUrlResult.prototype.backupPresignedUrl="";/**
     * GetPresignedUrlResult type.
     * @member {number} type
     * @memberof GetPresignedUrlResult
     * @instance
     */GetPresignedUrlResult.prototype.type=0;/**
     * Creates a new GetPresignedUrlResult instance using the specified properties.
     * @function create
     * @memberof GetPresignedUrlResult
     * @static
     * @param {IGetPresignedUrlResult=} [properties] Properties to set
     * @returns {GetPresignedUrlResult} GetPresignedUrlResult instance
     */GetPresignedUrlResult.create=function create(properties){return new GetPresignedUrlResult(properties);};/**
     * Encodes the specified GetPresignedUrlResult message. Does not implicitly {@link GetPresignedUrlResult.verify|verify} messages.
     * @function encode
     * @memberof GetPresignedUrlResult
     * @static
     * @param {IGetPresignedUrlResult} message GetPresignedUrlResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetPresignedUrlResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.presignedUrl);writer.uint32(/* id 2, wireType 2 =*/18).string(message.mediaUrl);if(message.backupPresignedUrl!=null&&message.hasOwnProperty("backupPresignedUrl"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.backupPresignedUrl);if(message.type!=null&&message.hasOwnProperty("type"))writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);return writer;};/**
     * Encodes the specified GetPresignedUrlResult message, length delimited. Does not implicitly {@link GetPresignedUrlResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetPresignedUrlResult
     * @static
     * @param {IGetPresignedUrlResult} message GetPresignedUrlResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetPresignedUrlResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetPresignedUrlResult message from the specified reader or buffer.
     * @function decode
     * @memberof GetPresignedUrlResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetPresignedUrlResult} GetPresignedUrlResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetPresignedUrlResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetPresignedUrlResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.presignedUrl=reader.string();break;case 2:message.mediaUrl=reader.string();break;case 3:message.backupPresignedUrl=reader.string();break;case 4:message.type=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("presignedUrl"))throw $util.ProtocolError("missing required 'presignedUrl'",{instance:message});if(!message.hasOwnProperty("mediaUrl"))throw $util.ProtocolError("missing required 'mediaUrl'",{instance:message});return message;};/**
     * Decodes a GetPresignedUrlResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetPresignedUrlResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetPresignedUrlResult} GetPresignedUrlResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetPresignedUrlResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetPresignedUrlResult message.
     * @function verify
     * @memberof GetPresignedUrlResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetPresignedUrlResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.presignedUrl))return"presignedUrl: string expected";if(!$util.isString(message.mediaUrl))return"mediaUrl: string expected";if(message.backupPresignedUrl!=null&&message.hasOwnProperty("backupPresignedUrl"))if(!$util.isString(message.backupPresignedUrl))return"backupPresignedUrl: string expected";if(message.type!=null&&message.hasOwnProperty("type"))if(!$util.isInteger(message.type))return"type: integer expected";return null;};/**
     * Creates a GetPresignedUrlResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetPresignedUrlResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetPresignedUrlResult} GetPresignedUrlResult
     */GetPresignedUrlResult.fromObject=function fromObject(object){if(object instanceof $root.GetPresignedUrlResult)return object;var message=new $root.GetPresignedUrlResult();if(object.presignedUrl!=null)message.presignedUrl=String(object.presignedUrl);if(object.mediaUrl!=null)message.mediaUrl=String(object.mediaUrl);if(object.backupPresignedUrl!=null)message.backupPresignedUrl=String(object.backupPresignedUrl);if(object.type!=null)message.type=object.type|0;return message;};/**
     * Creates a plain object from a GetPresignedUrlResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetPresignedUrlResult
     * @static
     * @param {GetPresignedUrlResult} message GetPresignedUrlResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetPresignedUrlResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.presignedUrl="";object.mediaUrl="";object.backupPresignedUrl="";object.type=0;}if(message.presignedUrl!=null&&message.hasOwnProperty("presignedUrl"))object.presignedUrl=message.presignedUrl;if(message.mediaUrl!=null&&message.hasOwnProperty("mediaUrl"))object.mediaUrl=message.mediaUrl;if(message.backupPresignedUrl!=null&&message.hasOwnProperty("backupPresignedUrl"))object.backupPresignedUrl=message.backupPresignedUrl;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;return object;};/**
     * Converts this GetPresignedUrlResult to JSON.
     * @function toJSON
     * @memberof GetPresignedUrlResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetPresignedUrlResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetPresignedUrlResult;}();$root.GetDownloadSignedUrlResult=function(){/**
     * Properties of a GetDownloadSignedUrlResult.
     * @exports IGetDownloadSignedUrlResult
     * @interface IGetDownloadSignedUrlResult
     * @property {string} url GetDownloadSignedUrlResult url
     * @property {string|null} [backupUrl] GetDownloadSignedUrlResult backupUrl
     *//**
     * Constructs a new GetDownloadSignedUrlResult.
     * @exports GetDownloadSignedUrlResult
     * @classdesc Represents a GetDownloadSignedUrlResult.
     * @implements IGetDownloadSignedUrlResult
     * @constructor
     * @param {IGetDownloadSignedUrlResult=} [properties] Properties to set
     */function GetDownloadSignedUrlResult(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetDownloadSignedUrlResult url.
     * @member {string} url
     * @memberof GetDownloadSignedUrlResult
     * @instance
     */GetDownloadSignedUrlResult.prototype.url="";/**
     * GetDownloadSignedUrlResult backupUrl.
     * @member {string} backupUrl
     * @memberof GetDownloadSignedUrlResult
     * @instance
     */GetDownloadSignedUrlResult.prototype.backupUrl="";/**
     * Creates a new GetDownloadSignedUrlResult instance using the specified properties.
     * @function create
     * @memberof GetDownloadSignedUrlResult
     * @static
     * @param {IGetDownloadSignedUrlResult=} [properties] Properties to set
     * @returns {GetDownloadSignedUrlResult} GetDownloadSignedUrlResult instance
     */GetDownloadSignedUrlResult.create=function create(properties){return new GetDownloadSignedUrlResult(properties);};/**
     * Encodes the specified GetDownloadSignedUrlResult message. Does not implicitly {@link GetDownloadSignedUrlResult.verify|verify} messages.
     * @function encode
     * @memberof GetDownloadSignedUrlResult
     * @static
     * @param {IGetDownloadSignedUrlResult} message GetDownloadSignedUrlResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetDownloadSignedUrlResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);if(message.backupUrl!=null&&message.hasOwnProperty("backupUrl"))writer.uint32(/* id 2, wireType 2 =*/18).string(message.backupUrl);return writer;};/**
     * Encodes the specified GetDownloadSignedUrlResult message, length delimited. Does not implicitly {@link GetDownloadSignedUrlResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetDownloadSignedUrlResult
     * @static
     * @param {IGetDownloadSignedUrlResult} message GetDownloadSignedUrlResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetDownloadSignedUrlResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetDownloadSignedUrlResult message from the specified reader or buffer.
     * @function decode
     * @memberof GetDownloadSignedUrlResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetDownloadSignedUrlResult} GetDownloadSignedUrlResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetDownloadSignedUrlResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetDownloadSignedUrlResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.url=reader.string();break;case 2:message.backupUrl=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("url"))throw $util.ProtocolError("missing required 'url'",{instance:message});return message;};/**
     * Decodes a GetDownloadSignedUrlResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetDownloadSignedUrlResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetDownloadSignedUrlResult} GetDownloadSignedUrlResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetDownloadSignedUrlResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetDownloadSignedUrlResult message.
     * @function verify
     * @memberof GetDownloadSignedUrlResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetDownloadSignedUrlResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.url))return"url: string expected";if(message.backupUrl!=null&&message.hasOwnProperty("backupUrl"))if(!$util.isString(message.backupUrl))return"backupUrl: string expected";return null;};/**
     * Creates a GetDownloadSignedUrlResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetDownloadSignedUrlResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetDownloadSignedUrlResult} GetDownloadSignedUrlResult
     */GetDownloadSignedUrlResult.fromObject=function fromObject(object){if(object instanceof $root.GetDownloadSignedUrlResult)return object;var message=new $root.GetDownloadSignedUrlResult();if(object.url!=null)message.url=String(object.url);if(object.backupUrl!=null)message.backupUrl=String(object.backupUrl);return message;};/**
     * Creates a plain object from a GetDownloadSignedUrlResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetDownloadSignedUrlResult
     * @static
     * @param {GetDownloadSignedUrlResult} message GetDownloadSignedUrlResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetDownloadSignedUrlResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.url="";object.backupUrl="";}if(message.url!=null&&message.hasOwnProperty("url"))object.url=message.url;if(message.backupUrl!=null&&message.hasOwnProperty("backupUrl"))object.backupUrl=message.backupUrl;return object;};/**
     * Converts this GetDownloadSignedUrlResult to JSON.
     * @function toJSON
     * @memberof GetDownloadSignedUrlResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetDownloadSignedUrlResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetDownloadSignedUrlResult;}();$root.HandleFriendRequest=function(){/**
     * Properties of a HandleFriendRequest.
     * @exports IHandleFriendRequest
     * @interface IHandleFriendRequest
     * @property {string} targetUid HandleFriendRequest targetUid
     * @property {number} status HandleFriendRequest status
     * @property {string|null} [extra] HandleFriendRequest extra
     *//**
     * Constructs a new HandleFriendRequest.
     * @exports HandleFriendRequest
     * @classdesc Represents a HandleFriendRequest.
     * @implements IHandleFriendRequest
     * @constructor
     * @param {IHandleFriendRequest=} [properties] Properties to set
     */function HandleFriendRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * HandleFriendRequest targetUid.
     * @member {string} targetUid
     * @memberof HandleFriendRequest
     * @instance
     */HandleFriendRequest.prototype.targetUid="";/**
     * HandleFriendRequest status.
     * @member {number} status
     * @memberof HandleFriendRequest
     * @instance
     */HandleFriendRequest.prototype.status=0;/**
     * HandleFriendRequest extra.
     * @member {string} extra
     * @memberof HandleFriendRequest
     * @instance
     */HandleFriendRequest.prototype.extra="";/**
     * Creates a new HandleFriendRequest instance using the specified properties.
     * @function create
     * @memberof HandleFriendRequest
     * @static
     * @param {IHandleFriendRequest=} [properties] Properties to set
     * @returns {HandleFriendRequest} HandleFriendRequest instance
     */HandleFriendRequest.create=function create(properties){return new HandleFriendRequest(properties);};/**
     * Encodes the specified HandleFriendRequest message. Does not implicitly {@link HandleFriendRequest.verify|verify} messages.
     * @function encode
     * @memberof HandleFriendRequest
     * @static
     * @param {IHandleFriendRequest} message HandleFriendRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */HandleFriendRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetUid);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.extra);return writer;};/**
     * Encodes the specified HandleFriendRequest message, length delimited. Does not implicitly {@link HandleFriendRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof HandleFriendRequest
     * @static
     * @param {IHandleFriendRequest} message HandleFriendRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */HandleFriendRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a HandleFriendRequest message from the specified reader or buffer.
     * @function decode
     * @memberof HandleFriendRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {HandleFriendRequest} HandleFriendRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */HandleFriendRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.HandleFriendRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.targetUid=reader.string();break;case 2:message.status=reader.int32();break;case 3:message.extra=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("targetUid"))throw $util.ProtocolError("missing required 'targetUid'",{instance:message});if(!message.hasOwnProperty("status"))throw $util.ProtocolError("missing required 'status'",{instance:message});return message;};/**
     * Decodes a HandleFriendRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof HandleFriendRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {HandleFriendRequest} HandleFriendRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */HandleFriendRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a HandleFriendRequest message.
     * @function verify
     * @memberof HandleFriendRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */HandleFriendRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.targetUid))return"targetUid: string expected";if(!$util.isInteger(message.status))return"status: integer expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";return null;};/**
     * Creates a HandleFriendRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof HandleFriendRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {HandleFriendRequest} HandleFriendRequest
     */HandleFriendRequest.fromObject=function fromObject(object){if(object instanceof $root.HandleFriendRequest)return object;var message=new $root.HandleFriendRequest();if(object.targetUid!=null)message.targetUid=String(object.targetUid);if(object.status!=null)message.status=object.status|0;if(object.extra!=null)message.extra=String(object.extra);return message;};/**
     * Creates a plain object from a HandleFriendRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof HandleFriendRequest
     * @static
     * @param {HandleFriendRequest} message HandleFriendRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */HandleFriendRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.targetUid="";object.status=0;object.extra="";}if(message.targetUid!=null&&message.hasOwnProperty("targetUid"))object.targetUid=message.targetUid;if(message.status!=null&&message.hasOwnProperty("status"))object.status=message.status;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;return object;};/**
     * Converts this HandleFriendRequest to JSON.
     * @function toJSON
     * @memberof HandleFriendRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */HandleFriendRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return HandleFriendRequest;}();$root.IDBuf=function(){/**
     * Properties of a IDBuf.
     * @exports IIDBuf
     * @interface IIDBuf
     * @property {string} id IDBuf id
     *//**
     * Constructs a new IDBuf.
     * @exports IDBuf
     * @classdesc Represents a IDBuf.
     * @implements IIDBuf
     * @constructor
     * @param {IIDBuf=} [properties] Properties to set
     */function IDBuf(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * IDBuf id.
     * @member {string} id
     * @memberof IDBuf
     * @instance
     */IDBuf.prototype.id="";/**
     * Creates a new IDBuf instance using the specified properties.
     * @function create
     * @memberof IDBuf
     * @static
     * @param {IIDBuf=} [properties] Properties to set
     * @returns {IDBuf} IDBuf instance
     */IDBuf.create=function create(properties){return new IDBuf(properties);};/**
     * Encodes the specified IDBuf message. Does not implicitly {@link IDBuf.verify|verify} messages.
     * @function encode
     * @memberof IDBuf
     * @static
     * @param {IIDBuf} message IDBuf message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */IDBuf.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);return writer;};/**
     * Encodes the specified IDBuf message, length delimited. Does not implicitly {@link IDBuf.verify|verify} messages.
     * @function encodeDelimited
     * @memberof IDBuf
     * @static
     * @param {IIDBuf} message IDBuf message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */IDBuf.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a IDBuf message from the specified reader or buffer.
     * @function decode
     * @memberof IDBuf
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {IDBuf} IDBuf
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */IDBuf.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.IDBuf();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.id=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("id"))throw $util.ProtocolError("missing required 'id'",{instance:message});return message;};/**
     * Decodes a IDBuf message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof IDBuf
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {IDBuf} IDBuf
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */IDBuf.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a IDBuf message.
     * @function verify
     * @memberof IDBuf
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */IDBuf.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.id))return"id: string expected";return null;};/**
     * Creates a IDBuf message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof IDBuf
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {IDBuf} IDBuf
     */IDBuf.fromObject=function fromObject(object){if(object instanceof $root.IDBuf)return object;var message=new $root.IDBuf();if(object.id!=null)message.id=String(object.id);return message;};/**
     * Creates a plain object from a IDBuf message. Also converts values to other types if specified.
     * @function toObject
     * @memberof IDBuf
     * @static
     * @param {IDBuf} message IDBuf
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */IDBuf.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults)object.id="";if(message.id!=null&&message.hasOwnProperty("id"))object.id=message.id;return object;};/**
     * Converts this IDBuf to JSON.
     * @function toJSON
     * @memberof IDBuf
     * @instance
     * @returns {Object.<string,*>} JSON object
     */IDBuf.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return IDBuf;}();$root.IDListBuf=function(){/**
     * Properties of a IDListBuf.
     * @exports IIDListBuf
     * @interface IIDListBuf
     * @property {Array.<string>|null} [id] IDListBuf id
     *//**
     * Constructs a new IDListBuf.
     * @exports IDListBuf
     * @classdesc Represents a IDListBuf.
     * @implements IIDListBuf
     * @constructor
     * @param {IIDListBuf=} [properties] Properties to set
     */function IDListBuf(properties){this.id=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * IDListBuf id.
     * @member {Array.<string>} id
     * @memberof IDListBuf
     * @instance
     */IDListBuf.prototype.id=$util.emptyArray;/**
     * Creates a new IDListBuf instance using the specified properties.
     * @function create
     * @memberof IDListBuf
     * @static
     * @param {IIDListBuf=} [properties] Properties to set
     * @returns {IDListBuf} IDListBuf instance
     */IDListBuf.create=function create(properties){return new IDListBuf(properties);};/**
     * Encodes the specified IDListBuf message. Does not implicitly {@link IDListBuf.verify|verify} messages.
     * @function encode
     * @memberof IDListBuf
     * @static
     * @param {IIDListBuf} message IDListBuf message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */IDListBuf.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.id!=null&&message.id.length)for(var i=0;i<message.id.length;++i){writer.uint32(/* id 1, wireType 2 =*/10).string(message.id[i]);}return writer;};/**
     * Encodes the specified IDListBuf message, length delimited. Does not implicitly {@link IDListBuf.verify|verify} messages.
     * @function encodeDelimited
     * @memberof IDListBuf
     * @static
     * @param {IIDListBuf} message IDListBuf message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */IDListBuf.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a IDListBuf message from the specified reader or buffer.
     * @function decode
     * @memberof IDListBuf
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {IDListBuf} IDListBuf
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */IDListBuf.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.IDListBuf();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.id&&message.id.length))message.id=[];message.id.push(reader.string());break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a IDListBuf message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof IDListBuf
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {IDListBuf} IDListBuf
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */IDListBuf.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a IDListBuf message.
     * @function verify
     * @memberof IDListBuf
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */IDListBuf.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.id!=null&&message.hasOwnProperty("id")){if(!Array.isArray(message.id))return"id: array expected";for(var i=0;i<message.id.length;++i){if(!$util.isString(message.id[i]))return"id: string[] expected";}}return null;};/**
     * Creates a IDListBuf message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof IDListBuf
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {IDListBuf} IDListBuf
     */IDListBuf.fromObject=function fromObject(object){if(object instanceof $root.IDListBuf)return object;var message=new $root.IDListBuf();if(object.id){if(!Array.isArray(object.id))throw TypeError(".IDListBuf.id: array expected");message.id=[];for(var i=0;i<object.id.length;++i){message.id[i]=String(object.id[i]);}}return message;};/**
     * Creates a plain object from a IDListBuf message. Also converts values to other types if specified.
     * @function toObject
     * @memberof IDListBuf
     * @static
     * @param {IDListBuf} message IDListBuf
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */IDListBuf.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.id=[];if(message.id&&message.id.length){object.id=[];for(var j=0;j<message.id.length;++j){object.id[j]=message.id[j];}}return object;};/**
     * Converts this IDListBuf to JSON.
     * @function toJSON
     * @memberof IDListBuf
     * @instance
     * @returns {Object.<string,*>} JSON object
     */IDListBuf.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return IDListBuf;}();$root.Message=function(){/**
     * Properties of a Message.
     * @exports IMessage
     * @interface IMessage
     * @property {IConversation} conversation Message conversation
     * @property {string} fromUser Message fromUser
     * @property {IMessageContent} content Message content
     * @property {Long|null} [messageId] Message messageId
     * @property {Long|null} [serverTimestamp] Message serverTimestamp
     * @property {string|null} [toUser] Message toUser
     * @property {Array.<string>|null} [to] Message to
     *//**
     * Constructs a new Message.
     * @exports Message
     * @classdesc Represents a Message.
     * @implements IMessage
     * @constructor
     * @param {IMessage=} [properties] Properties to set
     */function Message(properties){this.to=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * Message conversation.
     * @member {IConversation} conversation
     * @memberof Message
     * @instance
     */Message.prototype.conversation=null;/**
     * Message fromUser.
     * @member {string} fromUser
     * @memberof Message
     * @instance
     */Message.prototype.fromUser="";/**
     * Message content.
     * @member {IMessageContent} content
     * @memberof Message
     * @instance
     */Message.prototype.content=null;/**
     * Message messageId.
     * @member {Long} messageId
     * @memberof Message
     * @instance
     */Message.prototype.messageId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Message serverTimestamp.
     * @member {Long} serverTimestamp
     * @memberof Message
     * @instance
     */Message.prototype.serverTimestamp=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Message toUser.
     * @member {string} toUser
     * @memberof Message
     * @instance
     */Message.prototype.toUser="";/**
     * Message to.
     * @member {Array.<string>} to
     * @memberof Message
     * @instance
     */Message.prototype.to=$util.emptyArray;/**
     * Creates a new Message instance using the specified properties.
     * @function create
     * @memberof Message
     * @static
     * @param {IMessage=} [properties] Properties to set
     * @returns {Message} Message instance
     */Message.create=function create(properties){return new Message(properties);};/**
     * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.
     * @function encode
     * @memberof Message
     * @static
     * @param {IMessage} message Message message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Message.encode=function encode(message,writer){if(!writer)writer=$Writer.create();$root.Conversation.encode(message.conversation,writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();writer.uint32(/* id 2, wireType 2 =*/18).string(message.fromUser);$root.MessageContent.encode(message.content,writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();if(message.messageId!=null&&message.hasOwnProperty("messageId"))writer.uint32(/* id 4, wireType 0 =*/32).int64(message.messageId);if(message.serverTimestamp!=null&&message.hasOwnProperty("serverTimestamp"))writer.uint32(/* id 5, wireType 0 =*/40).int64(message.serverTimestamp);if(message.toUser!=null&&message.hasOwnProperty("toUser"))writer.uint32(/* id 6, wireType 2 =*/50).string(message.toUser);if(message.to!=null&&message.to.length)for(var i=0;i<message.to.length;++i){writer.uint32(/* id 7, wireType 2 =*/58).string(message.to[i]);}return writer;};/**
     * Encodes the specified Message message, length delimited. Does not implicitly {@link Message.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Message
     * @static
     * @param {IMessage} message Message message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Message.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a Message message from the specified reader or buffer.
     * @function decode
     * @memberof Message
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Message} Message
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Message.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.Message();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.conversation=$root.Conversation.decode(reader,reader.uint32());break;case 2:message.fromUser=reader.string();break;case 3:message.content=$root.MessageContent.decode(reader,reader.uint32());break;case 4:message.messageId=reader.int64();break;case 5:message.serverTimestamp=reader.int64();break;case 6:message.toUser=reader.string();break;case 7:if(!(message.to&&message.to.length))message.to=[];message.to.push(reader.string());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("conversation"))throw $util.ProtocolError("missing required 'conversation'",{instance:message});if(!message.hasOwnProperty("fromUser"))throw $util.ProtocolError("missing required 'fromUser'",{instance:message});if(!message.hasOwnProperty("content"))throw $util.ProtocolError("missing required 'content'",{instance:message});return message;};/**
     * Decodes a Message message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Message
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Message} Message
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Message.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a Message message.
     * @function verify
     * @memberof Message
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */Message.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";{var error=$root.Conversation.verify(message.conversation);if(error)return"conversation."+error;}if(!$util.isString(message.fromUser))return"fromUser: string expected";{var error=$root.MessageContent.verify(message.content);if(error)return"content."+error;}if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(!$util.isInteger(message.messageId)&&!(message.messageId&&$util.isInteger(message.messageId.low)&&$util.isInteger(message.messageId.high)))return"messageId: integer|Long expected";if(message.serverTimestamp!=null&&message.hasOwnProperty("serverTimestamp"))if(!$util.isInteger(message.serverTimestamp)&&!(message.serverTimestamp&&$util.isInteger(message.serverTimestamp.low)&&$util.isInteger(message.serverTimestamp.high)))return"serverTimestamp: integer|Long expected";if(message.toUser!=null&&message.hasOwnProperty("toUser"))if(!$util.isString(message.toUser))return"toUser: string expected";if(message.to!=null&&message.hasOwnProperty("to")){if(!Array.isArray(message.to))return"to: array expected";for(var i=0;i<message.to.length;++i){if(!$util.isString(message.to[i]))return"to: string[] expected";}}return null;};/**
     * Creates a Message message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Message
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Message} Message
     */Message.fromObject=function fromObject(object){if(object instanceof $root.Message)return object;var message=new $root.Message();if(object.conversation!=null){if((0,_typeof3.default)(object.conversation)!=="object")throw TypeError(".Message.conversation: object expected");message.conversation=$root.Conversation.fromObject(object.conversation);}if(object.fromUser!=null)message.fromUser=String(object.fromUser);if(object.content!=null){if((0,_typeof3.default)(object.content)!=="object")throw TypeError(".Message.content: object expected");message.content=$root.MessageContent.fromObject(object.content);}if(object.messageId!=null)if($util.Long)(message.messageId=$util.Long.fromValue(object.messageId)).unsigned=false;else if(typeof object.messageId==="string")message.messageId=parseInt(object.messageId,10);else if(typeof object.messageId==="number")message.messageId=object.messageId;else if((0,_typeof3.default)(object.messageId)==="object")message.messageId=new $util.LongBits(object.messageId.low>>>0,object.messageId.high>>>0).toNumber();if(object.serverTimestamp!=null)if($util.Long)(message.serverTimestamp=$util.Long.fromValue(object.serverTimestamp)).unsigned=false;else if(typeof object.serverTimestamp==="string")message.serverTimestamp=parseInt(object.serverTimestamp,10);else if(typeof object.serverTimestamp==="number")message.serverTimestamp=object.serverTimestamp;else if((0,_typeof3.default)(object.serverTimestamp)==="object")message.serverTimestamp=new $util.LongBits(object.serverTimestamp.low>>>0,object.serverTimestamp.high>>>0).toNumber();if(object.toUser!=null)message.toUser=String(object.toUser);if(object.to){if(!Array.isArray(object.to))throw TypeError(".Message.to: array expected");message.to=[];for(var i=0;i<object.to.length;++i){message.to[i]=String(object.to[i]);}}return message;};/**
     * Creates a plain object from a Message message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Message
     * @static
     * @param {Message} message Message
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */Message.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.to=[];if(options.defaults){object.conversation=null;object.fromUser="";object.content=null;if($util.Long){var long=new $util.Long(0,0,false);object.messageId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.messageId=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.serverTimestamp=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.serverTimestamp=options.longs===String?"0":0;object.toUser="";}if(message.conversation!=null&&message.hasOwnProperty("conversation"))object.conversation=$root.Conversation.toObject(message.conversation,options);if(message.fromUser!=null&&message.hasOwnProperty("fromUser"))object.fromUser=message.fromUser;if(message.content!=null&&message.hasOwnProperty("content"))object.content=$root.MessageContent.toObject(message.content,options);if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(typeof message.messageId==="number")object.messageId=options.longs===String?String(message.messageId):message.messageId;else object.messageId=options.longs===String?$util.Long.prototype.toString.call(message.messageId):options.longs===Number?new $util.LongBits(message.messageId.low>>>0,message.messageId.high>>>0).toNumber():message.messageId;if(message.serverTimestamp!=null&&message.hasOwnProperty("serverTimestamp"))if(typeof message.serverTimestamp==="number")object.serverTimestamp=options.longs===String?String(message.serverTimestamp):message.serverTimestamp;else object.serverTimestamp=options.longs===String?$util.Long.prototype.toString.call(message.serverTimestamp):options.longs===Number?new $util.LongBits(message.serverTimestamp.low>>>0,message.serverTimestamp.high>>>0).toNumber():message.serverTimestamp;if(message.toUser!=null&&message.hasOwnProperty("toUser"))object.toUser=message.toUser;if(message.to&&message.to.length){object.to=[];for(var j=0;j<message.to.length;++j){object.to[j]=message.to[j];}}return object;};/**
     * Converts this Message to JSON.
     * @function toJSON
     * @memberof Message
     * @instance
     * @returns {Object.<string,*>} JSON object
     */Message.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return Message;}();$root.ConvReadRequest=function(){/**
     * Properties of a ConvReadRequest.
     * @exports IConvReadRequest
     * @interface IConvReadRequest
     * @property {IConversation} conversation ConvReadRequest conversation
     * @property {string} fromUser ConvReadRequest fromUser
     * @property {Long} readTime ConvReadRequest readTime
     * @property {Array.<string>|null} [to] ConvReadRequest to
     *//**
     * Constructs a new ConvReadRequest.
     * @exports ConvReadRequest
     * @classdesc Represents a ConvReadRequest.
     * @implements IConvReadRequest
     * @constructor
     * @param {IConvReadRequest=} [properties] Properties to set
     */function ConvReadRequest(properties){this.to=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ConvReadRequest conversation.
     * @member {IConversation} conversation
     * @memberof ConvReadRequest
     * @instance
     */ConvReadRequest.prototype.conversation=null;/**
     * ConvReadRequest fromUser.
     * @member {string} fromUser
     * @memberof ConvReadRequest
     * @instance
     */ConvReadRequest.prototype.fromUser="";/**
     * ConvReadRequest readTime.
     * @member {Long} readTime
     * @memberof ConvReadRequest
     * @instance
     */ConvReadRequest.prototype.readTime=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ConvReadRequest to.
     * @member {Array.<string>} to
     * @memberof ConvReadRequest
     * @instance
     */ConvReadRequest.prototype.to=$util.emptyArray;/**
     * Creates a new ConvReadRequest instance using the specified properties.
     * @function create
     * @memberof ConvReadRequest
     * @static
     * @param {IConvReadRequest=} [properties] Properties to set
     * @returns {ConvReadRequest} ConvReadRequest instance
     */ConvReadRequest.create=function create(properties){return new ConvReadRequest(properties);};/**
     * Encodes the specified ConvReadRequest message. Does not implicitly {@link ConvReadRequest.verify|verify} messages.
     * @function encode
     * @memberof ConvReadRequest
     * @static
     * @param {IConvReadRequest} message ConvReadRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConvReadRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();$root.Conversation.encode(message.conversation,writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();writer.uint32(/* id 2, wireType 2 =*/18).string(message.fromUser);writer.uint32(/* id 3, wireType 0 =*/24).int64(message.readTime);if(message.to!=null&&message.to.length)for(var i=0;i<message.to.length;++i){writer.uint32(/* id 4, wireType 2 =*/34).string(message.to[i]);}return writer;};/**
     * Encodes the specified ConvReadRequest message, length delimited. Does not implicitly {@link ConvReadRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ConvReadRequest
     * @static
     * @param {IConvReadRequest} message ConvReadRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConvReadRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ConvReadRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ConvReadRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ConvReadRequest} ConvReadRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConvReadRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ConvReadRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.conversation=$root.Conversation.decode(reader,reader.uint32());break;case 2:message.fromUser=reader.string();break;case 3:message.readTime=reader.int64();break;case 4:if(!(message.to&&message.to.length))message.to=[];message.to.push(reader.string());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("conversation"))throw $util.ProtocolError("missing required 'conversation'",{instance:message});if(!message.hasOwnProperty("fromUser"))throw $util.ProtocolError("missing required 'fromUser'",{instance:message});if(!message.hasOwnProperty("readTime"))throw $util.ProtocolError("missing required 'readTime'",{instance:message});return message;};/**
     * Decodes a ConvReadRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ConvReadRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ConvReadRequest} ConvReadRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConvReadRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ConvReadRequest message.
     * @function verify
     * @memberof ConvReadRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ConvReadRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";{var error=$root.Conversation.verify(message.conversation);if(error)return"conversation."+error;}if(!$util.isString(message.fromUser))return"fromUser: string expected";if(!$util.isInteger(message.readTime)&&!(message.readTime&&$util.isInteger(message.readTime.low)&&$util.isInteger(message.readTime.high)))return"readTime: integer|Long expected";if(message.to!=null&&message.hasOwnProperty("to")){if(!Array.isArray(message.to))return"to: array expected";for(var i=0;i<message.to.length;++i){if(!$util.isString(message.to[i]))return"to: string[] expected";}}return null;};/**
     * Creates a ConvReadRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ConvReadRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ConvReadRequest} ConvReadRequest
     */ConvReadRequest.fromObject=function fromObject(object){if(object instanceof $root.ConvReadRequest)return object;var message=new $root.ConvReadRequest();if(object.conversation!=null){if((0,_typeof3.default)(object.conversation)!=="object")throw TypeError(".ConvReadRequest.conversation: object expected");message.conversation=$root.Conversation.fromObject(object.conversation);}if(object.fromUser!=null)message.fromUser=String(object.fromUser);if(object.readTime!=null)if($util.Long)(message.readTime=$util.Long.fromValue(object.readTime)).unsigned=false;else if(typeof object.readTime==="string")message.readTime=parseInt(object.readTime,10);else if(typeof object.readTime==="number")message.readTime=object.readTime;else if((0,_typeof3.default)(object.readTime)==="object")message.readTime=new $util.LongBits(object.readTime.low>>>0,object.readTime.high>>>0).toNumber();if(object.to){if(!Array.isArray(object.to))throw TypeError(".ConvReadRequest.to: array expected");message.to=[];for(var i=0;i<object.to.length;++i){message.to[i]=String(object.to[i]);}}return message;};/**
     * Creates a plain object from a ConvReadRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ConvReadRequest
     * @static
     * @param {ConvReadRequest} message ConvReadRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ConvReadRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.to=[];if(options.defaults){object.conversation=null;object.fromUser="";if($util.Long){var long=new $util.Long(0,0,false);object.readTime=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.readTime=options.longs===String?"0":0;}if(message.conversation!=null&&message.hasOwnProperty("conversation"))object.conversation=$root.Conversation.toObject(message.conversation,options);if(message.fromUser!=null&&message.hasOwnProperty("fromUser"))object.fromUser=message.fromUser;if(message.readTime!=null&&message.hasOwnProperty("readTime"))if(typeof message.readTime==="number")object.readTime=options.longs===String?String(message.readTime):message.readTime;else object.readTime=options.longs===String?$util.Long.prototype.toString.call(message.readTime):options.longs===Number?new $util.LongBits(message.readTime.low>>>0,message.readTime.high>>>0).toNumber():message.readTime;if(message.to&&message.to.length){object.to=[];for(var j=0;j<message.to.length;++j){object.to[j]=message.to[j];}}return object;};/**
     * Converts this ConvReadRequest to JSON.
     * @function toJSON
     * @memberof ConvReadRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ConvReadRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ConvReadRequest;}();$root.ConvRead=function(){/**
     * Properties of a ConvRead.
     * @exports IConvRead
     * @interface IConvRead
     * @property {number|null} [id] ConvRead id
     * @property {IConversation} conversation ConvRead conversation
     * @property {string} fromUser ConvRead fromUser
     * @property {Long} readTime ConvRead readTime
     *//**
     * Constructs a new ConvRead.
     * @exports ConvRead
     * @classdesc Represents a ConvRead.
     * @implements IConvRead
     * @constructor
     * @param {IConvRead=} [properties] Properties to set
     */function ConvRead(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ConvRead id.
     * @member {number} id
     * @memberof ConvRead
     * @instance
     */ConvRead.prototype.id=0;/**
     * ConvRead conversation.
     * @member {IConversation} conversation
     * @memberof ConvRead
     * @instance
     */ConvRead.prototype.conversation=null;/**
     * ConvRead fromUser.
     * @member {string} fromUser
     * @memberof ConvRead
     * @instance
     */ConvRead.prototype.fromUser="";/**
     * ConvRead readTime.
     * @member {Long} readTime
     * @memberof ConvRead
     * @instance
     */ConvRead.prototype.readTime=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new ConvRead instance using the specified properties.
     * @function create
     * @memberof ConvRead
     * @static
     * @param {IConvRead=} [properties] Properties to set
     * @returns {ConvRead} ConvRead instance
     */ConvRead.create=function create(properties){return new ConvRead(properties);};/**
     * Encodes the specified ConvRead message. Does not implicitly {@link ConvRead.verify|verify} messages.
     * @function encode
     * @memberof ConvRead
     * @static
     * @param {IConvRead} message ConvRead message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConvRead.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.id!=null&&message.hasOwnProperty("id"))writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);$root.Conversation.encode(message.conversation,writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();writer.uint32(/* id 3, wireType 2 =*/26).string(message.fromUser);writer.uint32(/* id 4, wireType 0 =*/32).int64(message.readTime);return writer;};/**
     * Encodes the specified ConvRead message, length delimited. Does not implicitly {@link ConvRead.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ConvRead
     * @static
     * @param {IConvRead} message ConvRead message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConvRead.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ConvRead message from the specified reader or buffer.
     * @function decode
     * @memberof ConvRead
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ConvRead} ConvRead
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConvRead.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ConvRead();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.id=reader.int32();break;case 2:message.conversation=$root.Conversation.decode(reader,reader.uint32());break;case 3:message.fromUser=reader.string();break;case 4:message.readTime=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("conversation"))throw $util.ProtocolError("missing required 'conversation'",{instance:message});if(!message.hasOwnProperty("fromUser"))throw $util.ProtocolError("missing required 'fromUser'",{instance:message});if(!message.hasOwnProperty("readTime"))throw $util.ProtocolError("missing required 'readTime'",{instance:message});return message;};/**
     * Decodes a ConvRead message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ConvRead
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ConvRead} ConvRead
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConvRead.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ConvRead message.
     * @function verify
     * @memberof ConvRead
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ConvRead.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.id!=null&&message.hasOwnProperty("id"))if(!$util.isInteger(message.id))return"id: integer expected";{var error=$root.Conversation.verify(message.conversation);if(error)return"conversation."+error;}if(!$util.isString(message.fromUser))return"fromUser: string expected";if(!$util.isInteger(message.readTime)&&!(message.readTime&&$util.isInteger(message.readTime.low)&&$util.isInteger(message.readTime.high)))return"readTime: integer|Long expected";return null;};/**
     * Creates a ConvRead message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ConvRead
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ConvRead} ConvRead
     */ConvRead.fromObject=function fromObject(object){if(object instanceof $root.ConvRead)return object;var message=new $root.ConvRead();if(object.id!=null)message.id=object.id|0;if(object.conversation!=null){if((0,_typeof3.default)(object.conversation)!=="object")throw TypeError(".ConvRead.conversation: object expected");message.conversation=$root.Conversation.fromObject(object.conversation);}if(object.fromUser!=null)message.fromUser=String(object.fromUser);if(object.readTime!=null)if($util.Long)(message.readTime=$util.Long.fromValue(object.readTime)).unsigned=false;else if(typeof object.readTime==="string")message.readTime=parseInt(object.readTime,10);else if(typeof object.readTime==="number")message.readTime=object.readTime;else if((0,_typeof3.default)(object.readTime)==="object")message.readTime=new $util.LongBits(object.readTime.low>>>0,object.readTime.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a ConvRead message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ConvRead
     * @static
     * @param {ConvRead} message ConvRead
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ConvRead.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.id=0;object.conversation=null;object.fromUser="";if($util.Long){var long=new $util.Long(0,0,false);object.readTime=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.readTime=options.longs===String?"0":0;}if(message.id!=null&&message.hasOwnProperty("id"))object.id=message.id;if(message.conversation!=null&&message.hasOwnProperty("conversation"))object.conversation=$root.Conversation.toObject(message.conversation,options);if(message.fromUser!=null&&message.hasOwnProperty("fromUser"))object.fromUser=message.fromUser;if(message.readTime!=null&&message.hasOwnProperty("readTime"))if(typeof message.readTime==="number")object.readTime=options.longs===String?String(message.readTime):message.readTime;else object.readTime=options.longs===String?$util.Long.prototype.toString.call(message.readTime):options.longs===Number?new $util.LongBits(message.readTime.low>>>0,message.readTime.high>>>0).toNumber():message.readTime;return object;};/**
     * Converts this ConvRead to JSON.
     * @function toJSON
     * @memberof ConvRead
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ConvRead.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ConvRead;}();$root.Delivery=function(){/**
     * Properties of a Delivery.
     * @exports IDelivery
     * @interface IDelivery
     * @property {string} fromUser Delivery fromUser
     * @property {Long} receiveTime Delivery receiveTime
     *//**
     * Constructs a new Delivery.
     * @exports Delivery
     * @classdesc Represents a Delivery.
     * @implements IDelivery
     * @constructor
     * @param {IDelivery=} [properties] Properties to set
     */function Delivery(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * Delivery fromUser.
     * @member {string} fromUser
     * @memberof Delivery
     * @instance
     */Delivery.prototype.fromUser="";/**
     * Delivery receiveTime.
     * @member {Long} receiveTime
     * @memberof Delivery
     * @instance
     */Delivery.prototype.receiveTime=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new Delivery instance using the specified properties.
     * @function create
     * @memberof Delivery
     * @static
     * @param {IDelivery=} [properties] Properties to set
     * @returns {Delivery} Delivery instance
     */Delivery.create=function create(properties){return new Delivery(properties);};/**
     * Encodes the specified Delivery message. Does not implicitly {@link Delivery.verify|verify} messages.
     * @function encode
     * @memberof Delivery
     * @static
     * @param {IDelivery} message Delivery message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Delivery.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.fromUser);writer.uint32(/* id 2, wireType 0 =*/16).int64(message.receiveTime);return writer;};/**
     * Encodes the specified Delivery message, length delimited. Does not implicitly {@link Delivery.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Delivery
     * @static
     * @param {IDelivery} message Delivery message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Delivery.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a Delivery message from the specified reader or buffer.
     * @function decode
     * @memberof Delivery
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Delivery} Delivery
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Delivery.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.Delivery();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.fromUser=reader.string();break;case 2:message.receiveTime=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("fromUser"))throw $util.ProtocolError("missing required 'fromUser'",{instance:message});if(!message.hasOwnProperty("receiveTime"))throw $util.ProtocolError("missing required 'receiveTime'",{instance:message});return message;};/**
     * Decodes a Delivery message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Delivery
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Delivery} Delivery
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Delivery.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a Delivery message.
     * @function verify
     * @memberof Delivery
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */Delivery.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.fromUser))return"fromUser: string expected";if(!$util.isInteger(message.receiveTime)&&!(message.receiveTime&&$util.isInteger(message.receiveTime.low)&&$util.isInteger(message.receiveTime.high)))return"receiveTime: integer|Long expected";return null;};/**
     * Creates a Delivery message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Delivery
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Delivery} Delivery
     */Delivery.fromObject=function fromObject(object){if(object instanceof $root.Delivery)return object;var message=new $root.Delivery();if(object.fromUser!=null)message.fromUser=String(object.fromUser);if(object.receiveTime!=null)if($util.Long)(message.receiveTime=$util.Long.fromValue(object.receiveTime)).unsigned=false;else if(typeof object.receiveTime==="string")message.receiveTime=parseInt(object.receiveTime,10);else if(typeof object.receiveTime==="number")message.receiveTime=object.receiveTime;else if((0,_typeof3.default)(object.receiveTime)==="object")message.receiveTime=new $util.LongBits(object.receiveTime.low>>>0,object.receiveTime.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a Delivery message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Delivery
     * @static
     * @param {Delivery} message Delivery
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */Delivery.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.fromUser="";if($util.Long){var long=new $util.Long(0,0,false);object.receiveTime=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.receiveTime=options.longs===String?"0":0;}if(message.fromUser!=null&&message.hasOwnProperty("fromUser"))object.fromUser=message.fromUser;if(message.receiveTime!=null&&message.hasOwnProperty("receiveTime"))if(typeof message.receiveTime==="number")object.receiveTime=options.longs===String?String(message.receiveTime):message.receiveTime;else object.receiveTime=options.longs===String?$util.Long.prototype.toString.call(message.receiveTime):options.longs===Number?new $util.LongBits(message.receiveTime.low>>>0,message.receiveTime.high>>>0).toNumber():message.receiveTime;return object;};/**
     * Converts this Delivery to JSON.
     * @function toJSON
     * @memberof Delivery
     * @instance
     * @returns {Object.<string,*>} JSON object
     */Delivery.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return Delivery;}();$root.NotifyDelivery=function(){/**
     * Properties of a NotifyDelivery.
     * @exports INotifyDelivery
     * @interface INotifyDelivery
     * @property {string} fromUser NotifyDelivery fromUser
     * @property {Long} receiveTime NotifyDelivery receiveTime
     * @property {Array.<string>|null} [target] NotifyDelivery target
     *//**
     * Constructs a new NotifyDelivery.
     * @exports NotifyDelivery
     * @classdesc Represents a NotifyDelivery.
     * @implements INotifyDelivery
     * @constructor
     * @param {INotifyDelivery=} [properties] Properties to set
     */function NotifyDelivery(properties){this.target=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * NotifyDelivery fromUser.
     * @member {string} fromUser
     * @memberof NotifyDelivery
     * @instance
     */NotifyDelivery.prototype.fromUser="";/**
     * NotifyDelivery receiveTime.
     * @member {Long} receiveTime
     * @memberof NotifyDelivery
     * @instance
     */NotifyDelivery.prototype.receiveTime=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * NotifyDelivery target.
     * @member {Array.<string>} target
     * @memberof NotifyDelivery
     * @instance
     */NotifyDelivery.prototype.target=$util.emptyArray;/**
     * Creates a new NotifyDelivery instance using the specified properties.
     * @function create
     * @memberof NotifyDelivery
     * @static
     * @param {INotifyDelivery=} [properties] Properties to set
     * @returns {NotifyDelivery} NotifyDelivery instance
     */NotifyDelivery.create=function create(properties){return new NotifyDelivery(properties);};/**
     * Encodes the specified NotifyDelivery message. Does not implicitly {@link NotifyDelivery.verify|verify} messages.
     * @function encode
     * @memberof NotifyDelivery
     * @static
     * @param {INotifyDelivery} message NotifyDelivery message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */NotifyDelivery.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.fromUser);writer.uint32(/* id 2, wireType 0 =*/16).int64(message.receiveTime);if(message.target!=null&&message.target.length)for(var i=0;i<message.target.length;++i){writer.uint32(/* id 3, wireType 2 =*/26).string(message.target[i]);}return writer;};/**
     * Encodes the specified NotifyDelivery message, length delimited. Does not implicitly {@link NotifyDelivery.verify|verify} messages.
     * @function encodeDelimited
     * @memberof NotifyDelivery
     * @static
     * @param {INotifyDelivery} message NotifyDelivery message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */NotifyDelivery.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a NotifyDelivery message from the specified reader or buffer.
     * @function decode
     * @memberof NotifyDelivery
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {NotifyDelivery} NotifyDelivery
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */NotifyDelivery.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.NotifyDelivery();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.fromUser=reader.string();break;case 2:message.receiveTime=reader.int64();break;case 3:if(!(message.target&&message.target.length))message.target=[];message.target.push(reader.string());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("fromUser"))throw $util.ProtocolError("missing required 'fromUser'",{instance:message});if(!message.hasOwnProperty("receiveTime"))throw $util.ProtocolError("missing required 'receiveTime'",{instance:message});return message;};/**
     * Decodes a NotifyDelivery message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof NotifyDelivery
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {NotifyDelivery} NotifyDelivery
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */NotifyDelivery.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a NotifyDelivery message.
     * @function verify
     * @memberof NotifyDelivery
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */NotifyDelivery.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.fromUser))return"fromUser: string expected";if(!$util.isInteger(message.receiveTime)&&!(message.receiveTime&&$util.isInteger(message.receiveTime.low)&&$util.isInteger(message.receiveTime.high)))return"receiveTime: integer|Long expected";if(message.target!=null&&message.hasOwnProperty("target")){if(!Array.isArray(message.target))return"target: array expected";for(var i=0;i<message.target.length;++i){if(!$util.isString(message.target[i]))return"target: string[] expected";}}return null;};/**
     * Creates a NotifyDelivery message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof NotifyDelivery
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {NotifyDelivery} NotifyDelivery
     */NotifyDelivery.fromObject=function fromObject(object){if(object instanceof $root.NotifyDelivery)return object;var message=new $root.NotifyDelivery();if(object.fromUser!=null)message.fromUser=String(object.fromUser);if(object.receiveTime!=null)if($util.Long)(message.receiveTime=$util.Long.fromValue(object.receiveTime)).unsigned=false;else if(typeof object.receiveTime==="string")message.receiveTime=parseInt(object.receiveTime,10);else if(typeof object.receiveTime==="number")message.receiveTime=object.receiveTime;else if((0,_typeof3.default)(object.receiveTime)==="object")message.receiveTime=new $util.LongBits(object.receiveTime.low>>>0,object.receiveTime.high>>>0).toNumber();if(object.target){if(!Array.isArray(object.target))throw TypeError(".NotifyDelivery.target: array expected");message.target=[];for(var i=0;i<object.target.length;++i){message.target[i]=String(object.target[i]);}}return message;};/**
     * Creates a plain object from a NotifyDelivery message. Also converts values to other types if specified.
     * @function toObject
     * @memberof NotifyDelivery
     * @static
     * @param {NotifyDelivery} message NotifyDelivery
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */NotifyDelivery.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.target=[];if(options.defaults){object.fromUser="";if($util.Long){var long=new $util.Long(0,0,false);object.receiveTime=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.receiveTime=options.longs===String?"0":0;}if(message.fromUser!=null&&message.hasOwnProperty("fromUser"))object.fromUser=message.fromUser;if(message.receiveTime!=null&&message.hasOwnProperty("receiveTime"))if(typeof message.receiveTime==="number")object.receiveTime=options.longs===String?String(message.receiveTime):message.receiveTime;else object.receiveTime=options.longs===String?$util.Long.prototype.toString.call(message.receiveTime):options.longs===Number?new $util.LongBits(message.receiveTime.low>>>0,message.receiveTime.high>>>0).toNumber():message.receiveTime;if(message.target&&message.target.length){object.target=[];for(var j=0;j<message.target.length;++j){object.target[j]=message.target[j];}}return object;};/**
     * Converts this NotifyDelivery to JSON.
     * @function toJSON
     * @memberof NotifyDelivery
     * @instance
     * @returns {Object.<string,*>} JSON object
     */NotifyDelivery.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return NotifyDelivery;}();$root.User=function(){/**
     * Properties of a User.
     * @exports IUser
     * @interface IUser
     * @property {string} uid User uid
     * @property {string|null} [name] User name
     * @property {string|null} [displayName] User displayName
     * @property {string|null} [portrait] User portrait
     * @property {string|null} [mobile] User mobile
     * @property {string|null} [email] User email
     * @property {string|null} [address] User address
     * @property {string|null} [company] User company
     * @property {string|null} [extra] User extra
     * @property {Long|null} [updateDt] User updateDt
     * @property {number|null} [gender] User gender
     * @property {string|null} [social] User social
     * @property {number|null} [type] User type
     * @property {number|null} [deleted] User deleted
     *//**
     * Constructs a new User.
     * @exports User
     * @classdesc Represents a User.
     * @implements IUser
     * @constructor
     * @param {IUser=} [properties] Properties to set
     */function User(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * User uid.
     * @member {string} uid
     * @memberof User
     * @instance
     */User.prototype.uid="";/**
     * User name.
     * @member {string} name
     * @memberof User
     * @instance
     */User.prototype.name="";/**
     * User displayName.
     * @member {string} displayName
     * @memberof User
     * @instance
     */User.prototype.displayName="";/**
     * User portrait.
     * @member {string} portrait
     * @memberof User
     * @instance
     */User.prototype.portrait="";/**
     * User mobile.
     * @member {string} mobile
     * @memberof User
     * @instance
     */User.prototype.mobile="";/**
     * User email.
     * @member {string} email
     * @memberof User
     * @instance
     */User.prototype.email="";/**
     * User address.
     * @member {string} address
     * @memberof User
     * @instance
     */User.prototype.address="";/**
     * User company.
     * @member {string} company
     * @memberof User
     * @instance
     */User.prototype.company="";/**
     * User extra.
     * @member {string} extra
     * @memberof User
     * @instance
     */User.prototype.extra="";/**
     * User updateDt.
     * @member {Long} updateDt
     * @memberof User
     * @instance
     */User.prototype.updateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * User gender.
     * @member {number} gender
     * @memberof User
     * @instance
     */User.prototype.gender=0;/**
     * User social.
     * @member {string} social
     * @memberof User
     * @instance
     */User.prototype.social="";/**
     * User type.
     * @member {number} type
     * @memberof User
     * @instance
     */User.prototype.type=0;/**
     * User deleted.
     * @member {number} deleted
     * @memberof User
     * @instance
     */User.prototype.deleted=0;/**
     * Creates a new User instance using the specified properties.
     * @function create
     * @memberof User
     * @static
     * @param {IUser=} [properties] Properties to set
     * @returns {User} User instance
     */User.create=function create(properties){return new User(properties);};/**
     * Encodes the specified User message. Does not implicitly {@link User.verify|verify} messages.
     * @function encode
     * @memberof User
     * @static
     * @param {IUser} message User message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */User.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);if(message.name!=null&&message.hasOwnProperty("name"))writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);if(message.displayName!=null&&message.hasOwnProperty("displayName"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.displayName);if(message.portrait!=null&&message.hasOwnProperty("portrait"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.portrait);if(message.mobile!=null&&message.hasOwnProperty("mobile"))writer.uint32(/* id 5, wireType 2 =*/42).string(message.mobile);if(message.email!=null&&message.hasOwnProperty("email"))writer.uint32(/* id 6, wireType 2 =*/50).string(message.email);if(message.address!=null&&message.hasOwnProperty("address"))writer.uint32(/* id 7, wireType 2 =*/58).string(message.address);if(message.company!=null&&message.hasOwnProperty("company"))writer.uint32(/* id 8, wireType 2 =*/66).string(message.company);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 9, wireType 2 =*/74).string(message.extra);if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))writer.uint32(/* id 10, wireType 0 =*/80).int64(message.updateDt);if(message.gender!=null&&message.hasOwnProperty("gender"))writer.uint32(/* id 11, wireType 0 =*/88).int32(message.gender);if(message.social!=null&&message.hasOwnProperty("social"))writer.uint32(/* id 12, wireType 2 =*/98).string(message.social);if(message.type!=null&&message.hasOwnProperty("type"))writer.uint32(/* id 13, wireType 0 =*/104).int32(message.type);if(message.deleted!=null&&message.hasOwnProperty("deleted"))writer.uint32(/* id 14, wireType 0 =*/112).int32(message.deleted);return writer;};/**
     * Encodes the specified User message, length delimited. Does not implicitly {@link User.verify|verify} messages.
     * @function encodeDelimited
     * @memberof User
     * @static
     * @param {IUser} message User message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */User.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a User message from the specified reader or buffer.
     * @function decode
     * @memberof User
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {User} User
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */User.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.User();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.uid=reader.string();break;case 2:message.name=reader.string();break;case 3:message.displayName=reader.string();break;case 4:message.portrait=reader.string();break;case 5:message.mobile=reader.string();break;case 6:message.email=reader.string();break;case 7:message.address=reader.string();break;case 8:message.company=reader.string();break;case 9:message.extra=reader.string();break;case 10:message.updateDt=reader.int64();break;case 11:message.gender=reader.int32();break;case 12:message.social=reader.string();break;case 13:message.type=reader.int32();break;case 14:message.deleted=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("uid"))throw $util.ProtocolError("missing required 'uid'",{instance:message});return message;};/**
     * Decodes a User message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof User
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {User} User
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */User.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a User message.
     * @function verify
     * @memberof User
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */User.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.uid))return"uid: string expected";if(message.name!=null&&message.hasOwnProperty("name"))if(!$util.isString(message.name))return"name: string expected";if(message.displayName!=null&&message.hasOwnProperty("displayName"))if(!$util.isString(message.displayName))return"displayName: string expected";if(message.portrait!=null&&message.hasOwnProperty("portrait"))if(!$util.isString(message.portrait))return"portrait: string expected";if(message.mobile!=null&&message.hasOwnProperty("mobile"))if(!$util.isString(message.mobile))return"mobile: string expected";if(message.email!=null&&message.hasOwnProperty("email"))if(!$util.isString(message.email))return"email: string expected";if(message.address!=null&&message.hasOwnProperty("address"))if(!$util.isString(message.address))return"address: string expected";if(message.company!=null&&message.hasOwnProperty("company"))if(!$util.isString(message.company))return"company: string expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(!$util.isInteger(message.updateDt)&&!(message.updateDt&&$util.isInteger(message.updateDt.low)&&$util.isInteger(message.updateDt.high)))return"updateDt: integer|Long expected";if(message.gender!=null&&message.hasOwnProperty("gender"))if(!$util.isInteger(message.gender))return"gender: integer expected";if(message.social!=null&&message.hasOwnProperty("social"))if(!$util.isString(message.social))return"social: string expected";if(message.type!=null&&message.hasOwnProperty("type"))if(!$util.isInteger(message.type))return"type: integer expected";if(message.deleted!=null&&message.hasOwnProperty("deleted"))if(!$util.isInteger(message.deleted))return"deleted: integer expected";return null;};/**
     * Creates a User message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof User
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {User} User
     */User.fromObject=function fromObject(object){if(object instanceof $root.User)return object;var message=new $root.User();if(object.uid!=null)message.uid=String(object.uid);if(object.name!=null)message.name=String(object.name);if(object.displayName!=null)message.displayName=String(object.displayName);if(object.portrait!=null)message.portrait=String(object.portrait);if(object.mobile!=null)message.mobile=String(object.mobile);if(object.email!=null)message.email=String(object.email);if(object.address!=null)message.address=String(object.address);if(object.company!=null)message.company=String(object.company);if(object.extra!=null)message.extra=String(object.extra);if(object.updateDt!=null)if($util.Long)(message.updateDt=$util.Long.fromValue(object.updateDt)).unsigned=false;else if(typeof object.updateDt==="string")message.updateDt=parseInt(object.updateDt,10);else if(typeof object.updateDt==="number")message.updateDt=object.updateDt;else if((0,_typeof3.default)(object.updateDt)==="object")message.updateDt=new $util.LongBits(object.updateDt.low>>>0,object.updateDt.high>>>0).toNumber();if(object.gender!=null)message.gender=object.gender|0;if(object.social!=null)message.social=String(object.social);if(object.type!=null)message.type=object.type|0;if(object.deleted!=null)message.deleted=object.deleted|0;return message;};/**
     * Creates a plain object from a User message. Also converts values to other types if specified.
     * @function toObject
     * @memberof User
     * @static
     * @param {User} message User
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */User.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.uid="";object.name="";object.displayName="";object.portrait="";object.mobile="";object.email="";object.address="";object.company="";object.extra="";if($util.Long){var long=new $util.Long(0,0,false);object.updateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.updateDt=options.longs===String?"0":0;object.gender=0;object.social="";object.type=0;object.deleted=0;}if(message.uid!=null&&message.hasOwnProperty("uid"))object.uid=message.uid;if(message.name!=null&&message.hasOwnProperty("name"))object.name=message.name;if(message.displayName!=null&&message.hasOwnProperty("displayName"))object.displayName=message.displayName;if(message.portrait!=null&&message.hasOwnProperty("portrait"))object.portrait=message.portrait;if(message.mobile!=null&&message.hasOwnProperty("mobile"))object.mobile=message.mobile;if(message.email!=null&&message.hasOwnProperty("email"))object.email=message.email;if(message.address!=null&&message.hasOwnProperty("address"))object.address=message.address;if(message.company!=null&&message.hasOwnProperty("company"))object.company=message.company;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(typeof message.updateDt==="number")object.updateDt=options.longs===String?String(message.updateDt):message.updateDt;else object.updateDt=options.longs===String?$util.Long.prototype.toString.call(message.updateDt):options.longs===Number?new $util.LongBits(message.updateDt.low>>>0,message.updateDt.high>>>0).toNumber():message.updateDt;if(message.gender!=null&&message.hasOwnProperty("gender"))object.gender=message.gender;if(message.social!=null&&message.hasOwnProperty("social"))object.social=message.social;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.deleted!=null&&message.hasOwnProperty("deleted"))object.deleted=message.deleted;return object;};/**
     * Converts this User to JSON.
     * @function toJSON
     * @memberof User
     * @instance
     * @returns {Object.<string,*>} JSON object
     */User.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return User;}();$root.Robot=function(){/**
     * Properties of a Robot.
     * @exports IRobot
     * @interface IRobot
     * @property {string} uid Robot uid
     * @property {number} state Robot state
     * @property {string|null} [owner] Robot owner
     * @property {string|null} [secret] Robot secret
     * @property {string|null} [callback] Robot callback
     * @property {string|null} [extra] Robot extra
     *//**
     * Constructs a new Robot.
     * @exports Robot
     * @classdesc Represents a Robot.
     * @implements IRobot
     * @constructor
     * @param {IRobot=} [properties] Properties to set
     */function Robot(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * Robot uid.
     * @member {string} uid
     * @memberof Robot
     * @instance
     */Robot.prototype.uid="";/**
     * Robot state.
     * @member {number} state
     * @memberof Robot
     * @instance
     */Robot.prototype.state=0;/**
     * Robot owner.
     * @member {string} owner
     * @memberof Robot
     * @instance
     */Robot.prototype.owner="";/**
     * Robot secret.
     * @member {string} secret
     * @memberof Robot
     * @instance
     */Robot.prototype.secret="";/**
     * Robot callback.
     * @member {string} callback
     * @memberof Robot
     * @instance
     */Robot.prototype.callback="";/**
     * Robot extra.
     * @member {string} extra
     * @memberof Robot
     * @instance
     */Robot.prototype.extra="";/**
     * Creates a new Robot instance using the specified properties.
     * @function create
     * @memberof Robot
     * @static
     * @param {IRobot=} [properties] Properties to set
     * @returns {Robot} Robot instance
     */Robot.create=function create(properties){return new Robot(properties);};/**
     * Encodes the specified Robot message. Does not implicitly {@link Robot.verify|verify} messages.
     * @function encode
     * @memberof Robot
     * @static
     * @param {IRobot} message Robot message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Robot.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);if(message.owner!=null&&message.hasOwnProperty("owner"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.owner);if(message.secret!=null&&message.hasOwnProperty("secret"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.secret);if(message.callback!=null&&message.hasOwnProperty("callback"))writer.uint32(/* id 5, wireType 2 =*/42).string(message.callback);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 6, wireType 2 =*/50).string(message.extra);return writer;};/**
     * Encodes the specified Robot message, length delimited. Does not implicitly {@link Robot.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Robot
     * @static
     * @param {IRobot} message Robot message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Robot.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a Robot message from the specified reader or buffer.
     * @function decode
     * @memberof Robot
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Robot} Robot
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Robot.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.Robot();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.uid=reader.string();break;case 2:message.state=reader.int32();break;case 3:message.owner=reader.string();break;case 4:message.secret=reader.string();break;case 5:message.callback=reader.string();break;case 6:message.extra=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("uid"))throw $util.ProtocolError("missing required 'uid'",{instance:message});if(!message.hasOwnProperty("state"))throw $util.ProtocolError("missing required 'state'",{instance:message});return message;};/**
     * Decodes a Robot message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Robot
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Robot} Robot
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Robot.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a Robot message.
     * @function verify
     * @memberof Robot
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */Robot.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.uid))return"uid: string expected";if(!$util.isInteger(message.state))return"state: integer expected";if(message.owner!=null&&message.hasOwnProperty("owner"))if(!$util.isString(message.owner))return"owner: string expected";if(message.secret!=null&&message.hasOwnProperty("secret"))if(!$util.isString(message.secret))return"secret: string expected";if(message.callback!=null&&message.hasOwnProperty("callback"))if(!$util.isString(message.callback))return"callback: string expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";return null;};/**
     * Creates a Robot message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Robot
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Robot} Robot
     */Robot.fromObject=function fromObject(object){if(object instanceof $root.Robot)return object;var message=new $root.Robot();if(object.uid!=null)message.uid=String(object.uid);if(object.state!=null)message.state=object.state|0;if(object.owner!=null)message.owner=String(object.owner);if(object.secret!=null)message.secret=String(object.secret);if(object.callback!=null)message.callback=String(object.callback);if(object.extra!=null)message.extra=String(object.extra);return message;};/**
     * Creates a plain object from a Robot message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Robot
     * @static
     * @param {Robot} message Robot
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */Robot.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.uid="";object.state=0;object.owner="";object.secret="";object.callback="";object.extra="";}if(message.uid!=null&&message.hasOwnProperty("uid"))object.uid=message.uid;if(message.state!=null&&message.hasOwnProperty("state"))object.state=message.state;if(message.owner!=null&&message.hasOwnProperty("owner"))object.owner=message.owner;if(message.secret!=null&&message.hasOwnProperty("secret"))object.secret=message.secret;if(message.callback!=null&&message.hasOwnProperty("callback"))object.callback=message.callback;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;return object;};/**
     * Converts this Robot to JSON.
     * @function toJSON
     * @memberof Robot
     * @instance
     * @returns {Object.<string,*>} JSON object
     */Robot.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return Robot;}();$root.GetRobotsResult=function(){/**
     * Properties of a GetRobotsResult.
     * @exports IGetRobotsResult
     * @interface IGetRobotsResult
     * @property {Array.<IRobot>|null} [entry] GetRobotsResult entry
     *//**
     * Constructs a new GetRobotsResult.
     * @exports GetRobotsResult
     * @classdesc Represents a GetRobotsResult.
     * @implements IGetRobotsResult
     * @constructor
     * @param {IGetRobotsResult=} [properties] Properties to set
     */function GetRobotsResult(properties){this.entry=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetRobotsResult entry.
     * @member {Array.<IRobot>} entry
     * @memberof GetRobotsResult
     * @instance
     */GetRobotsResult.prototype.entry=$util.emptyArray;/**
     * Creates a new GetRobotsResult instance using the specified properties.
     * @function create
     * @memberof GetRobotsResult
     * @static
     * @param {IGetRobotsResult=} [properties] Properties to set
     * @returns {GetRobotsResult} GetRobotsResult instance
     */GetRobotsResult.create=function create(properties){return new GetRobotsResult(properties);};/**
     * Encodes the specified GetRobotsResult message. Does not implicitly {@link GetRobotsResult.verify|verify} messages.
     * @function encode
     * @memberof GetRobotsResult
     * @static
     * @param {IGetRobotsResult} message GetRobotsResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetRobotsResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.entry!=null&&message.entry.length)for(var i=0;i<message.entry.length;++i){$root.Robot.encode(message.entry[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified GetRobotsResult message, length delimited. Does not implicitly {@link GetRobotsResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetRobotsResult
     * @static
     * @param {IGetRobotsResult} message GetRobotsResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetRobotsResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetRobotsResult message from the specified reader or buffer.
     * @function decode
     * @memberof GetRobotsResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetRobotsResult} GetRobotsResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetRobotsResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetRobotsResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.entry&&message.entry.length))message.entry=[];message.entry.push($root.Robot.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a GetRobotsResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetRobotsResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetRobotsResult} GetRobotsResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetRobotsResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetRobotsResult message.
     * @function verify
     * @memberof GetRobotsResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetRobotsResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.entry!=null&&message.hasOwnProperty("entry")){if(!Array.isArray(message.entry))return"entry: array expected";for(var i=0;i<message.entry.length;++i){var error=$root.Robot.verify(message.entry[i]);if(error)return"entry."+error;}}return null;};/**
     * Creates a GetRobotsResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetRobotsResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetRobotsResult} GetRobotsResult
     */GetRobotsResult.fromObject=function fromObject(object){if(object instanceof $root.GetRobotsResult)return object;var message=new $root.GetRobotsResult();if(object.entry){if(!Array.isArray(object.entry))throw TypeError(".GetRobotsResult.entry: array expected");message.entry=[];for(var i=0;i<object.entry.length;++i){if((0,_typeof3.default)(object.entry[i])!=="object")throw TypeError(".GetRobotsResult.entry: object expected");message.entry[i]=$root.Robot.fromObject(object.entry[i]);}}return message;};/**
     * Creates a plain object from a GetRobotsResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetRobotsResult
     * @static
     * @param {GetRobotsResult} message GetRobotsResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetRobotsResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.entry=[];if(message.entry&&message.entry.length){object.entry=[];for(var j=0;j<message.entry.length;++j){object.entry[j]=$root.Robot.toObject(message.entry[j],options);}}return object;};/**
     * Converts this GetRobotsResult to JSON.
     * @function toJSON
     * @memberof GetRobotsResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetRobotsResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetRobotsResult;}();$root.Device=function(){/**
     * Properties of a Device.
     * @exports IDevice
     * @interface IDevice
     * @property {string} uid Device uid
     * @property {number} state Device state
     * @property {string} token Device token
     * @property {Array.<string>|null} [owner] Device owner
     * @property {string|null} [extra] Device extra
     * @property {Long|null} [updateDt] Device updateDt
     *//**
     * Constructs a new Device.
     * @exports Device
     * @classdesc Represents a Device.
     * @implements IDevice
     * @constructor
     * @param {IDevice=} [properties] Properties to set
     */function Device(properties){this.owner=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * Device uid.
     * @member {string} uid
     * @memberof Device
     * @instance
     */Device.prototype.uid="";/**
     * Device state.
     * @member {number} state
     * @memberof Device
     * @instance
     */Device.prototype.state=0;/**
     * Device token.
     * @member {string} token
     * @memberof Device
     * @instance
     */Device.prototype.token="";/**
     * Device owner.
     * @member {Array.<string>} owner
     * @memberof Device
     * @instance
     */Device.prototype.owner=$util.emptyArray;/**
     * Device extra.
     * @member {string} extra
     * @memberof Device
     * @instance
     */Device.prototype.extra="";/**
     * Device updateDt.
     * @member {Long} updateDt
     * @memberof Device
     * @instance
     */Device.prototype.updateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new Device instance using the specified properties.
     * @function create
     * @memberof Device
     * @static
     * @param {IDevice=} [properties] Properties to set
     * @returns {Device} Device instance
     */Device.create=function create(properties){return new Device(properties);};/**
     * Encodes the specified Device message. Does not implicitly {@link Device.verify|verify} messages.
     * @function encode
     * @memberof Device
     * @static
     * @param {IDevice} message Device message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Device.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);if(message.owner!=null&&message.owner.length)for(var i=0;i<message.owner.length;++i){writer.uint32(/* id 4, wireType 2 =*/34).string(message.owner[i]);}if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 5, wireType 2 =*/42).string(message.extra);if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))writer.uint32(/* id 6, wireType 0 =*/48).int64(message.updateDt);return writer;};/**
     * Encodes the specified Device message, length delimited. Does not implicitly {@link Device.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Device
     * @static
     * @param {IDevice} message Device message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Device.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a Device message from the specified reader or buffer.
     * @function decode
     * @memberof Device
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Device} Device
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Device.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.Device();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.uid=reader.string();break;case 2:message.state=reader.int32();break;case 3:message.token=reader.string();break;case 4:if(!(message.owner&&message.owner.length))message.owner=[];message.owner.push(reader.string());break;case 5:message.extra=reader.string();break;case 6:message.updateDt=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("uid"))throw $util.ProtocolError("missing required 'uid'",{instance:message});if(!message.hasOwnProperty("state"))throw $util.ProtocolError("missing required 'state'",{instance:message});if(!message.hasOwnProperty("token"))throw $util.ProtocolError("missing required 'token'",{instance:message});return message;};/**
     * Decodes a Device message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Device
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Device} Device
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Device.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a Device message.
     * @function verify
     * @memberof Device
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */Device.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.uid))return"uid: string expected";if(!$util.isInteger(message.state))return"state: integer expected";if(!$util.isString(message.token))return"token: string expected";if(message.owner!=null&&message.hasOwnProperty("owner")){if(!Array.isArray(message.owner))return"owner: array expected";for(var i=0;i<message.owner.length;++i){if(!$util.isString(message.owner[i]))return"owner: string[] expected";}}if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(!$util.isInteger(message.updateDt)&&!(message.updateDt&&$util.isInteger(message.updateDt.low)&&$util.isInteger(message.updateDt.high)))return"updateDt: integer|Long expected";return null;};/**
     * Creates a Device message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Device
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Device} Device
     */Device.fromObject=function fromObject(object){if(object instanceof $root.Device)return object;var message=new $root.Device();if(object.uid!=null)message.uid=String(object.uid);if(object.state!=null)message.state=object.state|0;if(object.token!=null)message.token=String(object.token);if(object.owner){if(!Array.isArray(object.owner))throw TypeError(".Device.owner: array expected");message.owner=[];for(var i=0;i<object.owner.length;++i){message.owner[i]=String(object.owner[i]);}}if(object.extra!=null)message.extra=String(object.extra);if(object.updateDt!=null)if($util.Long)(message.updateDt=$util.Long.fromValue(object.updateDt)).unsigned=false;else if(typeof object.updateDt==="string")message.updateDt=parseInt(object.updateDt,10);else if(typeof object.updateDt==="number")message.updateDt=object.updateDt;else if((0,_typeof3.default)(object.updateDt)==="object")message.updateDt=new $util.LongBits(object.updateDt.low>>>0,object.updateDt.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a Device message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Device
     * @static
     * @param {Device} message Device
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */Device.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.owner=[];if(options.defaults){object.uid="";object.state=0;object.token="";object.extra="";if($util.Long){var long=new $util.Long(0,0,false);object.updateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.updateDt=options.longs===String?"0":0;}if(message.uid!=null&&message.hasOwnProperty("uid"))object.uid=message.uid;if(message.state!=null&&message.hasOwnProperty("state"))object.state=message.state;if(message.token!=null&&message.hasOwnProperty("token"))object.token=message.token;if(message.owner&&message.owner.length){object.owner=[];for(var j=0;j<message.owner.length;++j){object.owner[j]=message.owner[j];}}if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(typeof message.updateDt==="number")object.updateDt=options.longs===String?String(message.updateDt):message.updateDt;else object.updateDt=options.longs===String?$util.Long.prototype.toString.call(message.updateDt):options.longs===Number?new $util.LongBits(message.updateDt.low>>>0,message.updateDt.high>>>0).toNumber():message.updateDt;return object;};/**
     * Converts this Device to JSON.
     * @function toJSON
     * @memberof Device
     * @instance
     * @returns {Object.<string,*>} JSON object
     */Device.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return Device;}();$root.GetDeviceResult=function(){/**
     * Properties of a GetDeviceResult.
     * @exports IGetDeviceResult
     * @interface IGetDeviceResult
     * @property {Array.<IDevice>|null} [entry] GetDeviceResult entry
     *//**
     * Constructs a new GetDeviceResult.
     * @exports GetDeviceResult
     * @classdesc Represents a GetDeviceResult.
     * @implements IGetDeviceResult
     * @constructor
     * @param {IGetDeviceResult=} [properties] Properties to set
     */function GetDeviceResult(properties){this.entry=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetDeviceResult entry.
     * @member {Array.<IDevice>} entry
     * @memberof GetDeviceResult
     * @instance
     */GetDeviceResult.prototype.entry=$util.emptyArray;/**
     * Creates a new GetDeviceResult instance using the specified properties.
     * @function create
     * @memberof GetDeviceResult
     * @static
     * @param {IGetDeviceResult=} [properties] Properties to set
     * @returns {GetDeviceResult} GetDeviceResult instance
     */GetDeviceResult.create=function create(properties){return new GetDeviceResult(properties);};/**
     * Encodes the specified GetDeviceResult message. Does not implicitly {@link GetDeviceResult.verify|verify} messages.
     * @function encode
     * @memberof GetDeviceResult
     * @static
     * @param {IGetDeviceResult} message GetDeviceResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetDeviceResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.entry!=null&&message.entry.length)for(var i=0;i<message.entry.length;++i){$root.Device.encode(message.entry[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified GetDeviceResult message, length delimited. Does not implicitly {@link GetDeviceResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetDeviceResult
     * @static
     * @param {IGetDeviceResult} message GetDeviceResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetDeviceResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetDeviceResult message from the specified reader or buffer.
     * @function decode
     * @memberof GetDeviceResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetDeviceResult} GetDeviceResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetDeviceResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetDeviceResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.entry&&message.entry.length))message.entry=[];message.entry.push($root.Device.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a GetDeviceResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetDeviceResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetDeviceResult} GetDeviceResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetDeviceResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetDeviceResult message.
     * @function verify
     * @memberof GetDeviceResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetDeviceResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.entry!=null&&message.hasOwnProperty("entry")){if(!Array.isArray(message.entry))return"entry: array expected";for(var i=0;i<message.entry.length;++i){var error=$root.Device.verify(message.entry[i]);if(error)return"entry."+error;}}return null;};/**
     * Creates a GetDeviceResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetDeviceResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetDeviceResult} GetDeviceResult
     */GetDeviceResult.fromObject=function fromObject(object){if(object instanceof $root.GetDeviceResult)return object;var message=new $root.GetDeviceResult();if(object.entry){if(!Array.isArray(object.entry))throw TypeError(".GetDeviceResult.entry: array expected");message.entry=[];for(var i=0;i<object.entry.length;++i){if((0,_typeof3.default)(object.entry[i])!=="object")throw TypeError(".GetDeviceResult.entry: object expected");message.entry[i]=$root.Device.fromObject(object.entry[i]);}}return message;};/**
     * Creates a plain object from a GetDeviceResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetDeviceResult
     * @static
     * @param {GetDeviceResult} message GetDeviceResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetDeviceResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.entry=[];if(message.entry&&message.entry.length){object.entry=[];for(var j=0;j<message.entry.length;++j){object.entry[j]=$root.Device.toObject(message.entry[j],options);}}return object;};/**
     * Converts this GetDeviceResult to JSON.
     * @function toJSON
     * @memberof GetDeviceResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetDeviceResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetDeviceResult;}();$root.UploadDeviceTokenRequest=function(){/**
     * Properties of an UploadDeviceTokenRequest.
     * @exports IUploadDeviceTokenRequest
     * @interface IUploadDeviceTokenRequest
     * @property {number} platform UploadDeviceTokenRequest platform
     * @property {string} appName UploadDeviceTokenRequest appName
     * @property {string} deviceToken UploadDeviceTokenRequest deviceToken
     * @property {number} pushType UploadDeviceTokenRequest pushType
     *//**
     * Constructs a new UploadDeviceTokenRequest.
     * @exports UploadDeviceTokenRequest
     * @classdesc Represents an UploadDeviceTokenRequest.
     * @implements IUploadDeviceTokenRequest
     * @constructor
     * @param {IUploadDeviceTokenRequest=} [properties] Properties to set
     */function UploadDeviceTokenRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * UploadDeviceTokenRequest platform.
     * @member {number} platform
     * @memberof UploadDeviceTokenRequest
     * @instance
     */UploadDeviceTokenRequest.prototype.platform=0;/**
     * UploadDeviceTokenRequest appName.
     * @member {string} appName
     * @memberof UploadDeviceTokenRequest
     * @instance
     */UploadDeviceTokenRequest.prototype.appName="";/**
     * UploadDeviceTokenRequest deviceToken.
     * @member {string} deviceToken
     * @memberof UploadDeviceTokenRequest
     * @instance
     */UploadDeviceTokenRequest.prototype.deviceToken="";/**
     * UploadDeviceTokenRequest pushType.
     * @member {number} pushType
     * @memberof UploadDeviceTokenRequest
     * @instance
     */UploadDeviceTokenRequest.prototype.pushType=0;/**
     * Creates a new UploadDeviceTokenRequest instance using the specified properties.
     * @function create
     * @memberof UploadDeviceTokenRequest
     * @static
     * @param {IUploadDeviceTokenRequest=} [properties] Properties to set
     * @returns {UploadDeviceTokenRequest} UploadDeviceTokenRequest instance
     */UploadDeviceTokenRequest.create=function create(properties){return new UploadDeviceTokenRequest(properties);};/**
     * Encodes the specified UploadDeviceTokenRequest message. Does not implicitly {@link UploadDeviceTokenRequest.verify|verify} messages.
     * @function encode
     * @memberof UploadDeviceTokenRequest
     * @static
     * @param {IUploadDeviceTokenRequest} message UploadDeviceTokenRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */UploadDeviceTokenRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.platform);writer.uint32(/* id 2, wireType 2 =*/18).string(message.appName);writer.uint32(/* id 3, wireType 2 =*/26).string(message.deviceToken);writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pushType);return writer;};/**
     * Encodes the specified UploadDeviceTokenRequest message, length delimited. Does not implicitly {@link UploadDeviceTokenRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UploadDeviceTokenRequest
     * @static
     * @param {IUploadDeviceTokenRequest} message UploadDeviceTokenRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */UploadDeviceTokenRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes an UploadDeviceTokenRequest message from the specified reader or buffer.
     * @function decode
     * @memberof UploadDeviceTokenRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UploadDeviceTokenRequest} UploadDeviceTokenRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */UploadDeviceTokenRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.UploadDeviceTokenRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.platform=reader.int32();break;case 2:message.appName=reader.string();break;case 3:message.deviceToken=reader.string();break;case 4:message.pushType=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("platform"))throw $util.ProtocolError("missing required 'platform'",{instance:message});if(!message.hasOwnProperty("appName"))throw $util.ProtocolError("missing required 'appName'",{instance:message});if(!message.hasOwnProperty("deviceToken"))throw $util.ProtocolError("missing required 'deviceToken'",{instance:message});if(!message.hasOwnProperty("pushType"))throw $util.ProtocolError("missing required 'pushType'",{instance:message});return message;};/**
     * Decodes an UploadDeviceTokenRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UploadDeviceTokenRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UploadDeviceTokenRequest} UploadDeviceTokenRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */UploadDeviceTokenRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies an UploadDeviceTokenRequest message.
     * @function verify
     * @memberof UploadDeviceTokenRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */UploadDeviceTokenRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.platform))return"platform: integer expected";if(!$util.isString(message.appName))return"appName: string expected";if(!$util.isString(message.deviceToken))return"deviceToken: string expected";if(!$util.isInteger(message.pushType))return"pushType: integer expected";return null;};/**
     * Creates an UploadDeviceTokenRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UploadDeviceTokenRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UploadDeviceTokenRequest} UploadDeviceTokenRequest
     */UploadDeviceTokenRequest.fromObject=function fromObject(object){if(object instanceof $root.UploadDeviceTokenRequest)return object;var message=new $root.UploadDeviceTokenRequest();if(object.platform!=null)message.platform=object.platform|0;if(object.appName!=null)message.appName=String(object.appName);if(object.deviceToken!=null)message.deviceToken=String(object.deviceToken);if(object.pushType!=null)message.pushType=object.pushType|0;return message;};/**
     * Creates a plain object from an UploadDeviceTokenRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UploadDeviceTokenRequest
     * @static
     * @param {UploadDeviceTokenRequest} message UploadDeviceTokenRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */UploadDeviceTokenRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.platform=0;object.appName="";object.deviceToken="";object.pushType=0;}if(message.platform!=null&&message.hasOwnProperty("platform"))object.platform=message.platform;if(message.appName!=null&&message.hasOwnProperty("appName"))object.appName=message.appName;if(message.deviceToken!=null&&message.hasOwnProperty("deviceToken"))object.deviceToken=message.deviceToken;if(message.pushType!=null&&message.hasOwnProperty("pushType"))object.pushType=message.pushType;return object;};/**
     * Converts this UploadDeviceTokenRequest to JSON.
     * @function toJSON
     * @memberof UploadDeviceTokenRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */UploadDeviceTokenRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return UploadDeviceTokenRequest;}();$root.ModifyGroupInfoRequest=function(){/**
     * Properties of a ModifyGroupInfoRequest.
     * @exports IModifyGroupInfoRequest
     * @interface IModifyGroupInfoRequest
     * @property {string} groupId ModifyGroupInfoRequest groupId
     * @property {number} type ModifyGroupInfoRequest type
     * @property {string} value ModifyGroupInfoRequest value
     * @property {Array.<number>|null} [toLine] ModifyGroupInfoRequest toLine
     * @property {IMessageContent|null} [notifyContent] ModifyGroupInfoRequest notifyContent
     *//**
     * Constructs a new ModifyGroupInfoRequest.
     * @exports ModifyGroupInfoRequest
     * @classdesc Represents a ModifyGroupInfoRequest.
     * @implements IModifyGroupInfoRequest
     * @constructor
     * @param {IModifyGroupInfoRequest=} [properties] Properties to set
     */function ModifyGroupInfoRequest(properties){this.toLine=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ModifyGroupInfoRequest groupId.
     * @member {string} groupId
     * @memberof ModifyGroupInfoRequest
     * @instance
     */ModifyGroupInfoRequest.prototype.groupId="";/**
     * ModifyGroupInfoRequest type.
     * @member {number} type
     * @memberof ModifyGroupInfoRequest
     * @instance
     */ModifyGroupInfoRequest.prototype.type=0;/**
     * ModifyGroupInfoRequest value.
     * @member {string} value
     * @memberof ModifyGroupInfoRequest
     * @instance
     */ModifyGroupInfoRequest.prototype.value="";/**
     * ModifyGroupInfoRequest toLine.
     * @member {Array.<number>} toLine
     * @memberof ModifyGroupInfoRequest
     * @instance
     */ModifyGroupInfoRequest.prototype.toLine=$util.emptyArray;/**
     * ModifyGroupInfoRequest notifyContent.
     * @member {IMessageContent|null|undefined} notifyContent
     * @memberof ModifyGroupInfoRequest
     * @instance
     */ModifyGroupInfoRequest.prototype.notifyContent=null;/**
     * Creates a new ModifyGroupInfoRequest instance using the specified properties.
     * @function create
     * @memberof ModifyGroupInfoRequest
     * @static
     * @param {IModifyGroupInfoRequest=} [properties] Properties to set
     * @returns {ModifyGroupInfoRequest} ModifyGroupInfoRequest instance
     */ModifyGroupInfoRequest.create=function create(properties){return new ModifyGroupInfoRequest(properties);};/**
     * Encodes the specified ModifyGroupInfoRequest message. Does not implicitly {@link ModifyGroupInfoRequest.verify|verify} messages.
     * @function encode
     * @memberof ModifyGroupInfoRequest
     * @static
     * @param {IModifyGroupInfoRequest} message ModifyGroupInfoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyGroupInfoRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);writer.uint32(/* id 3, wireType 2 =*/26).string(message.value);if(message.toLine!=null&&message.toLine.length)for(var i=0;i<message.toLine.length;++i){writer.uint32(/* id 4, wireType 0 =*/32).int32(message.toLine[i]);}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))$root.MessageContent.encode(message.notifyContent,writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();return writer;};/**
     * Encodes the specified ModifyGroupInfoRequest message, length delimited. Does not implicitly {@link ModifyGroupInfoRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ModifyGroupInfoRequest
     * @static
     * @param {IModifyGroupInfoRequest} message ModifyGroupInfoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyGroupInfoRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ModifyGroupInfoRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ModifyGroupInfoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ModifyGroupInfoRequest} ModifyGroupInfoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyGroupInfoRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ModifyGroupInfoRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.groupId=reader.string();break;case 2:message.type=reader.int32();break;case 3:message.value=reader.string();break;case 4:if(!(message.toLine&&message.toLine.length))message.toLine=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.toLine.push(reader.int32());}}else message.toLine.push(reader.int32());break;case 5:message.notifyContent=$root.MessageContent.decode(reader,reader.uint32());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});if(!message.hasOwnProperty("value"))throw $util.ProtocolError("missing required 'value'",{instance:message});return message;};/**
     * Decodes a ModifyGroupInfoRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ModifyGroupInfoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ModifyGroupInfoRequest} ModifyGroupInfoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyGroupInfoRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ModifyGroupInfoRequest message.
     * @function verify
     * @memberof ModifyGroupInfoRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ModifyGroupInfoRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(!$util.isInteger(message.type))return"type: integer expected";if(!$util.isString(message.value))return"value: string expected";if(message.toLine!=null&&message.hasOwnProperty("toLine")){if(!Array.isArray(message.toLine))return"toLine: array expected";for(var i=0;i<message.toLine.length;++i){if(!$util.isInteger(message.toLine[i]))return"toLine: integer[] expected";}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent")){var error=$root.MessageContent.verify(message.notifyContent);if(error)return"notifyContent."+error;}return null;};/**
     * Creates a ModifyGroupInfoRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ModifyGroupInfoRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ModifyGroupInfoRequest} ModifyGroupInfoRequest
     */ModifyGroupInfoRequest.fromObject=function fromObject(object){if(object instanceof $root.ModifyGroupInfoRequest)return object;var message=new $root.ModifyGroupInfoRequest();if(object.groupId!=null)message.groupId=String(object.groupId);if(object.type!=null)message.type=object.type|0;if(object.value!=null)message.value=String(object.value);if(object.toLine){if(!Array.isArray(object.toLine))throw TypeError(".ModifyGroupInfoRequest.toLine: array expected");message.toLine=[];for(var i=0;i<object.toLine.length;++i){message.toLine[i]=object.toLine[i]|0;}}if(object.notifyContent!=null){if((0,_typeof3.default)(object.notifyContent)!=="object")throw TypeError(".ModifyGroupInfoRequest.notifyContent: object expected");message.notifyContent=$root.MessageContent.fromObject(object.notifyContent);}return message;};/**
     * Creates a plain object from a ModifyGroupInfoRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ModifyGroupInfoRequest
     * @static
     * @param {ModifyGroupInfoRequest} message ModifyGroupInfoRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ModifyGroupInfoRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.toLine=[];if(options.defaults){object.groupId="";object.type=0;object.value="";object.notifyContent=null;}if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.value!=null&&message.hasOwnProperty("value"))object.value=message.value;if(message.toLine&&message.toLine.length){object.toLine=[];for(var j=0;j<message.toLine.length;++j){object.toLine[j]=message.toLine[j];}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))object.notifyContent=$root.MessageContent.toObject(message.notifyContent,options);return object;};/**
     * Converts this ModifyGroupInfoRequest to JSON.
     * @function toJSON
     * @memberof ModifyGroupInfoRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ModifyGroupInfoRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ModifyGroupInfoRequest;}();$root.SetGroupManagerRequest=function(){/**
     * Properties of a SetGroupManagerRequest.
     * @exports ISetGroupManagerRequest
     * @interface ISetGroupManagerRequest
     * @property {string} groupId SetGroupManagerRequest groupId
     * @property {number} type SetGroupManagerRequest type
     * @property {Array.<string>|null} [userId] SetGroupManagerRequest userId
     * @property {Array.<number>|null} [toLine] SetGroupManagerRequest toLine
     * @property {IMessageContent|null} [notifyContent] SetGroupManagerRequest notifyContent
     *//**
     * Constructs a new SetGroupManagerRequest.
     * @exports SetGroupManagerRequest
     * @classdesc Represents a SetGroupManagerRequest.
     * @implements ISetGroupManagerRequest
     * @constructor
     * @param {ISetGroupManagerRequest=} [properties] Properties to set
     */function SetGroupManagerRequest(properties){this.userId=[];this.toLine=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * SetGroupManagerRequest groupId.
     * @member {string} groupId
     * @memberof SetGroupManagerRequest
     * @instance
     */SetGroupManagerRequest.prototype.groupId="";/**
     * SetGroupManagerRequest type.
     * @member {number} type
     * @memberof SetGroupManagerRequest
     * @instance
     */SetGroupManagerRequest.prototype.type=0;/**
     * SetGroupManagerRequest userId.
     * @member {Array.<string>} userId
     * @memberof SetGroupManagerRequest
     * @instance
     */SetGroupManagerRequest.prototype.userId=$util.emptyArray;/**
     * SetGroupManagerRequest toLine.
     * @member {Array.<number>} toLine
     * @memberof SetGroupManagerRequest
     * @instance
     */SetGroupManagerRequest.prototype.toLine=$util.emptyArray;/**
     * SetGroupManagerRequest notifyContent.
     * @member {IMessageContent|null|undefined} notifyContent
     * @memberof SetGroupManagerRequest
     * @instance
     */SetGroupManagerRequest.prototype.notifyContent=null;/**
     * Creates a new SetGroupManagerRequest instance using the specified properties.
     * @function create
     * @memberof SetGroupManagerRequest
     * @static
     * @param {ISetGroupManagerRequest=} [properties] Properties to set
     * @returns {SetGroupManagerRequest} SetGroupManagerRequest instance
     */SetGroupManagerRequest.create=function create(properties){return new SetGroupManagerRequest(properties);};/**
     * Encodes the specified SetGroupManagerRequest message. Does not implicitly {@link SetGroupManagerRequest.verify|verify} messages.
     * @function encode
     * @memberof SetGroupManagerRequest
     * @static
     * @param {ISetGroupManagerRequest} message SetGroupManagerRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SetGroupManagerRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);if(message.userId!=null&&message.userId.length)for(var i=0;i<message.userId.length;++i){writer.uint32(/* id 3, wireType 2 =*/26).string(message.userId[i]);}if(message.toLine!=null&&message.toLine.length)for(var i=0;i<message.toLine.length;++i){writer.uint32(/* id 4, wireType 0 =*/32).int32(message.toLine[i]);}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))$root.MessageContent.encode(message.notifyContent,writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();return writer;};/**
     * Encodes the specified SetGroupManagerRequest message, length delimited. Does not implicitly {@link SetGroupManagerRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SetGroupManagerRequest
     * @static
     * @param {ISetGroupManagerRequest} message SetGroupManagerRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SetGroupManagerRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a SetGroupManagerRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SetGroupManagerRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SetGroupManagerRequest} SetGroupManagerRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SetGroupManagerRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.SetGroupManagerRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.groupId=reader.string();break;case 2:message.type=reader.int32();break;case 3:if(!(message.userId&&message.userId.length))message.userId=[];message.userId.push(reader.string());break;case 4:if(!(message.toLine&&message.toLine.length))message.toLine=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.toLine.push(reader.int32());}}else message.toLine.push(reader.int32());break;case 5:message.notifyContent=$root.MessageContent.decode(reader,reader.uint32());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});return message;};/**
     * Decodes a SetGroupManagerRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SetGroupManagerRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SetGroupManagerRequest} SetGroupManagerRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SetGroupManagerRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a SetGroupManagerRequest message.
     * @function verify
     * @memberof SetGroupManagerRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */SetGroupManagerRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(!$util.isInteger(message.type))return"type: integer expected";if(message.userId!=null&&message.hasOwnProperty("userId")){if(!Array.isArray(message.userId))return"userId: array expected";for(var i=0;i<message.userId.length;++i){if(!$util.isString(message.userId[i]))return"userId: string[] expected";}}if(message.toLine!=null&&message.hasOwnProperty("toLine")){if(!Array.isArray(message.toLine))return"toLine: array expected";for(var i=0;i<message.toLine.length;++i){if(!$util.isInteger(message.toLine[i]))return"toLine: integer[] expected";}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent")){var error=$root.MessageContent.verify(message.notifyContent);if(error)return"notifyContent."+error;}return null;};/**
     * Creates a SetGroupManagerRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SetGroupManagerRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SetGroupManagerRequest} SetGroupManagerRequest
     */SetGroupManagerRequest.fromObject=function fromObject(object){if(object instanceof $root.SetGroupManagerRequest)return object;var message=new $root.SetGroupManagerRequest();if(object.groupId!=null)message.groupId=String(object.groupId);if(object.type!=null)message.type=object.type|0;if(object.userId){if(!Array.isArray(object.userId))throw TypeError(".SetGroupManagerRequest.userId: array expected");message.userId=[];for(var i=0;i<object.userId.length;++i){message.userId[i]=String(object.userId[i]);}}if(object.toLine){if(!Array.isArray(object.toLine))throw TypeError(".SetGroupManagerRequest.toLine: array expected");message.toLine=[];for(var i=0;i<object.toLine.length;++i){message.toLine[i]=object.toLine[i]|0;}}if(object.notifyContent!=null){if((0,_typeof3.default)(object.notifyContent)!=="object")throw TypeError(".SetGroupManagerRequest.notifyContent: object expected");message.notifyContent=$root.MessageContent.fromObject(object.notifyContent);}return message;};/**
     * Creates a plain object from a SetGroupManagerRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SetGroupManagerRequest
     * @static
     * @param {SetGroupManagerRequest} message SetGroupManagerRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */SetGroupManagerRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults){object.userId=[];object.toLine=[];}if(options.defaults){object.groupId="";object.type=0;object.notifyContent=null;}if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.userId&&message.userId.length){object.userId=[];for(var j=0;j<message.userId.length;++j){object.userId[j]=message.userId[j];}}if(message.toLine&&message.toLine.length){object.toLine=[];for(var j=0;j<message.toLine.length;++j){object.toLine[j]=message.toLine[j];}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))object.notifyContent=$root.MessageContent.toObject(message.notifyContent,options);return object;};/**
     * Converts this SetGroupManagerRequest to JSON.
     * @function toJSON
     * @memberof SetGroupManagerRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */SetGroupManagerRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return SetGroupManagerRequest;}();$root.InfoEntry=function(){/**
     * Properties of an InfoEntry.
     * @exports IInfoEntry
     * @interface IInfoEntry
     * @property {number} type InfoEntry type
     * @property {string} value InfoEntry value
     *//**
     * Constructs a new InfoEntry.
     * @exports InfoEntry
     * @classdesc Represents an InfoEntry.
     * @implements IInfoEntry
     * @constructor
     * @param {IInfoEntry=} [properties] Properties to set
     */function InfoEntry(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * InfoEntry type.
     * @member {number} type
     * @memberof InfoEntry
     * @instance
     */InfoEntry.prototype.type=0;/**
     * InfoEntry value.
     * @member {string} value
     * @memberof InfoEntry
     * @instance
     */InfoEntry.prototype.value="";/**
     * Creates a new InfoEntry instance using the specified properties.
     * @function create
     * @memberof InfoEntry
     * @static
     * @param {IInfoEntry=} [properties] Properties to set
     * @returns {InfoEntry} InfoEntry instance
     */InfoEntry.create=function create(properties){return new InfoEntry(properties);};/**
     * Encodes the specified InfoEntry message. Does not implicitly {@link InfoEntry.verify|verify} messages.
     * @function encode
     * @memberof InfoEntry
     * @static
     * @param {IInfoEntry} message InfoEntry message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */InfoEntry.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);return writer;};/**
     * Encodes the specified InfoEntry message, length delimited. Does not implicitly {@link InfoEntry.verify|verify} messages.
     * @function encodeDelimited
     * @memberof InfoEntry
     * @static
     * @param {IInfoEntry} message InfoEntry message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */InfoEntry.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes an InfoEntry message from the specified reader or buffer.
     * @function decode
     * @memberof InfoEntry
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {InfoEntry} InfoEntry
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */InfoEntry.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.InfoEntry();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.type=reader.int32();break;case 2:message.value=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});if(!message.hasOwnProperty("value"))throw $util.ProtocolError("missing required 'value'",{instance:message});return message;};/**
     * Decodes an InfoEntry message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof InfoEntry
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {InfoEntry} InfoEntry
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */InfoEntry.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies an InfoEntry message.
     * @function verify
     * @memberof InfoEntry
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */InfoEntry.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.type))return"type: integer expected";if(!$util.isString(message.value))return"value: string expected";return null;};/**
     * Creates an InfoEntry message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof InfoEntry
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {InfoEntry} InfoEntry
     */InfoEntry.fromObject=function fromObject(object){if(object instanceof $root.InfoEntry)return object;var message=new $root.InfoEntry();if(object.type!=null)message.type=object.type|0;if(object.value!=null)message.value=String(object.value);return message;};/**
     * Creates a plain object from an InfoEntry message. Also converts values to other types if specified.
     * @function toObject
     * @memberof InfoEntry
     * @static
     * @param {InfoEntry} message InfoEntry
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */InfoEntry.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.type=0;object.value="";}if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.value!=null&&message.hasOwnProperty("value"))object.value=message.value;return object;};/**
     * Converts this InfoEntry to JSON.
     * @function toJSON
     * @memberof InfoEntry
     * @instance
     * @returns {Object.<string,*>} JSON object
     */InfoEntry.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return InfoEntry;}();$root.ModifyMyInfoRequest=function(){/**
     * Properties of a ModifyMyInfoRequest.
     * @exports IModifyMyInfoRequest
     * @interface IModifyMyInfoRequest
     * @property {Array.<IInfoEntry>|null} [entry] ModifyMyInfoRequest entry
     *//**
     * Constructs a new ModifyMyInfoRequest.
     * @exports ModifyMyInfoRequest
     * @classdesc Represents a ModifyMyInfoRequest.
     * @implements IModifyMyInfoRequest
     * @constructor
     * @param {IModifyMyInfoRequest=} [properties] Properties to set
     */function ModifyMyInfoRequest(properties){this.entry=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ModifyMyInfoRequest entry.
     * @member {Array.<IInfoEntry>} entry
     * @memberof ModifyMyInfoRequest
     * @instance
     */ModifyMyInfoRequest.prototype.entry=$util.emptyArray;/**
     * Creates a new ModifyMyInfoRequest instance using the specified properties.
     * @function create
     * @memberof ModifyMyInfoRequest
     * @static
     * @param {IModifyMyInfoRequest=} [properties] Properties to set
     * @returns {ModifyMyInfoRequest} ModifyMyInfoRequest instance
     */ModifyMyInfoRequest.create=function create(properties){return new ModifyMyInfoRequest(properties);};/**
     * Encodes the specified ModifyMyInfoRequest message. Does not implicitly {@link ModifyMyInfoRequest.verify|verify} messages.
     * @function encode
     * @memberof ModifyMyInfoRequest
     * @static
     * @param {IModifyMyInfoRequest} message ModifyMyInfoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyMyInfoRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.entry!=null&&message.entry.length)for(var i=0;i<message.entry.length;++i){$root.InfoEntry.encode(message.entry[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified ModifyMyInfoRequest message, length delimited. Does not implicitly {@link ModifyMyInfoRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ModifyMyInfoRequest
     * @static
     * @param {IModifyMyInfoRequest} message ModifyMyInfoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyMyInfoRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ModifyMyInfoRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ModifyMyInfoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ModifyMyInfoRequest} ModifyMyInfoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyMyInfoRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ModifyMyInfoRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.entry&&message.entry.length))message.entry=[];message.entry.push($root.InfoEntry.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a ModifyMyInfoRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ModifyMyInfoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ModifyMyInfoRequest} ModifyMyInfoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyMyInfoRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ModifyMyInfoRequest message.
     * @function verify
     * @memberof ModifyMyInfoRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ModifyMyInfoRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.entry!=null&&message.hasOwnProperty("entry")){if(!Array.isArray(message.entry))return"entry: array expected";for(var i=0;i<message.entry.length;++i){var error=$root.InfoEntry.verify(message.entry[i]);if(error)return"entry."+error;}}return null;};/**
     * Creates a ModifyMyInfoRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ModifyMyInfoRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ModifyMyInfoRequest} ModifyMyInfoRequest
     */ModifyMyInfoRequest.fromObject=function fromObject(object){if(object instanceof $root.ModifyMyInfoRequest)return object;var message=new $root.ModifyMyInfoRequest();if(object.entry){if(!Array.isArray(object.entry))throw TypeError(".ModifyMyInfoRequest.entry: array expected");message.entry=[];for(var i=0;i<object.entry.length;++i){if((0,_typeof3.default)(object.entry[i])!=="object")throw TypeError(".ModifyMyInfoRequest.entry: object expected");message.entry[i]=$root.InfoEntry.fromObject(object.entry[i]);}}return message;};/**
     * Creates a plain object from a ModifyMyInfoRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ModifyMyInfoRequest
     * @static
     * @param {ModifyMyInfoRequest} message ModifyMyInfoRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ModifyMyInfoRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.entry=[];if(message.entry&&message.entry.length){object.entry=[];for(var j=0;j<message.entry.length;++j){object.entry[j]=$root.InfoEntry.toObject(message.entry[j],options);}}return object;};/**
     * Converts this ModifyMyInfoRequest to JSON.
     * @function toJSON
     * @memberof ModifyMyInfoRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ModifyMyInfoRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ModifyMyInfoRequest;}();$root.NotifyMessage=function(){/**
     * Properties of a NotifyMessage.
     * @exports INotifyMessage
     * @interface INotifyMessage
     * @property {number} type NotifyMessage type
     * @property {Long} head NotifyMessage head
     *//**
     * Constructs a new NotifyMessage.
     * @exports NotifyMessage
     * @classdesc Represents a NotifyMessage.
     * @implements INotifyMessage
     * @constructor
     * @param {INotifyMessage=} [properties] Properties to set
     */function NotifyMessage(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * NotifyMessage type.
     * @member {number} type
     * @memberof NotifyMessage
     * @instance
     */NotifyMessage.prototype.type=0;/**
     * NotifyMessage head.
     * @member {Long} head
     * @memberof NotifyMessage
     * @instance
     */NotifyMessage.prototype.head=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new NotifyMessage instance using the specified properties.
     * @function create
     * @memberof NotifyMessage
     * @static
     * @param {INotifyMessage=} [properties] Properties to set
     * @returns {NotifyMessage} NotifyMessage instance
     */NotifyMessage.create=function create(properties){return new NotifyMessage(properties);};/**
     * Encodes the specified NotifyMessage message. Does not implicitly {@link NotifyMessage.verify|verify} messages.
     * @function encode
     * @memberof NotifyMessage
     * @static
     * @param {INotifyMessage} message NotifyMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */NotifyMessage.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);writer.uint32(/* id 2, wireType 0 =*/16).int64(message.head);return writer;};/**
     * Encodes the specified NotifyMessage message, length delimited. Does not implicitly {@link NotifyMessage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof NotifyMessage
     * @static
     * @param {INotifyMessage} message NotifyMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */NotifyMessage.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a NotifyMessage message from the specified reader or buffer.
     * @function decode
     * @memberof NotifyMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {NotifyMessage} NotifyMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */NotifyMessage.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.NotifyMessage();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.type=reader.int32();break;case 2:message.head=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});if(!message.hasOwnProperty("head"))throw $util.ProtocolError("missing required 'head'",{instance:message});return message;};/**
     * Decodes a NotifyMessage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof NotifyMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {NotifyMessage} NotifyMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */NotifyMessage.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a NotifyMessage message.
     * @function verify
     * @memberof NotifyMessage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */NotifyMessage.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.type))return"type: integer expected";if(!$util.isInteger(message.head)&&!(message.head&&$util.isInteger(message.head.low)&&$util.isInteger(message.head.high)))return"head: integer|Long expected";return null;};/**
     * Creates a NotifyMessage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof NotifyMessage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {NotifyMessage} NotifyMessage
     */NotifyMessage.fromObject=function fromObject(object){if(object instanceof $root.NotifyMessage)return object;var message=new $root.NotifyMessage();if(object.type!=null)message.type=object.type|0;if(object.head!=null)if($util.Long)(message.head=$util.Long.fromValue(object.head)).unsigned=false;else if(typeof object.head==="string")message.head=parseInt(object.head,10);else if(typeof object.head==="number")message.head=object.head;else if((0,_typeof3.default)(object.head)==="object")message.head=new $util.LongBits(object.head.low>>>0,object.head.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a NotifyMessage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof NotifyMessage
     * @static
     * @param {NotifyMessage} message NotifyMessage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */NotifyMessage.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.type=0;if($util.Long){var long=new $util.Long(0,0,false);object.head=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.head=options.longs===String?"0":0;}if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.head!=null&&message.hasOwnProperty("head"))if(typeof message.head==="number")object.head=options.longs===String?String(message.head):message.head;else object.head=options.longs===String?$util.Long.prototype.toString.call(message.head):options.longs===Number?new $util.LongBits(message.head.low>>>0,message.head.high>>>0).toNumber():message.head;return object;};/**
     * Converts this NotifyMessage to JSON.
     * @function toJSON
     * @memberof NotifyMessage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */NotifyMessage.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return NotifyMessage;}();$root.NotifyGroupMessage=function(){/**
     * Properties of a NotifyGroupMessage.
     * @exports INotifyGroupMessage
     * @interface INotifyGroupMessage
     * @property {Long} head NotifyGroupMessage head
     * @property {string} target NotifyGroupMessage target
     * @property {number} line NotifyGroupMessage line
     *//**
     * Constructs a new NotifyGroupMessage.
     * @exports NotifyGroupMessage
     * @classdesc Represents a NotifyGroupMessage.
     * @implements INotifyGroupMessage
     * @constructor
     * @param {INotifyGroupMessage=} [properties] Properties to set
     */function NotifyGroupMessage(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * NotifyGroupMessage head.
     * @member {Long} head
     * @memberof NotifyGroupMessage
     * @instance
     */NotifyGroupMessage.prototype.head=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * NotifyGroupMessage target.
     * @member {string} target
     * @memberof NotifyGroupMessage
     * @instance
     */NotifyGroupMessage.prototype.target="";/**
     * NotifyGroupMessage line.
     * @member {number} line
     * @memberof NotifyGroupMessage
     * @instance
     */NotifyGroupMessage.prototype.line=0;/**
     * Creates a new NotifyGroupMessage instance using the specified properties.
     * @function create
     * @memberof NotifyGroupMessage
     * @static
     * @param {INotifyGroupMessage=} [properties] Properties to set
     * @returns {NotifyGroupMessage} NotifyGroupMessage instance
     */NotifyGroupMessage.create=function create(properties){return new NotifyGroupMessage(properties);};/**
     * Encodes the specified NotifyGroupMessage message. Does not implicitly {@link NotifyGroupMessage.verify|verify} messages.
     * @function encode
     * @memberof NotifyGroupMessage
     * @static
     * @param {INotifyGroupMessage} message NotifyGroupMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */NotifyGroupMessage.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.head);writer.uint32(/* id 2, wireType 2 =*/18).string(message.target);writer.uint32(/* id 3, wireType 0 =*/24).int32(message.line);return writer;};/**
     * Encodes the specified NotifyGroupMessage message, length delimited. Does not implicitly {@link NotifyGroupMessage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof NotifyGroupMessage
     * @static
     * @param {INotifyGroupMessage} message NotifyGroupMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */NotifyGroupMessage.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a NotifyGroupMessage message from the specified reader or buffer.
     * @function decode
     * @memberof NotifyGroupMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {NotifyGroupMessage} NotifyGroupMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */NotifyGroupMessage.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.NotifyGroupMessage();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.head=reader.int64();break;case 2:message.target=reader.string();break;case 3:message.line=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("head"))throw $util.ProtocolError("missing required 'head'",{instance:message});if(!message.hasOwnProperty("target"))throw $util.ProtocolError("missing required 'target'",{instance:message});if(!message.hasOwnProperty("line"))throw $util.ProtocolError("missing required 'line'",{instance:message});return message;};/**
     * Decodes a NotifyGroupMessage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof NotifyGroupMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {NotifyGroupMessage} NotifyGroupMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */NotifyGroupMessage.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a NotifyGroupMessage message.
     * @function verify
     * @memberof NotifyGroupMessage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */NotifyGroupMessage.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.head)&&!(message.head&&$util.isInteger(message.head.low)&&$util.isInteger(message.head.high)))return"head: integer|Long expected";if(!$util.isString(message.target))return"target: string expected";if(!$util.isInteger(message.line))return"line: integer expected";return null;};/**
     * Creates a NotifyGroupMessage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof NotifyGroupMessage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {NotifyGroupMessage} NotifyGroupMessage
     */NotifyGroupMessage.fromObject=function fromObject(object){if(object instanceof $root.NotifyGroupMessage)return object;var message=new $root.NotifyGroupMessage();if(object.head!=null)if($util.Long)(message.head=$util.Long.fromValue(object.head)).unsigned=false;else if(typeof object.head==="string")message.head=parseInt(object.head,10);else if(typeof object.head==="number")message.head=object.head;else if((0,_typeof3.default)(object.head)==="object")message.head=new $util.LongBits(object.head.low>>>0,object.head.high>>>0).toNumber();if(object.target!=null)message.target=String(object.target);if(object.line!=null)message.line=object.line|0;return message;};/**
     * Creates a plain object from a NotifyGroupMessage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof NotifyGroupMessage
     * @static
     * @param {NotifyGroupMessage} message NotifyGroupMessage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */NotifyGroupMessage.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.head=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.head=options.longs===String?"0":0;object.target="";object.line=0;}if(message.head!=null&&message.hasOwnProperty("head"))if(typeof message.head==="number")object.head=options.longs===String?String(message.head):message.head;else object.head=options.longs===String?$util.Long.prototype.toString.call(message.head):options.longs===Number?new $util.LongBits(message.head.low>>>0,message.head.high>>>0).toNumber():message.head;if(message.target!=null&&message.hasOwnProperty("target"))object.target=message.target;if(message.line!=null&&message.hasOwnProperty("line"))object.line=message.line;return object;};/**
     * Converts this NotifyGroupMessage to JSON.
     * @function toJSON
     * @memberof NotifyGroupMessage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */NotifyGroupMessage.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return NotifyGroupMessage;}();$root.PullMessageRequest=function(){/**
     * Properties of a PullMessageRequest.
     * @exports IPullMessageRequest
     * @interface IPullMessageRequest
     * @property {Long} id PullMessageRequest id
     * @property {number} type PullMessageRequest type
     * @property {Long|null} [delay] PullMessageRequest delay
     *//**
     * Constructs a new PullMessageRequest.
     * @exports PullMessageRequest
     * @classdesc Represents a PullMessageRequest.
     * @implements IPullMessageRequest
     * @constructor
     * @param {IPullMessageRequest=} [properties] Properties to set
     */function PullMessageRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullMessageRequest id.
     * @member {Long} id
     * @memberof PullMessageRequest
     * @instance
     */PullMessageRequest.prototype.id=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * PullMessageRequest type.
     * @member {number} type
     * @memberof PullMessageRequest
     * @instance
     */PullMessageRequest.prototype.type=0;/**
     * PullMessageRequest delay.
     * @member {Long} delay
     * @memberof PullMessageRequest
     * @instance
     */PullMessageRequest.prototype.delay=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new PullMessageRequest instance using the specified properties.
     * @function create
     * @memberof PullMessageRequest
     * @static
     * @param {IPullMessageRequest=} [properties] Properties to set
     * @returns {PullMessageRequest} PullMessageRequest instance
     */PullMessageRequest.create=function create(properties){return new PullMessageRequest(properties);};/**
     * Encodes the specified PullMessageRequest message. Does not implicitly {@link PullMessageRequest.verify|verify} messages.
     * @function encode
     * @memberof PullMessageRequest
     * @static
     * @param {IPullMessageRequest} message PullMessageRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullMessageRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);if(message.delay!=null&&message.hasOwnProperty("delay"))writer.uint32(/* id 3, wireType 0 =*/24).int64(message.delay);return writer;};/**
     * Encodes the specified PullMessageRequest message, length delimited. Does not implicitly {@link PullMessageRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullMessageRequest
     * @static
     * @param {IPullMessageRequest} message PullMessageRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullMessageRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullMessageRequest message from the specified reader or buffer.
     * @function decode
     * @memberof PullMessageRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullMessageRequest} PullMessageRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullMessageRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullMessageRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.id=reader.int64();break;case 2:message.type=reader.int32();break;case 3:message.delay=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("id"))throw $util.ProtocolError("missing required 'id'",{instance:message});if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});return message;};/**
     * Decodes a PullMessageRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullMessageRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullMessageRequest} PullMessageRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullMessageRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullMessageRequest message.
     * @function verify
     * @memberof PullMessageRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullMessageRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.id)&&!(message.id&&$util.isInteger(message.id.low)&&$util.isInteger(message.id.high)))return"id: integer|Long expected";if(!$util.isInteger(message.type))return"type: integer expected";if(message.delay!=null&&message.hasOwnProperty("delay"))if(!$util.isInteger(message.delay)&&!(message.delay&&$util.isInteger(message.delay.low)&&$util.isInteger(message.delay.high)))return"delay: integer|Long expected";return null;};/**
     * Creates a PullMessageRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullMessageRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullMessageRequest} PullMessageRequest
     */PullMessageRequest.fromObject=function fromObject(object){if(object instanceof $root.PullMessageRequest)return object;var message=new $root.PullMessageRequest();if(object.id!=null)if($util.Long)(message.id=$util.Long.fromValue(object.id)).unsigned=false;else if(typeof object.id==="string")message.id=parseInt(object.id,10);else if(typeof object.id==="number")message.id=object.id;else if((0,_typeof3.default)(object.id)==="object")message.id=new $util.LongBits(object.id.low>>>0,object.id.high>>>0).toNumber();if(object.type!=null)message.type=object.type|0;if(object.delay!=null)if($util.Long)(message.delay=$util.Long.fromValue(object.delay)).unsigned=false;else if(typeof object.delay==="string")message.delay=parseInt(object.delay,10);else if(typeof object.delay==="number")message.delay=object.delay;else if((0,_typeof3.default)(object.delay)==="object")message.delay=new $util.LongBits(object.delay.low>>>0,object.delay.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a PullMessageRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullMessageRequest
     * @static
     * @param {PullMessageRequest} message PullMessageRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullMessageRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.id=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.id=options.longs===String?"0":0;object.type=0;if($util.Long){var long=new $util.Long(0,0,false);object.delay=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.delay=options.longs===String?"0":0;}if(message.id!=null&&message.hasOwnProperty("id"))if(typeof message.id==="number")object.id=options.longs===String?String(message.id):message.id;else object.id=options.longs===String?$util.Long.prototype.toString.call(message.id):options.longs===Number?new $util.LongBits(message.id.low>>>0,message.id.high>>>0).toNumber():message.id;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.delay!=null&&message.hasOwnProperty("delay"))if(typeof message.delay==="number")object.delay=options.longs===String?String(message.delay):message.delay;else object.delay=options.longs===String?$util.Long.prototype.toString.call(message.delay):options.longs===Number?new $util.LongBits(message.delay.low>>>0,message.delay.high>>>0).toNumber():message.delay;return object;};/**
     * Converts this PullMessageRequest to JSON.
     * @function toJSON
     * @memberof PullMessageRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullMessageRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullMessageRequest;}();$root.PullMessageResult=function(){/**
     * Properties of a PullMessageResult.
     * @exports IPullMessageResult
     * @interface IPullMessageResult
     * @property {Array.<IMessage>|null} [message] PullMessageResult message
     * @property {Long} current PullMessageResult current
     * @property {Long} head PullMessageResult head
     *//**
     * Constructs a new PullMessageResult.
     * @exports PullMessageResult
     * @classdesc Represents a PullMessageResult.
     * @implements IPullMessageResult
     * @constructor
     * @param {IPullMessageResult=} [properties] Properties to set
     */function PullMessageResult(properties){this.message=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullMessageResult message.
     * @member {Array.<IMessage>} message
     * @memberof PullMessageResult
     * @instance
     */PullMessageResult.prototype.message=$util.emptyArray;/**
     * PullMessageResult current.
     * @member {Long} current
     * @memberof PullMessageResult
     * @instance
     */PullMessageResult.prototype.current=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * PullMessageResult head.
     * @member {Long} head
     * @memberof PullMessageResult
     * @instance
     */PullMessageResult.prototype.head=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new PullMessageResult instance using the specified properties.
     * @function create
     * @memberof PullMessageResult
     * @static
     * @param {IPullMessageResult=} [properties] Properties to set
     * @returns {PullMessageResult} PullMessageResult instance
     */PullMessageResult.create=function create(properties){return new PullMessageResult(properties);};/**
     * Encodes the specified PullMessageResult message. Does not implicitly {@link PullMessageResult.verify|verify} messages.
     * @function encode
     * @memberof PullMessageResult
     * @static
     * @param {IPullMessageResult} message PullMessageResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullMessageResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.message!=null&&message.message.length)for(var i=0;i<message.message.length;++i){$root.Message.encode(message.message[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}writer.uint32(/* id 2, wireType 0 =*/16).int64(message.current);writer.uint32(/* id 3, wireType 0 =*/24).int64(message.head);return writer;};/**
     * Encodes the specified PullMessageResult message, length delimited. Does not implicitly {@link PullMessageResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullMessageResult
     * @static
     * @param {IPullMessageResult} message PullMessageResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullMessageResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullMessageResult message from the specified reader or buffer.
     * @function decode
     * @memberof PullMessageResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullMessageResult} PullMessageResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullMessageResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullMessageResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.message&&message.message.length))message.message=[];message.message.push($root.Message.decode(reader,reader.uint32()));break;case 2:message.current=reader.int64();break;case 3:message.head=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("current"))throw $util.ProtocolError("missing required 'current'",{instance:message});if(!message.hasOwnProperty("head"))throw $util.ProtocolError("missing required 'head'",{instance:message});return message;};/**
     * Decodes a PullMessageResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullMessageResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullMessageResult} PullMessageResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullMessageResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullMessageResult message.
     * @function verify
     * @memberof PullMessageResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullMessageResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.message!=null&&message.hasOwnProperty("message")){if(!Array.isArray(message.message))return"message: array expected";for(var i=0;i<message.message.length;++i){var error=$root.Message.verify(message.message[i]);if(error)return"message."+error;}}if(!$util.isInteger(message.current)&&!(message.current&&$util.isInteger(message.current.low)&&$util.isInteger(message.current.high)))return"current: integer|Long expected";if(!$util.isInteger(message.head)&&!(message.head&&$util.isInteger(message.head.low)&&$util.isInteger(message.head.high)))return"head: integer|Long expected";return null;};/**
     * Creates a PullMessageResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullMessageResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullMessageResult} PullMessageResult
     */PullMessageResult.fromObject=function fromObject(object){if(object instanceof $root.PullMessageResult)return object;var message=new $root.PullMessageResult();if(object.message){if(!Array.isArray(object.message))throw TypeError(".PullMessageResult.message: array expected");message.message=[];for(var i=0;i<object.message.length;++i){if((0,_typeof3.default)(object.message[i])!=="object")throw TypeError(".PullMessageResult.message: object expected");message.message[i]=$root.Message.fromObject(object.message[i]);}}if(object.current!=null)if($util.Long)(message.current=$util.Long.fromValue(object.current)).unsigned=false;else if(typeof object.current==="string")message.current=parseInt(object.current,10);else if(typeof object.current==="number")message.current=object.current;else if((0,_typeof3.default)(object.current)==="object")message.current=new $util.LongBits(object.current.low>>>0,object.current.high>>>0).toNumber();if(object.head!=null)if($util.Long)(message.head=$util.Long.fromValue(object.head)).unsigned=false;else if(typeof object.head==="string")message.head=parseInt(object.head,10);else if(typeof object.head==="number")message.head=object.head;else if((0,_typeof3.default)(object.head)==="object")message.head=new $util.LongBits(object.head.low>>>0,object.head.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a PullMessageResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullMessageResult
     * @static
     * @param {PullMessageResult} message PullMessageResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullMessageResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.message=[];if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.current=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.current=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.head=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.head=options.longs===String?"0":0;}if(message.message&&message.message.length){object.message=[];for(var j=0;j<message.message.length;++j){object.message[j]=$root.Message.toObject(message.message[j],options);}}if(message.current!=null&&message.hasOwnProperty("current"))if(typeof message.current==="number")object.current=options.longs===String?String(message.current):message.current;else object.current=options.longs===String?$util.Long.prototype.toString.call(message.current):options.longs===Number?new $util.LongBits(message.current.low>>>0,message.current.high>>>0).toNumber():message.current;if(message.head!=null&&message.hasOwnProperty("head"))if(typeof message.head==="number")object.head=options.longs===String?String(message.head):message.head;else object.head=options.longs===String?$util.Long.prototype.toString.call(message.head):options.longs===Number?new $util.LongBits(message.head.low>>>0,message.head.high>>>0).toNumber():message.head;return object;};/**
     * Converts this PullMessageResult to JSON.
     * @function toJSON
     * @memberof PullMessageResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullMessageResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullMessageResult;}();$root.PullReadResult=function(){/**
     * Properties of a PullReadResult.
     * @exports IPullReadResult
     * @interface IPullReadResult
     * @property {Array.<IConvRead>|null} [read] PullReadResult read
     * @property {Long} current PullReadResult current
     * @property {Long} head PullReadResult head
     *//**
     * Constructs a new PullReadResult.
     * @exports PullReadResult
     * @classdesc Represents a PullReadResult.
     * @implements IPullReadResult
     * @constructor
     * @param {IPullReadResult=} [properties] Properties to set
     */function PullReadResult(properties){this.read=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullReadResult read.
     * @member {Array.<IConvRead>} read
     * @memberof PullReadResult
     * @instance
     */PullReadResult.prototype.read=$util.emptyArray;/**
     * PullReadResult current.
     * @member {Long} current
     * @memberof PullReadResult
     * @instance
     */PullReadResult.prototype.current=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * PullReadResult head.
     * @member {Long} head
     * @memberof PullReadResult
     * @instance
     */PullReadResult.prototype.head=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new PullReadResult instance using the specified properties.
     * @function create
     * @memberof PullReadResult
     * @static
     * @param {IPullReadResult=} [properties] Properties to set
     * @returns {PullReadResult} PullReadResult instance
     */PullReadResult.create=function create(properties){return new PullReadResult(properties);};/**
     * Encodes the specified PullReadResult message. Does not implicitly {@link PullReadResult.verify|verify} messages.
     * @function encode
     * @memberof PullReadResult
     * @static
     * @param {IPullReadResult} message PullReadResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullReadResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.read!=null&&message.read.length)for(var i=0;i<message.read.length;++i){$root.ConvRead.encode(message.read[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}writer.uint32(/* id 2, wireType 0 =*/16).int64(message.current);writer.uint32(/* id 3, wireType 0 =*/24).int64(message.head);return writer;};/**
     * Encodes the specified PullReadResult message, length delimited. Does not implicitly {@link PullReadResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullReadResult
     * @static
     * @param {IPullReadResult} message PullReadResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullReadResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullReadResult message from the specified reader or buffer.
     * @function decode
     * @memberof PullReadResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullReadResult} PullReadResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullReadResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullReadResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.read&&message.read.length))message.read=[];message.read.push($root.ConvRead.decode(reader,reader.uint32()));break;case 2:message.current=reader.int64();break;case 3:message.head=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("current"))throw $util.ProtocolError("missing required 'current'",{instance:message});if(!message.hasOwnProperty("head"))throw $util.ProtocolError("missing required 'head'",{instance:message});return message;};/**
     * Decodes a PullReadResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullReadResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullReadResult} PullReadResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullReadResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullReadResult message.
     * @function verify
     * @memberof PullReadResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullReadResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.read!=null&&message.hasOwnProperty("read")){if(!Array.isArray(message.read))return"read: array expected";for(var i=0;i<message.read.length;++i){var error=$root.ConvRead.verify(message.read[i]);if(error)return"read."+error;}}if(!$util.isInteger(message.current)&&!(message.current&&$util.isInteger(message.current.low)&&$util.isInteger(message.current.high)))return"current: integer|Long expected";if(!$util.isInteger(message.head)&&!(message.head&&$util.isInteger(message.head.low)&&$util.isInteger(message.head.high)))return"head: integer|Long expected";return null;};/**
     * Creates a PullReadResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullReadResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullReadResult} PullReadResult
     */PullReadResult.fromObject=function fromObject(object){if(object instanceof $root.PullReadResult)return object;var message=new $root.PullReadResult();if(object.read){if(!Array.isArray(object.read))throw TypeError(".PullReadResult.read: array expected");message.read=[];for(var i=0;i<object.read.length;++i){if((0,_typeof3.default)(object.read[i])!=="object")throw TypeError(".PullReadResult.read: object expected");message.read[i]=$root.ConvRead.fromObject(object.read[i]);}}if(object.current!=null)if($util.Long)(message.current=$util.Long.fromValue(object.current)).unsigned=false;else if(typeof object.current==="string")message.current=parseInt(object.current,10);else if(typeof object.current==="number")message.current=object.current;else if((0,_typeof3.default)(object.current)==="object")message.current=new $util.LongBits(object.current.low>>>0,object.current.high>>>0).toNumber();if(object.head!=null)if($util.Long)(message.head=$util.Long.fromValue(object.head)).unsigned=false;else if(typeof object.head==="string")message.head=parseInt(object.head,10);else if(typeof object.head==="number")message.head=object.head;else if((0,_typeof3.default)(object.head)==="object")message.head=new $util.LongBits(object.head.low>>>0,object.head.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a PullReadResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullReadResult
     * @static
     * @param {PullReadResult} message PullReadResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullReadResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.read=[];if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.current=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.current=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.head=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.head=options.longs===String?"0":0;}if(message.read&&message.read.length){object.read=[];for(var j=0;j<message.read.length;++j){object.read[j]=$root.ConvRead.toObject(message.read[j],options);}}if(message.current!=null&&message.hasOwnProperty("current"))if(typeof message.current==="number")object.current=options.longs===String?String(message.current):message.current;else object.current=options.longs===String?$util.Long.prototype.toString.call(message.current):options.longs===Number?new $util.LongBits(message.current.low>>>0,message.current.high>>>0).toNumber():message.current;if(message.head!=null&&message.hasOwnProperty("head"))if(typeof message.head==="number")object.head=options.longs===String?String(message.head):message.head;else object.head=options.longs===String?$util.Long.prototype.toString.call(message.head):options.longs===Number?new $util.LongBits(message.head.low>>>0,message.head.high>>>0).toNumber():message.head;return object;};/**
     * Converts this PullReadResult to JSON.
     * @function toJSON
     * @memberof PullReadResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullReadResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullReadResult;}();$root.PullDeliveryResult=function(){/**
     * Properties of a PullDeliveryResult.
     * @exports IPullDeliveryResult
     * @interface IPullDeliveryResult
     * @property {Array.<IDelivery>|null} [delivery] PullDeliveryResult delivery
     * @property {Long} current PullDeliveryResult current
     * @property {Long} head PullDeliveryResult head
     *//**
     * Constructs a new PullDeliveryResult.
     * @exports PullDeliveryResult
     * @classdesc Represents a PullDeliveryResult.
     * @implements IPullDeliveryResult
     * @constructor
     * @param {IPullDeliveryResult=} [properties] Properties to set
     */function PullDeliveryResult(properties){this.delivery=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullDeliveryResult delivery.
     * @member {Array.<IDelivery>} delivery
     * @memberof PullDeliveryResult
     * @instance
     */PullDeliveryResult.prototype.delivery=$util.emptyArray;/**
     * PullDeliveryResult current.
     * @member {Long} current
     * @memberof PullDeliveryResult
     * @instance
     */PullDeliveryResult.prototype.current=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * PullDeliveryResult head.
     * @member {Long} head
     * @memberof PullDeliveryResult
     * @instance
     */PullDeliveryResult.prototype.head=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new PullDeliveryResult instance using the specified properties.
     * @function create
     * @memberof PullDeliveryResult
     * @static
     * @param {IPullDeliveryResult=} [properties] Properties to set
     * @returns {PullDeliveryResult} PullDeliveryResult instance
     */PullDeliveryResult.create=function create(properties){return new PullDeliveryResult(properties);};/**
     * Encodes the specified PullDeliveryResult message. Does not implicitly {@link PullDeliveryResult.verify|verify} messages.
     * @function encode
     * @memberof PullDeliveryResult
     * @static
     * @param {IPullDeliveryResult} message PullDeliveryResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullDeliveryResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.delivery!=null&&message.delivery.length)for(var i=0;i<message.delivery.length;++i){$root.Delivery.encode(message.delivery[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}writer.uint32(/* id 2, wireType 0 =*/16).int64(message.current);writer.uint32(/* id 3, wireType 0 =*/24).int64(message.head);return writer;};/**
     * Encodes the specified PullDeliveryResult message, length delimited. Does not implicitly {@link PullDeliveryResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullDeliveryResult
     * @static
     * @param {IPullDeliveryResult} message PullDeliveryResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullDeliveryResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullDeliveryResult message from the specified reader or buffer.
     * @function decode
     * @memberof PullDeliveryResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullDeliveryResult} PullDeliveryResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullDeliveryResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullDeliveryResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.delivery&&message.delivery.length))message.delivery=[];message.delivery.push($root.Delivery.decode(reader,reader.uint32()));break;case 2:message.current=reader.int64();break;case 3:message.head=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("current"))throw $util.ProtocolError("missing required 'current'",{instance:message});if(!message.hasOwnProperty("head"))throw $util.ProtocolError("missing required 'head'",{instance:message});return message;};/**
     * Decodes a PullDeliveryResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullDeliveryResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullDeliveryResult} PullDeliveryResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullDeliveryResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullDeliveryResult message.
     * @function verify
     * @memberof PullDeliveryResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullDeliveryResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.delivery!=null&&message.hasOwnProperty("delivery")){if(!Array.isArray(message.delivery))return"delivery: array expected";for(var i=0;i<message.delivery.length;++i){var error=$root.Delivery.verify(message.delivery[i]);if(error)return"delivery."+error;}}if(!$util.isInteger(message.current)&&!(message.current&&$util.isInteger(message.current.low)&&$util.isInteger(message.current.high)))return"current: integer|Long expected";if(!$util.isInteger(message.head)&&!(message.head&&$util.isInteger(message.head.low)&&$util.isInteger(message.head.high)))return"head: integer|Long expected";return null;};/**
     * Creates a PullDeliveryResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullDeliveryResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullDeliveryResult} PullDeliveryResult
     */PullDeliveryResult.fromObject=function fromObject(object){if(object instanceof $root.PullDeliveryResult)return object;var message=new $root.PullDeliveryResult();if(object.delivery){if(!Array.isArray(object.delivery))throw TypeError(".PullDeliveryResult.delivery: array expected");message.delivery=[];for(var i=0;i<object.delivery.length;++i){if((0,_typeof3.default)(object.delivery[i])!=="object")throw TypeError(".PullDeliveryResult.delivery: object expected");message.delivery[i]=$root.Delivery.fromObject(object.delivery[i]);}}if(object.current!=null)if($util.Long)(message.current=$util.Long.fromValue(object.current)).unsigned=false;else if(typeof object.current==="string")message.current=parseInt(object.current,10);else if(typeof object.current==="number")message.current=object.current;else if((0,_typeof3.default)(object.current)==="object")message.current=new $util.LongBits(object.current.low>>>0,object.current.high>>>0).toNumber();if(object.head!=null)if($util.Long)(message.head=$util.Long.fromValue(object.head)).unsigned=false;else if(typeof object.head==="string")message.head=parseInt(object.head,10);else if(typeof object.head==="number")message.head=object.head;else if((0,_typeof3.default)(object.head)==="object")message.head=new $util.LongBits(object.head.low>>>0,object.head.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a PullDeliveryResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullDeliveryResult
     * @static
     * @param {PullDeliveryResult} message PullDeliveryResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullDeliveryResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.delivery=[];if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.current=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.current=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.head=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.head=options.longs===String?"0":0;}if(message.delivery&&message.delivery.length){object.delivery=[];for(var j=0;j<message.delivery.length;++j){object.delivery[j]=$root.Delivery.toObject(message.delivery[j],options);}}if(message.current!=null&&message.hasOwnProperty("current"))if(typeof message.current==="number")object.current=options.longs===String?String(message.current):message.current;else object.current=options.longs===String?$util.Long.prototype.toString.call(message.current):options.longs===Number?new $util.LongBits(message.current.low>>>0,message.current.high>>>0).toNumber():message.current;if(message.head!=null&&message.hasOwnProperty("head"))if(typeof message.head==="number")object.head=options.longs===String?String(message.head):message.head;else object.head=options.longs===String?$util.Long.prototype.toString.call(message.head):options.longs===Number?new $util.LongBits(message.head.low>>>0,message.head.high>>>0).toNumber():message.head;return object;};/**
     * Converts this PullDeliveryResult to JSON.
     * @function toJSON
     * @memberof PullDeliveryResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullDeliveryResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullDeliveryResult;}();$root.GroupConv=function(){/**
     * Properties of a GroupConv.
     * @exports IGroupConv
     * @interface IGroupConv
     * @property {number} line GroupConv line
     * @property {string} groupId GroupConv groupId
     * @property {Long|null} [msgHead] GroupConv msgHead
     *//**
     * Constructs a new GroupConv.
     * @exports GroupConv
     * @classdesc Represents a GroupConv.
     * @implements IGroupConv
     * @constructor
     * @param {IGroupConv=} [properties] Properties to set
     */function GroupConv(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GroupConv line.
     * @member {number} line
     * @memberof GroupConv
     * @instance
     */GroupConv.prototype.line=0;/**
     * GroupConv groupId.
     * @member {string} groupId
     * @memberof GroupConv
     * @instance
     */GroupConv.prototype.groupId="";/**
     * GroupConv msgHead.
     * @member {Long} msgHead
     * @memberof GroupConv
     * @instance
     */GroupConv.prototype.msgHead=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new GroupConv instance using the specified properties.
     * @function create
     * @memberof GroupConv
     * @static
     * @param {IGroupConv=} [properties] Properties to set
     * @returns {GroupConv} GroupConv instance
     */GroupConv.create=function create(properties){return new GroupConv(properties);};/**
     * Encodes the specified GroupConv message. Does not implicitly {@link GroupConv.verify|verify} messages.
     * @function encode
     * @memberof GroupConv
     * @static
     * @param {IGroupConv} message GroupConv message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GroupConv.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.line);writer.uint32(/* id 2, wireType 2 =*/18).string(message.groupId);if(message.msgHead!=null&&message.hasOwnProperty("msgHead"))writer.uint32(/* id 3, wireType 0 =*/24).int64(message.msgHead);return writer;};/**
     * Encodes the specified GroupConv message, length delimited. Does not implicitly {@link GroupConv.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GroupConv
     * @static
     * @param {IGroupConv} message GroupConv message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GroupConv.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GroupConv message from the specified reader or buffer.
     * @function decode
     * @memberof GroupConv
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GroupConv} GroupConv
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GroupConv.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GroupConv();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.line=reader.int32();break;case 2:message.groupId=reader.string();break;case 3:message.msgHead=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("line"))throw $util.ProtocolError("missing required 'line'",{instance:message});if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});return message;};/**
     * Decodes a GroupConv message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GroupConv
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GroupConv} GroupConv
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GroupConv.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GroupConv message.
     * @function verify
     * @memberof GroupConv
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GroupConv.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.line))return"line: integer expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(message.msgHead!=null&&message.hasOwnProperty("msgHead"))if(!$util.isInteger(message.msgHead)&&!(message.msgHead&&$util.isInteger(message.msgHead.low)&&$util.isInteger(message.msgHead.high)))return"msgHead: integer|Long expected";return null;};/**
     * Creates a GroupConv message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GroupConv
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GroupConv} GroupConv
     */GroupConv.fromObject=function fromObject(object){if(object instanceof $root.GroupConv)return object;var message=new $root.GroupConv();if(object.line!=null)message.line=object.line|0;if(object.groupId!=null)message.groupId=String(object.groupId);if(object.msgHead!=null)if($util.Long)(message.msgHead=$util.Long.fromValue(object.msgHead)).unsigned=false;else if(typeof object.msgHead==="string")message.msgHead=parseInt(object.msgHead,10);else if(typeof object.msgHead==="number")message.msgHead=object.msgHead;else if((0,_typeof3.default)(object.msgHead)==="object")message.msgHead=new $util.LongBits(object.msgHead.low>>>0,object.msgHead.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a GroupConv message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GroupConv
     * @static
     * @param {GroupConv} message GroupConv
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GroupConv.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.line=0;object.groupId="";if($util.Long){var long=new $util.Long(0,0,false);object.msgHead=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.msgHead=options.longs===String?"0":0;}if(message.line!=null&&message.hasOwnProperty("line"))object.line=message.line;if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.msgHead!=null&&message.hasOwnProperty("msgHead"))if(typeof message.msgHead==="number")object.msgHead=options.longs===String?String(message.msgHead):message.msgHead;else object.msgHead=options.longs===String?$util.Long.prototype.toString.call(message.msgHead):options.longs===Number?new $util.LongBits(message.msgHead.low>>>0,message.msgHead.high>>>0).toNumber():message.msgHead;return object;};/**
     * Converts this GroupConv to JSON.
     * @function toJSON
     * @memberof GroupConv
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GroupConv.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GroupConv;}();$root.PullGroupConvRequest=function(){/**
     * Properties of a PullGroupConvRequest.
     * @exports IPullGroupConvRequest
     * @interface IPullGroupConvRequest
     * @property {Long} id PullGroupConvRequest id
     * @property {string|null} [target] PullGroupConvRequest target
     * @property {number|null} [line] PullGroupConvRequest line
     * @property {Long|null} [messageId] PullGroupConvRequest messageId
     *//**
     * Constructs a new PullGroupConvRequest.
     * @exports PullGroupConvRequest
     * @classdesc Represents a PullGroupConvRequest.
     * @implements IPullGroupConvRequest
     * @constructor
     * @param {IPullGroupConvRequest=} [properties] Properties to set
     */function PullGroupConvRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullGroupConvRequest id.
     * @member {Long} id
     * @memberof PullGroupConvRequest
     * @instance
     */PullGroupConvRequest.prototype.id=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * PullGroupConvRequest target.
     * @member {string} target
     * @memberof PullGroupConvRequest
     * @instance
     */PullGroupConvRequest.prototype.target="";/**
     * PullGroupConvRequest line.
     * @member {number} line
     * @memberof PullGroupConvRequest
     * @instance
     */PullGroupConvRequest.prototype.line=0;/**
     * PullGroupConvRequest messageId.
     * @member {Long} messageId
     * @memberof PullGroupConvRequest
     * @instance
     */PullGroupConvRequest.prototype.messageId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new PullGroupConvRequest instance using the specified properties.
     * @function create
     * @memberof PullGroupConvRequest
     * @static
     * @param {IPullGroupConvRequest=} [properties] Properties to set
     * @returns {PullGroupConvRequest} PullGroupConvRequest instance
     */PullGroupConvRequest.create=function create(properties){return new PullGroupConvRequest(properties);};/**
     * Encodes the specified PullGroupConvRequest message. Does not implicitly {@link PullGroupConvRequest.verify|verify} messages.
     * @function encode
     * @memberof PullGroupConvRequest
     * @static
     * @param {IPullGroupConvRequest} message PullGroupConvRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupConvRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);if(message.target!=null&&message.hasOwnProperty("target"))writer.uint32(/* id 2, wireType 2 =*/18).string(message.target);if(message.line!=null&&message.hasOwnProperty("line"))writer.uint32(/* id 3, wireType 0 =*/24).int32(message.line);if(message.messageId!=null&&message.hasOwnProperty("messageId"))writer.uint32(/* id 4, wireType 0 =*/32).int64(message.messageId);return writer;};/**
     * Encodes the specified PullGroupConvRequest message, length delimited. Does not implicitly {@link PullGroupConvRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullGroupConvRequest
     * @static
     * @param {IPullGroupConvRequest} message PullGroupConvRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupConvRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullGroupConvRequest message from the specified reader or buffer.
     * @function decode
     * @memberof PullGroupConvRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullGroupConvRequest} PullGroupConvRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupConvRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullGroupConvRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.id=reader.int64();break;case 2:message.target=reader.string();break;case 3:message.line=reader.int32();break;case 4:message.messageId=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("id"))throw $util.ProtocolError("missing required 'id'",{instance:message});return message;};/**
     * Decodes a PullGroupConvRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullGroupConvRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullGroupConvRequest} PullGroupConvRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupConvRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullGroupConvRequest message.
     * @function verify
     * @memberof PullGroupConvRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullGroupConvRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.id)&&!(message.id&&$util.isInteger(message.id.low)&&$util.isInteger(message.id.high)))return"id: integer|Long expected";if(message.target!=null&&message.hasOwnProperty("target"))if(!$util.isString(message.target))return"target: string expected";if(message.line!=null&&message.hasOwnProperty("line"))if(!$util.isInteger(message.line))return"line: integer expected";if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(!$util.isInteger(message.messageId)&&!(message.messageId&&$util.isInteger(message.messageId.low)&&$util.isInteger(message.messageId.high)))return"messageId: integer|Long expected";return null;};/**
     * Creates a PullGroupConvRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullGroupConvRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullGroupConvRequest} PullGroupConvRequest
     */PullGroupConvRequest.fromObject=function fromObject(object){if(object instanceof $root.PullGroupConvRequest)return object;var message=new $root.PullGroupConvRequest();if(object.id!=null)if($util.Long)(message.id=$util.Long.fromValue(object.id)).unsigned=false;else if(typeof object.id==="string")message.id=parseInt(object.id,10);else if(typeof object.id==="number")message.id=object.id;else if((0,_typeof3.default)(object.id)==="object")message.id=new $util.LongBits(object.id.low>>>0,object.id.high>>>0).toNumber();if(object.target!=null)message.target=String(object.target);if(object.line!=null)message.line=object.line|0;if(object.messageId!=null)if($util.Long)(message.messageId=$util.Long.fromValue(object.messageId)).unsigned=false;else if(typeof object.messageId==="string")message.messageId=parseInt(object.messageId,10);else if(typeof object.messageId==="number")message.messageId=object.messageId;else if((0,_typeof3.default)(object.messageId)==="object")message.messageId=new $util.LongBits(object.messageId.low>>>0,object.messageId.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a PullGroupConvRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullGroupConvRequest
     * @static
     * @param {PullGroupConvRequest} message PullGroupConvRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullGroupConvRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.id=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.id=options.longs===String?"0":0;object.target="";object.line=0;if($util.Long){var long=new $util.Long(0,0,false);object.messageId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.messageId=options.longs===String?"0":0;}if(message.id!=null&&message.hasOwnProperty("id"))if(typeof message.id==="number")object.id=options.longs===String?String(message.id):message.id;else object.id=options.longs===String?$util.Long.prototype.toString.call(message.id):options.longs===Number?new $util.LongBits(message.id.low>>>0,message.id.high>>>0).toNumber():message.id;if(message.target!=null&&message.hasOwnProperty("target"))object.target=message.target;if(message.line!=null&&message.hasOwnProperty("line"))object.line=message.line;if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(typeof message.messageId==="number")object.messageId=options.longs===String?String(message.messageId):message.messageId;else object.messageId=options.longs===String?$util.Long.prototype.toString.call(message.messageId):options.longs===Number?new $util.LongBits(message.messageId.low>>>0,message.messageId.high>>>0).toNumber():message.messageId;return object;};/**
     * Converts this PullGroupConvRequest to JSON.
     * @function toJSON
     * @memberof PullGroupConvRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullGroupConvRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullGroupConvRequest;}();$root.PullGroupConvResult=function(){/**
     * Properties of a PullGroupConvResult.
     * @exports IPullGroupConvResult
     * @interface IPullGroupConvResult
     * @property {Array.<IGroupConv>|null} [conv] PullGroupConvResult conv
     * @property {Long} current PullGroupConvResult current
     * @property {Long} head PullGroupConvResult head
     * @property {IPullGroupMessageResult|null} [groupMessage] PullGroupConvResult groupMessage
     *//**
     * Constructs a new PullGroupConvResult.
     * @exports PullGroupConvResult
     * @classdesc Represents a PullGroupConvResult.
     * @implements IPullGroupConvResult
     * @constructor
     * @param {IPullGroupConvResult=} [properties] Properties to set
     */function PullGroupConvResult(properties){this.conv=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullGroupConvResult conv.
     * @member {Array.<IGroupConv>} conv
     * @memberof PullGroupConvResult
     * @instance
     */PullGroupConvResult.prototype.conv=$util.emptyArray;/**
     * PullGroupConvResult current.
     * @member {Long} current
     * @memberof PullGroupConvResult
     * @instance
     */PullGroupConvResult.prototype.current=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * PullGroupConvResult head.
     * @member {Long} head
     * @memberof PullGroupConvResult
     * @instance
     */PullGroupConvResult.prototype.head=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * PullGroupConvResult groupMessage.
     * @member {IPullGroupMessageResult|null|undefined} groupMessage
     * @memberof PullGroupConvResult
     * @instance
     */PullGroupConvResult.prototype.groupMessage=null;/**
     * Creates a new PullGroupConvResult instance using the specified properties.
     * @function create
     * @memberof PullGroupConvResult
     * @static
     * @param {IPullGroupConvResult=} [properties] Properties to set
     * @returns {PullGroupConvResult} PullGroupConvResult instance
     */PullGroupConvResult.create=function create(properties){return new PullGroupConvResult(properties);};/**
     * Encodes the specified PullGroupConvResult message. Does not implicitly {@link PullGroupConvResult.verify|verify} messages.
     * @function encode
     * @memberof PullGroupConvResult
     * @static
     * @param {IPullGroupConvResult} message PullGroupConvResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupConvResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.conv!=null&&message.conv.length)for(var i=0;i<message.conv.length;++i){$root.GroupConv.encode(message.conv[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}writer.uint32(/* id 2, wireType 0 =*/16).int64(message.current);writer.uint32(/* id 3, wireType 0 =*/24).int64(message.head);if(message.groupMessage!=null&&message.hasOwnProperty("groupMessage"))$root.PullGroupMessageResult.encode(message.groupMessage,writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();return writer;};/**
     * Encodes the specified PullGroupConvResult message, length delimited. Does not implicitly {@link PullGroupConvResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullGroupConvResult
     * @static
     * @param {IPullGroupConvResult} message PullGroupConvResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupConvResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullGroupConvResult message from the specified reader or buffer.
     * @function decode
     * @memberof PullGroupConvResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullGroupConvResult} PullGroupConvResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupConvResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullGroupConvResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.conv&&message.conv.length))message.conv=[];message.conv.push($root.GroupConv.decode(reader,reader.uint32()));break;case 2:message.current=reader.int64();break;case 3:message.head=reader.int64();break;case 4:message.groupMessage=$root.PullGroupMessageResult.decode(reader,reader.uint32());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("current"))throw $util.ProtocolError("missing required 'current'",{instance:message});if(!message.hasOwnProperty("head"))throw $util.ProtocolError("missing required 'head'",{instance:message});return message;};/**
     * Decodes a PullGroupConvResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullGroupConvResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullGroupConvResult} PullGroupConvResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupConvResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullGroupConvResult message.
     * @function verify
     * @memberof PullGroupConvResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullGroupConvResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.conv!=null&&message.hasOwnProperty("conv")){if(!Array.isArray(message.conv))return"conv: array expected";for(var i=0;i<message.conv.length;++i){var error=$root.GroupConv.verify(message.conv[i]);if(error)return"conv."+error;}}if(!$util.isInteger(message.current)&&!(message.current&&$util.isInteger(message.current.low)&&$util.isInteger(message.current.high)))return"current: integer|Long expected";if(!$util.isInteger(message.head)&&!(message.head&&$util.isInteger(message.head.low)&&$util.isInteger(message.head.high)))return"head: integer|Long expected";if(message.groupMessage!=null&&message.hasOwnProperty("groupMessage")){var error=$root.PullGroupMessageResult.verify(message.groupMessage);if(error)return"groupMessage."+error;}return null;};/**
     * Creates a PullGroupConvResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullGroupConvResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullGroupConvResult} PullGroupConvResult
     */PullGroupConvResult.fromObject=function fromObject(object){if(object instanceof $root.PullGroupConvResult)return object;var message=new $root.PullGroupConvResult();if(object.conv){if(!Array.isArray(object.conv))throw TypeError(".PullGroupConvResult.conv: array expected");message.conv=[];for(var i=0;i<object.conv.length;++i){if((0,_typeof3.default)(object.conv[i])!=="object")throw TypeError(".PullGroupConvResult.conv: object expected");message.conv[i]=$root.GroupConv.fromObject(object.conv[i]);}}if(object.current!=null)if($util.Long)(message.current=$util.Long.fromValue(object.current)).unsigned=false;else if(typeof object.current==="string")message.current=parseInt(object.current,10);else if(typeof object.current==="number")message.current=object.current;else if((0,_typeof3.default)(object.current)==="object")message.current=new $util.LongBits(object.current.low>>>0,object.current.high>>>0).toNumber();if(object.head!=null)if($util.Long)(message.head=$util.Long.fromValue(object.head)).unsigned=false;else if(typeof object.head==="string")message.head=parseInt(object.head,10);else if(typeof object.head==="number")message.head=object.head;else if((0,_typeof3.default)(object.head)==="object")message.head=new $util.LongBits(object.head.low>>>0,object.head.high>>>0).toNumber();if(object.groupMessage!=null){if((0,_typeof3.default)(object.groupMessage)!=="object")throw TypeError(".PullGroupConvResult.groupMessage: object expected");message.groupMessage=$root.PullGroupMessageResult.fromObject(object.groupMessage);}return message;};/**
     * Creates a plain object from a PullGroupConvResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullGroupConvResult
     * @static
     * @param {PullGroupConvResult} message PullGroupConvResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullGroupConvResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.conv=[];if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.current=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.current=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.head=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.head=options.longs===String?"0":0;object.groupMessage=null;}if(message.conv&&message.conv.length){object.conv=[];for(var j=0;j<message.conv.length;++j){object.conv[j]=$root.GroupConv.toObject(message.conv[j],options);}}if(message.current!=null&&message.hasOwnProperty("current"))if(typeof message.current==="number")object.current=options.longs===String?String(message.current):message.current;else object.current=options.longs===String?$util.Long.prototype.toString.call(message.current):options.longs===Number?new $util.LongBits(message.current.low>>>0,message.current.high>>>0).toNumber():message.current;if(message.head!=null&&message.hasOwnProperty("head"))if(typeof message.head==="number")object.head=options.longs===String?String(message.head):message.head;else object.head=options.longs===String?$util.Long.prototype.toString.call(message.head):options.longs===Number?new $util.LongBits(message.head.low>>>0,message.head.high>>>0).toNumber():message.head;if(message.groupMessage!=null&&message.hasOwnProperty("groupMessage"))object.groupMessage=$root.PullGroupMessageResult.toObject(message.groupMessage,options);return object;};/**
     * Converts this PullGroupConvResult to JSON.
     * @function toJSON
     * @memberof PullGroupConvResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullGroupConvResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullGroupConvResult;}();$root.PullGroupMessageRequest=function(){/**
     * Properties of a PullGroupMessageRequest.
     * @exports IPullGroupMessageRequest
     * @interface IPullGroupMessageRequest
     * @property {string} groupId PullGroupMessageRequest groupId
     * @property {number} line PullGroupMessageRequest line
     * @property {Long} id PullGroupMessageRequest id
     *//**
     * Constructs a new PullGroupMessageRequest.
     * @exports PullGroupMessageRequest
     * @classdesc Represents a PullGroupMessageRequest.
     * @implements IPullGroupMessageRequest
     * @constructor
     * @param {IPullGroupMessageRequest=} [properties] Properties to set
     */function PullGroupMessageRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullGroupMessageRequest groupId.
     * @member {string} groupId
     * @memberof PullGroupMessageRequest
     * @instance
     */PullGroupMessageRequest.prototype.groupId="";/**
     * PullGroupMessageRequest line.
     * @member {number} line
     * @memberof PullGroupMessageRequest
     * @instance
     */PullGroupMessageRequest.prototype.line=0;/**
     * PullGroupMessageRequest id.
     * @member {Long} id
     * @memberof PullGroupMessageRequest
     * @instance
     */PullGroupMessageRequest.prototype.id=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new PullGroupMessageRequest instance using the specified properties.
     * @function create
     * @memberof PullGroupMessageRequest
     * @static
     * @param {IPullGroupMessageRequest=} [properties] Properties to set
     * @returns {PullGroupMessageRequest} PullGroupMessageRequest instance
     */PullGroupMessageRequest.create=function create(properties){return new PullGroupMessageRequest(properties);};/**
     * Encodes the specified PullGroupMessageRequest message. Does not implicitly {@link PullGroupMessageRequest.verify|verify} messages.
     * @function encode
     * @memberof PullGroupMessageRequest
     * @static
     * @param {IPullGroupMessageRequest} message PullGroupMessageRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMessageRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.line);writer.uint32(/* id 3, wireType 0 =*/24).int64(message.id);return writer;};/**
     * Encodes the specified PullGroupMessageRequest message, length delimited. Does not implicitly {@link PullGroupMessageRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullGroupMessageRequest
     * @static
     * @param {IPullGroupMessageRequest} message PullGroupMessageRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMessageRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullGroupMessageRequest message from the specified reader or buffer.
     * @function decode
     * @memberof PullGroupMessageRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullGroupMessageRequest} PullGroupMessageRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMessageRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullGroupMessageRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.groupId=reader.string();break;case 2:message.line=reader.int32();break;case 3:message.id=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});if(!message.hasOwnProperty("line"))throw $util.ProtocolError("missing required 'line'",{instance:message});if(!message.hasOwnProperty("id"))throw $util.ProtocolError("missing required 'id'",{instance:message});return message;};/**
     * Decodes a PullGroupMessageRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullGroupMessageRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullGroupMessageRequest} PullGroupMessageRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMessageRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullGroupMessageRequest message.
     * @function verify
     * @memberof PullGroupMessageRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullGroupMessageRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(!$util.isInteger(message.line))return"line: integer expected";if(!$util.isInteger(message.id)&&!(message.id&&$util.isInteger(message.id.low)&&$util.isInteger(message.id.high)))return"id: integer|Long expected";return null;};/**
     * Creates a PullGroupMessageRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullGroupMessageRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullGroupMessageRequest} PullGroupMessageRequest
     */PullGroupMessageRequest.fromObject=function fromObject(object){if(object instanceof $root.PullGroupMessageRequest)return object;var message=new $root.PullGroupMessageRequest();if(object.groupId!=null)message.groupId=String(object.groupId);if(object.line!=null)message.line=object.line|0;if(object.id!=null)if($util.Long)(message.id=$util.Long.fromValue(object.id)).unsigned=false;else if(typeof object.id==="string")message.id=parseInt(object.id,10);else if(typeof object.id==="number")message.id=object.id;else if((0,_typeof3.default)(object.id)==="object")message.id=new $util.LongBits(object.id.low>>>0,object.id.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a PullGroupMessageRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullGroupMessageRequest
     * @static
     * @param {PullGroupMessageRequest} message PullGroupMessageRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullGroupMessageRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.groupId="";object.line=0;if($util.Long){var long=new $util.Long(0,0,false);object.id=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.id=options.longs===String?"0":0;}if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.line!=null&&message.hasOwnProperty("line"))object.line=message.line;if(message.id!=null&&message.hasOwnProperty("id"))if(typeof message.id==="number")object.id=options.longs===String?String(message.id):message.id;else object.id=options.longs===String?$util.Long.prototype.toString.call(message.id):options.longs===Number?new $util.LongBits(message.id.low>>>0,message.id.high>>>0).toNumber():message.id;return object;};/**
     * Converts this PullGroupMessageRequest to JSON.
     * @function toJSON
     * @memberof PullGroupMessageRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullGroupMessageRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullGroupMessageRequest;}();$root.PullGroupMessageRequests=function(){/**
     * Properties of a PullGroupMessageRequests.
     * @exports IPullGroupMessageRequests
     * @interface IPullGroupMessageRequests
     * @property {Array.<IPullGroupMessageRequest>|null} [request] PullGroupMessageRequests request
     *//**
     * Constructs a new PullGroupMessageRequests.
     * @exports PullGroupMessageRequests
     * @classdesc Represents a PullGroupMessageRequests.
     * @implements IPullGroupMessageRequests
     * @constructor
     * @param {IPullGroupMessageRequests=} [properties] Properties to set
     */function PullGroupMessageRequests(properties){this.request=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullGroupMessageRequests request.
     * @member {Array.<IPullGroupMessageRequest>} request
     * @memberof PullGroupMessageRequests
     * @instance
     */PullGroupMessageRequests.prototype.request=$util.emptyArray;/**
     * Creates a new PullGroupMessageRequests instance using the specified properties.
     * @function create
     * @memberof PullGroupMessageRequests
     * @static
     * @param {IPullGroupMessageRequests=} [properties] Properties to set
     * @returns {PullGroupMessageRequests} PullGroupMessageRequests instance
     */PullGroupMessageRequests.create=function create(properties){return new PullGroupMessageRequests(properties);};/**
     * Encodes the specified PullGroupMessageRequests message. Does not implicitly {@link PullGroupMessageRequests.verify|verify} messages.
     * @function encode
     * @memberof PullGroupMessageRequests
     * @static
     * @param {IPullGroupMessageRequests} message PullGroupMessageRequests message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMessageRequests.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.request!=null&&message.request.length)for(var i=0;i<message.request.length;++i){$root.PullGroupMessageRequest.encode(message.request[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified PullGroupMessageRequests message, length delimited. Does not implicitly {@link PullGroupMessageRequests.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullGroupMessageRequests
     * @static
     * @param {IPullGroupMessageRequests} message PullGroupMessageRequests message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMessageRequests.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullGroupMessageRequests message from the specified reader or buffer.
     * @function decode
     * @memberof PullGroupMessageRequests
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullGroupMessageRequests} PullGroupMessageRequests
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMessageRequests.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullGroupMessageRequests();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.request&&message.request.length))message.request=[];message.request.push($root.PullGroupMessageRequest.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a PullGroupMessageRequests message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullGroupMessageRequests
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullGroupMessageRequests} PullGroupMessageRequests
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMessageRequests.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullGroupMessageRequests message.
     * @function verify
     * @memberof PullGroupMessageRequests
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullGroupMessageRequests.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.request!=null&&message.hasOwnProperty("request")){if(!Array.isArray(message.request))return"request: array expected";for(var i=0;i<message.request.length;++i){var error=$root.PullGroupMessageRequest.verify(message.request[i]);if(error)return"request."+error;}}return null;};/**
     * Creates a PullGroupMessageRequests message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullGroupMessageRequests
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullGroupMessageRequests} PullGroupMessageRequests
     */PullGroupMessageRequests.fromObject=function fromObject(object){if(object instanceof $root.PullGroupMessageRequests)return object;var message=new $root.PullGroupMessageRequests();if(object.request){if(!Array.isArray(object.request))throw TypeError(".PullGroupMessageRequests.request: array expected");message.request=[];for(var i=0;i<object.request.length;++i){if((0,_typeof3.default)(object.request[i])!=="object")throw TypeError(".PullGroupMessageRequests.request: object expected");message.request[i]=$root.PullGroupMessageRequest.fromObject(object.request[i]);}}return message;};/**
     * Creates a plain object from a PullGroupMessageRequests message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullGroupMessageRequests
     * @static
     * @param {PullGroupMessageRequests} message PullGroupMessageRequests
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullGroupMessageRequests.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.request=[];if(message.request&&message.request.length){object.request=[];for(var j=0;j<message.request.length;++j){object.request[j]=$root.PullGroupMessageRequest.toObject(message.request[j],options);}}return object;};/**
     * Converts this PullGroupMessageRequests to JSON.
     * @function toJSON
     * @memberof PullGroupMessageRequests
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullGroupMessageRequests.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullGroupMessageRequests;}();$root.GroupMessage=function(){/**
     * Properties of a GroupMessage.
     * @exports IGroupMessage
     * @interface IGroupMessage
     * @property {Long} messageId GroupMessage messageId
     * @property {string} fromUser GroupMessage fromUser
     * @property {number} flag GroupMessage flag
     *//**
     * Constructs a new GroupMessage.
     * @exports GroupMessage
     * @classdesc Represents a GroupMessage.
     * @implements IGroupMessage
     * @constructor
     * @param {IGroupMessage=} [properties] Properties to set
     */function GroupMessage(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GroupMessage messageId.
     * @member {Long} messageId
     * @memberof GroupMessage
     * @instance
     */GroupMessage.prototype.messageId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * GroupMessage fromUser.
     * @member {string} fromUser
     * @memberof GroupMessage
     * @instance
     */GroupMessage.prototype.fromUser="";/**
     * GroupMessage flag.
     * @member {number} flag
     * @memberof GroupMessage
     * @instance
     */GroupMessage.prototype.flag=0;/**
     * Creates a new GroupMessage instance using the specified properties.
     * @function create
     * @memberof GroupMessage
     * @static
     * @param {IGroupMessage=} [properties] Properties to set
     * @returns {GroupMessage} GroupMessage instance
     */GroupMessage.create=function create(properties){return new GroupMessage(properties);};/**
     * Encodes the specified GroupMessage message. Does not implicitly {@link GroupMessage.verify|verify} messages.
     * @function encode
     * @memberof GroupMessage
     * @static
     * @param {IGroupMessage} message GroupMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GroupMessage.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.messageId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.fromUser);writer.uint32(/* id 3, wireType 0 =*/24).int32(message.flag);return writer;};/**
     * Encodes the specified GroupMessage message, length delimited. Does not implicitly {@link GroupMessage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GroupMessage
     * @static
     * @param {IGroupMessage} message GroupMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GroupMessage.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GroupMessage message from the specified reader or buffer.
     * @function decode
     * @memberof GroupMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GroupMessage} GroupMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GroupMessage.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GroupMessage();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.messageId=reader.int64();break;case 2:message.fromUser=reader.string();break;case 3:message.flag=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("messageId"))throw $util.ProtocolError("missing required 'messageId'",{instance:message});if(!message.hasOwnProperty("fromUser"))throw $util.ProtocolError("missing required 'fromUser'",{instance:message});if(!message.hasOwnProperty("flag"))throw $util.ProtocolError("missing required 'flag'",{instance:message});return message;};/**
     * Decodes a GroupMessage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GroupMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GroupMessage} GroupMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GroupMessage.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GroupMessage message.
     * @function verify
     * @memberof GroupMessage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GroupMessage.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.messageId)&&!(message.messageId&&$util.isInteger(message.messageId.low)&&$util.isInteger(message.messageId.high)))return"messageId: integer|Long expected";if(!$util.isString(message.fromUser))return"fromUser: string expected";if(!$util.isInteger(message.flag))return"flag: integer expected";return null;};/**
     * Creates a GroupMessage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GroupMessage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GroupMessage} GroupMessage
     */GroupMessage.fromObject=function fromObject(object){if(object instanceof $root.GroupMessage)return object;var message=new $root.GroupMessage();if(object.messageId!=null)if($util.Long)(message.messageId=$util.Long.fromValue(object.messageId)).unsigned=false;else if(typeof object.messageId==="string")message.messageId=parseInt(object.messageId,10);else if(typeof object.messageId==="number")message.messageId=object.messageId;else if((0,_typeof3.default)(object.messageId)==="object")message.messageId=new $util.LongBits(object.messageId.low>>>0,object.messageId.high>>>0).toNumber();if(object.fromUser!=null)message.fromUser=String(object.fromUser);if(object.flag!=null)message.flag=object.flag|0;return message;};/**
     * Creates a plain object from a GroupMessage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GroupMessage
     * @static
     * @param {GroupMessage} message GroupMessage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GroupMessage.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.messageId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.messageId=options.longs===String?"0":0;object.fromUser="";object.flag=0;}if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(typeof message.messageId==="number")object.messageId=options.longs===String?String(message.messageId):message.messageId;else object.messageId=options.longs===String?$util.Long.prototype.toString.call(message.messageId):options.longs===Number?new $util.LongBits(message.messageId.low>>>0,message.messageId.high>>>0).toNumber():message.messageId;if(message.fromUser!=null&&message.hasOwnProperty("fromUser"))object.fromUser=message.fromUser;if(message.flag!=null&&message.hasOwnProperty("flag"))object.flag=message.flag;return object;};/**
     * Converts this GroupMessage to JSON.
     * @function toJSON
     * @memberof GroupMessage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GroupMessage.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GroupMessage;}();$root.PullGroupMessageResult=function(){/**
     * Properties of a PullGroupMessageResult.
     * @exports IPullGroupMessageResult
     * @interface IPullGroupMessageResult
     * @property {Array.<IGroupMessage>|null} [message] PullGroupMessageResult message
     * @property {Long} current PullGroupMessageResult current
     * @property {Long} head PullGroupMessageResult head
     * @property {string} groupId PullGroupMessageResult groupId
     * @property {number} line PullGroupMessageResult line
     * @property {Array.<IMessage>|null} [msg] PullGroupMessageResult msg
     *//**
     * Constructs a new PullGroupMessageResult.
     * @exports PullGroupMessageResult
     * @classdesc Represents a PullGroupMessageResult.
     * @implements IPullGroupMessageResult
     * @constructor
     * @param {IPullGroupMessageResult=} [properties] Properties to set
     */function PullGroupMessageResult(properties){this.message=[];this.msg=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullGroupMessageResult message.
     * @member {Array.<IGroupMessage>} message
     * @memberof PullGroupMessageResult
     * @instance
     */PullGroupMessageResult.prototype.message=$util.emptyArray;/**
     * PullGroupMessageResult current.
     * @member {Long} current
     * @memberof PullGroupMessageResult
     * @instance
     */PullGroupMessageResult.prototype.current=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * PullGroupMessageResult head.
     * @member {Long} head
     * @memberof PullGroupMessageResult
     * @instance
     */PullGroupMessageResult.prototype.head=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * PullGroupMessageResult groupId.
     * @member {string} groupId
     * @memberof PullGroupMessageResult
     * @instance
     */PullGroupMessageResult.prototype.groupId="";/**
     * PullGroupMessageResult line.
     * @member {number} line
     * @memberof PullGroupMessageResult
     * @instance
     */PullGroupMessageResult.prototype.line=0;/**
     * PullGroupMessageResult msg.
     * @member {Array.<IMessage>} msg
     * @memberof PullGroupMessageResult
     * @instance
     */PullGroupMessageResult.prototype.msg=$util.emptyArray;/**
     * Creates a new PullGroupMessageResult instance using the specified properties.
     * @function create
     * @memberof PullGroupMessageResult
     * @static
     * @param {IPullGroupMessageResult=} [properties] Properties to set
     * @returns {PullGroupMessageResult} PullGroupMessageResult instance
     */PullGroupMessageResult.create=function create(properties){return new PullGroupMessageResult(properties);};/**
     * Encodes the specified PullGroupMessageResult message. Does not implicitly {@link PullGroupMessageResult.verify|verify} messages.
     * @function encode
     * @memberof PullGroupMessageResult
     * @static
     * @param {IPullGroupMessageResult} message PullGroupMessageResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMessageResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.message!=null&&message.message.length)for(var i=0;i<message.message.length;++i){$root.GroupMessage.encode(message.message[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}writer.uint32(/* id 2, wireType 0 =*/16).int64(message.current);writer.uint32(/* id 3, wireType 0 =*/24).int64(message.head);writer.uint32(/* id 4, wireType 2 =*/34).string(message.groupId);writer.uint32(/* id 5, wireType 0 =*/40).int32(message.line);if(message.msg!=null&&message.msg.length)for(var i=0;i<message.msg.length;++i){$root.Message.encode(message.msg[i],writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();}return writer;};/**
     * Encodes the specified PullGroupMessageResult message, length delimited. Does not implicitly {@link PullGroupMessageResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullGroupMessageResult
     * @static
     * @param {IPullGroupMessageResult} message PullGroupMessageResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMessageResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullGroupMessageResult message from the specified reader or buffer.
     * @function decode
     * @memberof PullGroupMessageResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullGroupMessageResult} PullGroupMessageResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMessageResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullGroupMessageResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.message&&message.message.length))message.message=[];message.message.push($root.GroupMessage.decode(reader,reader.uint32()));break;case 2:message.current=reader.int64();break;case 3:message.head=reader.int64();break;case 4:message.groupId=reader.string();break;case 5:message.line=reader.int32();break;case 6:if(!(message.msg&&message.msg.length))message.msg=[];message.msg.push($root.Message.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("current"))throw $util.ProtocolError("missing required 'current'",{instance:message});if(!message.hasOwnProperty("head"))throw $util.ProtocolError("missing required 'head'",{instance:message});if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});if(!message.hasOwnProperty("line"))throw $util.ProtocolError("missing required 'line'",{instance:message});return message;};/**
     * Decodes a PullGroupMessageResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullGroupMessageResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullGroupMessageResult} PullGroupMessageResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMessageResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullGroupMessageResult message.
     * @function verify
     * @memberof PullGroupMessageResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullGroupMessageResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.message!=null&&message.hasOwnProperty("message")){if(!Array.isArray(message.message))return"message: array expected";for(var i=0;i<message.message.length;++i){var error=$root.GroupMessage.verify(message.message[i]);if(error)return"message."+error;}}if(!$util.isInteger(message.current)&&!(message.current&&$util.isInteger(message.current.low)&&$util.isInteger(message.current.high)))return"current: integer|Long expected";if(!$util.isInteger(message.head)&&!(message.head&&$util.isInteger(message.head.low)&&$util.isInteger(message.head.high)))return"head: integer|Long expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(!$util.isInteger(message.line))return"line: integer expected";if(message.msg!=null&&message.hasOwnProperty("msg")){if(!Array.isArray(message.msg))return"msg: array expected";for(var i=0;i<message.msg.length;++i){var error=$root.Message.verify(message.msg[i]);if(error)return"msg."+error;}}return null;};/**
     * Creates a PullGroupMessageResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullGroupMessageResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullGroupMessageResult} PullGroupMessageResult
     */PullGroupMessageResult.fromObject=function fromObject(object){if(object instanceof $root.PullGroupMessageResult)return object;var message=new $root.PullGroupMessageResult();if(object.message){if(!Array.isArray(object.message))throw TypeError(".PullGroupMessageResult.message: array expected");message.message=[];for(var i=0;i<object.message.length;++i){if((0,_typeof3.default)(object.message[i])!=="object")throw TypeError(".PullGroupMessageResult.message: object expected");message.message[i]=$root.GroupMessage.fromObject(object.message[i]);}}if(object.current!=null)if($util.Long)(message.current=$util.Long.fromValue(object.current)).unsigned=false;else if(typeof object.current==="string")message.current=parseInt(object.current,10);else if(typeof object.current==="number")message.current=object.current;else if((0,_typeof3.default)(object.current)==="object")message.current=new $util.LongBits(object.current.low>>>0,object.current.high>>>0).toNumber();if(object.head!=null)if($util.Long)(message.head=$util.Long.fromValue(object.head)).unsigned=false;else if(typeof object.head==="string")message.head=parseInt(object.head,10);else if(typeof object.head==="number")message.head=object.head;else if((0,_typeof3.default)(object.head)==="object")message.head=new $util.LongBits(object.head.low>>>0,object.head.high>>>0).toNumber();if(object.groupId!=null)message.groupId=String(object.groupId);if(object.line!=null)message.line=object.line|0;if(object.msg){if(!Array.isArray(object.msg))throw TypeError(".PullGroupMessageResult.msg: array expected");message.msg=[];for(var i=0;i<object.msg.length;++i){if((0,_typeof3.default)(object.msg[i])!=="object")throw TypeError(".PullGroupMessageResult.msg: object expected");message.msg[i]=$root.Message.fromObject(object.msg[i]);}}return message;};/**
     * Creates a plain object from a PullGroupMessageResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullGroupMessageResult
     * @static
     * @param {PullGroupMessageResult} message PullGroupMessageResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullGroupMessageResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults){object.message=[];object.msg=[];}if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.current=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.current=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.head=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.head=options.longs===String?"0":0;object.groupId="";object.line=0;}if(message.message&&message.message.length){object.message=[];for(var j=0;j<message.message.length;++j){object.message[j]=$root.GroupMessage.toObject(message.message[j],options);}}if(message.current!=null&&message.hasOwnProperty("current"))if(typeof message.current==="number")object.current=options.longs===String?String(message.current):message.current;else object.current=options.longs===String?$util.Long.prototype.toString.call(message.current):options.longs===Number?new $util.LongBits(message.current.low>>>0,message.current.high>>>0).toNumber():message.current;if(message.head!=null&&message.hasOwnProperty("head"))if(typeof message.head==="number")object.head=options.longs===String?String(message.head):message.head;else object.head=options.longs===String?$util.Long.prototype.toString.call(message.head):options.longs===Number?new $util.LongBits(message.head.low>>>0,message.head.high>>>0).toNumber():message.head;if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.line!=null&&message.hasOwnProperty("line"))object.line=message.line;if(message.msg&&message.msg.length){object.msg=[];for(var j=0;j<message.msg.length;++j){object.msg[j]=$root.Message.toObject(message.msg[j],options);}}return object;};/**
     * Converts this PullGroupMessageResult to JSON.
     * @function toJSON
     * @memberof PullGroupMessageResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullGroupMessageResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullGroupMessageResult;}();$root.PullGroupMessageResults=function(){/**
     * Properties of a PullGroupMessageResults.
     * @exports IPullGroupMessageResults
     * @interface IPullGroupMessageResults
     * @property {Array.<IPullGroupMessageResult>|null} [result] PullGroupMessageResults result
     *//**
     * Constructs a new PullGroupMessageResults.
     * @exports PullGroupMessageResults
     * @classdesc Represents a PullGroupMessageResults.
     * @implements IPullGroupMessageResults
     * @constructor
     * @param {IPullGroupMessageResults=} [properties] Properties to set
     */function PullGroupMessageResults(properties){this.result=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullGroupMessageResults result.
     * @member {Array.<IPullGroupMessageResult>} result
     * @memberof PullGroupMessageResults
     * @instance
     */PullGroupMessageResults.prototype.result=$util.emptyArray;/**
     * Creates a new PullGroupMessageResults instance using the specified properties.
     * @function create
     * @memberof PullGroupMessageResults
     * @static
     * @param {IPullGroupMessageResults=} [properties] Properties to set
     * @returns {PullGroupMessageResults} PullGroupMessageResults instance
     */PullGroupMessageResults.create=function create(properties){return new PullGroupMessageResults(properties);};/**
     * Encodes the specified PullGroupMessageResults message. Does not implicitly {@link PullGroupMessageResults.verify|verify} messages.
     * @function encode
     * @memberof PullGroupMessageResults
     * @static
     * @param {IPullGroupMessageResults} message PullGroupMessageResults message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMessageResults.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.result!=null&&message.result.length)for(var i=0;i<message.result.length;++i){$root.PullGroupMessageResult.encode(message.result[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified PullGroupMessageResults message, length delimited. Does not implicitly {@link PullGroupMessageResults.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullGroupMessageResults
     * @static
     * @param {IPullGroupMessageResults} message PullGroupMessageResults message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMessageResults.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullGroupMessageResults message from the specified reader or buffer.
     * @function decode
     * @memberof PullGroupMessageResults
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullGroupMessageResults} PullGroupMessageResults
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMessageResults.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullGroupMessageResults();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.result&&message.result.length))message.result=[];message.result.push($root.PullGroupMessageResult.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a PullGroupMessageResults message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullGroupMessageResults
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullGroupMessageResults} PullGroupMessageResults
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMessageResults.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullGroupMessageResults message.
     * @function verify
     * @memberof PullGroupMessageResults
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullGroupMessageResults.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.result!=null&&message.hasOwnProperty("result")){if(!Array.isArray(message.result))return"result: array expected";for(var i=0;i<message.result.length;++i){var error=$root.PullGroupMessageResult.verify(message.result[i]);if(error)return"result."+error;}}return null;};/**
     * Creates a PullGroupMessageResults message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullGroupMessageResults
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullGroupMessageResults} PullGroupMessageResults
     */PullGroupMessageResults.fromObject=function fromObject(object){if(object instanceof $root.PullGroupMessageResults)return object;var message=new $root.PullGroupMessageResults();if(object.result){if(!Array.isArray(object.result))throw TypeError(".PullGroupMessageResults.result: array expected");message.result=[];for(var i=0;i<object.result.length;++i){if((0,_typeof3.default)(object.result[i])!=="object")throw TypeError(".PullGroupMessageResults.result: object expected");message.result[i]=$root.PullGroupMessageResult.fromObject(object.result[i]);}}return message;};/**
     * Creates a plain object from a PullGroupMessageResults message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullGroupMessageResults
     * @static
     * @param {PullGroupMessageResults} message PullGroupMessageResults
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullGroupMessageResults.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.result=[];if(message.result&&message.result.length){object.result=[];for(var j=0;j<message.result.length;++j){object.result[j]=$root.PullGroupMessageResult.toObject(message.result[j],options);}}return object;};/**
     * Converts this PullGroupMessageResults to JSON.
     * @function toJSON
     * @memberof PullGroupMessageResults
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullGroupMessageResults.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullGroupMessageResults;}();$root.MessageList=function(){/**
     * Properties of a MessageList.
     * @exports IMessageList
     * @interface IMessageList
     * @property {Array.<IMessage>|null} [message] MessageList message
     *//**
     * Constructs a new MessageList.
     * @exports MessageList
     * @classdesc Represents a MessageList.
     * @implements IMessageList
     * @constructor
     * @param {IMessageList=} [properties] Properties to set
     */function MessageList(properties){this.message=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * MessageList message.
     * @member {Array.<IMessage>} message
     * @memberof MessageList
     * @instance
     */MessageList.prototype.message=$util.emptyArray;/**
     * Creates a new MessageList instance using the specified properties.
     * @function create
     * @memberof MessageList
     * @static
     * @param {IMessageList=} [properties] Properties to set
     * @returns {MessageList} MessageList instance
     */MessageList.create=function create(properties){return new MessageList(properties);};/**
     * Encodes the specified MessageList message. Does not implicitly {@link MessageList.verify|verify} messages.
     * @function encode
     * @memberof MessageList
     * @static
     * @param {IMessageList} message MessageList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MessageList.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.message!=null&&message.message.length)for(var i=0;i<message.message.length;++i){$root.Message.encode(message.message[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified MessageList message, length delimited. Does not implicitly {@link MessageList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MessageList
     * @static
     * @param {IMessageList} message MessageList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MessageList.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a MessageList message from the specified reader or buffer.
     * @function decode
     * @memberof MessageList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MessageList} MessageList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MessageList.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.MessageList();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.message&&message.message.length))message.message=[];message.message.push($root.Message.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a MessageList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MessageList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MessageList} MessageList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MessageList.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a MessageList message.
     * @function verify
     * @memberof MessageList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */MessageList.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.message!=null&&message.hasOwnProperty("message")){if(!Array.isArray(message.message))return"message: array expected";for(var i=0;i<message.message.length;++i){var error=$root.Message.verify(message.message[i]);if(error)return"message."+error;}}return null;};/**
     * Creates a MessageList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MessageList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MessageList} MessageList
     */MessageList.fromObject=function fromObject(object){if(object instanceof $root.MessageList)return object;var message=new $root.MessageList();if(object.message){if(!Array.isArray(object.message))throw TypeError(".MessageList.message: array expected");message.message=[];for(var i=0;i<object.message.length;++i){if((0,_typeof3.default)(object.message[i])!=="object")throw TypeError(".MessageList.message: object expected");message.message[i]=$root.Message.fromObject(object.message[i]);}}return message;};/**
     * Creates a plain object from a MessageList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MessageList
     * @static
     * @param {MessageList} message MessageList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */MessageList.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.message=[];if(message.message&&message.message.length){object.message=[];for(var j=0;j<message.message.length;++j){object.message[j]=$root.Message.toObject(message.message[j],options);}}return object;};/**
     * Converts this MessageList to JSON.
     * @function toJSON
     * @memberof MessageList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */MessageList.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return MessageList;}();$root.PullGroupInfoResult=function(){/**
     * Properties of a PullGroupInfoResult.
     * @exports IPullGroupInfoResult
     * @interface IPullGroupInfoResult
     * @property {Array.<IGroupInfo>|null} [info] PullGroupInfoResult info
     *//**
     * Constructs a new PullGroupInfoResult.
     * @exports PullGroupInfoResult
     * @classdesc Represents a PullGroupInfoResult.
     * @implements IPullGroupInfoResult
     * @constructor
     * @param {IPullGroupInfoResult=} [properties] Properties to set
     */function PullGroupInfoResult(properties){this.info=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullGroupInfoResult info.
     * @member {Array.<IGroupInfo>} info
     * @memberof PullGroupInfoResult
     * @instance
     */PullGroupInfoResult.prototype.info=$util.emptyArray;/**
     * Creates a new PullGroupInfoResult instance using the specified properties.
     * @function create
     * @memberof PullGroupInfoResult
     * @static
     * @param {IPullGroupInfoResult=} [properties] Properties to set
     * @returns {PullGroupInfoResult} PullGroupInfoResult instance
     */PullGroupInfoResult.create=function create(properties){return new PullGroupInfoResult(properties);};/**
     * Encodes the specified PullGroupInfoResult message. Does not implicitly {@link PullGroupInfoResult.verify|verify} messages.
     * @function encode
     * @memberof PullGroupInfoResult
     * @static
     * @param {IPullGroupInfoResult} message PullGroupInfoResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupInfoResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.info!=null&&message.info.length)for(var i=0;i<message.info.length;++i){$root.GroupInfo.encode(message.info[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified PullGroupInfoResult message, length delimited. Does not implicitly {@link PullGroupInfoResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullGroupInfoResult
     * @static
     * @param {IPullGroupInfoResult} message PullGroupInfoResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupInfoResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullGroupInfoResult message from the specified reader or buffer.
     * @function decode
     * @memberof PullGroupInfoResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullGroupInfoResult} PullGroupInfoResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupInfoResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullGroupInfoResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.info&&message.info.length))message.info=[];message.info.push($root.GroupInfo.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a PullGroupInfoResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullGroupInfoResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullGroupInfoResult} PullGroupInfoResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupInfoResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullGroupInfoResult message.
     * @function verify
     * @memberof PullGroupInfoResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullGroupInfoResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.info!=null&&message.hasOwnProperty("info")){if(!Array.isArray(message.info))return"info: array expected";for(var i=0;i<message.info.length;++i){var error=$root.GroupInfo.verify(message.info[i]);if(error)return"info."+error;}}return null;};/**
     * Creates a PullGroupInfoResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullGroupInfoResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullGroupInfoResult} PullGroupInfoResult
     */PullGroupInfoResult.fromObject=function fromObject(object){if(object instanceof $root.PullGroupInfoResult)return object;var message=new $root.PullGroupInfoResult();if(object.info){if(!Array.isArray(object.info))throw TypeError(".PullGroupInfoResult.info: array expected");message.info=[];for(var i=0;i<object.info.length;++i){if((0,_typeof3.default)(object.info[i])!=="object")throw TypeError(".PullGroupInfoResult.info: object expected");message.info[i]=$root.GroupInfo.fromObject(object.info[i]);}}return message;};/**
     * Creates a plain object from a PullGroupInfoResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullGroupInfoResult
     * @static
     * @param {PullGroupInfoResult} message PullGroupInfoResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullGroupInfoResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.info=[];if(message.info&&message.info.length){object.info=[];for(var j=0;j<message.info.length;++j){object.info[j]=$root.GroupInfo.toObject(message.info[j],options);}}return object;};/**
     * Converts this PullGroupInfoResult to JSON.
     * @function toJSON
     * @memberof PullGroupInfoResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullGroupInfoResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullGroupInfoResult;}();$root.PullGroupMemberRequest=function(){/**
     * Properties of a PullGroupMemberRequest.
     * @exports IPullGroupMemberRequest
     * @interface IPullGroupMemberRequest
     * @property {string} target PullGroupMemberRequest target
     * @property {Long} head PullGroupMemberRequest head
     * @property {Long|null} [sum] PullGroupMemberRequest sum
     *//**
     * Constructs a new PullGroupMemberRequest.
     * @exports PullGroupMemberRequest
     * @classdesc Represents a PullGroupMemberRequest.
     * @implements IPullGroupMemberRequest
     * @constructor
     * @param {IPullGroupMemberRequest=} [properties] Properties to set
     */function PullGroupMemberRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullGroupMemberRequest target.
     * @member {string} target
     * @memberof PullGroupMemberRequest
     * @instance
     */PullGroupMemberRequest.prototype.target="";/**
     * PullGroupMemberRequest head.
     * @member {Long} head
     * @memberof PullGroupMemberRequest
     * @instance
     */PullGroupMemberRequest.prototype.head=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * PullGroupMemberRequest sum.
     * @member {Long} sum
     * @memberof PullGroupMemberRequest
     * @instance
     */PullGroupMemberRequest.prototype.sum=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new PullGroupMemberRequest instance using the specified properties.
     * @function create
     * @memberof PullGroupMemberRequest
     * @static
     * @param {IPullGroupMemberRequest=} [properties] Properties to set
     * @returns {PullGroupMemberRequest} PullGroupMemberRequest instance
     */PullGroupMemberRequest.create=function create(properties){return new PullGroupMemberRequest(properties);};/**
     * Encodes the specified PullGroupMemberRequest message. Does not implicitly {@link PullGroupMemberRequest.verify|verify} messages.
     * @function encode
     * @memberof PullGroupMemberRequest
     * @static
     * @param {IPullGroupMemberRequest} message PullGroupMemberRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMemberRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.target);writer.uint32(/* id 2, wireType 0 =*/16).int64(message.head);if(message.sum!=null&&message.hasOwnProperty("sum"))writer.uint32(/* id 3, wireType 0 =*/24).int64(message.sum);return writer;};/**
     * Encodes the specified PullGroupMemberRequest message, length delimited. Does not implicitly {@link PullGroupMemberRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullGroupMemberRequest
     * @static
     * @param {IPullGroupMemberRequest} message PullGroupMemberRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMemberRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullGroupMemberRequest message from the specified reader or buffer.
     * @function decode
     * @memberof PullGroupMemberRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullGroupMemberRequest} PullGroupMemberRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMemberRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullGroupMemberRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.target=reader.string();break;case 2:message.head=reader.int64();break;case 3:message.sum=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("target"))throw $util.ProtocolError("missing required 'target'",{instance:message});if(!message.hasOwnProperty("head"))throw $util.ProtocolError("missing required 'head'",{instance:message});return message;};/**
     * Decodes a PullGroupMemberRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullGroupMemberRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullGroupMemberRequest} PullGroupMemberRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMemberRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullGroupMemberRequest message.
     * @function verify
     * @memberof PullGroupMemberRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullGroupMemberRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.target))return"target: string expected";if(!$util.isInteger(message.head)&&!(message.head&&$util.isInteger(message.head.low)&&$util.isInteger(message.head.high)))return"head: integer|Long expected";if(message.sum!=null&&message.hasOwnProperty("sum"))if(!$util.isInteger(message.sum)&&!(message.sum&&$util.isInteger(message.sum.low)&&$util.isInteger(message.sum.high)))return"sum: integer|Long expected";return null;};/**
     * Creates a PullGroupMemberRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullGroupMemberRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullGroupMemberRequest} PullGroupMemberRequest
     */PullGroupMemberRequest.fromObject=function fromObject(object){if(object instanceof $root.PullGroupMemberRequest)return object;var message=new $root.PullGroupMemberRequest();if(object.target!=null)message.target=String(object.target);if(object.head!=null)if($util.Long)(message.head=$util.Long.fromValue(object.head)).unsigned=false;else if(typeof object.head==="string")message.head=parseInt(object.head,10);else if(typeof object.head==="number")message.head=object.head;else if((0,_typeof3.default)(object.head)==="object")message.head=new $util.LongBits(object.head.low>>>0,object.head.high>>>0).toNumber();if(object.sum!=null)if($util.Long)(message.sum=$util.Long.fromValue(object.sum)).unsigned=false;else if(typeof object.sum==="string")message.sum=parseInt(object.sum,10);else if(typeof object.sum==="number")message.sum=object.sum;else if((0,_typeof3.default)(object.sum)==="object")message.sum=new $util.LongBits(object.sum.low>>>0,object.sum.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a PullGroupMemberRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullGroupMemberRequest
     * @static
     * @param {PullGroupMemberRequest} message PullGroupMemberRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullGroupMemberRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.target="";if($util.Long){var long=new $util.Long(0,0,false);object.head=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.head=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.sum=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.sum=options.longs===String?"0":0;}if(message.target!=null&&message.hasOwnProperty("target"))object.target=message.target;if(message.head!=null&&message.hasOwnProperty("head"))if(typeof message.head==="number")object.head=options.longs===String?String(message.head):message.head;else object.head=options.longs===String?$util.Long.prototype.toString.call(message.head):options.longs===Number?new $util.LongBits(message.head.low>>>0,message.head.high>>>0).toNumber():message.head;if(message.sum!=null&&message.hasOwnProperty("sum"))if(typeof message.sum==="number")object.sum=options.longs===String?String(message.sum):message.sum;else object.sum=options.longs===String?$util.Long.prototype.toString.call(message.sum):options.longs===Number?new $util.LongBits(message.sum.low>>>0,message.sum.high>>>0).toNumber():message.sum;return object;};/**
     * Converts this PullGroupMemberRequest to JSON.
     * @function toJSON
     * @memberof PullGroupMemberRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullGroupMemberRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullGroupMemberRequest;}();$root.PullGroupMemberResult=function(){/**
     * Properties of a PullGroupMemberResult.
     * @exports IPullGroupMemberResult
     * @interface IPullGroupMemberResult
     * @property {Array.<IGroupMember>|null} [member] PullGroupMemberResult member
     * @property {number|null} [full] PullGroupMemberResult full
     *//**
     * Constructs a new PullGroupMemberResult.
     * @exports PullGroupMemberResult
     * @classdesc Represents a PullGroupMemberResult.
     * @implements IPullGroupMemberResult
     * @constructor
     * @param {IPullGroupMemberResult=} [properties] Properties to set
     */function PullGroupMemberResult(properties){this.member=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullGroupMemberResult member.
     * @member {Array.<IGroupMember>} member
     * @memberof PullGroupMemberResult
     * @instance
     */PullGroupMemberResult.prototype.member=$util.emptyArray;/**
     * PullGroupMemberResult full.
     * @member {number} full
     * @memberof PullGroupMemberResult
     * @instance
     */PullGroupMemberResult.prototype.full=0;/**
     * Creates a new PullGroupMemberResult instance using the specified properties.
     * @function create
     * @memberof PullGroupMemberResult
     * @static
     * @param {IPullGroupMemberResult=} [properties] Properties to set
     * @returns {PullGroupMemberResult} PullGroupMemberResult instance
     */PullGroupMemberResult.create=function create(properties){return new PullGroupMemberResult(properties);};/**
     * Encodes the specified PullGroupMemberResult message. Does not implicitly {@link PullGroupMemberResult.verify|verify} messages.
     * @function encode
     * @memberof PullGroupMemberResult
     * @static
     * @param {IPullGroupMemberResult} message PullGroupMemberResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMemberResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.member!=null&&message.member.length)for(var i=0;i<message.member.length;++i){$root.GroupMember.encode(message.member[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}if(message.full!=null&&message.hasOwnProperty("full"))writer.uint32(/* id 2, wireType 0 =*/16).int32(message.full);return writer;};/**
     * Encodes the specified PullGroupMemberResult message, length delimited. Does not implicitly {@link PullGroupMemberResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullGroupMemberResult
     * @static
     * @param {IPullGroupMemberResult} message PullGroupMemberResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullGroupMemberResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullGroupMemberResult message from the specified reader or buffer.
     * @function decode
     * @memberof PullGroupMemberResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullGroupMemberResult} PullGroupMemberResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMemberResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullGroupMemberResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.member&&message.member.length))message.member=[];message.member.push($root.GroupMember.decode(reader,reader.uint32()));break;case 2:message.full=reader.int32();break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a PullGroupMemberResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullGroupMemberResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullGroupMemberResult} PullGroupMemberResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullGroupMemberResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullGroupMemberResult message.
     * @function verify
     * @memberof PullGroupMemberResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullGroupMemberResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.member!=null&&message.hasOwnProperty("member")){if(!Array.isArray(message.member))return"member: array expected";for(var i=0;i<message.member.length;++i){var error=$root.GroupMember.verify(message.member[i]);if(error)return"member."+error;}}if(message.full!=null&&message.hasOwnProperty("full"))if(!$util.isInteger(message.full))return"full: integer expected";return null;};/**
     * Creates a PullGroupMemberResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullGroupMemberResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullGroupMemberResult} PullGroupMemberResult
     */PullGroupMemberResult.fromObject=function fromObject(object){if(object instanceof $root.PullGroupMemberResult)return object;var message=new $root.PullGroupMemberResult();if(object.member){if(!Array.isArray(object.member))throw TypeError(".PullGroupMemberResult.member: array expected");message.member=[];for(var i=0;i<object.member.length;++i){if((0,_typeof3.default)(object.member[i])!=="object")throw TypeError(".PullGroupMemberResult.member: object expected");message.member[i]=$root.GroupMember.fromObject(object.member[i]);}}if(object.full!=null)message.full=object.full|0;return message;};/**
     * Creates a plain object from a PullGroupMemberResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullGroupMemberResult
     * @static
     * @param {PullGroupMemberResult} message PullGroupMemberResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullGroupMemberResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.member=[];if(options.defaults)object.full=0;if(message.member&&message.member.length){object.member=[];for(var j=0;j<message.member.length;++j){object.member[j]=$root.GroupMember.toObject(message.member[j],options);}}if(message.full!=null&&message.hasOwnProperty("full"))object.full=message.full;return object;};/**
     * Converts this PullGroupMemberResult to JSON.
     * @function toJSON
     * @memberof PullGroupMemberResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullGroupMemberResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullGroupMemberResult;}();$root.UserRequest=function(){/**
     * Properties of a UserRequest.
     * @exports IUserRequest
     * @interface IUserRequest
     * @property {string} uid UserRequest uid
     * @property {Long|null} [updateDt] UserRequest updateDt
     *//**
     * Constructs a new UserRequest.
     * @exports UserRequest
     * @classdesc Represents a UserRequest.
     * @implements IUserRequest
     * @constructor
     * @param {IUserRequest=} [properties] Properties to set
     */function UserRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * UserRequest uid.
     * @member {string} uid
     * @memberof UserRequest
     * @instance
     */UserRequest.prototype.uid="";/**
     * UserRequest updateDt.
     * @member {Long} updateDt
     * @memberof UserRequest
     * @instance
     */UserRequest.prototype.updateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new UserRequest instance using the specified properties.
     * @function create
     * @memberof UserRequest
     * @static
     * @param {IUserRequest=} [properties] Properties to set
     * @returns {UserRequest} UserRequest instance
     */UserRequest.create=function create(properties){return new UserRequest(properties);};/**
     * Encodes the specified UserRequest message. Does not implicitly {@link UserRequest.verify|verify} messages.
     * @function encode
     * @memberof UserRequest
     * @static
     * @param {IUserRequest} message UserRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */UserRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))writer.uint32(/* id 2, wireType 0 =*/16).int64(message.updateDt);return writer;};/**
     * Encodes the specified UserRequest message, length delimited. Does not implicitly {@link UserRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UserRequest
     * @static
     * @param {IUserRequest} message UserRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */UserRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a UserRequest message from the specified reader or buffer.
     * @function decode
     * @memberof UserRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UserRequest} UserRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */UserRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.UserRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.uid=reader.string();break;case 2:message.updateDt=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("uid"))throw $util.ProtocolError("missing required 'uid'",{instance:message});return message;};/**
     * Decodes a UserRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UserRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UserRequest} UserRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */UserRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a UserRequest message.
     * @function verify
     * @memberof UserRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */UserRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.uid))return"uid: string expected";if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(!$util.isInteger(message.updateDt)&&!(message.updateDt&&$util.isInteger(message.updateDt.low)&&$util.isInteger(message.updateDt.high)))return"updateDt: integer|Long expected";return null;};/**
     * Creates a UserRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UserRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UserRequest} UserRequest
     */UserRequest.fromObject=function fromObject(object){if(object instanceof $root.UserRequest)return object;var message=new $root.UserRequest();if(object.uid!=null)message.uid=String(object.uid);if(object.updateDt!=null)if($util.Long)(message.updateDt=$util.Long.fromValue(object.updateDt)).unsigned=false;else if(typeof object.updateDt==="string")message.updateDt=parseInt(object.updateDt,10);else if(typeof object.updateDt==="number")message.updateDt=object.updateDt;else if((0,_typeof3.default)(object.updateDt)==="object")message.updateDt=new $util.LongBits(object.updateDt.low>>>0,object.updateDt.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a UserRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UserRequest
     * @static
     * @param {UserRequest} message UserRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */UserRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.uid="";if($util.Long){var long=new $util.Long(0,0,false);object.updateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.updateDt=options.longs===String?"0":0;}if(message.uid!=null&&message.hasOwnProperty("uid"))object.uid=message.uid;if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(typeof message.updateDt==="number")object.updateDt=options.longs===String?String(message.updateDt):message.updateDt;else object.updateDt=options.longs===String?$util.Long.prototype.toString.call(message.updateDt):options.longs===Number?new $util.LongBits(message.updateDt.low>>>0,message.updateDt.high>>>0).toNumber():message.updateDt;return object;};/**
     * Converts this UserRequest to JSON.
     * @function toJSON
     * @memberof UserRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */UserRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return UserRequest;}();$root.PullUserRequest=function(){/**
     * Properties of a PullUserRequest.
     * @exports IPullUserRequest
     * @interface IPullUserRequest
     * @property {Array.<IUserRequest>|null} [request] PullUserRequest request
     *//**
     * Constructs a new PullUserRequest.
     * @exports PullUserRequest
     * @classdesc Represents a PullUserRequest.
     * @implements IPullUserRequest
     * @constructor
     * @param {IPullUserRequest=} [properties] Properties to set
     */function PullUserRequest(properties){this.request=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullUserRequest request.
     * @member {Array.<IUserRequest>} request
     * @memberof PullUserRequest
     * @instance
     */PullUserRequest.prototype.request=$util.emptyArray;/**
     * Creates a new PullUserRequest instance using the specified properties.
     * @function create
     * @memberof PullUserRequest
     * @static
     * @param {IPullUserRequest=} [properties] Properties to set
     * @returns {PullUserRequest} PullUserRequest instance
     */PullUserRequest.create=function create(properties){return new PullUserRequest(properties);};/**
     * Encodes the specified PullUserRequest message. Does not implicitly {@link PullUserRequest.verify|verify} messages.
     * @function encode
     * @memberof PullUserRequest
     * @static
     * @param {IPullUserRequest} message PullUserRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullUserRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.request!=null&&message.request.length)for(var i=0;i<message.request.length;++i){$root.UserRequest.encode(message.request[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified PullUserRequest message, length delimited. Does not implicitly {@link PullUserRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullUserRequest
     * @static
     * @param {IPullUserRequest} message PullUserRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullUserRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullUserRequest message from the specified reader or buffer.
     * @function decode
     * @memberof PullUserRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullUserRequest} PullUserRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullUserRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullUserRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.request&&message.request.length))message.request=[];message.request.push($root.UserRequest.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a PullUserRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullUserRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullUserRequest} PullUserRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullUserRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullUserRequest message.
     * @function verify
     * @memberof PullUserRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullUserRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.request!=null&&message.hasOwnProperty("request")){if(!Array.isArray(message.request))return"request: array expected";for(var i=0;i<message.request.length;++i){var error=$root.UserRequest.verify(message.request[i]);if(error)return"request."+error;}}return null;};/**
     * Creates a PullUserRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullUserRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullUserRequest} PullUserRequest
     */PullUserRequest.fromObject=function fromObject(object){if(object instanceof $root.PullUserRequest)return object;var message=new $root.PullUserRequest();if(object.request){if(!Array.isArray(object.request))throw TypeError(".PullUserRequest.request: array expected");message.request=[];for(var i=0;i<object.request.length;++i){if((0,_typeof3.default)(object.request[i])!=="object")throw TypeError(".PullUserRequest.request: object expected");message.request[i]=$root.UserRequest.fromObject(object.request[i]);}}return message;};/**
     * Creates a plain object from a PullUserRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullUserRequest
     * @static
     * @param {PullUserRequest} message PullUserRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullUserRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.request=[];if(message.request&&message.request.length){object.request=[];for(var j=0;j<message.request.length;++j){object.request[j]=$root.UserRequest.toObject(message.request[j],options);}}return object;};/**
     * Converts this PullUserRequest to JSON.
     * @function toJSON
     * @memberof PullUserRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullUserRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullUserRequest;}();$root.UserResult=function(){/**
     * Properties of a UserResult.
     * @exports IUserResult
     * @interface IUserResult
     * @property {IUser} user UserResult user
     * @property {number} code UserResult code
     *//**
     * Constructs a new UserResult.
     * @exports UserResult
     * @classdesc Represents a UserResult.
     * @implements IUserResult
     * @constructor
     * @param {IUserResult=} [properties] Properties to set
     */function UserResult(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * UserResult user.
     * @member {IUser} user
     * @memberof UserResult
     * @instance
     */UserResult.prototype.user=null;/**
     * UserResult code.
     * @member {number} code
     * @memberof UserResult
     * @instance
     */UserResult.prototype.code=0;/**
     * Creates a new UserResult instance using the specified properties.
     * @function create
     * @memberof UserResult
     * @static
     * @param {IUserResult=} [properties] Properties to set
     * @returns {UserResult} UserResult instance
     */UserResult.create=function create(properties){return new UserResult(properties);};/**
     * Encodes the specified UserResult message. Does not implicitly {@link UserResult.verify|verify} messages.
     * @function encode
     * @memberof UserResult
     * @static
     * @param {IUserResult} message UserResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */UserResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();$root.User.encode(message.user,writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);return writer;};/**
     * Encodes the specified UserResult message, length delimited. Does not implicitly {@link UserResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UserResult
     * @static
     * @param {IUserResult} message UserResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */UserResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a UserResult message from the specified reader or buffer.
     * @function decode
     * @memberof UserResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UserResult} UserResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */UserResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.UserResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.user=$root.User.decode(reader,reader.uint32());break;case 2:message.code=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("user"))throw $util.ProtocolError("missing required 'user'",{instance:message});if(!message.hasOwnProperty("code"))throw $util.ProtocolError("missing required 'code'",{instance:message});return message;};/**
     * Decodes a UserResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UserResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UserResult} UserResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */UserResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a UserResult message.
     * @function verify
     * @memberof UserResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */UserResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";{var error=$root.User.verify(message.user);if(error)return"user."+error;}if(!$util.isInteger(message.code))return"code: integer expected";return null;};/**
     * Creates a UserResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UserResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UserResult} UserResult
     */UserResult.fromObject=function fromObject(object){if(object instanceof $root.UserResult)return object;var message=new $root.UserResult();if(object.user!=null){if((0,_typeof3.default)(object.user)!=="object")throw TypeError(".UserResult.user: object expected");message.user=$root.User.fromObject(object.user);}if(object.code!=null)message.code=object.code|0;return message;};/**
     * Creates a plain object from a UserResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UserResult
     * @static
     * @param {UserResult} message UserResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */UserResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.user=null;object.code=0;}if(message.user!=null&&message.hasOwnProperty("user"))object.user=$root.User.toObject(message.user,options);if(message.code!=null&&message.hasOwnProperty("code"))object.code=message.code;return object;};/**
     * Converts this UserResult to JSON.
     * @function toJSON
     * @memberof UserResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */UserResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return UserResult;}();$root.PullUserResult=function(){/**
     * Properties of a PullUserResult.
     * @exports IPullUserResult
     * @interface IPullUserResult
     * @property {Array.<IUserResult>|null} [result] PullUserResult result
     *//**
     * Constructs a new PullUserResult.
     * @exports PullUserResult
     * @classdesc Represents a PullUserResult.
     * @implements IPullUserResult
     * @constructor
     * @param {IPullUserResult=} [properties] Properties to set
     */function PullUserResult(properties){this.result=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PullUserResult result.
     * @member {Array.<IUserResult>} result
     * @memberof PullUserResult
     * @instance
     */PullUserResult.prototype.result=$util.emptyArray;/**
     * Creates a new PullUserResult instance using the specified properties.
     * @function create
     * @memberof PullUserResult
     * @static
     * @param {IPullUserResult=} [properties] Properties to set
     * @returns {PullUserResult} PullUserResult instance
     */PullUserResult.create=function create(properties){return new PullUserResult(properties);};/**
     * Encodes the specified PullUserResult message. Does not implicitly {@link PullUserResult.verify|verify} messages.
     * @function encode
     * @memberof PullUserResult
     * @static
     * @param {IPullUserResult} message PullUserResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullUserResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.result!=null&&message.result.length)for(var i=0;i<message.result.length;++i){$root.UserResult.encode(message.result[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified PullUserResult message, length delimited. Does not implicitly {@link PullUserResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PullUserResult
     * @static
     * @param {IPullUserResult} message PullUserResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PullUserResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PullUserResult message from the specified reader or buffer.
     * @function decode
     * @memberof PullUserResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PullUserResult} PullUserResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullUserResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PullUserResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.result&&message.result.length))message.result=[];message.result.push($root.UserResult.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a PullUserResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PullUserResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PullUserResult} PullUserResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PullUserResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PullUserResult message.
     * @function verify
     * @memberof PullUserResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PullUserResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.result!=null&&message.hasOwnProperty("result")){if(!Array.isArray(message.result))return"result: array expected";for(var i=0;i<message.result.length;++i){var error=$root.UserResult.verify(message.result[i]);if(error)return"result."+error;}}return null;};/**
     * Creates a PullUserResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PullUserResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PullUserResult} PullUserResult
     */PullUserResult.fromObject=function fromObject(object){if(object instanceof $root.PullUserResult)return object;var message=new $root.PullUserResult();if(object.result){if(!Array.isArray(object.result))throw TypeError(".PullUserResult.result: array expected");message.result=[];for(var i=0;i<object.result.length;++i){if((0,_typeof3.default)(object.result[i])!=="object")throw TypeError(".PullUserResult.result: object expected");message.result[i]=$root.UserResult.fromObject(object.result[i]);}}return message;};/**
     * Creates a plain object from a PullUserResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PullUserResult
     * @static
     * @param {PullUserResult} message PullUserResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PullUserResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.result=[];if(message.result&&message.result.length){object.result=[];for(var j=0;j<message.result.length;++j){object.result[j]=$root.UserResult.toObject(message.result[j],options);}}return object;};/**
     * Converts this PullUserResult to JSON.
     * @function toJSON
     * @memberof PullUserResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PullUserResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PullUserResult;}();$root.QuitGroupRequest=function(){/**
     * Properties of a QuitGroupRequest.
     * @exports IQuitGroupRequest
     * @interface IQuitGroupRequest
     * @property {string} groupId QuitGroupRequest groupId
     * @property {Array.<number>|null} [toLine] QuitGroupRequest toLine
     * @property {IMessageContent|null} [notifyContent] QuitGroupRequest notifyContent
     *//**
     * Constructs a new QuitGroupRequest.
     * @exports QuitGroupRequest
     * @classdesc Represents a QuitGroupRequest.
     * @implements IQuitGroupRequest
     * @constructor
     * @param {IQuitGroupRequest=} [properties] Properties to set
     */function QuitGroupRequest(properties){this.toLine=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * QuitGroupRequest groupId.
     * @member {string} groupId
     * @memberof QuitGroupRequest
     * @instance
     */QuitGroupRequest.prototype.groupId="";/**
     * QuitGroupRequest toLine.
     * @member {Array.<number>} toLine
     * @memberof QuitGroupRequest
     * @instance
     */QuitGroupRequest.prototype.toLine=$util.emptyArray;/**
     * QuitGroupRequest notifyContent.
     * @member {IMessageContent|null|undefined} notifyContent
     * @memberof QuitGroupRequest
     * @instance
     */QuitGroupRequest.prototype.notifyContent=null;/**
     * Creates a new QuitGroupRequest instance using the specified properties.
     * @function create
     * @memberof QuitGroupRequest
     * @static
     * @param {IQuitGroupRequest=} [properties] Properties to set
     * @returns {QuitGroupRequest} QuitGroupRequest instance
     */QuitGroupRequest.create=function create(properties){return new QuitGroupRequest(properties);};/**
     * Encodes the specified QuitGroupRequest message. Does not implicitly {@link QuitGroupRequest.verify|verify} messages.
     * @function encode
     * @memberof QuitGroupRequest
     * @static
     * @param {IQuitGroupRequest} message QuitGroupRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */QuitGroupRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);if(message.toLine!=null&&message.toLine.length)for(var i=0;i<message.toLine.length;++i){writer.uint32(/* id 2, wireType 0 =*/16).int32(message.toLine[i]);}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))$root.MessageContent.encode(message.notifyContent,writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();return writer;};/**
     * Encodes the specified QuitGroupRequest message, length delimited. Does not implicitly {@link QuitGroupRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof QuitGroupRequest
     * @static
     * @param {IQuitGroupRequest} message QuitGroupRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */QuitGroupRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a QuitGroupRequest message from the specified reader or buffer.
     * @function decode
     * @memberof QuitGroupRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {QuitGroupRequest} QuitGroupRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */QuitGroupRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.QuitGroupRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.groupId=reader.string();break;case 2:if(!(message.toLine&&message.toLine.length))message.toLine=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.toLine.push(reader.int32());}}else message.toLine.push(reader.int32());break;case 3:message.notifyContent=$root.MessageContent.decode(reader,reader.uint32());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});return message;};/**
     * Decodes a QuitGroupRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof QuitGroupRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {QuitGroupRequest} QuitGroupRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */QuitGroupRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a QuitGroupRequest message.
     * @function verify
     * @memberof QuitGroupRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */QuitGroupRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(message.toLine!=null&&message.hasOwnProperty("toLine")){if(!Array.isArray(message.toLine))return"toLine: array expected";for(var i=0;i<message.toLine.length;++i){if(!$util.isInteger(message.toLine[i]))return"toLine: integer[] expected";}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent")){var error=$root.MessageContent.verify(message.notifyContent);if(error)return"notifyContent."+error;}return null;};/**
     * Creates a QuitGroupRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof QuitGroupRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {QuitGroupRequest} QuitGroupRequest
     */QuitGroupRequest.fromObject=function fromObject(object){if(object instanceof $root.QuitGroupRequest)return object;var message=new $root.QuitGroupRequest();if(object.groupId!=null)message.groupId=String(object.groupId);if(object.toLine){if(!Array.isArray(object.toLine))throw TypeError(".QuitGroupRequest.toLine: array expected");message.toLine=[];for(var i=0;i<object.toLine.length;++i){message.toLine[i]=object.toLine[i]|0;}}if(object.notifyContent!=null){if((0,_typeof3.default)(object.notifyContent)!=="object")throw TypeError(".QuitGroupRequest.notifyContent: object expected");message.notifyContent=$root.MessageContent.fromObject(object.notifyContent);}return message;};/**
     * Creates a plain object from a QuitGroupRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof QuitGroupRequest
     * @static
     * @param {QuitGroupRequest} message QuitGroupRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */QuitGroupRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.toLine=[];if(options.defaults){object.groupId="";object.notifyContent=null;}if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.toLine&&message.toLine.length){object.toLine=[];for(var j=0;j<message.toLine.length;++j){object.toLine[j]=message.toLine[j];}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))object.notifyContent=$root.MessageContent.toObject(message.notifyContent,options);return object;};/**
     * Converts this QuitGroupRequest to JSON.
     * @function toJSON
     * @memberof QuitGroupRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */QuitGroupRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return QuitGroupRequest;}();$root.RemoveGroupMemberRequest=function(){/**
     * Properties of a RemoveGroupMemberRequest.
     * @exports IRemoveGroupMemberRequest
     * @interface IRemoveGroupMemberRequest
     * @property {string} groupId RemoveGroupMemberRequest groupId
     * @property {Array.<string>|null} [removedMember] RemoveGroupMemberRequest removedMember
     * @property {Array.<number>|null} [toLine] RemoveGroupMemberRequest toLine
     * @property {IMessageContent|null} [notifyContent] RemoveGroupMemberRequest notifyContent
     *//**
     * Constructs a new RemoveGroupMemberRequest.
     * @exports RemoveGroupMemberRequest
     * @classdesc Represents a RemoveGroupMemberRequest.
     * @implements IRemoveGroupMemberRequest
     * @constructor
     * @param {IRemoveGroupMemberRequest=} [properties] Properties to set
     */function RemoveGroupMemberRequest(properties){this.removedMember=[];this.toLine=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * RemoveGroupMemberRequest groupId.
     * @member {string} groupId
     * @memberof RemoveGroupMemberRequest
     * @instance
     */RemoveGroupMemberRequest.prototype.groupId="";/**
     * RemoveGroupMemberRequest removedMember.
     * @member {Array.<string>} removedMember
     * @memberof RemoveGroupMemberRequest
     * @instance
     */RemoveGroupMemberRequest.prototype.removedMember=$util.emptyArray;/**
     * RemoveGroupMemberRequest toLine.
     * @member {Array.<number>} toLine
     * @memberof RemoveGroupMemberRequest
     * @instance
     */RemoveGroupMemberRequest.prototype.toLine=$util.emptyArray;/**
     * RemoveGroupMemberRequest notifyContent.
     * @member {IMessageContent|null|undefined} notifyContent
     * @memberof RemoveGroupMemberRequest
     * @instance
     */RemoveGroupMemberRequest.prototype.notifyContent=null;/**
     * Creates a new RemoveGroupMemberRequest instance using the specified properties.
     * @function create
     * @memberof RemoveGroupMemberRequest
     * @static
     * @param {IRemoveGroupMemberRequest=} [properties] Properties to set
     * @returns {RemoveGroupMemberRequest} RemoveGroupMemberRequest instance
     */RemoveGroupMemberRequest.create=function create(properties){return new RemoveGroupMemberRequest(properties);};/**
     * Encodes the specified RemoveGroupMemberRequest message. Does not implicitly {@link RemoveGroupMemberRequest.verify|verify} messages.
     * @function encode
     * @memberof RemoveGroupMemberRequest
     * @static
     * @param {IRemoveGroupMemberRequest} message RemoveGroupMemberRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RemoveGroupMemberRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);if(message.removedMember!=null&&message.removedMember.length)for(var i=0;i<message.removedMember.length;++i){writer.uint32(/* id 2, wireType 2 =*/18).string(message.removedMember[i]);}if(message.toLine!=null&&message.toLine.length)for(var i=0;i<message.toLine.length;++i){writer.uint32(/* id 3, wireType 0 =*/24).int32(message.toLine[i]);}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))$root.MessageContent.encode(message.notifyContent,writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();return writer;};/**
     * Encodes the specified RemoveGroupMemberRequest message, length delimited. Does not implicitly {@link RemoveGroupMemberRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof RemoveGroupMemberRequest
     * @static
     * @param {IRemoveGroupMemberRequest} message RemoveGroupMemberRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RemoveGroupMemberRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a RemoveGroupMemberRequest message from the specified reader or buffer.
     * @function decode
     * @memberof RemoveGroupMemberRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {RemoveGroupMemberRequest} RemoveGroupMemberRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RemoveGroupMemberRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.RemoveGroupMemberRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.groupId=reader.string();break;case 2:if(!(message.removedMember&&message.removedMember.length))message.removedMember=[];message.removedMember.push(reader.string());break;case 3:if(!(message.toLine&&message.toLine.length))message.toLine=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.toLine.push(reader.int32());}}else message.toLine.push(reader.int32());break;case 4:message.notifyContent=$root.MessageContent.decode(reader,reader.uint32());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});return message;};/**
     * Decodes a RemoveGroupMemberRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof RemoveGroupMemberRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {RemoveGroupMemberRequest} RemoveGroupMemberRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RemoveGroupMemberRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a RemoveGroupMemberRequest message.
     * @function verify
     * @memberof RemoveGroupMemberRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */RemoveGroupMemberRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(message.removedMember!=null&&message.hasOwnProperty("removedMember")){if(!Array.isArray(message.removedMember))return"removedMember: array expected";for(var i=0;i<message.removedMember.length;++i){if(!$util.isString(message.removedMember[i]))return"removedMember: string[] expected";}}if(message.toLine!=null&&message.hasOwnProperty("toLine")){if(!Array.isArray(message.toLine))return"toLine: array expected";for(var i=0;i<message.toLine.length;++i){if(!$util.isInteger(message.toLine[i]))return"toLine: integer[] expected";}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent")){var error=$root.MessageContent.verify(message.notifyContent);if(error)return"notifyContent."+error;}return null;};/**
     * Creates a RemoveGroupMemberRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof RemoveGroupMemberRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {RemoveGroupMemberRequest} RemoveGroupMemberRequest
     */RemoveGroupMemberRequest.fromObject=function fromObject(object){if(object instanceof $root.RemoveGroupMemberRequest)return object;var message=new $root.RemoveGroupMemberRequest();if(object.groupId!=null)message.groupId=String(object.groupId);if(object.removedMember){if(!Array.isArray(object.removedMember))throw TypeError(".RemoveGroupMemberRequest.removedMember: array expected");message.removedMember=[];for(var i=0;i<object.removedMember.length;++i){message.removedMember[i]=String(object.removedMember[i]);}}if(object.toLine){if(!Array.isArray(object.toLine))throw TypeError(".RemoveGroupMemberRequest.toLine: array expected");message.toLine=[];for(var i=0;i<object.toLine.length;++i){message.toLine[i]=object.toLine[i]|0;}}if(object.notifyContent!=null){if((0,_typeof3.default)(object.notifyContent)!=="object")throw TypeError(".RemoveGroupMemberRequest.notifyContent: object expected");message.notifyContent=$root.MessageContent.fromObject(object.notifyContent);}return message;};/**
     * Creates a plain object from a RemoveGroupMemberRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof RemoveGroupMemberRequest
     * @static
     * @param {RemoveGroupMemberRequest} message RemoveGroupMemberRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */RemoveGroupMemberRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults){object.removedMember=[];object.toLine=[];}if(options.defaults){object.groupId="";object.notifyContent=null;}if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.removedMember&&message.removedMember.length){object.removedMember=[];for(var j=0;j<message.removedMember.length;++j){object.removedMember[j]=message.removedMember[j];}}if(message.toLine&&message.toLine.length){object.toLine=[];for(var j=0;j<message.toLine.length;++j){object.toLine[j]=message.toLine[j];}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))object.notifyContent=$root.MessageContent.toObject(message.notifyContent,options);return object;};/**
     * Converts this RemoveGroupMemberRequest to JSON.
     * @function toJSON
     * @memberof RemoveGroupMemberRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */RemoveGroupMemberRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return RemoveGroupMemberRequest;}();$root.TransferGroupRequest=function(){/**
     * Properties of a TransferGroupRequest.
     * @exports ITransferGroupRequest
     * @interface ITransferGroupRequest
     * @property {string} groupId TransferGroupRequest groupId
     * @property {string} newOwner TransferGroupRequest newOwner
     * @property {Array.<number>|null} [toLine] TransferGroupRequest toLine
     * @property {IMessageContent|null} [notifyContent] TransferGroupRequest notifyContent
     *//**
     * Constructs a new TransferGroupRequest.
     * @exports TransferGroupRequest
     * @classdesc Represents a TransferGroupRequest.
     * @implements ITransferGroupRequest
     * @constructor
     * @param {ITransferGroupRequest=} [properties] Properties to set
     */function TransferGroupRequest(properties){this.toLine=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * TransferGroupRequest groupId.
     * @member {string} groupId
     * @memberof TransferGroupRequest
     * @instance
     */TransferGroupRequest.prototype.groupId="";/**
     * TransferGroupRequest newOwner.
     * @member {string} newOwner
     * @memberof TransferGroupRequest
     * @instance
     */TransferGroupRequest.prototype.newOwner="";/**
     * TransferGroupRequest toLine.
     * @member {Array.<number>} toLine
     * @memberof TransferGroupRequest
     * @instance
     */TransferGroupRequest.prototype.toLine=$util.emptyArray;/**
     * TransferGroupRequest notifyContent.
     * @member {IMessageContent|null|undefined} notifyContent
     * @memberof TransferGroupRequest
     * @instance
     */TransferGroupRequest.prototype.notifyContent=null;/**
     * Creates a new TransferGroupRequest instance using the specified properties.
     * @function create
     * @memberof TransferGroupRequest
     * @static
     * @param {ITransferGroupRequest=} [properties] Properties to set
     * @returns {TransferGroupRequest} TransferGroupRequest instance
     */TransferGroupRequest.create=function create(properties){return new TransferGroupRequest(properties);};/**
     * Encodes the specified TransferGroupRequest message. Does not implicitly {@link TransferGroupRequest.verify|verify} messages.
     * @function encode
     * @memberof TransferGroupRequest
     * @static
     * @param {ITransferGroupRequest} message TransferGroupRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */TransferGroupRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.newOwner);if(message.toLine!=null&&message.toLine.length)for(var i=0;i<message.toLine.length;++i){writer.uint32(/* id 3, wireType 0 =*/24).int32(message.toLine[i]);}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))$root.MessageContent.encode(message.notifyContent,writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();return writer;};/**
     * Encodes the specified TransferGroupRequest message, length delimited. Does not implicitly {@link TransferGroupRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TransferGroupRequest
     * @static
     * @param {ITransferGroupRequest} message TransferGroupRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */TransferGroupRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a TransferGroupRequest message from the specified reader or buffer.
     * @function decode
     * @memberof TransferGroupRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TransferGroupRequest} TransferGroupRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */TransferGroupRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.TransferGroupRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.groupId=reader.string();break;case 2:message.newOwner=reader.string();break;case 3:if(!(message.toLine&&message.toLine.length))message.toLine=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.toLine.push(reader.int32());}}else message.toLine.push(reader.int32());break;case 4:message.notifyContent=$root.MessageContent.decode(reader,reader.uint32());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});if(!message.hasOwnProperty("newOwner"))throw $util.ProtocolError("missing required 'newOwner'",{instance:message});return message;};/**
     * Decodes a TransferGroupRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TransferGroupRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TransferGroupRequest} TransferGroupRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */TransferGroupRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a TransferGroupRequest message.
     * @function verify
     * @memberof TransferGroupRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */TransferGroupRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(!$util.isString(message.newOwner))return"newOwner: string expected";if(message.toLine!=null&&message.hasOwnProperty("toLine")){if(!Array.isArray(message.toLine))return"toLine: array expected";for(var i=0;i<message.toLine.length;++i){if(!$util.isInteger(message.toLine[i]))return"toLine: integer[] expected";}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent")){var error=$root.MessageContent.verify(message.notifyContent);if(error)return"notifyContent."+error;}return null;};/**
     * Creates a TransferGroupRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TransferGroupRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TransferGroupRequest} TransferGroupRequest
     */TransferGroupRequest.fromObject=function fromObject(object){if(object instanceof $root.TransferGroupRequest)return object;var message=new $root.TransferGroupRequest();if(object.groupId!=null)message.groupId=String(object.groupId);if(object.newOwner!=null)message.newOwner=String(object.newOwner);if(object.toLine){if(!Array.isArray(object.toLine))throw TypeError(".TransferGroupRequest.toLine: array expected");message.toLine=[];for(var i=0;i<object.toLine.length;++i){message.toLine[i]=object.toLine[i]|0;}}if(object.notifyContent!=null){if((0,_typeof3.default)(object.notifyContent)!=="object")throw TypeError(".TransferGroupRequest.notifyContent: object expected");message.notifyContent=$root.MessageContent.fromObject(object.notifyContent);}return message;};/**
     * Creates a plain object from a TransferGroupRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TransferGroupRequest
     * @static
     * @param {TransferGroupRequest} message TransferGroupRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */TransferGroupRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.toLine=[];if(options.defaults){object.groupId="";object.newOwner="";object.notifyContent=null;}if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.newOwner!=null&&message.hasOwnProperty("newOwner"))object.newOwner=message.newOwner;if(message.toLine&&message.toLine.length){object.toLine=[];for(var j=0;j<message.toLine.length;++j){object.toLine[j]=message.toLine[j];}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))object.notifyContent=$root.MessageContent.toObject(message.notifyContent,options);return object;};/**
     * Converts this TransferGroupRequest to JSON.
     * @function toJSON
     * @memberof TransferGroupRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */TransferGroupRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return TransferGroupRequest;}();$root.ModifyGroupMemberAlias=function(){/**
     * Properties of a ModifyGroupMemberAlias.
     * @exports IModifyGroupMemberAlias
     * @interface IModifyGroupMemberAlias
     * @property {string} groupId ModifyGroupMemberAlias groupId
     * @property {string} alias ModifyGroupMemberAlias alias
     * @property {Array.<number>|null} [toLine] ModifyGroupMemberAlias toLine
     * @property {IMessageContent|null} [notifyContent] ModifyGroupMemberAlias notifyContent
     * @property {string|null} [memberId] ModifyGroupMemberAlias memberId
     *//**
     * Constructs a new ModifyGroupMemberAlias.
     * @exports ModifyGroupMemberAlias
     * @classdesc Represents a ModifyGroupMemberAlias.
     * @implements IModifyGroupMemberAlias
     * @constructor
     * @param {IModifyGroupMemberAlias=} [properties] Properties to set
     */function ModifyGroupMemberAlias(properties){this.toLine=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ModifyGroupMemberAlias groupId.
     * @member {string} groupId
     * @memberof ModifyGroupMemberAlias
     * @instance
     */ModifyGroupMemberAlias.prototype.groupId="";/**
     * ModifyGroupMemberAlias alias.
     * @member {string} alias
     * @memberof ModifyGroupMemberAlias
     * @instance
     */ModifyGroupMemberAlias.prototype.alias="";/**
     * ModifyGroupMemberAlias toLine.
     * @member {Array.<number>} toLine
     * @memberof ModifyGroupMemberAlias
     * @instance
     */ModifyGroupMemberAlias.prototype.toLine=$util.emptyArray;/**
     * ModifyGroupMemberAlias notifyContent.
     * @member {IMessageContent|null|undefined} notifyContent
     * @memberof ModifyGroupMemberAlias
     * @instance
     */ModifyGroupMemberAlias.prototype.notifyContent=null;/**
     * ModifyGroupMemberAlias memberId.
     * @member {string} memberId
     * @memberof ModifyGroupMemberAlias
     * @instance
     */ModifyGroupMemberAlias.prototype.memberId="";/**
     * Creates a new ModifyGroupMemberAlias instance using the specified properties.
     * @function create
     * @memberof ModifyGroupMemberAlias
     * @static
     * @param {IModifyGroupMemberAlias=} [properties] Properties to set
     * @returns {ModifyGroupMemberAlias} ModifyGroupMemberAlias instance
     */ModifyGroupMemberAlias.create=function create(properties){return new ModifyGroupMemberAlias(properties);};/**
     * Encodes the specified ModifyGroupMemberAlias message. Does not implicitly {@link ModifyGroupMemberAlias.verify|verify} messages.
     * @function encode
     * @memberof ModifyGroupMemberAlias
     * @static
     * @param {IModifyGroupMemberAlias} message ModifyGroupMemberAlias message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyGroupMemberAlias.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.alias);if(message.toLine!=null&&message.toLine.length)for(var i=0;i<message.toLine.length;++i){writer.uint32(/* id 3, wireType 0 =*/24).int32(message.toLine[i]);}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))$root.MessageContent.encode(message.notifyContent,writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();if(message.memberId!=null&&message.hasOwnProperty("memberId"))writer.uint32(/* id 5, wireType 2 =*/42).string(message.memberId);return writer;};/**
     * Encodes the specified ModifyGroupMemberAlias message, length delimited. Does not implicitly {@link ModifyGroupMemberAlias.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ModifyGroupMemberAlias
     * @static
     * @param {IModifyGroupMemberAlias} message ModifyGroupMemberAlias message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyGroupMemberAlias.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ModifyGroupMemberAlias message from the specified reader or buffer.
     * @function decode
     * @memberof ModifyGroupMemberAlias
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ModifyGroupMemberAlias} ModifyGroupMemberAlias
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyGroupMemberAlias.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ModifyGroupMemberAlias();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.groupId=reader.string();break;case 2:message.alias=reader.string();break;case 3:if(!(message.toLine&&message.toLine.length))message.toLine=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.toLine.push(reader.int32());}}else message.toLine.push(reader.int32());break;case 4:message.notifyContent=$root.MessageContent.decode(reader,reader.uint32());break;case 5:message.memberId=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});if(!message.hasOwnProperty("alias"))throw $util.ProtocolError("missing required 'alias'",{instance:message});return message;};/**
     * Decodes a ModifyGroupMemberAlias message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ModifyGroupMemberAlias
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ModifyGroupMemberAlias} ModifyGroupMemberAlias
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyGroupMemberAlias.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ModifyGroupMemberAlias message.
     * @function verify
     * @memberof ModifyGroupMemberAlias
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ModifyGroupMemberAlias.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(!$util.isString(message.alias))return"alias: string expected";if(message.toLine!=null&&message.hasOwnProperty("toLine")){if(!Array.isArray(message.toLine))return"toLine: array expected";for(var i=0;i<message.toLine.length;++i){if(!$util.isInteger(message.toLine[i]))return"toLine: integer[] expected";}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent")){var error=$root.MessageContent.verify(message.notifyContent);if(error)return"notifyContent."+error;}if(message.memberId!=null&&message.hasOwnProperty("memberId"))if(!$util.isString(message.memberId))return"memberId: string expected";return null;};/**
     * Creates a ModifyGroupMemberAlias message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ModifyGroupMemberAlias
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ModifyGroupMemberAlias} ModifyGroupMemberAlias
     */ModifyGroupMemberAlias.fromObject=function fromObject(object){if(object instanceof $root.ModifyGroupMemberAlias)return object;var message=new $root.ModifyGroupMemberAlias();if(object.groupId!=null)message.groupId=String(object.groupId);if(object.alias!=null)message.alias=String(object.alias);if(object.toLine){if(!Array.isArray(object.toLine))throw TypeError(".ModifyGroupMemberAlias.toLine: array expected");message.toLine=[];for(var i=0;i<object.toLine.length;++i){message.toLine[i]=object.toLine[i]|0;}}if(object.notifyContent!=null){if((0,_typeof3.default)(object.notifyContent)!=="object")throw TypeError(".ModifyGroupMemberAlias.notifyContent: object expected");message.notifyContent=$root.MessageContent.fromObject(object.notifyContent);}if(object.memberId!=null)message.memberId=String(object.memberId);return message;};/**
     * Creates a plain object from a ModifyGroupMemberAlias message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ModifyGroupMemberAlias
     * @static
     * @param {ModifyGroupMemberAlias} message ModifyGroupMemberAlias
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ModifyGroupMemberAlias.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.toLine=[];if(options.defaults){object.groupId="";object.alias="";object.notifyContent=null;object.memberId="";}if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.alias!=null&&message.hasOwnProperty("alias"))object.alias=message.alias;if(message.toLine&&message.toLine.length){object.toLine=[];for(var j=0;j<message.toLine.length;++j){object.toLine[j]=message.toLine[j];}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))object.notifyContent=$root.MessageContent.toObject(message.notifyContent,options);if(message.memberId!=null&&message.hasOwnProperty("memberId"))object.memberId=message.memberId;return object;};/**
     * Converts this ModifyGroupMemberAlias to JSON.
     * @function toJSON
     * @memberof ModifyGroupMemberAlias
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ModifyGroupMemberAlias.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ModifyGroupMemberAlias;}();$root.ModifyGroupMemberExtra=function(){/**
     * Properties of a ModifyGroupMemberExtra.
     * @exports IModifyGroupMemberExtra
     * @interface IModifyGroupMemberExtra
     * @property {string} groupId ModifyGroupMemberExtra groupId
     * @property {Array.<number>|null} [toLine] ModifyGroupMemberExtra toLine
     * @property {IMessageContent|null} [notifyContent] ModifyGroupMemberExtra notifyContent
     * @property {string|null} [extra] ModifyGroupMemberExtra extra
     * @property {string|null} [memberId] ModifyGroupMemberExtra memberId
     *//**
     * Constructs a new ModifyGroupMemberExtra.
     * @exports ModifyGroupMemberExtra
     * @classdesc Represents a ModifyGroupMemberExtra.
     * @implements IModifyGroupMemberExtra
     * @constructor
     * @param {IModifyGroupMemberExtra=} [properties] Properties to set
     */function ModifyGroupMemberExtra(properties){this.toLine=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ModifyGroupMemberExtra groupId.
     * @member {string} groupId
     * @memberof ModifyGroupMemberExtra
     * @instance
     */ModifyGroupMemberExtra.prototype.groupId="";/**
     * ModifyGroupMemberExtra toLine.
     * @member {Array.<number>} toLine
     * @memberof ModifyGroupMemberExtra
     * @instance
     */ModifyGroupMemberExtra.prototype.toLine=$util.emptyArray;/**
     * ModifyGroupMemberExtra notifyContent.
     * @member {IMessageContent|null|undefined} notifyContent
     * @memberof ModifyGroupMemberExtra
     * @instance
     */ModifyGroupMemberExtra.prototype.notifyContent=null;/**
     * ModifyGroupMemberExtra extra.
     * @member {string} extra
     * @memberof ModifyGroupMemberExtra
     * @instance
     */ModifyGroupMemberExtra.prototype.extra="";/**
     * ModifyGroupMemberExtra memberId.
     * @member {string} memberId
     * @memberof ModifyGroupMemberExtra
     * @instance
     */ModifyGroupMemberExtra.prototype.memberId="";/**
     * Creates a new ModifyGroupMemberExtra instance using the specified properties.
     * @function create
     * @memberof ModifyGroupMemberExtra
     * @static
     * @param {IModifyGroupMemberExtra=} [properties] Properties to set
     * @returns {ModifyGroupMemberExtra} ModifyGroupMemberExtra instance
     */ModifyGroupMemberExtra.create=function create(properties){return new ModifyGroupMemberExtra(properties);};/**
     * Encodes the specified ModifyGroupMemberExtra message. Does not implicitly {@link ModifyGroupMemberExtra.verify|verify} messages.
     * @function encode
     * @memberof ModifyGroupMemberExtra
     * @static
     * @param {IModifyGroupMemberExtra} message ModifyGroupMemberExtra message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyGroupMemberExtra.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);if(message.toLine!=null&&message.toLine.length)for(var i=0;i<message.toLine.length;++i){writer.uint32(/* id 2, wireType 0 =*/16).int32(message.toLine[i]);}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))$root.MessageContent.encode(message.notifyContent,writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.extra);if(message.memberId!=null&&message.hasOwnProperty("memberId"))writer.uint32(/* id 5, wireType 2 =*/42).string(message.memberId);return writer;};/**
     * Encodes the specified ModifyGroupMemberExtra message, length delimited. Does not implicitly {@link ModifyGroupMemberExtra.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ModifyGroupMemberExtra
     * @static
     * @param {IModifyGroupMemberExtra} message ModifyGroupMemberExtra message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyGroupMemberExtra.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ModifyGroupMemberExtra message from the specified reader or buffer.
     * @function decode
     * @memberof ModifyGroupMemberExtra
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ModifyGroupMemberExtra} ModifyGroupMemberExtra
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyGroupMemberExtra.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ModifyGroupMemberExtra();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.groupId=reader.string();break;case 2:if(!(message.toLine&&message.toLine.length))message.toLine=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.toLine.push(reader.int32());}}else message.toLine.push(reader.int32());break;case 3:message.notifyContent=$root.MessageContent.decode(reader,reader.uint32());break;case 4:message.extra=reader.string();break;case 5:message.memberId=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("groupId"))throw $util.ProtocolError("missing required 'groupId'",{instance:message});return message;};/**
     * Decodes a ModifyGroupMemberExtra message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ModifyGroupMemberExtra
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ModifyGroupMemberExtra} ModifyGroupMemberExtra
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyGroupMemberExtra.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ModifyGroupMemberExtra message.
     * @function verify
     * @memberof ModifyGroupMemberExtra
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ModifyGroupMemberExtra.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.groupId))return"groupId: string expected";if(message.toLine!=null&&message.hasOwnProperty("toLine")){if(!Array.isArray(message.toLine))return"toLine: array expected";for(var i=0;i<message.toLine.length;++i){if(!$util.isInteger(message.toLine[i]))return"toLine: integer[] expected";}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent")){var error=$root.MessageContent.verify(message.notifyContent);if(error)return"notifyContent."+error;}if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";if(message.memberId!=null&&message.hasOwnProperty("memberId"))if(!$util.isString(message.memberId))return"memberId: string expected";return null;};/**
     * Creates a ModifyGroupMemberExtra message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ModifyGroupMemberExtra
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ModifyGroupMemberExtra} ModifyGroupMemberExtra
     */ModifyGroupMemberExtra.fromObject=function fromObject(object){if(object instanceof $root.ModifyGroupMemberExtra)return object;var message=new $root.ModifyGroupMemberExtra();if(object.groupId!=null)message.groupId=String(object.groupId);if(object.toLine){if(!Array.isArray(object.toLine))throw TypeError(".ModifyGroupMemberExtra.toLine: array expected");message.toLine=[];for(var i=0;i<object.toLine.length;++i){message.toLine[i]=object.toLine[i]|0;}}if(object.notifyContent!=null){if((0,_typeof3.default)(object.notifyContent)!=="object")throw TypeError(".ModifyGroupMemberExtra.notifyContent: object expected");message.notifyContent=$root.MessageContent.fromObject(object.notifyContent);}if(object.extra!=null)message.extra=String(object.extra);if(object.memberId!=null)message.memberId=String(object.memberId);return message;};/**
     * Creates a plain object from a ModifyGroupMemberExtra message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ModifyGroupMemberExtra
     * @static
     * @param {ModifyGroupMemberExtra} message ModifyGroupMemberExtra
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ModifyGroupMemberExtra.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.toLine=[];if(options.defaults){object.groupId="";object.notifyContent=null;object.extra="";object.memberId="";}if(message.groupId!=null&&message.hasOwnProperty("groupId"))object.groupId=message.groupId;if(message.toLine&&message.toLine.length){object.toLine=[];for(var j=0;j<message.toLine.length;++j){object.toLine[j]=message.toLine[j];}}if(message.notifyContent!=null&&message.hasOwnProperty("notifyContent"))object.notifyContent=$root.MessageContent.toObject(message.notifyContent,options);if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;if(message.memberId!=null&&message.hasOwnProperty("memberId"))object.memberId=message.memberId;return object;};/**
     * Converts this ModifyGroupMemberExtra to JSON.
     * @function toJSON
     * @memberof ModifyGroupMemberExtra
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ModifyGroupMemberExtra.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ModifyGroupMemberExtra;}();$root.UserSettingEntry=function(){/**
     * Properties of a UserSettingEntry.
     * @exports IUserSettingEntry
     * @interface IUserSettingEntry
     * @property {number} scope UserSettingEntry scope
     * @property {string} key UserSettingEntry key
     * @property {string} value UserSettingEntry value
     * @property {Long} updateDt UserSettingEntry updateDt
     *//**
     * Constructs a new UserSettingEntry.
     * @exports UserSettingEntry
     * @classdesc Represents a UserSettingEntry.
     * @implements IUserSettingEntry
     * @constructor
     * @param {IUserSettingEntry=} [properties] Properties to set
     */function UserSettingEntry(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * UserSettingEntry scope.
     * @member {number} scope
     * @memberof UserSettingEntry
     * @instance
     */UserSettingEntry.prototype.scope=0;/**
     * UserSettingEntry key.
     * @member {string} key
     * @memberof UserSettingEntry
     * @instance
     */UserSettingEntry.prototype.key="";/**
     * UserSettingEntry value.
     * @member {string} value
     * @memberof UserSettingEntry
     * @instance
     */UserSettingEntry.prototype.value="";/**
     * UserSettingEntry updateDt.
     * @member {Long} updateDt
     * @memberof UserSettingEntry
     * @instance
     */UserSettingEntry.prototype.updateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new UserSettingEntry instance using the specified properties.
     * @function create
     * @memberof UserSettingEntry
     * @static
     * @param {IUserSettingEntry=} [properties] Properties to set
     * @returns {UserSettingEntry} UserSettingEntry instance
     */UserSettingEntry.create=function create(properties){return new UserSettingEntry(properties);};/**
     * Encodes the specified UserSettingEntry message. Does not implicitly {@link UserSettingEntry.verify|verify} messages.
     * @function encode
     * @memberof UserSettingEntry
     * @static
     * @param {IUserSettingEntry} message UserSettingEntry message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */UserSettingEntry.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.scope);writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);writer.uint32(/* id 3, wireType 2 =*/26).string(message.value);writer.uint32(/* id 4, wireType 0 =*/32).int64(message.updateDt);return writer;};/**
     * Encodes the specified UserSettingEntry message, length delimited. Does not implicitly {@link UserSettingEntry.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UserSettingEntry
     * @static
     * @param {IUserSettingEntry} message UserSettingEntry message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */UserSettingEntry.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a UserSettingEntry message from the specified reader or buffer.
     * @function decode
     * @memberof UserSettingEntry
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UserSettingEntry} UserSettingEntry
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */UserSettingEntry.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.UserSettingEntry();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.scope=reader.int32();break;case 2:message.key=reader.string();break;case 3:message.value=reader.string();break;case 4:message.updateDt=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("scope"))throw $util.ProtocolError("missing required 'scope'",{instance:message});if(!message.hasOwnProperty("key"))throw $util.ProtocolError("missing required 'key'",{instance:message});if(!message.hasOwnProperty("value"))throw $util.ProtocolError("missing required 'value'",{instance:message});if(!message.hasOwnProperty("updateDt"))throw $util.ProtocolError("missing required 'updateDt'",{instance:message});return message;};/**
     * Decodes a UserSettingEntry message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UserSettingEntry
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UserSettingEntry} UserSettingEntry
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */UserSettingEntry.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a UserSettingEntry message.
     * @function verify
     * @memberof UserSettingEntry
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */UserSettingEntry.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.scope))return"scope: integer expected";if(!$util.isString(message.key))return"key: string expected";if(!$util.isString(message.value))return"value: string expected";if(!$util.isInteger(message.updateDt)&&!(message.updateDt&&$util.isInteger(message.updateDt.low)&&$util.isInteger(message.updateDt.high)))return"updateDt: integer|Long expected";return null;};/**
     * Creates a UserSettingEntry message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UserSettingEntry
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UserSettingEntry} UserSettingEntry
     */UserSettingEntry.fromObject=function fromObject(object){if(object instanceof $root.UserSettingEntry)return object;var message=new $root.UserSettingEntry();if(object.scope!=null)message.scope=object.scope|0;if(object.key!=null)message.key=String(object.key);if(object.value!=null)message.value=String(object.value);if(object.updateDt!=null)if($util.Long)(message.updateDt=$util.Long.fromValue(object.updateDt)).unsigned=false;else if(typeof object.updateDt==="string")message.updateDt=parseInt(object.updateDt,10);else if(typeof object.updateDt==="number")message.updateDt=object.updateDt;else if((0,_typeof3.default)(object.updateDt)==="object")message.updateDt=new $util.LongBits(object.updateDt.low>>>0,object.updateDt.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a UserSettingEntry message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UserSettingEntry
     * @static
     * @param {UserSettingEntry} message UserSettingEntry
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */UserSettingEntry.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.scope=0;object.key="";object.value="";if($util.Long){var long=new $util.Long(0,0,false);object.updateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.updateDt=options.longs===String?"0":0;}if(message.scope!=null&&message.hasOwnProperty("scope"))object.scope=message.scope;if(message.key!=null&&message.hasOwnProperty("key"))object.key=message.key;if(message.value!=null&&message.hasOwnProperty("value"))object.value=message.value;if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(typeof message.updateDt==="number")object.updateDt=options.longs===String?String(message.updateDt):message.updateDt;else object.updateDt=options.longs===String?$util.Long.prototype.toString.call(message.updateDt):options.longs===Number?new $util.LongBits(message.updateDt.low>>>0,message.updateDt.high>>>0).toNumber():message.updateDt;return object;};/**
     * Converts this UserSettingEntry to JSON.
     * @function toJSON
     * @memberof UserSettingEntry
     * @instance
     * @returns {Object.<string,*>} JSON object
     */UserSettingEntry.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return UserSettingEntry;}();$root.ModifyUserSettingReq=function(){/**
     * Properties of a ModifyUserSettingReq.
     * @exports IModifyUserSettingReq
     * @interface IModifyUserSettingReq
     * @property {number} scope ModifyUserSettingReq scope
     * @property {string} key ModifyUserSettingReq key
     * @property {string} value ModifyUserSettingReq value
     * @property {Array.<string>|null} [target] ModifyUserSettingReq target
     *//**
     * Constructs a new ModifyUserSettingReq.
     * @exports ModifyUserSettingReq
     * @classdesc Represents a ModifyUserSettingReq.
     * @implements IModifyUserSettingReq
     * @constructor
     * @param {IModifyUserSettingReq=} [properties] Properties to set
     */function ModifyUserSettingReq(properties){this.target=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ModifyUserSettingReq scope.
     * @member {number} scope
     * @memberof ModifyUserSettingReq
     * @instance
     */ModifyUserSettingReq.prototype.scope=0;/**
     * ModifyUserSettingReq key.
     * @member {string} key
     * @memberof ModifyUserSettingReq
     * @instance
     */ModifyUserSettingReq.prototype.key="";/**
     * ModifyUserSettingReq value.
     * @member {string} value
     * @memberof ModifyUserSettingReq
     * @instance
     */ModifyUserSettingReq.prototype.value="";/**
     * ModifyUserSettingReq target.
     * @member {Array.<string>} target
     * @memberof ModifyUserSettingReq
     * @instance
     */ModifyUserSettingReq.prototype.target=$util.emptyArray;/**
     * Creates a new ModifyUserSettingReq instance using the specified properties.
     * @function create
     * @memberof ModifyUserSettingReq
     * @static
     * @param {IModifyUserSettingReq=} [properties] Properties to set
     * @returns {ModifyUserSettingReq} ModifyUserSettingReq instance
     */ModifyUserSettingReq.create=function create(properties){return new ModifyUserSettingReq(properties);};/**
     * Encodes the specified ModifyUserSettingReq message. Does not implicitly {@link ModifyUserSettingReq.verify|verify} messages.
     * @function encode
     * @memberof ModifyUserSettingReq
     * @static
     * @param {IModifyUserSettingReq} message ModifyUserSettingReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyUserSettingReq.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.scope);writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);writer.uint32(/* id 3, wireType 2 =*/26).string(message.value);if(message.target!=null&&message.target.length)for(var i=0;i<message.target.length;++i){writer.uint32(/* id 4, wireType 2 =*/34).string(message.target[i]);}return writer;};/**
     * Encodes the specified ModifyUserSettingReq message, length delimited. Does not implicitly {@link ModifyUserSettingReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ModifyUserSettingReq
     * @static
     * @param {IModifyUserSettingReq} message ModifyUserSettingReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ModifyUserSettingReq.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ModifyUserSettingReq message from the specified reader or buffer.
     * @function decode
     * @memberof ModifyUserSettingReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ModifyUserSettingReq} ModifyUserSettingReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyUserSettingReq.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ModifyUserSettingReq();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.scope=reader.int32();break;case 2:message.key=reader.string();break;case 3:message.value=reader.string();break;case 4:if(!(message.target&&message.target.length))message.target=[];message.target.push(reader.string());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("scope"))throw $util.ProtocolError("missing required 'scope'",{instance:message});if(!message.hasOwnProperty("key"))throw $util.ProtocolError("missing required 'key'",{instance:message});if(!message.hasOwnProperty("value"))throw $util.ProtocolError("missing required 'value'",{instance:message});return message;};/**
     * Decodes a ModifyUserSettingReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ModifyUserSettingReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ModifyUserSettingReq} ModifyUserSettingReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ModifyUserSettingReq.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ModifyUserSettingReq message.
     * @function verify
     * @memberof ModifyUserSettingReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ModifyUserSettingReq.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.scope))return"scope: integer expected";if(!$util.isString(message.key))return"key: string expected";if(!$util.isString(message.value))return"value: string expected";if(message.target!=null&&message.hasOwnProperty("target")){if(!Array.isArray(message.target))return"target: array expected";for(var i=0;i<message.target.length;++i){if(!$util.isString(message.target[i]))return"target: string[] expected";}}return null;};/**
     * Creates a ModifyUserSettingReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ModifyUserSettingReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ModifyUserSettingReq} ModifyUserSettingReq
     */ModifyUserSettingReq.fromObject=function fromObject(object){if(object instanceof $root.ModifyUserSettingReq)return object;var message=new $root.ModifyUserSettingReq();if(object.scope!=null)message.scope=object.scope|0;if(object.key!=null)message.key=String(object.key);if(object.value!=null)message.value=String(object.value);if(object.target){if(!Array.isArray(object.target))throw TypeError(".ModifyUserSettingReq.target: array expected");message.target=[];for(var i=0;i<object.target.length;++i){message.target[i]=String(object.target[i]);}}return message;};/**
     * Creates a plain object from a ModifyUserSettingReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ModifyUserSettingReq
     * @static
     * @param {ModifyUserSettingReq} message ModifyUserSettingReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ModifyUserSettingReq.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.target=[];if(options.defaults){object.scope=0;object.key="";object.value="";}if(message.scope!=null&&message.hasOwnProperty("scope"))object.scope=message.scope;if(message.key!=null&&message.hasOwnProperty("key"))object.key=message.key;if(message.value!=null&&message.hasOwnProperty("value"))object.value=message.value;if(message.target&&message.target.length){object.target=[];for(var j=0;j<message.target.length;++j){object.target[j]=message.target[j];}}return object;};/**
     * Converts this ModifyUserSettingReq to JSON.
     * @function toJSON
     * @memberof ModifyUserSettingReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ModifyUserSettingReq.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ModifyUserSettingReq;}();$root.Version=function(){/**
     * Properties of a Version.
     * @exports IVersion
     * @interface IVersion
     * @property {Long} version Version version
     *//**
     * Constructs a new Version.
     * @exports Version
     * @classdesc Represents a Version.
     * @implements IVersion
     * @constructor
     * @param {IVersion=} [properties] Properties to set
     */function Version(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * Version version.
     * @member {Long} version
     * @memberof Version
     * @instance
     */Version.prototype.version=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new Version instance using the specified properties.
     * @function create
     * @memberof Version
     * @static
     * @param {IVersion=} [properties] Properties to set
     * @returns {Version} Version instance
     */Version.create=function create(properties){return new Version(properties);};/**
     * Encodes the specified Version message. Does not implicitly {@link Version.verify|verify} messages.
     * @function encode
     * @memberof Version
     * @static
     * @param {IVersion} message Version message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Version.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.version);return writer;};/**
     * Encodes the specified Version message, length delimited. Does not implicitly {@link Version.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Version
     * @static
     * @param {IVersion} message Version message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Version.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a Version message from the specified reader or buffer.
     * @function decode
     * @memberof Version
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Version} Version
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Version.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.Version();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.version=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("version"))throw $util.ProtocolError("missing required 'version'",{instance:message});return message;};/**
     * Decodes a Version message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Version
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Version} Version
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Version.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a Version message.
     * @function verify
     * @memberof Version
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */Version.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.version)&&!(message.version&&$util.isInteger(message.version.low)&&$util.isInteger(message.version.high)))return"version: integer|Long expected";return null;};/**
     * Creates a Version message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Version
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Version} Version
     */Version.fromObject=function fromObject(object){if(object instanceof $root.Version)return object;var message=new $root.Version();if(object.version!=null)if($util.Long)(message.version=$util.Long.fromValue(object.version)).unsigned=false;else if(typeof object.version==="string")message.version=parseInt(object.version,10);else if(typeof object.version==="number")message.version=object.version;else if((0,_typeof3.default)(object.version)==="object")message.version=new $util.LongBits(object.version.low>>>0,object.version.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a Version message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Version
     * @static
     * @param {Version} message Version
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */Version.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults)if($util.Long){var long=new $util.Long(0,0,false);object.version=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.version=options.longs===String?"0":0;if(message.version!=null&&message.hasOwnProperty("version"))if(typeof message.version==="number")object.version=options.longs===String?String(message.version):message.version;else object.version=options.longs===String?$util.Long.prototype.toString.call(message.version):options.longs===Number?new $util.LongBits(message.version.low>>>0,message.version.high>>>0).toNumber():message.version;return object;};/**
     * Converts this Version to JSON.
     * @function toJSON
     * @memberof Version
     * @instance
     * @returns {Object.<string,*>} JSON object
     */Version.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return Version;}();$root.GetUserSettingResult=function(){/**
     * Properties of a GetUserSettingResult.
     * @exports IGetUserSettingResult
     * @interface IGetUserSettingResult
     * @property {Array.<IUserSettingEntry>|null} [entry] GetUserSettingResult entry
     *//**
     * Constructs a new GetUserSettingResult.
     * @exports GetUserSettingResult
     * @classdesc Represents a GetUserSettingResult.
     * @implements IGetUserSettingResult
     * @constructor
     * @param {IGetUserSettingResult=} [properties] Properties to set
     */function GetUserSettingResult(properties){this.entry=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetUserSettingResult entry.
     * @member {Array.<IUserSettingEntry>} entry
     * @memberof GetUserSettingResult
     * @instance
     */GetUserSettingResult.prototype.entry=$util.emptyArray;/**
     * Creates a new GetUserSettingResult instance using the specified properties.
     * @function create
     * @memberof GetUserSettingResult
     * @static
     * @param {IGetUserSettingResult=} [properties] Properties to set
     * @returns {GetUserSettingResult} GetUserSettingResult instance
     */GetUserSettingResult.create=function create(properties){return new GetUserSettingResult(properties);};/**
     * Encodes the specified GetUserSettingResult message. Does not implicitly {@link GetUserSettingResult.verify|verify} messages.
     * @function encode
     * @memberof GetUserSettingResult
     * @static
     * @param {IGetUserSettingResult} message GetUserSettingResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetUserSettingResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.entry!=null&&message.entry.length)for(var i=0;i<message.entry.length;++i){$root.UserSettingEntry.encode(message.entry[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified GetUserSettingResult message, length delimited. Does not implicitly {@link GetUserSettingResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetUserSettingResult
     * @static
     * @param {IGetUserSettingResult} message GetUserSettingResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetUserSettingResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetUserSettingResult message from the specified reader or buffer.
     * @function decode
     * @memberof GetUserSettingResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetUserSettingResult} GetUserSettingResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetUserSettingResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetUserSettingResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.entry&&message.entry.length))message.entry=[];message.entry.push($root.UserSettingEntry.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a GetUserSettingResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetUserSettingResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetUserSettingResult} GetUserSettingResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetUserSettingResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetUserSettingResult message.
     * @function verify
     * @memberof GetUserSettingResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetUserSettingResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.entry!=null&&message.hasOwnProperty("entry")){if(!Array.isArray(message.entry))return"entry: array expected";for(var i=0;i<message.entry.length;++i){var error=$root.UserSettingEntry.verify(message.entry[i]);if(error)return"entry."+error;}}return null;};/**
     * Creates a GetUserSettingResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetUserSettingResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetUserSettingResult} GetUserSettingResult
     */GetUserSettingResult.fromObject=function fromObject(object){if(object instanceof $root.GetUserSettingResult)return object;var message=new $root.GetUserSettingResult();if(object.entry){if(!Array.isArray(object.entry))throw TypeError(".GetUserSettingResult.entry: array expected");message.entry=[];for(var i=0;i<object.entry.length;++i){if((0,_typeof3.default)(object.entry[i])!=="object")throw TypeError(".GetUserSettingResult.entry: object expected");message.entry[i]=$root.UserSettingEntry.fromObject(object.entry[i]);}}return message;};/**
     * Creates a plain object from a GetUserSettingResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetUserSettingResult
     * @static
     * @param {GetUserSettingResult} message GetUserSettingResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetUserSettingResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.entry=[];if(message.entry&&message.entry.length){object.entry=[];for(var j=0;j<message.entry.length;++j){object.entry[j]=$root.UserSettingEntry.toObject(message.entry[j],options);}}return object;};/**
     * Converts this GetUserSettingResult to JSON.
     * @function toJSON
     * @memberof GetUserSettingResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetUserSettingResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetUserSettingResult;}();$root.Friend=function(){/**
     * Properties of a Friend.
     * @exports IFriend
     * @interface IFriend
     * @property {string} uid Friend uid
     * @property {number} state Friend state
     * @property {Long} updateDt Friend updateDt
     * @property {string|null} [alias] Friend alias
     * @property {number|null} [blacked] Friend blacked
     * @property {string|null} [extra] Friend extra
     *//**
     * Constructs a new Friend.
     * @exports Friend
     * @classdesc Represents a Friend.
     * @implements IFriend
     * @constructor
     * @param {IFriend=} [properties] Properties to set
     */function Friend(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * Friend uid.
     * @member {string} uid
     * @memberof Friend
     * @instance
     */Friend.prototype.uid="";/**
     * Friend state.
     * @member {number} state
     * @memberof Friend
     * @instance
     */Friend.prototype.state=0;/**
     * Friend updateDt.
     * @member {Long} updateDt
     * @memberof Friend
     * @instance
     */Friend.prototype.updateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Friend alias.
     * @member {string} alias
     * @memberof Friend
     * @instance
     */Friend.prototype.alias="";/**
     * Friend blacked.
     * @member {number} blacked
     * @memberof Friend
     * @instance
     */Friend.prototype.blacked=0;/**
     * Friend extra.
     * @member {string} extra
     * @memberof Friend
     * @instance
     */Friend.prototype.extra="";/**
     * Creates a new Friend instance using the specified properties.
     * @function create
     * @memberof Friend
     * @static
     * @param {IFriend=} [properties] Properties to set
     * @returns {Friend} Friend instance
     */Friend.create=function create(properties){return new Friend(properties);};/**
     * Encodes the specified Friend message. Does not implicitly {@link Friend.verify|verify} messages.
     * @function encode
     * @memberof Friend
     * @static
     * @param {IFriend} message Friend message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Friend.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);writer.uint32(/* id 3, wireType 0 =*/24).int64(message.updateDt);if(message.alias!=null&&message.hasOwnProperty("alias"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.alias);if(message.blacked!=null&&message.hasOwnProperty("blacked"))writer.uint32(/* id 5, wireType 0 =*/40).int32(message.blacked);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 6, wireType 2 =*/50).string(message.extra);return writer;};/**
     * Encodes the specified Friend message, length delimited. Does not implicitly {@link Friend.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Friend
     * @static
     * @param {IFriend} message Friend message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */Friend.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a Friend message from the specified reader or buffer.
     * @function decode
     * @memberof Friend
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Friend} Friend
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Friend.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.Friend();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.uid=reader.string();break;case 2:message.state=reader.int32();break;case 3:message.updateDt=reader.int64();break;case 4:message.alias=reader.string();break;case 5:message.blacked=reader.int32();break;case 6:message.extra=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("uid"))throw $util.ProtocolError("missing required 'uid'",{instance:message});if(!message.hasOwnProperty("state"))throw $util.ProtocolError("missing required 'state'",{instance:message});if(!message.hasOwnProperty("updateDt"))throw $util.ProtocolError("missing required 'updateDt'",{instance:message});return message;};/**
     * Decodes a Friend message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Friend
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Friend} Friend
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */Friend.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a Friend message.
     * @function verify
     * @memberof Friend
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */Friend.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.uid))return"uid: string expected";if(!$util.isInteger(message.state))return"state: integer expected";if(!$util.isInteger(message.updateDt)&&!(message.updateDt&&$util.isInteger(message.updateDt.low)&&$util.isInteger(message.updateDt.high)))return"updateDt: integer|Long expected";if(message.alias!=null&&message.hasOwnProperty("alias"))if(!$util.isString(message.alias))return"alias: string expected";if(message.blacked!=null&&message.hasOwnProperty("blacked"))if(!$util.isInteger(message.blacked))return"blacked: integer expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";return null;};/**
     * Creates a Friend message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Friend
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Friend} Friend
     */Friend.fromObject=function fromObject(object){if(object instanceof $root.Friend)return object;var message=new $root.Friend();if(object.uid!=null)message.uid=String(object.uid);if(object.state!=null)message.state=object.state|0;if(object.updateDt!=null)if($util.Long)(message.updateDt=$util.Long.fromValue(object.updateDt)).unsigned=false;else if(typeof object.updateDt==="string")message.updateDt=parseInt(object.updateDt,10);else if(typeof object.updateDt==="number")message.updateDt=object.updateDt;else if((0,_typeof3.default)(object.updateDt)==="object")message.updateDt=new $util.LongBits(object.updateDt.low>>>0,object.updateDt.high>>>0).toNumber();if(object.alias!=null)message.alias=String(object.alias);if(object.blacked!=null)message.blacked=object.blacked|0;if(object.extra!=null)message.extra=String(object.extra);return message;};/**
     * Creates a plain object from a Friend message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Friend
     * @static
     * @param {Friend} message Friend
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */Friend.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.uid="";object.state=0;if($util.Long){var long=new $util.Long(0,0,false);object.updateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.updateDt=options.longs===String?"0":0;object.alias="";object.blacked=0;object.extra="";}if(message.uid!=null&&message.hasOwnProperty("uid"))object.uid=message.uid;if(message.state!=null&&message.hasOwnProperty("state"))object.state=message.state;if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(typeof message.updateDt==="number")object.updateDt=options.longs===String?String(message.updateDt):message.updateDt;else object.updateDt=options.longs===String?$util.Long.prototype.toString.call(message.updateDt):options.longs===Number?new $util.LongBits(message.updateDt.low>>>0,message.updateDt.high>>>0).toNumber():message.updateDt;if(message.alias!=null&&message.hasOwnProperty("alias"))object.alias=message.alias;if(message.blacked!=null&&message.hasOwnProperty("blacked"))object.blacked=message.blacked;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;return object;};/**
     * Converts this Friend to JSON.
     * @function toJSON
     * @memberof Friend
     * @instance
     * @returns {Object.<string,*>} JSON object
     */Friend.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return Friend;}();$root.GetFriendsResult=function(){/**
     * Properties of a GetFriendsResult.
     * @exports IGetFriendsResult
     * @interface IGetFriendsResult
     * @property {Array.<IFriend>|null} [entry] GetFriendsResult entry
     *//**
     * Constructs a new GetFriendsResult.
     * @exports GetFriendsResult
     * @classdesc Represents a GetFriendsResult.
     * @implements IGetFriendsResult
     * @constructor
     * @param {IGetFriendsResult=} [properties] Properties to set
     */function GetFriendsResult(properties){this.entry=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetFriendsResult entry.
     * @member {Array.<IFriend>} entry
     * @memberof GetFriendsResult
     * @instance
     */GetFriendsResult.prototype.entry=$util.emptyArray;/**
     * Creates a new GetFriendsResult instance using the specified properties.
     * @function create
     * @memberof GetFriendsResult
     * @static
     * @param {IGetFriendsResult=} [properties] Properties to set
     * @returns {GetFriendsResult} GetFriendsResult instance
     */GetFriendsResult.create=function create(properties){return new GetFriendsResult(properties);};/**
     * Encodes the specified GetFriendsResult message. Does not implicitly {@link GetFriendsResult.verify|verify} messages.
     * @function encode
     * @memberof GetFriendsResult
     * @static
     * @param {IGetFriendsResult} message GetFriendsResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetFriendsResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.entry!=null&&message.entry.length)for(var i=0;i<message.entry.length;++i){$root.Friend.encode(message.entry[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified GetFriendsResult message, length delimited. Does not implicitly {@link GetFriendsResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetFriendsResult
     * @static
     * @param {IGetFriendsResult} message GetFriendsResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetFriendsResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetFriendsResult message from the specified reader or buffer.
     * @function decode
     * @memberof GetFriendsResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetFriendsResult} GetFriendsResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetFriendsResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetFriendsResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.entry&&message.entry.length))message.entry=[];message.entry.push($root.Friend.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a GetFriendsResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetFriendsResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetFriendsResult} GetFriendsResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetFriendsResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetFriendsResult message.
     * @function verify
     * @memberof GetFriendsResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetFriendsResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.entry!=null&&message.hasOwnProperty("entry")){if(!Array.isArray(message.entry))return"entry: array expected";for(var i=0;i<message.entry.length;++i){var error=$root.Friend.verify(message.entry[i]);if(error)return"entry."+error;}}return null;};/**
     * Creates a GetFriendsResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetFriendsResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetFriendsResult} GetFriendsResult
     */GetFriendsResult.fromObject=function fromObject(object){if(object instanceof $root.GetFriendsResult)return object;var message=new $root.GetFriendsResult();if(object.entry){if(!Array.isArray(object.entry))throw TypeError(".GetFriendsResult.entry: array expected");message.entry=[];for(var i=0;i<object.entry.length;++i){if((0,_typeof3.default)(object.entry[i])!=="object")throw TypeError(".GetFriendsResult.entry: object expected");message.entry[i]=$root.Friend.fromObject(object.entry[i]);}}return message;};/**
     * Creates a plain object from a GetFriendsResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetFriendsResult
     * @static
     * @param {GetFriendsResult} message GetFriendsResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetFriendsResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.entry=[];if(message.entry&&message.entry.length){object.entry=[];for(var j=0;j<message.entry.length;++j){object.entry[j]=$root.Friend.toObject(message.entry[j],options);}}return object;};/**
     * Converts this GetFriendsResult to JSON.
     * @function toJSON
     * @memberof GetFriendsResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetFriendsResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetFriendsResult;}();$root.GetFriendRequestResult=function(){/**
     * Properties of a GetFriendRequestResult.
     * @exports IGetFriendRequestResult
     * @interface IGetFriendRequestResult
     * @property {Array.<IFriendRequest>|null} [entry] GetFriendRequestResult entry
     *//**
     * Constructs a new GetFriendRequestResult.
     * @exports GetFriendRequestResult
     * @classdesc Represents a GetFriendRequestResult.
     * @implements IGetFriendRequestResult
     * @constructor
     * @param {IGetFriendRequestResult=} [properties] Properties to set
     */function GetFriendRequestResult(properties){this.entry=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetFriendRequestResult entry.
     * @member {Array.<IFriendRequest>} entry
     * @memberof GetFriendRequestResult
     * @instance
     */GetFriendRequestResult.prototype.entry=$util.emptyArray;/**
     * Creates a new GetFriendRequestResult instance using the specified properties.
     * @function create
     * @memberof GetFriendRequestResult
     * @static
     * @param {IGetFriendRequestResult=} [properties] Properties to set
     * @returns {GetFriendRequestResult} GetFriendRequestResult instance
     */GetFriendRequestResult.create=function create(properties){return new GetFriendRequestResult(properties);};/**
     * Encodes the specified GetFriendRequestResult message. Does not implicitly {@link GetFriendRequestResult.verify|verify} messages.
     * @function encode
     * @memberof GetFriendRequestResult
     * @static
     * @param {IGetFriendRequestResult} message GetFriendRequestResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetFriendRequestResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.entry!=null&&message.entry.length)for(var i=0;i<message.entry.length;++i){$root.FriendRequest.encode(message.entry[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified GetFriendRequestResult message, length delimited. Does not implicitly {@link GetFriendRequestResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetFriendRequestResult
     * @static
     * @param {IGetFriendRequestResult} message GetFriendRequestResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetFriendRequestResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetFriendRequestResult message from the specified reader or buffer.
     * @function decode
     * @memberof GetFriendRequestResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetFriendRequestResult} GetFriendRequestResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetFriendRequestResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetFriendRequestResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.entry&&message.entry.length))message.entry=[];message.entry.push($root.FriendRequest.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a GetFriendRequestResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetFriendRequestResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetFriendRequestResult} GetFriendRequestResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetFriendRequestResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetFriendRequestResult message.
     * @function verify
     * @memberof GetFriendRequestResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetFriendRequestResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.entry!=null&&message.hasOwnProperty("entry")){if(!Array.isArray(message.entry))return"entry: array expected";for(var i=0;i<message.entry.length;++i){var error=$root.FriendRequest.verify(message.entry[i]);if(error)return"entry."+error;}}return null;};/**
     * Creates a GetFriendRequestResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetFriendRequestResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetFriendRequestResult} GetFriendRequestResult
     */GetFriendRequestResult.fromObject=function fromObject(object){if(object instanceof $root.GetFriendRequestResult)return object;var message=new $root.GetFriendRequestResult();if(object.entry){if(!Array.isArray(object.entry))throw TypeError(".GetFriendRequestResult.entry: array expected");message.entry=[];for(var i=0;i<object.entry.length;++i){if((0,_typeof3.default)(object.entry[i])!=="object")throw TypeError(".GetFriendRequestResult.entry: object expected");message.entry[i]=$root.FriendRequest.fromObject(object.entry[i]);}}return message;};/**
     * Creates a plain object from a GetFriendRequestResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetFriendRequestResult
     * @static
     * @param {GetFriendRequestResult} message GetFriendRequestResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetFriendRequestResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.entry=[];if(message.entry&&message.entry.length){object.entry=[];for(var j=0;j<message.entry.length;++j){object.entry[j]=$root.FriendRequest.toObject(message.entry[j],options);}}return object;};/**
     * Converts this GetFriendRequestResult to JSON.
     * @function toJSON
     * @memberof GetFriendRequestResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetFriendRequestResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetFriendRequestResult;}();$root.ConnectAckPayload=function(){/**
     * Properties of a ConnectAckPayload.
     * @exports IConnectAckPayload
     * @interface IConnectAckPayload
     * @property {Long|null} [msgHead] ConnectAckPayload msgHead
     * @property {Long|null} [friendHead] ConnectAckPayload friendHead
     * @property {Long|null} [friendRqHead] ConnectAckPayload friendRqHead
     * @property {Long|null} [settingHead] ConnectAckPayload settingHead
     * @property {string|null} [nodeAddr] ConnectAckPayload nodeAddr
     * @property {number|null} [nodePort] ConnectAckPayload nodePort
     * @property {Long|null} [serverTime] ConnectAckPayload serverTime
     * @property {string|null} [nodeId] ConnectAckPayload nodeId
     * @property {Long|null} [recvHead] ConnectAckPayload recvHead
     * @property {Long|null} [readHead] ConnectAckPayload readHead
     * @property {Long|null} [groupConvHead] ConnectAckPayload groupConvHead
     *//**
     * Constructs a new ConnectAckPayload.
     * @exports ConnectAckPayload
     * @classdesc Represents a ConnectAckPayload.
     * @implements IConnectAckPayload
     * @constructor
     * @param {IConnectAckPayload=} [properties] Properties to set
     */function ConnectAckPayload(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ConnectAckPayload msgHead.
     * @member {Long} msgHead
     * @memberof ConnectAckPayload
     * @instance
     */ConnectAckPayload.prototype.msgHead=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ConnectAckPayload friendHead.
     * @member {Long} friendHead
     * @memberof ConnectAckPayload
     * @instance
     */ConnectAckPayload.prototype.friendHead=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ConnectAckPayload friendRqHead.
     * @member {Long} friendRqHead
     * @memberof ConnectAckPayload
     * @instance
     */ConnectAckPayload.prototype.friendRqHead=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ConnectAckPayload settingHead.
     * @member {Long} settingHead
     * @memberof ConnectAckPayload
     * @instance
     */ConnectAckPayload.prototype.settingHead=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ConnectAckPayload nodeAddr.
     * @member {string} nodeAddr
     * @memberof ConnectAckPayload
     * @instance
     */ConnectAckPayload.prototype.nodeAddr="";/**
     * ConnectAckPayload nodePort.
     * @member {number} nodePort
     * @memberof ConnectAckPayload
     * @instance
     */ConnectAckPayload.prototype.nodePort=0;/**
     * ConnectAckPayload serverTime.
     * @member {Long} serverTime
     * @memberof ConnectAckPayload
     * @instance
     */ConnectAckPayload.prototype.serverTime=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ConnectAckPayload nodeId.
     * @member {string} nodeId
     * @memberof ConnectAckPayload
     * @instance
     */ConnectAckPayload.prototype.nodeId="";/**
     * ConnectAckPayload recvHead.
     * @member {Long} recvHead
     * @memberof ConnectAckPayload
     * @instance
     */ConnectAckPayload.prototype.recvHead=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ConnectAckPayload readHead.
     * @member {Long} readHead
     * @memberof ConnectAckPayload
     * @instance
     */ConnectAckPayload.prototype.readHead=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ConnectAckPayload groupConvHead.
     * @member {Long} groupConvHead
     * @memberof ConnectAckPayload
     * @instance
     */ConnectAckPayload.prototype.groupConvHead=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new ConnectAckPayload instance using the specified properties.
     * @function create
     * @memberof ConnectAckPayload
     * @static
     * @param {IConnectAckPayload=} [properties] Properties to set
     * @returns {ConnectAckPayload} ConnectAckPayload instance
     */ConnectAckPayload.create=function create(properties){return new ConnectAckPayload(properties);};/**
     * Encodes the specified ConnectAckPayload message. Does not implicitly {@link ConnectAckPayload.verify|verify} messages.
     * @function encode
     * @memberof ConnectAckPayload
     * @static
     * @param {IConnectAckPayload} message ConnectAckPayload message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConnectAckPayload.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.msgHead!=null&&message.hasOwnProperty("msgHead"))writer.uint32(/* id 1, wireType 0 =*/8).int64(message.msgHead);if(message.friendHead!=null&&message.hasOwnProperty("friendHead"))writer.uint32(/* id 2, wireType 0 =*/16).int64(message.friendHead);if(message.friendRqHead!=null&&message.hasOwnProperty("friendRqHead"))writer.uint32(/* id 3, wireType 0 =*/24).int64(message.friendRqHead);if(message.settingHead!=null&&message.hasOwnProperty("settingHead"))writer.uint32(/* id 4, wireType 0 =*/32).int64(message.settingHead);if(message.nodeAddr!=null&&message.hasOwnProperty("nodeAddr"))writer.uint32(/* id 5, wireType 2 =*/42).string(message.nodeAddr);if(message.nodePort!=null&&message.hasOwnProperty("nodePort"))writer.uint32(/* id 6, wireType 0 =*/48).int32(message.nodePort);if(message.serverTime!=null&&message.hasOwnProperty("serverTime"))writer.uint32(/* id 7, wireType 0 =*/56).int64(message.serverTime);if(message.nodeId!=null&&message.hasOwnProperty("nodeId"))writer.uint32(/* id 8, wireType 2 =*/66).string(message.nodeId);if(message.recvHead!=null&&message.hasOwnProperty("recvHead"))writer.uint32(/* id 9, wireType 0 =*/72).int64(message.recvHead);if(message.readHead!=null&&message.hasOwnProperty("readHead"))writer.uint32(/* id 10, wireType 0 =*/80).int64(message.readHead);if(message.groupConvHead!=null&&message.hasOwnProperty("groupConvHead"))writer.uint32(/* id 11, wireType 0 =*/88).int64(message.groupConvHead);return writer;};/**
     * Encodes the specified ConnectAckPayload message, length delimited. Does not implicitly {@link ConnectAckPayload.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ConnectAckPayload
     * @static
     * @param {IConnectAckPayload} message ConnectAckPayload message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConnectAckPayload.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ConnectAckPayload message from the specified reader or buffer.
     * @function decode
     * @memberof ConnectAckPayload
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ConnectAckPayload} ConnectAckPayload
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConnectAckPayload.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ConnectAckPayload();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.msgHead=reader.int64();break;case 2:message.friendHead=reader.int64();break;case 3:message.friendRqHead=reader.int64();break;case 4:message.settingHead=reader.int64();break;case 5:message.nodeAddr=reader.string();break;case 6:message.nodePort=reader.int32();break;case 7:message.serverTime=reader.int64();break;case 8:message.nodeId=reader.string();break;case 9:message.recvHead=reader.int64();break;case 10:message.readHead=reader.int64();break;case 11:message.groupConvHead=reader.int64();break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a ConnectAckPayload message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ConnectAckPayload
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ConnectAckPayload} ConnectAckPayload
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConnectAckPayload.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ConnectAckPayload message.
     * @function verify
     * @memberof ConnectAckPayload
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ConnectAckPayload.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.msgHead!=null&&message.hasOwnProperty("msgHead"))if(!$util.isInteger(message.msgHead)&&!(message.msgHead&&$util.isInteger(message.msgHead.low)&&$util.isInteger(message.msgHead.high)))return"msgHead: integer|Long expected";if(message.friendHead!=null&&message.hasOwnProperty("friendHead"))if(!$util.isInteger(message.friendHead)&&!(message.friendHead&&$util.isInteger(message.friendHead.low)&&$util.isInteger(message.friendHead.high)))return"friendHead: integer|Long expected";if(message.friendRqHead!=null&&message.hasOwnProperty("friendRqHead"))if(!$util.isInteger(message.friendRqHead)&&!(message.friendRqHead&&$util.isInteger(message.friendRqHead.low)&&$util.isInteger(message.friendRqHead.high)))return"friendRqHead: integer|Long expected";if(message.settingHead!=null&&message.hasOwnProperty("settingHead"))if(!$util.isInteger(message.settingHead)&&!(message.settingHead&&$util.isInteger(message.settingHead.low)&&$util.isInteger(message.settingHead.high)))return"settingHead: integer|Long expected";if(message.nodeAddr!=null&&message.hasOwnProperty("nodeAddr"))if(!$util.isString(message.nodeAddr))return"nodeAddr: string expected";if(message.nodePort!=null&&message.hasOwnProperty("nodePort"))if(!$util.isInteger(message.nodePort))return"nodePort: integer expected";if(message.serverTime!=null&&message.hasOwnProperty("serverTime"))if(!$util.isInteger(message.serverTime)&&!(message.serverTime&&$util.isInteger(message.serverTime.low)&&$util.isInteger(message.serverTime.high)))return"serverTime: integer|Long expected";if(message.nodeId!=null&&message.hasOwnProperty("nodeId"))if(!$util.isString(message.nodeId))return"nodeId: string expected";if(message.recvHead!=null&&message.hasOwnProperty("recvHead"))if(!$util.isInteger(message.recvHead)&&!(message.recvHead&&$util.isInteger(message.recvHead.low)&&$util.isInteger(message.recvHead.high)))return"recvHead: integer|Long expected";if(message.readHead!=null&&message.hasOwnProperty("readHead"))if(!$util.isInteger(message.readHead)&&!(message.readHead&&$util.isInteger(message.readHead.low)&&$util.isInteger(message.readHead.high)))return"readHead: integer|Long expected";if(message.groupConvHead!=null&&message.hasOwnProperty("groupConvHead"))if(!$util.isInteger(message.groupConvHead)&&!(message.groupConvHead&&$util.isInteger(message.groupConvHead.low)&&$util.isInteger(message.groupConvHead.high)))return"groupConvHead: integer|Long expected";return null;};/**
     * Creates a ConnectAckPayload message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ConnectAckPayload
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ConnectAckPayload} ConnectAckPayload
     */ConnectAckPayload.fromObject=function fromObject(object){if(object instanceof $root.ConnectAckPayload)return object;var message=new $root.ConnectAckPayload();if(object.msgHead!=null)if($util.Long)(message.msgHead=$util.Long.fromValue(object.msgHead)).unsigned=false;else if(typeof object.msgHead==="string")message.msgHead=parseInt(object.msgHead,10);else if(typeof object.msgHead==="number")message.msgHead=object.msgHead;else if((0,_typeof3.default)(object.msgHead)==="object")message.msgHead=new $util.LongBits(object.msgHead.low>>>0,object.msgHead.high>>>0).toNumber();if(object.friendHead!=null)if($util.Long)(message.friendHead=$util.Long.fromValue(object.friendHead)).unsigned=false;else if(typeof object.friendHead==="string")message.friendHead=parseInt(object.friendHead,10);else if(typeof object.friendHead==="number")message.friendHead=object.friendHead;else if((0,_typeof3.default)(object.friendHead)==="object")message.friendHead=new $util.LongBits(object.friendHead.low>>>0,object.friendHead.high>>>0).toNumber();if(object.friendRqHead!=null)if($util.Long)(message.friendRqHead=$util.Long.fromValue(object.friendRqHead)).unsigned=false;else if(typeof object.friendRqHead==="string")message.friendRqHead=parseInt(object.friendRqHead,10);else if(typeof object.friendRqHead==="number")message.friendRqHead=object.friendRqHead;else if((0,_typeof3.default)(object.friendRqHead)==="object")message.friendRqHead=new $util.LongBits(object.friendRqHead.low>>>0,object.friendRqHead.high>>>0).toNumber();if(object.settingHead!=null)if($util.Long)(message.settingHead=$util.Long.fromValue(object.settingHead)).unsigned=false;else if(typeof object.settingHead==="string")message.settingHead=parseInt(object.settingHead,10);else if(typeof object.settingHead==="number")message.settingHead=object.settingHead;else if((0,_typeof3.default)(object.settingHead)==="object")message.settingHead=new $util.LongBits(object.settingHead.low>>>0,object.settingHead.high>>>0).toNumber();if(object.nodeAddr!=null)message.nodeAddr=String(object.nodeAddr);if(object.nodePort!=null)message.nodePort=object.nodePort|0;if(object.serverTime!=null)if($util.Long)(message.serverTime=$util.Long.fromValue(object.serverTime)).unsigned=false;else if(typeof object.serverTime==="string")message.serverTime=parseInt(object.serverTime,10);else if(typeof object.serverTime==="number")message.serverTime=object.serverTime;else if((0,_typeof3.default)(object.serverTime)==="object")message.serverTime=new $util.LongBits(object.serverTime.low>>>0,object.serverTime.high>>>0).toNumber();if(object.nodeId!=null)message.nodeId=String(object.nodeId);if(object.recvHead!=null)if($util.Long)(message.recvHead=$util.Long.fromValue(object.recvHead)).unsigned=false;else if(typeof object.recvHead==="string")message.recvHead=parseInt(object.recvHead,10);else if(typeof object.recvHead==="number")message.recvHead=object.recvHead;else if((0,_typeof3.default)(object.recvHead)==="object")message.recvHead=new $util.LongBits(object.recvHead.low>>>0,object.recvHead.high>>>0).toNumber();if(object.readHead!=null)if($util.Long)(message.readHead=$util.Long.fromValue(object.readHead)).unsigned=false;else if(typeof object.readHead==="string")message.readHead=parseInt(object.readHead,10);else if(typeof object.readHead==="number")message.readHead=object.readHead;else if((0,_typeof3.default)(object.readHead)==="object")message.readHead=new $util.LongBits(object.readHead.low>>>0,object.readHead.high>>>0).toNumber();if(object.groupConvHead!=null)if($util.Long)(message.groupConvHead=$util.Long.fromValue(object.groupConvHead)).unsigned=false;else if(typeof object.groupConvHead==="string")message.groupConvHead=parseInt(object.groupConvHead,10);else if(typeof object.groupConvHead==="number")message.groupConvHead=object.groupConvHead;else if((0,_typeof3.default)(object.groupConvHead)==="object")message.groupConvHead=new $util.LongBits(object.groupConvHead.low>>>0,object.groupConvHead.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a ConnectAckPayload message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ConnectAckPayload
     * @static
     * @param {ConnectAckPayload} message ConnectAckPayload
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ConnectAckPayload.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.msgHead=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.msgHead=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.friendHead=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.friendHead=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.friendRqHead=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.friendRqHead=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.settingHead=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.settingHead=options.longs===String?"0":0;object.nodeAddr="";object.nodePort=0;if($util.Long){var long=new $util.Long(0,0,false);object.serverTime=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.serverTime=options.longs===String?"0":0;object.nodeId="";if($util.Long){var long=new $util.Long(0,0,false);object.recvHead=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.recvHead=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.readHead=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.readHead=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.groupConvHead=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.groupConvHead=options.longs===String?"0":0;}if(message.msgHead!=null&&message.hasOwnProperty("msgHead"))if(typeof message.msgHead==="number")object.msgHead=options.longs===String?String(message.msgHead):message.msgHead;else object.msgHead=options.longs===String?$util.Long.prototype.toString.call(message.msgHead):options.longs===Number?new $util.LongBits(message.msgHead.low>>>0,message.msgHead.high>>>0).toNumber():message.msgHead;if(message.friendHead!=null&&message.hasOwnProperty("friendHead"))if(typeof message.friendHead==="number")object.friendHead=options.longs===String?String(message.friendHead):message.friendHead;else object.friendHead=options.longs===String?$util.Long.prototype.toString.call(message.friendHead):options.longs===Number?new $util.LongBits(message.friendHead.low>>>0,message.friendHead.high>>>0).toNumber():message.friendHead;if(message.friendRqHead!=null&&message.hasOwnProperty("friendRqHead"))if(typeof message.friendRqHead==="number")object.friendRqHead=options.longs===String?String(message.friendRqHead):message.friendRqHead;else object.friendRqHead=options.longs===String?$util.Long.prototype.toString.call(message.friendRqHead):options.longs===Number?new $util.LongBits(message.friendRqHead.low>>>0,message.friendRqHead.high>>>0).toNumber():message.friendRqHead;if(message.settingHead!=null&&message.hasOwnProperty("settingHead"))if(typeof message.settingHead==="number")object.settingHead=options.longs===String?String(message.settingHead):message.settingHead;else object.settingHead=options.longs===String?$util.Long.prototype.toString.call(message.settingHead):options.longs===Number?new $util.LongBits(message.settingHead.low>>>0,message.settingHead.high>>>0).toNumber():message.settingHead;if(message.nodeAddr!=null&&message.hasOwnProperty("nodeAddr"))object.nodeAddr=message.nodeAddr;if(message.nodePort!=null&&message.hasOwnProperty("nodePort"))object.nodePort=message.nodePort;if(message.serverTime!=null&&message.hasOwnProperty("serverTime"))if(typeof message.serverTime==="number")object.serverTime=options.longs===String?String(message.serverTime):message.serverTime;else object.serverTime=options.longs===String?$util.Long.prototype.toString.call(message.serverTime):options.longs===Number?new $util.LongBits(message.serverTime.low>>>0,message.serverTime.high>>>0).toNumber():message.serverTime;if(message.nodeId!=null&&message.hasOwnProperty("nodeId"))object.nodeId=message.nodeId;if(message.recvHead!=null&&message.hasOwnProperty("recvHead"))if(typeof message.recvHead==="number")object.recvHead=options.longs===String?String(message.recvHead):message.recvHead;else object.recvHead=options.longs===String?$util.Long.prototype.toString.call(message.recvHead):options.longs===Number?new $util.LongBits(message.recvHead.low>>>0,message.recvHead.high>>>0).toNumber():message.recvHead;if(message.readHead!=null&&message.hasOwnProperty("readHead"))if(typeof message.readHead==="number")object.readHead=options.longs===String?String(message.readHead):message.readHead;else object.readHead=options.longs===String?$util.Long.prototype.toString.call(message.readHead):options.longs===Number?new $util.LongBits(message.readHead.low>>>0,message.readHead.high>>>0).toNumber():message.readHead;if(message.groupConvHead!=null&&message.hasOwnProperty("groupConvHead"))if(typeof message.groupConvHead==="number")object.groupConvHead=options.longs===String?String(message.groupConvHead):message.groupConvHead;else object.groupConvHead=options.longs===String?$util.Long.prototype.toString.call(message.groupConvHead):options.longs===Number?new $util.LongBits(message.groupConvHead.low>>>0,message.groupConvHead.high>>>0).toNumber():message.groupConvHead;return object;};/**
     * Converts this ConnectAckPayload to JSON.
     * @function toJSON
     * @memberof ConnectAckPayload
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ConnectAckPayload.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ConnectAckPayload;}();$root.IMHttpWrapper=function(){/**
     * Properties of a IMHttpWrapper.
     * @exports IIMHttpWrapper
     * @interface IIMHttpWrapper
     * @property {string} token IMHttpWrapper token
     * @property {string} clientId IMHttpWrapper clientId
     * @property {string} request IMHttpWrapper request
     * @property {Uint8Array|null} [data] IMHttpWrapper data
     *//**
     * Constructs a new IMHttpWrapper.
     * @exports IMHttpWrapper
     * @classdesc Represents a IMHttpWrapper.
     * @implements IIMHttpWrapper
     * @constructor
     * @param {IIMHttpWrapper=} [properties] Properties to set
     */function IMHttpWrapper(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * IMHttpWrapper token.
     * @member {string} token
     * @memberof IMHttpWrapper
     * @instance
     */IMHttpWrapper.prototype.token="";/**
     * IMHttpWrapper clientId.
     * @member {string} clientId
     * @memberof IMHttpWrapper
     * @instance
     */IMHttpWrapper.prototype.clientId="";/**
     * IMHttpWrapper request.
     * @member {string} request
     * @memberof IMHttpWrapper
     * @instance
     */IMHttpWrapper.prototype.request="";/**
     * IMHttpWrapper data.
     * @member {Uint8Array} data
     * @memberof IMHttpWrapper
     * @instance
     */IMHttpWrapper.prototype.data=$util.newBuffer([]);/**
     * Creates a new IMHttpWrapper instance using the specified properties.
     * @function create
     * @memberof IMHttpWrapper
     * @static
     * @param {IIMHttpWrapper=} [properties] Properties to set
     * @returns {IMHttpWrapper} IMHttpWrapper instance
     */IMHttpWrapper.create=function create(properties){return new IMHttpWrapper(properties);};/**
     * Encodes the specified IMHttpWrapper message. Does not implicitly {@link IMHttpWrapper.verify|verify} messages.
     * @function encode
     * @memberof IMHttpWrapper
     * @static
     * @param {IIMHttpWrapper} message IMHttpWrapper message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */IMHttpWrapper.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);writer.uint32(/* id 2, wireType 2 =*/18).string(message.clientId);writer.uint32(/* id 3, wireType 2 =*/26).string(message.request);if(message.data!=null&&message.hasOwnProperty("data"))writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.data);return writer;};/**
     * Encodes the specified IMHttpWrapper message, length delimited. Does not implicitly {@link IMHttpWrapper.verify|verify} messages.
     * @function encodeDelimited
     * @memberof IMHttpWrapper
     * @static
     * @param {IIMHttpWrapper} message IMHttpWrapper message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */IMHttpWrapper.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a IMHttpWrapper message from the specified reader or buffer.
     * @function decode
     * @memberof IMHttpWrapper
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {IMHttpWrapper} IMHttpWrapper
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */IMHttpWrapper.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.IMHttpWrapper();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.token=reader.string();break;case 2:message.clientId=reader.string();break;case 3:message.request=reader.string();break;case 4:message.data=reader.bytes();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("token"))throw $util.ProtocolError("missing required 'token'",{instance:message});if(!message.hasOwnProperty("clientId"))throw $util.ProtocolError("missing required 'clientId'",{instance:message});if(!message.hasOwnProperty("request"))throw $util.ProtocolError("missing required 'request'",{instance:message});return message;};/**
     * Decodes a IMHttpWrapper message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof IMHttpWrapper
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {IMHttpWrapper} IMHttpWrapper
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */IMHttpWrapper.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a IMHttpWrapper message.
     * @function verify
     * @memberof IMHttpWrapper
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */IMHttpWrapper.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.token))return"token: string expected";if(!$util.isString(message.clientId))return"clientId: string expected";if(!$util.isString(message.request))return"request: string expected";if(message.data!=null&&message.hasOwnProperty("data"))if(!(message.data&&typeof message.data.length==="number"||$util.isString(message.data)))return"data: buffer expected";return null;};/**
     * Creates a IMHttpWrapper message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof IMHttpWrapper
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {IMHttpWrapper} IMHttpWrapper
     */IMHttpWrapper.fromObject=function fromObject(object){if(object instanceof $root.IMHttpWrapper)return object;var message=new $root.IMHttpWrapper();if(object.token!=null)message.token=String(object.token);if(object.clientId!=null)message.clientId=String(object.clientId);if(object.request!=null)message.request=String(object.request);if(object.data!=null)if(typeof object.data==="string")$util.base64.decode(object.data,message.data=$util.newBuffer($util.base64.length(object.data)),0);else if(object.data.length)message.data=object.data;return message;};/**
     * Creates a plain object from a IMHttpWrapper message. Also converts values to other types if specified.
     * @function toObject
     * @memberof IMHttpWrapper
     * @static
     * @param {IMHttpWrapper} message IMHttpWrapper
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */IMHttpWrapper.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.token="";object.clientId="";object.request="";if(options.bytes===String)object.data="";else{object.data=[];if(options.bytes!==Array)object.data=$util.newBuffer(object.data);}}if(message.token!=null&&message.hasOwnProperty("token"))object.token=message.token;if(message.clientId!=null&&message.hasOwnProperty("clientId"))object.clientId=message.clientId;if(message.request!=null&&message.hasOwnProperty("request"))object.request=message.request;if(message.data!=null&&message.hasOwnProperty("data"))object.data=options.bytes===String?$util.base64.encode(message.data,0,message.data.length):options.bytes===Array?Array.prototype.slice.call(message.data):message.data;return object;};/**
     * Converts this IMHttpWrapper to JSON.
     * @function toJSON
     * @memberof IMHttpWrapper
     * @instance
     * @returns {Object.<string,*>} JSON object
     */IMHttpWrapper.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return IMHttpWrapper;}();$root.SearchUserRequest=function(){/**
     * Properties of a SearchUserRequest.
     * @exports ISearchUserRequest
     * @interface ISearchUserRequest
     * @property {string} keyword SearchUserRequest keyword
     * @property {number|null} [fuzzy] SearchUserRequest fuzzy
     * @property {number|null} [page] SearchUserRequest page
     *//**
     * Constructs a new SearchUserRequest.
     * @exports SearchUserRequest
     * @classdesc Represents a SearchUserRequest.
     * @implements ISearchUserRequest
     * @constructor
     * @param {ISearchUserRequest=} [properties] Properties to set
     */function SearchUserRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * SearchUserRequest keyword.
     * @member {string} keyword
     * @memberof SearchUserRequest
     * @instance
     */SearchUserRequest.prototype.keyword="";/**
     * SearchUserRequest fuzzy.
     * @member {number} fuzzy
     * @memberof SearchUserRequest
     * @instance
     */SearchUserRequest.prototype.fuzzy=0;/**
     * SearchUserRequest page.
     * @member {number} page
     * @memberof SearchUserRequest
     * @instance
     */SearchUserRequest.prototype.page=0;/**
     * Creates a new SearchUserRequest instance using the specified properties.
     * @function create
     * @memberof SearchUserRequest
     * @static
     * @param {ISearchUserRequest=} [properties] Properties to set
     * @returns {SearchUserRequest} SearchUserRequest instance
     */SearchUserRequest.create=function create(properties){return new SearchUserRequest(properties);};/**
     * Encodes the specified SearchUserRequest message. Does not implicitly {@link SearchUserRequest.verify|verify} messages.
     * @function encode
     * @memberof SearchUserRequest
     * @static
     * @param {ISearchUserRequest} message SearchUserRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SearchUserRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.keyword);if(message.fuzzy!=null&&message.hasOwnProperty("fuzzy"))writer.uint32(/* id 2, wireType 0 =*/16).int32(message.fuzzy);if(message.page!=null&&message.hasOwnProperty("page"))writer.uint32(/* id 3, wireType 0 =*/24).int32(message.page);return writer;};/**
     * Encodes the specified SearchUserRequest message, length delimited. Does not implicitly {@link SearchUserRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SearchUserRequest
     * @static
     * @param {ISearchUserRequest} message SearchUserRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SearchUserRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a SearchUserRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SearchUserRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SearchUserRequest} SearchUserRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SearchUserRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.SearchUserRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.keyword=reader.string();break;case 2:message.fuzzy=reader.int32();break;case 3:message.page=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("keyword"))throw $util.ProtocolError("missing required 'keyword'",{instance:message});return message;};/**
     * Decodes a SearchUserRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SearchUserRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SearchUserRequest} SearchUserRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SearchUserRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a SearchUserRequest message.
     * @function verify
     * @memberof SearchUserRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */SearchUserRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.keyword))return"keyword: string expected";if(message.fuzzy!=null&&message.hasOwnProperty("fuzzy"))if(!$util.isInteger(message.fuzzy))return"fuzzy: integer expected";if(message.page!=null&&message.hasOwnProperty("page"))if(!$util.isInteger(message.page))return"page: integer expected";return null;};/**
     * Creates a SearchUserRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SearchUserRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SearchUserRequest} SearchUserRequest
     */SearchUserRequest.fromObject=function fromObject(object){if(object instanceof $root.SearchUserRequest)return object;var message=new $root.SearchUserRequest();if(object.keyword!=null)message.keyword=String(object.keyword);if(object.fuzzy!=null)message.fuzzy=object.fuzzy|0;if(object.page!=null)message.page=object.page|0;return message;};/**
     * Creates a plain object from a SearchUserRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SearchUserRequest
     * @static
     * @param {SearchUserRequest} message SearchUserRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */SearchUserRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.keyword="";object.fuzzy=0;object.page=0;}if(message.keyword!=null&&message.hasOwnProperty("keyword"))object.keyword=message.keyword;if(message.fuzzy!=null&&message.hasOwnProperty("fuzzy"))object.fuzzy=message.fuzzy;if(message.page!=null&&message.hasOwnProperty("page"))object.page=message.page;return object;};/**
     * Converts this SearchUserRequest to JSON.
     * @function toJSON
     * @memberof SearchUserRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */SearchUserRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return SearchUserRequest;}();$root.SearchUserResult=function(){/**
     * Properties of a SearchUserResult.
     * @exports ISearchUserResult
     * @interface ISearchUserResult
     * @property {Array.<IUser>|null} [entry] SearchUserResult entry
     *//**
     * Constructs a new SearchUserResult.
     * @exports SearchUserResult
     * @classdesc Represents a SearchUserResult.
     * @implements ISearchUserResult
     * @constructor
     * @param {ISearchUserResult=} [properties] Properties to set
     */function SearchUserResult(properties){this.entry=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * SearchUserResult entry.
     * @member {Array.<IUser>} entry
     * @memberof SearchUserResult
     * @instance
     */SearchUserResult.prototype.entry=$util.emptyArray;/**
     * Creates a new SearchUserResult instance using the specified properties.
     * @function create
     * @memberof SearchUserResult
     * @static
     * @param {ISearchUserResult=} [properties] Properties to set
     * @returns {SearchUserResult} SearchUserResult instance
     */SearchUserResult.create=function create(properties){return new SearchUserResult(properties);};/**
     * Encodes the specified SearchUserResult message. Does not implicitly {@link SearchUserResult.verify|verify} messages.
     * @function encode
     * @memberof SearchUserResult
     * @static
     * @param {ISearchUserResult} message SearchUserResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SearchUserResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.entry!=null&&message.entry.length)for(var i=0;i<message.entry.length;++i){$root.User.encode(message.entry[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified SearchUserResult message, length delimited. Does not implicitly {@link SearchUserResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SearchUserResult
     * @static
     * @param {ISearchUserResult} message SearchUserResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SearchUserResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a SearchUserResult message from the specified reader or buffer.
     * @function decode
     * @memberof SearchUserResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SearchUserResult} SearchUserResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SearchUserResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.SearchUserResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.entry&&message.entry.length))message.entry=[];message.entry.push($root.User.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a SearchUserResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SearchUserResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SearchUserResult} SearchUserResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SearchUserResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a SearchUserResult message.
     * @function verify
     * @memberof SearchUserResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */SearchUserResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.entry!=null&&message.hasOwnProperty("entry")){if(!Array.isArray(message.entry))return"entry: array expected";for(var i=0;i<message.entry.length;++i){var error=$root.User.verify(message.entry[i]);if(error)return"entry."+error;}}return null;};/**
     * Creates a SearchUserResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SearchUserResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SearchUserResult} SearchUserResult
     */SearchUserResult.fromObject=function fromObject(object){if(object instanceof $root.SearchUserResult)return object;var message=new $root.SearchUserResult();if(object.entry){if(!Array.isArray(object.entry))throw TypeError(".SearchUserResult.entry: array expected");message.entry=[];for(var i=0;i<object.entry.length;++i){if((0,_typeof3.default)(object.entry[i])!=="object")throw TypeError(".SearchUserResult.entry: object expected");message.entry[i]=$root.User.fromObject(object.entry[i]);}}return message;};/**
     * Creates a plain object from a SearchUserResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SearchUserResult
     * @static
     * @param {SearchUserResult} message SearchUserResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */SearchUserResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.entry=[];if(message.entry&&message.entry.length){object.entry=[];for(var j=0;j<message.entry.length;++j){object.entry[j]=$root.User.toObject(message.entry[j],options);}}return object;};/**
     * Converts this SearchUserResult to JSON.
     * @function toJSON
     * @memberof SearchUserResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */SearchUserResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return SearchUserResult;}();$root.GetChatroomInfoRequest=function(){/**
     * Properties of a GetChatroomInfoRequest.
     * @exports IGetChatroomInfoRequest
     * @interface IGetChatroomInfoRequest
     * @property {string} chatroomId GetChatroomInfoRequest chatroomId
     * @property {Long|null} [updateDt] GetChatroomInfoRequest updateDt
     *//**
     * Constructs a new GetChatroomInfoRequest.
     * @exports GetChatroomInfoRequest
     * @classdesc Represents a GetChatroomInfoRequest.
     * @implements IGetChatroomInfoRequest
     * @constructor
     * @param {IGetChatroomInfoRequest=} [properties] Properties to set
     */function GetChatroomInfoRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetChatroomInfoRequest chatroomId.
     * @member {string} chatroomId
     * @memberof GetChatroomInfoRequest
     * @instance
     */GetChatroomInfoRequest.prototype.chatroomId="";/**
     * GetChatroomInfoRequest updateDt.
     * @member {Long} updateDt
     * @memberof GetChatroomInfoRequest
     * @instance
     */GetChatroomInfoRequest.prototype.updateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new GetChatroomInfoRequest instance using the specified properties.
     * @function create
     * @memberof GetChatroomInfoRequest
     * @static
     * @param {IGetChatroomInfoRequest=} [properties] Properties to set
     * @returns {GetChatroomInfoRequest} GetChatroomInfoRequest instance
     */GetChatroomInfoRequest.create=function create(properties){return new GetChatroomInfoRequest(properties);};/**
     * Encodes the specified GetChatroomInfoRequest message. Does not implicitly {@link GetChatroomInfoRequest.verify|verify} messages.
     * @function encode
     * @memberof GetChatroomInfoRequest
     * @static
     * @param {IGetChatroomInfoRequest} message GetChatroomInfoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetChatroomInfoRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.chatroomId);if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))writer.uint32(/* id 2, wireType 0 =*/16).int64(message.updateDt);return writer;};/**
     * Encodes the specified GetChatroomInfoRequest message, length delimited. Does not implicitly {@link GetChatroomInfoRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetChatroomInfoRequest
     * @static
     * @param {IGetChatroomInfoRequest} message GetChatroomInfoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetChatroomInfoRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetChatroomInfoRequest message from the specified reader or buffer.
     * @function decode
     * @memberof GetChatroomInfoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetChatroomInfoRequest} GetChatroomInfoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetChatroomInfoRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetChatroomInfoRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.chatroomId=reader.string();break;case 2:message.updateDt=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("chatroomId"))throw $util.ProtocolError("missing required 'chatroomId'",{instance:message});return message;};/**
     * Decodes a GetChatroomInfoRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetChatroomInfoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetChatroomInfoRequest} GetChatroomInfoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetChatroomInfoRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetChatroomInfoRequest message.
     * @function verify
     * @memberof GetChatroomInfoRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetChatroomInfoRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.chatroomId))return"chatroomId: string expected";if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(!$util.isInteger(message.updateDt)&&!(message.updateDt&&$util.isInteger(message.updateDt.low)&&$util.isInteger(message.updateDt.high)))return"updateDt: integer|Long expected";return null;};/**
     * Creates a GetChatroomInfoRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetChatroomInfoRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetChatroomInfoRequest} GetChatroomInfoRequest
     */GetChatroomInfoRequest.fromObject=function fromObject(object){if(object instanceof $root.GetChatroomInfoRequest)return object;var message=new $root.GetChatroomInfoRequest();if(object.chatroomId!=null)message.chatroomId=String(object.chatroomId);if(object.updateDt!=null)if($util.Long)(message.updateDt=$util.Long.fromValue(object.updateDt)).unsigned=false;else if(typeof object.updateDt==="string")message.updateDt=parseInt(object.updateDt,10);else if(typeof object.updateDt==="number")message.updateDt=object.updateDt;else if((0,_typeof3.default)(object.updateDt)==="object")message.updateDt=new $util.LongBits(object.updateDt.low>>>0,object.updateDt.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a GetChatroomInfoRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetChatroomInfoRequest
     * @static
     * @param {GetChatroomInfoRequest} message GetChatroomInfoRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetChatroomInfoRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.chatroomId="";if($util.Long){var long=new $util.Long(0,0,false);object.updateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.updateDt=options.longs===String?"0":0;}if(message.chatroomId!=null&&message.hasOwnProperty("chatroomId"))object.chatroomId=message.chatroomId;if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(typeof message.updateDt==="number")object.updateDt=options.longs===String?String(message.updateDt):message.updateDt;else object.updateDt=options.longs===String?$util.Long.prototype.toString.call(message.updateDt):options.longs===Number?new $util.LongBits(message.updateDt.low>>>0,message.updateDt.high>>>0).toNumber():message.updateDt;return object;};/**
     * Converts this GetChatroomInfoRequest to JSON.
     * @function toJSON
     * @memberof GetChatroomInfoRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetChatroomInfoRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetChatroomInfoRequest;}();$root.ChatroomInfo=function(){/**
     * Properties of a ChatroomInfo.
     * @exports IChatroomInfo
     * @interface IChatroomInfo
     * @property {string} title ChatroomInfo title
     * @property {string|null} [desc] ChatroomInfo desc
     * @property {string|null} [portrait] ChatroomInfo portrait
     * @property {number|null} [memberCount] ChatroomInfo memberCount
     * @property {Long|null} [createDt] ChatroomInfo createDt
     * @property {Long|null} [updateDt] ChatroomInfo updateDt
     * @property {string|null} [extra] ChatroomInfo extra
     * @property {number|null} [state] ChatroomInfo state
     *//**
     * Constructs a new ChatroomInfo.
     * @exports ChatroomInfo
     * @classdesc Represents a ChatroomInfo.
     * @implements IChatroomInfo
     * @constructor
     * @param {IChatroomInfo=} [properties] Properties to set
     */function ChatroomInfo(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ChatroomInfo title.
     * @member {string} title
     * @memberof ChatroomInfo
     * @instance
     */ChatroomInfo.prototype.title="";/**
     * ChatroomInfo desc.
     * @member {string} desc
     * @memberof ChatroomInfo
     * @instance
     */ChatroomInfo.prototype.desc="";/**
     * ChatroomInfo portrait.
     * @member {string} portrait
     * @memberof ChatroomInfo
     * @instance
     */ChatroomInfo.prototype.portrait="";/**
     * ChatroomInfo memberCount.
     * @member {number} memberCount
     * @memberof ChatroomInfo
     * @instance
     */ChatroomInfo.prototype.memberCount=0;/**
     * ChatroomInfo createDt.
     * @member {Long} createDt
     * @memberof ChatroomInfo
     * @instance
     */ChatroomInfo.prototype.createDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ChatroomInfo updateDt.
     * @member {Long} updateDt
     * @memberof ChatroomInfo
     * @instance
     */ChatroomInfo.prototype.updateDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ChatroomInfo extra.
     * @member {string} extra
     * @memberof ChatroomInfo
     * @instance
     */ChatroomInfo.prototype.extra="";/**
     * ChatroomInfo state.
     * @member {number} state
     * @memberof ChatroomInfo
     * @instance
     */ChatroomInfo.prototype.state=0;/**
     * Creates a new ChatroomInfo instance using the specified properties.
     * @function create
     * @memberof ChatroomInfo
     * @static
     * @param {IChatroomInfo=} [properties] Properties to set
     * @returns {ChatroomInfo} ChatroomInfo instance
     */ChatroomInfo.create=function create(properties){return new ChatroomInfo(properties);};/**
     * Encodes the specified ChatroomInfo message. Does not implicitly {@link ChatroomInfo.verify|verify} messages.
     * @function encode
     * @memberof ChatroomInfo
     * @static
     * @param {IChatroomInfo} message ChatroomInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ChatroomInfo.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);if(message.desc!=null&&message.hasOwnProperty("desc"))writer.uint32(/* id 2, wireType 2 =*/18).string(message.desc);if(message.portrait!=null&&message.hasOwnProperty("portrait"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.portrait);if(message.memberCount!=null&&message.hasOwnProperty("memberCount"))writer.uint32(/* id 4, wireType 0 =*/32).int32(message.memberCount);if(message.createDt!=null&&message.hasOwnProperty("createDt"))writer.uint32(/* id 5, wireType 0 =*/40).int64(message.createDt);if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))writer.uint32(/* id 6, wireType 0 =*/48).int64(message.updateDt);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 7, wireType 2 =*/58).string(message.extra);if(message.state!=null&&message.hasOwnProperty("state"))writer.uint32(/* id 8, wireType 0 =*/64).int32(message.state);return writer;};/**
     * Encodes the specified ChatroomInfo message, length delimited. Does not implicitly {@link ChatroomInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ChatroomInfo
     * @static
     * @param {IChatroomInfo} message ChatroomInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ChatroomInfo.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ChatroomInfo message from the specified reader or buffer.
     * @function decode
     * @memberof ChatroomInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ChatroomInfo} ChatroomInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ChatroomInfo.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ChatroomInfo();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.title=reader.string();break;case 2:message.desc=reader.string();break;case 3:message.portrait=reader.string();break;case 4:message.memberCount=reader.int32();break;case 5:message.createDt=reader.int64();break;case 6:message.updateDt=reader.int64();break;case 7:message.extra=reader.string();break;case 8:message.state=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("title"))throw $util.ProtocolError("missing required 'title'",{instance:message});return message;};/**
     * Decodes a ChatroomInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ChatroomInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ChatroomInfo} ChatroomInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ChatroomInfo.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ChatroomInfo message.
     * @function verify
     * @memberof ChatroomInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ChatroomInfo.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.title))return"title: string expected";if(message.desc!=null&&message.hasOwnProperty("desc"))if(!$util.isString(message.desc))return"desc: string expected";if(message.portrait!=null&&message.hasOwnProperty("portrait"))if(!$util.isString(message.portrait))return"portrait: string expected";if(message.memberCount!=null&&message.hasOwnProperty("memberCount"))if(!$util.isInteger(message.memberCount))return"memberCount: integer expected";if(message.createDt!=null&&message.hasOwnProperty("createDt"))if(!$util.isInteger(message.createDt)&&!(message.createDt&&$util.isInteger(message.createDt.low)&&$util.isInteger(message.createDt.high)))return"createDt: integer|Long expected";if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(!$util.isInteger(message.updateDt)&&!(message.updateDt&&$util.isInteger(message.updateDt.low)&&$util.isInteger(message.updateDt.high)))return"updateDt: integer|Long expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";if(message.state!=null&&message.hasOwnProperty("state"))if(!$util.isInteger(message.state))return"state: integer expected";return null;};/**
     * Creates a ChatroomInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ChatroomInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ChatroomInfo} ChatroomInfo
     */ChatroomInfo.fromObject=function fromObject(object){if(object instanceof $root.ChatroomInfo)return object;var message=new $root.ChatroomInfo();if(object.title!=null)message.title=String(object.title);if(object.desc!=null)message.desc=String(object.desc);if(object.portrait!=null)message.portrait=String(object.portrait);if(object.memberCount!=null)message.memberCount=object.memberCount|0;if(object.createDt!=null)if($util.Long)(message.createDt=$util.Long.fromValue(object.createDt)).unsigned=false;else if(typeof object.createDt==="string")message.createDt=parseInt(object.createDt,10);else if(typeof object.createDt==="number")message.createDt=object.createDt;else if((0,_typeof3.default)(object.createDt)==="object")message.createDt=new $util.LongBits(object.createDt.low>>>0,object.createDt.high>>>0).toNumber();if(object.updateDt!=null)if($util.Long)(message.updateDt=$util.Long.fromValue(object.updateDt)).unsigned=false;else if(typeof object.updateDt==="string")message.updateDt=parseInt(object.updateDt,10);else if(typeof object.updateDt==="number")message.updateDt=object.updateDt;else if((0,_typeof3.default)(object.updateDt)==="object")message.updateDt=new $util.LongBits(object.updateDt.low>>>0,object.updateDt.high>>>0).toNumber();if(object.extra!=null)message.extra=String(object.extra);if(object.state!=null)message.state=object.state|0;return message;};/**
     * Creates a plain object from a ChatroomInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ChatroomInfo
     * @static
     * @param {ChatroomInfo} message ChatroomInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ChatroomInfo.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.title="";object.desc="";object.portrait="";object.memberCount=0;if($util.Long){var long=new $util.Long(0,0,false);object.createDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.createDt=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.updateDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.updateDt=options.longs===String?"0":0;object.extra="";object.state=0;}if(message.title!=null&&message.hasOwnProperty("title"))object.title=message.title;if(message.desc!=null&&message.hasOwnProperty("desc"))object.desc=message.desc;if(message.portrait!=null&&message.hasOwnProperty("portrait"))object.portrait=message.portrait;if(message.memberCount!=null&&message.hasOwnProperty("memberCount"))object.memberCount=message.memberCount;if(message.createDt!=null&&message.hasOwnProperty("createDt"))if(typeof message.createDt==="number")object.createDt=options.longs===String?String(message.createDt):message.createDt;else object.createDt=options.longs===String?$util.Long.prototype.toString.call(message.createDt):options.longs===Number?new $util.LongBits(message.createDt.low>>>0,message.createDt.high>>>0).toNumber():message.createDt;if(message.updateDt!=null&&message.hasOwnProperty("updateDt"))if(typeof message.updateDt==="number")object.updateDt=options.longs===String?String(message.updateDt):message.updateDt;else object.updateDt=options.longs===String?$util.Long.prototype.toString.call(message.updateDt):options.longs===Number?new $util.LongBits(message.updateDt.low>>>0,message.updateDt.high>>>0).toNumber():message.updateDt;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;if(message.state!=null&&message.hasOwnProperty("state"))object.state=message.state;return object;};/**
     * Converts this ChatroomInfo to JSON.
     * @function toJSON
     * @memberof ChatroomInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ChatroomInfo.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ChatroomInfo;}();$root.GetChatroomMemberInfoRequest=function(){/**
     * Properties of a GetChatroomMemberInfoRequest.
     * @exports IGetChatroomMemberInfoRequest
     * @interface IGetChatroomMemberInfoRequest
     * @property {string} chatroomId GetChatroomMemberInfoRequest chatroomId
     * @property {number|null} [maxCount] GetChatroomMemberInfoRequest maxCount
     *//**
     * Constructs a new GetChatroomMemberInfoRequest.
     * @exports GetChatroomMemberInfoRequest
     * @classdesc Represents a GetChatroomMemberInfoRequest.
     * @implements IGetChatroomMemberInfoRequest
     * @constructor
     * @param {IGetChatroomMemberInfoRequest=} [properties] Properties to set
     */function GetChatroomMemberInfoRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetChatroomMemberInfoRequest chatroomId.
     * @member {string} chatroomId
     * @memberof GetChatroomMemberInfoRequest
     * @instance
     */GetChatroomMemberInfoRequest.prototype.chatroomId="";/**
     * GetChatroomMemberInfoRequest maxCount.
     * @member {number} maxCount
     * @memberof GetChatroomMemberInfoRequest
     * @instance
     */GetChatroomMemberInfoRequest.prototype.maxCount=0;/**
     * Creates a new GetChatroomMemberInfoRequest instance using the specified properties.
     * @function create
     * @memberof GetChatroomMemberInfoRequest
     * @static
     * @param {IGetChatroomMemberInfoRequest=} [properties] Properties to set
     * @returns {GetChatroomMemberInfoRequest} GetChatroomMemberInfoRequest instance
     */GetChatroomMemberInfoRequest.create=function create(properties){return new GetChatroomMemberInfoRequest(properties);};/**
     * Encodes the specified GetChatroomMemberInfoRequest message. Does not implicitly {@link GetChatroomMemberInfoRequest.verify|verify} messages.
     * @function encode
     * @memberof GetChatroomMemberInfoRequest
     * @static
     * @param {IGetChatroomMemberInfoRequest} message GetChatroomMemberInfoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetChatroomMemberInfoRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.chatroomId);if(message.maxCount!=null&&message.hasOwnProperty("maxCount"))writer.uint32(/* id 2, wireType 0 =*/16).int32(message.maxCount);return writer;};/**
     * Encodes the specified GetChatroomMemberInfoRequest message, length delimited. Does not implicitly {@link GetChatroomMemberInfoRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetChatroomMemberInfoRequest
     * @static
     * @param {IGetChatroomMemberInfoRequest} message GetChatroomMemberInfoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetChatroomMemberInfoRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetChatroomMemberInfoRequest message from the specified reader or buffer.
     * @function decode
     * @memberof GetChatroomMemberInfoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetChatroomMemberInfoRequest} GetChatroomMemberInfoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetChatroomMemberInfoRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetChatroomMemberInfoRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.chatroomId=reader.string();break;case 2:message.maxCount=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("chatroomId"))throw $util.ProtocolError("missing required 'chatroomId'",{instance:message});return message;};/**
     * Decodes a GetChatroomMemberInfoRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetChatroomMemberInfoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetChatroomMemberInfoRequest} GetChatroomMemberInfoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetChatroomMemberInfoRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetChatroomMemberInfoRequest message.
     * @function verify
     * @memberof GetChatroomMemberInfoRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetChatroomMemberInfoRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.chatroomId))return"chatroomId: string expected";if(message.maxCount!=null&&message.hasOwnProperty("maxCount"))if(!$util.isInteger(message.maxCount))return"maxCount: integer expected";return null;};/**
     * Creates a GetChatroomMemberInfoRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetChatroomMemberInfoRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetChatroomMemberInfoRequest} GetChatroomMemberInfoRequest
     */GetChatroomMemberInfoRequest.fromObject=function fromObject(object){if(object instanceof $root.GetChatroomMemberInfoRequest)return object;var message=new $root.GetChatroomMemberInfoRequest();if(object.chatroomId!=null)message.chatroomId=String(object.chatroomId);if(object.maxCount!=null)message.maxCount=object.maxCount|0;return message;};/**
     * Creates a plain object from a GetChatroomMemberInfoRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetChatroomMemberInfoRequest
     * @static
     * @param {GetChatroomMemberInfoRequest} message GetChatroomMemberInfoRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetChatroomMemberInfoRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.chatroomId="";object.maxCount=0;}if(message.chatroomId!=null&&message.hasOwnProperty("chatroomId"))object.chatroomId=message.chatroomId;if(message.maxCount!=null&&message.hasOwnProperty("maxCount"))object.maxCount=message.maxCount;return object;};/**
     * Converts this GetChatroomMemberInfoRequest to JSON.
     * @function toJSON
     * @memberof GetChatroomMemberInfoRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetChatroomMemberInfoRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetChatroomMemberInfoRequest;}();$root.ChatroomMemberInfo=function(){/**
     * Properties of a ChatroomMemberInfo.
     * @exports IChatroomMemberInfo
     * @interface IChatroomMemberInfo
     * @property {number|null} [memberCount] ChatroomMemberInfo memberCount
     * @property {Array.<string>|null} [members] ChatroomMemberInfo members
     *//**
     * Constructs a new ChatroomMemberInfo.
     * @exports ChatroomMemberInfo
     * @classdesc Represents a ChatroomMemberInfo.
     * @implements IChatroomMemberInfo
     * @constructor
     * @param {IChatroomMemberInfo=} [properties] Properties to set
     */function ChatroomMemberInfo(properties){this.members=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ChatroomMemberInfo memberCount.
     * @member {number} memberCount
     * @memberof ChatroomMemberInfo
     * @instance
     */ChatroomMemberInfo.prototype.memberCount=0;/**
     * ChatroomMemberInfo members.
     * @member {Array.<string>} members
     * @memberof ChatroomMemberInfo
     * @instance
     */ChatroomMemberInfo.prototype.members=$util.emptyArray;/**
     * Creates a new ChatroomMemberInfo instance using the specified properties.
     * @function create
     * @memberof ChatroomMemberInfo
     * @static
     * @param {IChatroomMemberInfo=} [properties] Properties to set
     * @returns {ChatroomMemberInfo} ChatroomMemberInfo instance
     */ChatroomMemberInfo.create=function create(properties){return new ChatroomMemberInfo(properties);};/**
     * Encodes the specified ChatroomMemberInfo message. Does not implicitly {@link ChatroomMemberInfo.verify|verify} messages.
     * @function encode
     * @memberof ChatroomMemberInfo
     * @static
     * @param {IChatroomMemberInfo} message ChatroomMemberInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ChatroomMemberInfo.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.memberCount!=null&&message.hasOwnProperty("memberCount"))writer.uint32(/* id 1, wireType 0 =*/8).int32(message.memberCount);if(message.members!=null&&message.members.length)for(var i=0;i<message.members.length;++i){writer.uint32(/* id 2, wireType 2 =*/18).string(message.members[i]);}return writer;};/**
     * Encodes the specified ChatroomMemberInfo message, length delimited. Does not implicitly {@link ChatroomMemberInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ChatroomMemberInfo
     * @static
     * @param {IChatroomMemberInfo} message ChatroomMemberInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ChatroomMemberInfo.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ChatroomMemberInfo message from the specified reader or buffer.
     * @function decode
     * @memberof ChatroomMemberInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ChatroomMemberInfo} ChatroomMemberInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ChatroomMemberInfo.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ChatroomMemberInfo();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.memberCount=reader.int32();break;case 2:if(!(message.members&&message.members.length))message.members=[];message.members.push(reader.string());break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a ChatroomMemberInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ChatroomMemberInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ChatroomMemberInfo} ChatroomMemberInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ChatroomMemberInfo.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ChatroomMemberInfo message.
     * @function verify
     * @memberof ChatroomMemberInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ChatroomMemberInfo.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.memberCount!=null&&message.hasOwnProperty("memberCount"))if(!$util.isInteger(message.memberCount))return"memberCount: integer expected";if(message.members!=null&&message.hasOwnProperty("members")){if(!Array.isArray(message.members))return"members: array expected";for(var i=0;i<message.members.length;++i){if(!$util.isString(message.members[i]))return"members: string[] expected";}}return null;};/**
     * Creates a ChatroomMemberInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ChatroomMemberInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ChatroomMemberInfo} ChatroomMemberInfo
     */ChatroomMemberInfo.fromObject=function fromObject(object){if(object instanceof $root.ChatroomMemberInfo)return object;var message=new $root.ChatroomMemberInfo();if(object.memberCount!=null)message.memberCount=object.memberCount|0;if(object.members){if(!Array.isArray(object.members))throw TypeError(".ChatroomMemberInfo.members: array expected");message.members=[];for(var i=0;i<object.members.length;++i){message.members[i]=String(object.members[i]);}}return message;};/**
     * Creates a plain object from a ChatroomMemberInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ChatroomMemberInfo
     * @static
     * @param {ChatroomMemberInfo} message ChatroomMemberInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ChatroomMemberInfo.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.members=[];if(options.defaults)object.memberCount=0;if(message.memberCount!=null&&message.hasOwnProperty("memberCount"))object.memberCount=message.memberCount;if(message.members&&message.members.length){object.members=[];for(var j=0;j<message.members.length;++j){object.members[j]=message.members[j];}}return object;};/**
     * Converts this ChatroomMemberInfo to JSON.
     * @function toJSON
     * @memberof ChatroomMemberInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ChatroomMemberInfo.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ChatroomMemberInfo;}();$root.INT64Buf=function(){/**
     * Properties of a INT64Buf.
     * @exports IINT64Buf
     * @interface IINT64Buf
     * @property {Long} id INT64Buf id
     *//**
     * Constructs a new INT64Buf.
     * @exports INT64Buf
     * @classdesc Represents a INT64Buf.
     * @implements IINT64Buf
     * @constructor
     * @param {IINT64Buf=} [properties] Properties to set
     */function INT64Buf(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * INT64Buf id.
     * @member {Long} id
     * @memberof INT64Buf
     * @instance
     */INT64Buf.prototype.id=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new INT64Buf instance using the specified properties.
     * @function create
     * @memberof INT64Buf
     * @static
     * @param {IINT64Buf=} [properties] Properties to set
     * @returns {INT64Buf} INT64Buf instance
     */INT64Buf.create=function create(properties){return new INT64Buf(properties);};/**
     * Encodes the specified INT64Buf message. Does not implicitly {@link INT64Buf.verify|verify} messages.
     * @function encode
     * @memberof INT64Buf
     * @static
     * @param {IINT64Buf} message INT64Buf message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */INT64Buf.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);return writer;};/**
     * Encodes the specified INT64Buf message, length delimited. Does not implicitly {@link INT64Buf.verify|verify} messages.
     * @function encodeDelimited
     * @memberof INT64Buf
     * @static
     * @param {IINT64Buf} message INT64Buf message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */INT64Buf.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a INT64Buf message from the specified reader or buffer.
     * @function decode
     * @memberof INT64Buf
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {INT64Buf} INT64Buf
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */INT64Buf.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.INT64Buf();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.id=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("id"))throw $util.ProtocolError("missing required 'id'",{instance:message});return message;};/**
     * Decodes a INT64Buf message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof INT64Buf
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {INT64Buf} INT64Buf
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */INT64Buf.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a INT64Buf message.
     * @function verify
     * @memberof INT64Buf
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */INT64Buf.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.id)&&!(message.id&&$util.isInteger(message.id.low)&&$util.isInteger(message.id.high)))return"id: integer|Long expected";return null;};/**
     * Creates a INT64Buf message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof INT64Buf
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {INT64Buf} INT64Buf
     */INT64Buf.fromObject=function fromObject(object){if(object instanceof $root.INT64Buf)return object;var message=new $root.INT64Buf();if(object.id!=null)if($util.Long)(message.id=$util.Long.fromValue(object.id)).unsigned=false;else if(typeof object.id==="string")message.id=parseInt(object.id,10);else if(typeof object.id==="number")message.id=object.id;else if((0,_typeof3.default)(object.id)==="object")message.id=new $util.LongBits(object.id.low>>>0,object.id.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a INT64Buf message. Also converts values to other types if specified.
     * @function toObject
     * @memberof INT64Buf
     * @static
     * @param {INT64Buf} message INT64Buf
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */INT64Buf.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults)if($util.Long){var long=new $util.Long(0,0,false);object.id=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.id=options.longs===String?"0":0;if(message.id!=null&&message.hasOwnProperty("id"))if(typeof message.id==="number")object.id=options.longs===String?String(message.id):message.id;else object.id=options.longs===String?$util.Long.prototype.toString.call(message.id):options.longs===Number?new $util.LongBits(message.id.low>>>0,message.id.high>>>0).toNumber():message.id;return object;};/**
     * Converts this INT64Buf to JSON.
     * @function toJSON
     * @memberof INT64Buf
     * @instance
     * @returns {Object.<string,*>} JSON object
     */INT64Buf.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return INT64Buf;}();$root.INT64ListBuf=function(){/**
     * Properties of a INT64ListBuf.
     * @exports IINT64ListBuf
     * @interface IINT64ListBuf
     * @property {Array.<Long>|null} [id] INT64ListBuf id
     *//**
     * Constructs a new INT64ListBuf.
     * @exports INT64ListBuf
     * @classdesc Represents a INT64ListBuf.
     * @implements IINT64ListBuf
     * @constructor
     * @param {IINT64ListBuf=} [properties] Properties to set
     */function INT64ListBuf(properties){this.id=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * INT64ListBuf id.
     * @member {Array.<Long>} id
     * @memberof INT64ListBuf
     * @instance
     */INT64ListBuf.prototype.id=$util.emptyArray;/**
     * Creates a new INT64ListBuf instance using the specified properties.
     * @function create
     * @memberof INT64ListBuf
     * @static
     * @param {IINT64ListBuf=} [properties] Properties to set
     * @returns {INT64ListBuf} INT64ListBuf instance
     */INT64ListBuf.create=function create(properties){return new INT64ListBuf(properties);};/**
     * Encodes the specified INT64ListBuf message. Does not implicitly {@link INT64ListBuf.verify|verify} messages.
     * @function encode
     * @memberof INT64ListBuf
     * @static
     * @param {IINT64ListBuf} message INT64ListBuf message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */INT64ListBuf.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.id!=null&&message.id.length)for(var i=0;i<message.id.length;++i){writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id[i]);}return writer;};/**
     * Encodes the specified INT64ListBuf message, length delimited. Does not implicitly {@link INT64ListBuf.verify|verify} messages.
     * @function encodeDelimited
     * @memberof INT64ListBuf
     * @static
     * @param {IINT64ListBuf} message INT64ListBuf message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */INT64ListBuf.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a INT64ListBuf message from the specified reader or buffer.
     * @function decode
     * @memberof INT64ListBuf
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {INT64ListBuf} INT64ListBuf
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */INT64ListBuf.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.INT64ListBuf();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.id&&message.id.length))message.id=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.id.push(reader.int64());}}else message.id.push(reader.int64());break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a INT64ListBuf message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof INT64ListBuf
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {INT64ListBuf} INT64ListBuf
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */INT64ListBuf.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a INT64ListBuf message.
     * @function verify
     * @memberof INT64ListBuf
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */INT64ListBuf.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.id!=null&&message.hasOwnProperty("id")){if(!Array.isArray(message.id))return"id: array expected";for(var i=0;i<message.id.length;++i){if(!$util.isInteger(message.id[i])&&!(message.id[i]&&$util.isInteger(message.id[i].low)&&$util.isInteger(message.id[i].high)))return"id: integer|Long[] expected";}}return null;};/**
     * Creates a INT64ListBuf message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof INT64ListBuf
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {INT64ListBuf} INT64ListBuf
     */INT64ListBuf.fromObject=function fromObject(object){if(object instanceof $root.INT64ListBuf)return object;var message=new $root.INT64ListBuf();if(object.id){if(!Array.isArray(object.id))throw TypeError(".INT64ListBuf.id: array expected");message.id=[];for(var i=0;i<object.id.length;++i){if($util.Long)(message.id[i]=$util.Long.fromValue(object.id[i])).unsigned=false;else if(typeof object.id[i]==="string")message.id[i]=parseInt(object.id[i],10);else if(typeof object.id[i]==="number")message.id[i]=object.id[i];else if((0,_typeof3.default)(object.id[i])==="object")message.id[i]=new $util.LongBits(object.id[i].low>>>0,object.id[i].high>>>0).toNumber();}}return message;};/**
     * Creates a plain object from a INT64ListBuf message. Also converts values to other types if specified.
     * @function toObject
     * @memberof INT64ListBuf
     * @static
     * @param {INT64ListBuf} message INT64ListBuf
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */INT64ListBuf.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.id=[];if(message.id&&message.id.length){object.id=[];for(var j=0;j<message.id.length;++j){if(typeof message.id[j]==="number")object.id[j]=options.longs===String?String(message.id[j]):message.id[j];else object.id[j]=options.longs===String?$util.Long.prototype.toString.call(message.id[j]):options.longs===Number?new $util.LongBits(message.id[j].low>>>0,message.id[j].high>>>0).toNumber():message.id[j];}}return object;};/**
     * Converts this INT64ListBuf to JSON.
     * @function toJSON
     * @memberof INT64ListBuf
     * @instance
     * @returns {Object.<string,*>} JSON object
     */INT64ListBuf.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return INT64ListBuf;}();$root.NotifyRecallMessage=function(){/**
     * Properties of a NotifyRecallMessage.
     * @exports INotifyRecallMessage
     * @interface INotifyRecallMessage
     * @property {Long} id NotifyRecallMessage id
     * @property {string} fromUser NotifyRecallMessage fromUser
     *//**
     * Constructs a new NotifyRecallMessage.
     * @exports NotifyRecallMessage
     * @classdesc Represents a NotifyRecallMessage.
     * @implements INotifyRecallMessage
     * @constructor
     * @param {INotifyRecallMessage=} [properties] Properties to set
     */function NotifyRecallMessage(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * NotifyRecallMessage id.
     * @member {Long} id
     * @memberof NotifyRecallMessage
     * @instance
     */NotifyRecallMessage.prototype.id=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * NotifyRecallMessage fromUser.
     * @member {string} fromUser
     * @memberof NotifyRecallMessage
     * @instance
     */NotifyRecallMessage.prototype.fromUser="";/**
     * Creates a new NotifyRecallMessage instance using the specified properties.
     * @function create
     * @memberof NotifyRecallMessage
     * @static
     * @param {INotifyRecallMessage=} [properties] Properties to set
     * @returns {NotifyRecallMessage} NotifyRecallMessage instance
     */NotifyRecallMessage.create=function create(properties){return new NotifyRecallMessage(properties);};/**
     * Encodes the specified NotifyRecallMessage message. Does not implicitly {@link NotifyRecallMessage.verify|verify} messages.
     * @function encode
     * @memberof NotifyRecallMessage
     * @static
     * @param {INotifyRecallMessage} message NotifyRecallMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */NotifyRecallMessage.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);writer.uint32(/* id 2, wireType 2 =*/18).string(message.fromUser);return writer;};/**
     * Encodes the specified NotifyRecallMessage message, length delimited. Does not implicitly {@link NotifyRecallMessage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof NotifyRecallMessage
     * @static
     * @param {INotifyRecallMessage} message NotifyRecallMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */NotifyRecallMessage.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a NotifyRecallMessage message from the specified reader or buffer.
     * @function decode
     * @memberof NotifyRecallMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {NotifyRecallMessage} NotifyRecallMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */NotifyRecallMessage.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.NotifyRecallMessage();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.id=reader.int64();break;case 2:message.fromUser=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("id"))throw $util.ProtocolError("missing required 'id'",{instance:message});if(!message.hasOwnProperty("fromUser"))throw $util.ProtocolError("missing required 'fromUser'",{instance:message});return message;};/**
     * Decodes a NotifyRecallMessage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof NotifyRecallMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {NotifyRecallMessage} NotifyRecallMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */NotifyRecallMessage.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a NotifyRecallMessage message.
     * @function verify
     * @memberof NotifyRecallMessage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */NotifyRecallMessage.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.id)&&!(message.id&&$util.isInteger(message.id.low)&&$util.isInteger(message.id.high)))return"id: integer|Long expected";if(!$util.isString(message.fromUser))return"fromUser: string expected";return null;};/**
     * Creates a NotifyRecallMessage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof NotifyRecallMessage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {NotifyRecallMessage} NotifyRecallMessage
     */NotifyRecallMessage.fromObject=function fromObject(object){if(object instanceof $root.NotifyRecallMessage)return object;var message=new $root.NotifyRecallMessage();if(object.id!=null)if($util.Long)(message.id=$util.Long.fromValue(object.id)).unsigned=false;else if(typeof object.id==="string")message.id=parseInt(object.id,10);else if(typeof object.id==="number")message.id=object.id;else if((0,_typeof3.default)(object.id)==="object")message.id=new $util.LongBits(object.id.low>>>0,object.id.high>>>0).toNumber();if(object.fromUser!=null)message.fromUser=String(object.fromUser);return message;};/**
     * Creates a plain object from a NotifyRecallMessage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof NotifyRecallMessage
     * @static
     * @param {NotifyRecallMessage} message NotifyRecallMessage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */NotifyRecallMessage.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.id=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.id=options.longs===String?"0":0;object.fromUser="";}if(message.id!=null&&message.hasOwnProperty("id"))if(typeof message.id==="number")object.id=options.longs===String?String(message.id):message.id;else object.id=options.longs===String?$util.Long.prototype.toString.call(message.id):options.longs===Number?new $util.LongBits(message.id.low>>>0,message.id.high>>>0).toNumber():message.id;if(message.fromUser!=null&&message.hasOwnProperty("fromUser"))object.fromUser=message.fromUser;return object;};/**
     * Converts this NotifyRecallMessage to JSON.
     * @function toJSON
     * @memberof NotifyRecallMessage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */NotifyRecallMessage.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return NotifyRecallMessage;}();$root.BlackUserRequest=function(){/**
     * Properties of a BlackUserRequest.
     * @exports IBlackUserRequest
     * @interface IBlackUserRequest
     * @property {string} uid BlackUserRequest uid
     * @property {number} status BlackUserRequest status
     *//**
     * Constructs a new BlackUserRequest.
     * @exports BlackUserRequest
     * @classdesc Represents a BlackUserRequest.
     * @implements IBlackUserRequest
     * @constructor
     * @param {IBlackUserRequest=} [properties] Properties to set
     */function BlackUserRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * BlackUserRequest uid.
     * @member {string} uid
     * @memberof BlackUserRequest
     * @instance
     */BlackUserRequest.prototype.uid="";/**
     * BlackUserRequest status.
     * @member {number} status
     * @memberof BlackUserRequest
     * @instance
     */BlackUserRequest.prototype.status=0;/**
     * Creates a new BlackUserRequest instance using the specified properties.
     * @function create
     * @memberof BlackUserRequest
     * @static
     * @param {IBlackUserRequest=} [properties] Properties to set
     * @returns {BlackUserRequest} BlackUserRequest instance
     */BlackUserRequest.create=function create(properties){return new BlackUserRequest(properties);};/**
     * Encodes the specified BlackUserRequest message. Does not implicitly {@link BlackUserRequest.verify|verify} messages.
     * @function encode
     * @memberof BlackUserRequest
     * @static
     * @param {IBlackUserRequest} message BlackUserRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */BlackUserRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);return writer;};/**
     * Encodes the specified BlackUserRequest message, length delimited. Does not implicitly {@link BlackUserRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BlackUserRequest
     * @static
     * @param {IBlackUserRequest} message BlackUserRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */BlackUserRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a BlackUserRequest message from the specified reader or buffer.
     * @function decode
     * @memberof BlackUserRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BlackUserRequest} BlackUserRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */BlackUserRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.BlackUserRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.uid=reader.string();break;case 2:message.status=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("uid"))throw $util.ProtocolError("missing required 'uid'",{instance:message});if(!message.hasOwnProperty("status"))throw $util.ProtocolError("missing required 'status'",{instance:message});return message;};/**
     * Decodes a BlackUserRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BlackUserRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BlackUserRequest} BlackUserRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */BlackUserRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a BlackUserRequest message.
     * @function verify
     * @memberof BlackUserRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */BlackUserRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.uid))return"uid: string expected";if(!$util.isInteger(message.status))return"status: integer expected";return null;};/**
     * Creates a BlackUserRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BlackUserRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BlackUserRequest} BlackUserRequest
     */BlackUserRequest.fromObject=function fromObject(object){if(object instanceof $root.BlackUserRequest)return object;var message=new $root.BlackUserRequest();if(object.uid!=null)message.uid=String(object.uid);if(object.status!=null)message.status=object.status|0;return message;};/**
     * Creates a plain object from a BlackUserRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BlackUserRequest
     * @static
     * @param {BlackUserRequest} message BlackUserRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */BlackUserRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.uid="";object.status=0;}if(message.uid!=null&&message.hasOwnProperty("uid"))object.uid=message.uid;if(message.status!=null&&message.hasOwnProperty("status"))object.status=message.status;return object;};/**
     * Converts this BlackUserRequest to JSON.
     * @function toJSON
     * @memberof BlackUserRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */BlackUserRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return BlackUserRequest;}();$root.RouteRequest=function(){/**
     * Properties of a RouteRequest.
     * @exports IRouteRequest
     * @interface IRouteRequest
     * @property {string|null} [app] RouteRequest app
     * @property {number|null} [platform] RouteRequest platform
     * @property {number|null} [pushType] RouteRequest pushType
     * @property {string|null} [deviceName] RouteRequest deviceName
     * @property {string|null} [deviceVersion] RouteRequest deviceVersion
     * @property {string|null} [phoneName] RouteRequest phoneName
     * @property {string|null} [language] RouteRequest language
     * @property {string|null} [carrierName] RouteRequest carrierName
     * @property {string|null} [appVersion] RouteRequest appVersion
     * @property {string|null} [sdkVersion] RouteRequest sdkVersion
     * @property {string|null} [wxAppId] RouteRequest wxAppId
     * @property {string|null} [wxAppKey] RouteRequest wxAppKey
     * @property {string|null} [webAppId] RouteRequest webAppId
     * @property {string|null} [webAppKey] RouteRequest webAppKey
     * @property {string|null} [host] RouteRequest host
     * @property {string|null} [signature] RouteRequest signature
     *//**
     * Constructs a new RouteRequest.
     * @exports RouteRequest
     * @classdesc Represents a RouteRequest.
     * @implements IRouteRequest
     * @constructor
     * @param {IRouteRequest=} [properties] Properties to set
     */function RouteRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * RouteRequest app.
     * @member {string} app
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.app="";/**
     * RouteRequest platform.
     * @member {number} platform
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.platform=0;/**
     * RouteRequest pushType.
     * @member {number} pushType
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.pushType=0;/**
     * RouteRequest deviceName.
     * @member {string} deviceName
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.deviceName="";/**
     * RouteRequest deviceVersion.
     * @member {string} deviceVersion
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.deviceVersion="";/**
     * RouteRequest phoneName.
     * @member {string} phoneName
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.phoneName="";/**
     * RouteRequest language.
     * @member {string} language
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.language="";/**
     * RouteRequest carrierName.
     * @member {string} carrierName
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.carrierName="";/**
     * RouteRequest appVersion.
     * @member {string} appVersion
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.appVersion="";/**
     * RouteRequest sdkVersion.
     * @member {string} sdkVersion
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.sdkVersion="";/**
     * RouteRequest wxAppId.
     * @member {string} wxAppId
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.wxAppId="";/**
     * RouteRequest wxAppKey.
     * @member {string} wxAppKey
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.wxAppKey="";/**
     * RouteRequest webAppId.
     * @member {string} webAppId
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.webAppId="";/**
     * RouteRequest webAppKey.
     * @member {string} webAppKey
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.webAppKey="";/**
     * RouteRequest host.
     * @member {string} host
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.host="";/**
     * RouteRequest signature.
     * @member {string} signature
     * @memberof RouteRequest
     * @instance
     */RouteRequest.prototype.signature="";/**
     * Creates a new RouteRequest instance using the specified properties.
     * @function create
     * @memberof RouteRequest
     * @static
     * @param {IRouteRequest=} [properties] Properties to set
     * @returns {RouteRequest} RouteRequest instance
     */RouteRequest.create=function create(properties){return new RouteRequest(properties);};/**
     * Encodes the specified RouteRequest message. Does not implicitly {@link RouteRequest.verify|verify} messages.
     * @function encode
     * @memberof RouteRequest
     * @static
     * @param {IRouteRequest} message RouteRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RouteRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.app!=null&&message.hasOwnProperty("app"))writer.uint32(/* id 1, wireType 2 =*/10).string(message.app);if(message.platform!=null&&message.hasOwnProperty("platform"))writer.uint32(/* id 2, wireType 0 =*/16).int32(message.platform);if(message.pushType!=null&&message.hasOwnProperty("pushType"))writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pushType);if(message.deviceName!=null&&message.hasOwnProperty("deviceName"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.deviceName);if(message.deviceVersion!=null&&message.hasOwnProperty("deviceVersion"))writer.uint32(/* id 5, wireType 2 =*/42).string(message.deviceVersion);if(message.phoneName!=null&&message.hasOwnProperty("phoneName"))writer.uint32(/* id 6, wireType 2 =*/50).string(message.phoneName);if(message.language!=null&&message.hasOwnProperty("language"))writer.uint32(/* id 7, wireType 2 =*/58).string(message.language);if(message.carrierName!=null&&message.hasOwnProperty("carrierName"))writer.uint32(/* id 8, wireType 2 =*/66).string(message.carrierName);if(message.appVersion!=null&&message.hasOwnProperty("appVersion"))writer.uint32(/* id 9, wireType 2 =*/74).string(message.appVersion);if(message.sdkVersion!=null&&message.hasOwnProperty("sdkVersion"))writer.uint32(/* id 10, wireType 2 =*/82).string(message.sdkVersion);if(message.wxAppId!=null&&message.hasOwnProperty("wxAppId"))writer.uint32(/* id 11, wireType 2 =*/90).string(message.wxAppId);if(message.wxAppKey!=null&&message.hasOwnProperty("wxAppKey"))writer.uint32(/* id 12, wireType 2 =*/98).string(message.wxAppKey);if(message.webAppId!=null&&message.hasOwnProperty("webAppId"))writer.uint32(/* id 13, wireType 2 =*/106).string(message.webAppId);if(message.webAppKey!=null&&message.hasOwnProperty("webAppKey"))writer.uint32(/* id 14, wireType 2 =*/114).string(message.webAppKey);if(message.host!=null&&message.hasOwnProperty("host"))writer.uint32(/* id 15, wireType 2 =*/122).string(message.host);if(message.signature!=null&&message.hasOwnProperty("signature"))writer.uint32(/* id 16, wireType 2 =*/130).string(message.signature);return writer;};/**
     * Encodes the specified RouteRequest message, length delimited. Does not implicitly {@link RouteRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof RouteRequest
     * @static
     * @param {IRouteRequest} message RouteRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RouteRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a RouteRequest message from the specified reader or buffer.
     * @function decode
     * @memberof RouteRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {RouteRequest} RouteRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RouteRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.RouteRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.app=reader.string();break;case 2:message.platform=reader.int32();break;case 3:message.pushType=reader.int32();break;case 4:message.deviceName=reader.string();break;case 5:message.deviceVersion=reader.string();break;case 6:message.phoneName=reader.string();break;case 7:message.language=reader.string();break;case 8:message.carrierName=reader.string();break;case 9:message.appVersion=reader.string();break;case 10:message.sdkVersion=reader.string();break;case 11:message.wxAppId=reader.string();break;case 12:message.wxAppKey=reader.string();break;case 13:message.webAppId=reader.string();break;case 14:message.webAppKey=reader.string();break;case 15:message.host=reader.string();break;case 16:message.signature=reader.string();break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a RouteRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof RouteRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {RouteRequest} RouteRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RouteRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a RouteRequest message.
     * @function verify
     * @memberof RouteRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */RouteRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.app!=null&&message.hasOwnProperty("app"))if(!$util.isString(message.app))return"app: string expected";if(message.platform!=null&&message.hasOwnProperty("platform"))if(!$util.isInteger(message.platform))return"platform: integer expected";if(message.pushType!=null&&message.hasOwnProperty("pushType"))if(!$util.isInteger(message.pushType))return"pushType: integer expected";if(message.deviceName!=null&&message.hasOwnProperty("deviceName"))if(!$util.isString(message.deviceName))return"deviceName: string expected";if(message.deviceVersion!=null&&message.hasOwnProperty("deviceVersion"))if(!$util.isString(message.deviceVersion))return"deviceVersion: string expected";if(message.phoneName!=null&&message.hasOwnProperty("phoneName"))if(!$util.isString(message.phoneName))return"phoneName: string expected";if(message.language!=null&&message.hasOwnProperty("language"))if(!$util.isString(message.language))return"language: string expected";if(message.carrierName!=null&&message.hasOwnProperty("carrierName"))if(!$util.isString(message.carrierName))return"carrierName: string expected";if(message.appVersion!=null&&message.hasOwnProperty("appVersion"))if(!$util.isString(message.appVersion))return"appVersion: string expected";if(message.sdkVersion!=null&&message.hasOwnProperty("sdkVersion"))if(!$util.isString(message.sdkVersion))return"sdkVersion: string expected";if(message.wxAppId!=null&&message.hasOwnProperty("wxAppId"))if(!$util.isString(message.wxAppId))return"wxAppId: string expected";if(message.wxAppKey!=null&&message.hasOwnProperty("wxAppKey"))if(!$util.isString(message.wxAppKey))return"wxAppKey: string expected";if(message.webAppId!=null&&message.hasOwnProperty("webAppId"))if(!$util.isString(message.webAppId))return"webAppId: string expected";if(message.webAppKey!=null&&message.hasOwnProperty("webAppKey"))if(!$util.isString(message.webAppKey))return"webAppKey: string expected";if(message.host!=null&&message.hasOwnProperty("host"))if(!$util.isString(message.host))return"host: string expected";if(message.signature!=null&&message.hasOwnProperty("signature"))if(!$util.isString(message.signature))return"signature: string expected";return null;};/**
     * Creates a RouteRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof RouteRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {RouteRequest} RouteRequest
     */RouteRequest.fromObject=function fromObject(object){if(object instanceof $root.RouteRequest)return object;var message=new $root.RouteRequest();if(object.app!=null)message.app=String(object.app);if(object.platform!=null)message.platform=object.platform|0;if(object.pushType!=null)message.pushType=object.pushType|0;if(object.deviceName!=null)message.deviceName=String(object.deviceName);if(object.deviceVersion!=null)message.deviceVersion=String(object.deviceVersion);if(object.phoneName!=null)message.phoneName=String(object.phoneName);if(object.language!=null)message.language=String(object.language);if(object.carrierName!=null)message.carrierName=String(object.carrierName);if(object.appVersion!=null)message.appVersion=String(object.appVersion);if(object.sdkVersion!=null)message.sdkVersion=String(object.sdkVersion);if(object.wxAppId!=null)message.wxAppId=String(object.wxAppId);if(object.wxAppKey!=null)message.wxAppKey=String(object.wxAppKey);if(object.webAppId!=null)message.webAppId=String(object.webAppId);if(object.webAppKey!=null)message.webAppKey=String(object.webAppKey);if(object.host!=null)message.host=String(object.host);if(object.signature!=null)message.signature=String(object.signature);return message;};/**
     * Creates a plain object from a RouteRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof RouteRequest
     * @static
     * @param {RouteRequest} message RouteRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */RouteRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.app="";object.platform=0;object.pushType=0;object.deviceName="";object.deviceVersion="";object.phoneName="";object.language="";object.carrierName="";object.appVersion="";object.sdkVersion="";object.wxAppId="";object.wxAppKey="";object.webAppId="";object.webAppKey="";object.host="";object.signature="";}if(message.app!=null&&message.hasOwnProperty("app"))object.app=message.app;if(message.platform!=null&&message.hasOwnProperty("platform"))object.platform=message.platform;if(message.pushType!=null&&message.hasOwnProperty("pushType"))object.pushType=message.pushType;if(message.deviceName!=null&&message.hasOwnProperty("deviceName"))object.deviceName=message.deviceName;if(message.deviceVersion!=null&&message.hasOwnProperty("deviceVersion"))object.deviceVersion=message.deviceVersion;if(message.phoneName!=null&&message.hasOwnProperty("phoneName"))object.phoneName=message.phoneName;if(message.language!=null&&message.hasOwnProperty("language"))object.language=message.language;if(message.carrierName!=null&&message.hasOwnProperty("carrierName"))object.carrierName=message.carrierName;if(message.appVersion!=null&&message.hasOwnProperty("appVersion"))object.appVersion=message.appVersion;if(message.sdkVersion!=null&&message.hasOwnProperty("sdkVersion"))object.sdkVersion=message.sdkVersion;if(message.wxAppId!=null&&message.hasOwnProperty("wxAppId"))object.wxAppId=message.wxAppId;if(message.wxAppKey!=null&&message.hasOwnProperty("wxAppKey"))object.wxAppKey=message.wxAppKey;if(message.webAppId!=null&&message.hasOwnProperty("webAppId"))object.webAppId=message.webAppId;if(message.webAppKey!=null&&message.hasOwnProperty("webAppKey"))object.webAppKey=message.webAppKey;if(message.host!=null&&message.hasOwnProperty("host"))object.host=message.host;if(message.signature!=null&&message.hasOwnProperty("signature"))object.signature=message.signature;return object;};/**
     * Converts this RouteRequest to JSON.
     * @function toJSON
     * @memberof RouteRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */RouteRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return RouteRequest;}();$root.AddressTriple=function(){/**
     * Properties of an AddressTriple.
     * @exports IAddressTriple
     * @interface IAddressTriple
     * @property {string} host AddressTriple host
     * @property {number} longPort AddressTriple longPort
     * @property {number} shortPort AddressTriple shortPort
     * @property {number|null} [wssPort] AddressTriple wssPort
     *//**
     * Constructs a new AddressTriple.
     * @exports AddressTriple
     * @classdesc Represents an AddressTriple.
     * @implements IAddressTriple
     * @constructor
     * @param {IAddressTriple=} [properties] Properties to set
     */function AddressTriple(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * AddressTriple host.
     * @member {string} host
     * @memberof AddressTriple
     * @instance
     */AddressTriple.prototype.host="";/**
     * AddressTriple longPort.
     * @member {number} longPort
     * @memberof AddressTriple
     * @instance
     */AddressTriple.prototype.longPort=0;/**
     * AddressTriple shortPort.
     * @member {number} shortPort
     * @memberof AddressTriple
     * @instance
     */AddressTriple.prototype.shortPort=0;/**
     * AddressTriple wssPort.
     * @member {number} wssPort
     * @memberof AddressTriple
     * @instance
     */AddressTriple.prototype.wssPort=0;/**
     * Creates a new AddressTriple instance using the specified properties.
     * @function create
     * @memberof AddressTriple
     * @static
     * @param {IAddressTriple=} [properties] Properties to set
     * @returns {AddressTriple} AddressTriple instance
     */AddressTriple.create=function create(properties){return new AddressTriple(properties);};/**
     * Encodes the specified AddressTriple message. Does not implicitly {@link AddressTriple.verify|verify} messages.
     * @function encode
     * @memberof AddressTriple
     * @static
     * @param {IAddressTriple} message AddressTriple message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */AddressTriple.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.host);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.longPort);writer.uint32(/* id 3, wireType 0 =*/24).int32(message.shortPort);if(message.wssPort!=null&&message.hasOwnProperty("wssPort"))writer.uint32(/* id 4, wireType 0 =*/32).int32(message.wssPort);return writer;};/**
     * Encodes the specified AddressTriple message, length delimited. Does not implicitly {@link AddressTriple.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AddressTriple
     * @static
     * @param {IAddressTriple} message AddressTriple message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */AddressTriple.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes an AddressTriple message from the specified reader or buffer.
     * @function decode
     * @memberof AddressTriple
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AddressTriple} AddressTriple
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */AddressTriple.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.AddressTriple();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.host=reader.string();break;case 2:message.longPort=reader.int32();break;case 3:message.shortPort=reader.int32();break;case 4:message.wssPort=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("host"))throw $util.ProtocolError("missing required 'host'",{instance:message});if(!message.hasOwnProperty("longPort"))throw $util.ProtocolError("missing required 'longPort'",{instance:message});if(!message.hasOwnProperty("shortPort"))throw $util.ProtocolError("missing required 'shortPort'",{instance:message});return message;};/**
     * Decodes an AddressTriple message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AddressTriple
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AddressTriple} AddressTriple
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */AddressTriple.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies an AddressTriple message.
     * @function verify
     * @memberof AddressTriple
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */AddressTriple.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.host))return"host: string expected";if(!$util.isInteger(message.longPort))return"longPort: integer expected";if(!$util.isInteger(message.shortPort))return"shortPort: integer expected";if(message.wssPort!=null&&message.hasOwnProperty("wssPort"))if(!$util.isInteger(message.wssPort))return"wssPort: integer expected";return null;};/**
     * Creates an AddressTriple message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AddressTriple
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AddressTriple} AddressTriple
     */AddressTriple.fromObject=function fromObject(object){if(object instanceof $root.AddressTriple)return object;var message=new $root.AddressTriple();if(object.host!=null)message.host=String(object.host);if(object.longPort!=null)message.longPort=object.longPort|0;if(object.shortPort!=null)message.shortPort=object.shortPort|0;if(object.wssPort!=null)message.wssPort=object.wssPort|0;return message;};/**
     * Creates a plain object from an AddressTriple message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AddressTriple
     * @static
     * @param {AddressTriple} message AddressTriple
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */AddressTriple.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.host="";object.longPort=0;object.shortPort=0;object.wssPort=0;}if(message.host!=null&&message.hasOwnProperty("host"))object.host=message.host;if(message.longPort!=null&&message.hasOwnProperty("longPort"))object.longPort=message.longPort;if(message.shortPort!=null&&message.hasOwnProperty("shortPort"))object.shortPort=message.shortPort;if(message.wssPort!=null&&message.hasOwnProperty("wssPort"))object.wssPort=message.wssPort;return object;};/**
     * Converts this AddressTriple to JSON.
     * @function toJSON
     * @memberof AddressTriple
     * @instance
     * @returns {Object.<string,*>} JSON object
     */AddressTriple.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return AddressTriple;}();$root.RouteResponse=function(){/**
     * Properties of a RouteResponse.
     * @exports IRouteResponse
     * @interface IRouteResponse
     * @property {string} host RouteResponse host
     * @property {number} longPort RouteResponse longPort
     * @property {number} shortPort RouteResponse shortPort
     * @property {string|null} [thumbPara] RouteResponse thumbPara
     * @property {string|null} [node] RouteResponse node
     * @property {number|null} [commercial] RouteResponse commercial
     * @property {number|null} [wssPort] RouteResponse wssPort
     * @property {Array.<IAddressTriple>|null} [candidate] RouteResponse candidate
     *//**
     * Constructs a new RouteResponse.
     * @exports RouteResponse
     * @classdesc Represents a RouteResponse.
     * @implements IRouteResponse
     * @constructor
     * @param {IRouteResponse=} [properties] Properties to set
     */function RouteResponse(properties){this.candidate=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * RouteResponse host.
     * @member {string} host
     * @memberof RouteResponse
     * @instance
     */RouteResponse.prototype.host="";/**
     * RouteResponse longPort.
     * @member {number} longPort
     * @memberof RouteResponse
     * @instance
     */RouteResponse.prototype.longPort=0;/**
     * RouteResponse shortPort.
     * @member {number} shortPort
     * @memberof RouteResponse
     * @instance
     */RouteResponse.prototype.shortPort=0;/**
     * RouteResponse thumbPara.
     * @member {string} thumbPara
     * @memberof RouteResponse
     * @instance
     */RouteResponse.prototype.thumbPara="";/**
     * RouteResponse node.
     * @member {string} node
     * @memberof RouteResponse
     * @instance
     */RouteResponse.prototype.node="";/**
     * RouteResponse commercial.
     * @member {number} commercial
     * @memberof RouteResponse
     * @instance
     */RouteResponse.prototype.commercial=0;/**
     * RouteResponse wssPort.
     * @member {number} wssPort
     * @memberof RouteResponse
     * @instance
     */RouteResponse.prototype.wssPort=0;/**
     * RouteResponse candidate.
     * @member {Array.<IAddressTriple>} candidate
     * @memberof RouteResponse
     * @instance
     */RouteResponse.prototype.candidate=$util.emptyArray;/**
     * Creates a new RouteResponse instance using the specified properties.
     * @function create
     * @memberof RouteResponse
     * @static
     * @param {IRouteResponse=} [properties] Properties to set
     * @returns {RouteResponse} RouteResponse instance
     */RouteResponse.create=function create(properties){return new RouteResponse(properties);};/**
     * Encodes the specified RouteResponse message. Does not implicitly {@link RouteResponse.verify|verify} messages.
     * @function encode
     * @memberof RouteResponse
     * @static
     * @param {IRouteResponse} message RouteResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RouteResponse.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.host);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.longPort);writer.uint32(/* id 3, wireType 0 =*/24).int32(message.shortPort);if(message.thumbPara!=null&&message.hasOwnProperty("thumbPara"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.thumbPara);if(message.node!=null&&message.hasOwnProperty("node"))writer.uint32(/* id 5, wireType 2 =*/42).string(message.node);if(message.commercial!=null&&message.hasOwnProperty("commercial"))writer.uint32(/* id 6, wireType 0 =*/48).int32(message.commercial);if(message.wssPort!=null&&message.hasOwnProperty("wssPort"))writer.uint32(/* id 7, wireType 0 =*/56).int32(message.wssPort);if(message.candidate!=null&&message.candidate.length)for(var i=0;i<message.candidate.length;++i){$root.AddressTriple.encode(message.candidate[i],writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();}return writer;};/**
     * Encodes the specified RouteResponse message, length delimited. Does not implicitly {@link RouteResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof RouteResponse
     * @static
     * @param {IRouteResponse} message RouteResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RouteResponse.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a RouteResponse message from the specified reader or buffer.
     * @function decode
     * @memberof RouteResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {RouteResponse} RouteResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RouteResponse.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.RouteResponse();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.host=reader.string();break;case 2:message.longPort=reader.int32();break;case 3:message.shortPort=reader.int32();break;case 4:message.thumbPara=reader.string();break;case 5:message.node=reader.string();break;case 6:message.commercial=reader.int32();break;case 7:message.wssPort=reader.int32();break;case 8:if(!(message.candidate&&message.candidate.length))message.candidate=[];message.candidate.push($root.AddressTriple.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("host"))throw $util.ProtocolError("missing required 'host'",{instance:message});if(!message.hasOwnProperty("longPort"))throw $util.ProtocolError("missing required 'longPort'",{instance:message});if(!message.hasOwnProperty("shortPort"))throw $util.ProtocolError("missing required 'shortPort'",{instance:message});return message;};/**
     * Decodes a RouteResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof RouteResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {RouteResponse} RouteResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RouteResponse.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a RouteResponse message.
     * @function verify
     * @memberof RouteResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */RouteResponse.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.host))return"host: string expected";if(!$util.isInteger(message.longPort))return"longPort: integer expected";if(!$util.isInteger(message.shortPort))return"shortPort: integer expected";if(message.thumbPara!=null&&message.hasOwnProperty("thumbPara"))if(!$util.isString(message.thumbPara))return"thumbPara: string expected";if(message.node!=null&&message.hasOwnProperty("node"))if(!$util.isString(message.node))return"node: string expected";if(message.commercial!=null&&message.hasOwnProperty("commercial"))if(!$util.isInteger(message.commercial))return"commercial: integer expected";if(message.wssPort!=null&&message.hasOwnProperty("wssPort"))if(!$util.isInteger(message.wssPort))return"wssPort: integer expected";if(message.candidate!=null&&message.hasOwnProperty("candidate")){if(!Array.isArray(message.candidate))return"candidate: array expected";for(var i=0;i<message.candidate.length;++i){var error=$root.AddressTriple.verify(message.candidate[i]);if(error)return"candidate."+error;}}return null;};/**
     * Creates a RouteResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof RouteResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {RouteResponse} RouteResponse
     */RouteResponse.fromObject=function fromObject(object){if(object instanceof $root.RouteResponse)return object;var message=new $root.RouteResponse();if(object.host!=null)message.host=String(object.host);if(object.longPort!=null)message.longPort=object.longPort|0;if(object.shortPort!=null)message.shortPort=object.shortPort|0;if(object.thumbPara!=null)message.thumbPara=String(object.thumbPara);if(object.node!=null)message.node=String(object.node);if(object.commercial!=null)message.commercial=object.commercial|0;if(object.wssPort!=null)message.wssPort=object.wssPort|0;if(object.candidate){if(!Array.isArray(object.candidate))throw TypeError(".RouteResponse.candidate: array expected");message.candidate=[];for(var i=0;i<object.candidate.length;++i){if((0,_typeof3.default)(object.candidate[i])!=="object")throw TypeError(".RouteResponse.candidate: object expected");message.candidate[i]=$root.AddressTriple.fromObject(object.candidate[i]);}}return message;};/**
     * Creates a plain object from a RouteResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof RouteResponse
     * @static
     * @param {RouteResponse} message RouteResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */RouteResponse.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.candidate=[];if(options.defaults){object.host="";object.longPort=0;object.shortPort=0;object.thumbPara="";object.node="";object.commercial=0;object.wssPort=0;}if(message.host!=null&&message.hasOwnProperty("host"))object.host=message.host;if(message.longPort!=null&&message.hasOwnProperty("longPort"))object.longPort=message.longPort;if(message.shortPort!=null&&message.hasOwnProperty("shortPort"))object.shortPort=message.shortPort;if(message.thumbPara!=null&&message.hasOwnProperty("thumbPara"))object.thumbPara=message.thumbPara;if(message.node!=null&&message.hasOwnProperty("node"))object.node=message.node;if(message.commercial!=null&&message.hasOwnProperty("commercial"))object.commercial=message.commercial;if(message.wssPort!=null&&message.hasOwnProperty("wssPort"))object.wssPort=message.wssPort;if(message.candidate&&message.candidate.length){object.candidate=[];for(var j=0;j<message.candidate.length;++j){object.candidate[j]=$root.AddressTriple.toObject(message.candidate[j],options);}}return object;};/**
     * Converts this RouteResponse to JSON.
     * @function toJSON
     * @memberof RouteResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */RouteResponse.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return RouteResponse;}();$root.GetTokenRequest=function(){/**
     * Properties of a GetTokenRequest.
     * @exports IGetTokenRequest
     * @interface IGetTokenRequest
     * @property {string} userId GetTokenRequest userId
     * @property {string} clientId GetTokenRequest clientId
     * @property {number|null} [platform] GetTokenRequest platform
     *//**
     * Constructs a new GetTokenRequest.
     * @exports GetTokenRequest
     * @classdesc Represents a GetTokenRequest.
     * @implements IGetTokenRequest
     * @constructor
     * @param {IGetTokenRequest=} [properties] Properties to set
     */function GetTokenRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * GetTokenRequest userId.
     * @member {string} userId
     * @memberof GetTokenRequest
     * @instance
     */GetTokenRequest.prototype.userId="";/**
     * GetTokenRequest clientId.
     * @member {string} clientId
     * @memberof GetTokenRequest
     * @instance
     */GetTokenRequest.prototype.clientId="";/**
     * GetTokenRequest platform.
     * @member {number} platform
     * @memberof GetTokenRequest
     * @instance
     */GetTokenRequest.prototype.platform=0;/**
     * Creates a new GetTokenRequest instance using the specified properties.
     * @function create
     * @memberof GetTokenRequest
     * @static
     * @param {IGetTokenRequest=} [properties] Properties to set
     * @returns {GetTokenRequest} GetTokenRequest instance
     */GetTokenRequest.create=function create(properties){return new GetTokenRequest(properties);};/**
     * Encodes the specified GetTokenRequest message. Does not implicitly {@link GetTokenRequest.verify|verify} messages.
     * @function encode
     * @memberof GetTokenRequest
     * @static
     * @param {IGetTokenRequest} message GetTokenRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetTokenRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.clientId);if(message.platform!=null&&message.hasOwnProperty("platform"))writer.uint32(/* id 3, wireType 0 =*/24).int32(message.platform);return writer;};/**
     * Encodes the specified GetTokenRequest message, length delimited. Does not implicitly {@link GetTokenRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetTokenRequest
     * @static
     * @param {IGetTokenRequest} message GetTokenRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */GetTokenRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a GetTokenRequest message from the specified reader or buffer.
     * @function decode
     * @memberof GetTokenRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetTokenRequest} GetTokenRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetTokenRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.GetTokenRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.userId=reader.string();break;case 2:message.clientId=reader.string();break;case 3:message.platform=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("userId"))throw $util.ProtocolError("missing required 'userId'",{instance:message});if(!message.hasOwnProperty("clientId"))throw $util.ProtocolError("missing required 'clientId'",{instance:message});return message;};/**
     * Decodes a GetTokenRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetTokenRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetTokenRequest} GetTokenRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */GetTokenRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a GetTokenRequest message.
     * @function verify
     * @memberof GetTokenRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */GetTokenRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.userId))return"userId: string expected";if(!$util.isString(message.clientId))return"clientId: string expected";if(message.platform!=null&&message.hasOwnProperty("platform"))if(!$util.isInteger(message.platform))return"platform: integer expected";return null;};/**
     * Creates a GetTokenRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetTokenRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetTokenRequest} GetTokenRequest
     */GetTokenRequest.fromObject=function fromObject(object){if(object instanceof $root.GetTokenRequest)return object;var message=new $root.GetTokenRequest();if(object.userId!=null)message.userId=String(object.userId);if(object.clientId!=null)message.clientId=String(object.clientId);if(object.platform!=null)message.platform=object.platform|0;return message;};/**
     * Creates a plain object from a GetTokenRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetTokenRequest
     * @static
     * @param {GetTokenRequest} message GetTokenRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */GetTokenRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.userId="";object.clientId="";object.platform=0;}if(message.userId!=null&&message.hasOwnProperty("userId"))object.userId=message.userId;if(message.clientId!=null&&message.hasOwnProperty("clientId"))object.clientId=message.clientId;if(message.platform!=null&&message.hasOwnProperty("platform"))object.platform=message.platform;return object;};/**
     * Converts this GetTokenRequest to JSON.
     * @function toJSON
     * @memberof GetTokenRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */GetTokenRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return GetTokenRequest;}();$root.LoadRemoteMessages=function(){/**
     * Properties of a LoadRemoteMessages.
     * @exports ILoadRemoteMessages
     * @interface ILoadRemoteMessages
     * @property {IConversation} conversation LoadRemoteMessages conversation
     * @property {Long} beforeUid LoadRemoteMessages beforeUid
     * @property {number} count LoadRemoteMessages count
     * @property {Array.<number>|null} [contentType] LoadRemoteMessages contentType
     *//**
     * Constructs a new LoadRemoteMessages.
     * @exports LoadRemoteMessages
     * @classdesc Represents a LoadRemoteMessages.
     * @implements ILoadRemoteMessages
     * @constructor
     * @param {ILoadRemoteMessages=} [properties] Properties to set
     */function LoadRemoteMessages(properties){this.contentType=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * LoadRemoteMessages conversation.
     * @member {IConversation} conversation
     * @memberof LoadRemoteMessages
     * @instance
     */LoadRemoteMessages.prototype.conversation=null;/**
     * LoadRemoteMessages beforeUid.
     * @member {Long} beforeUid
     * @memberof LoadRemoteMessages
     * @instance
     */LoadRemoteMessages.prototype.beforeUid=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * LoadRemoteMessages count.
     * @member {number} count
     * @memberof LoadRemoteMessages
     * @instance
     */LoadRemoteMessages.prototype.count=0;/**
     * LoadRemoteMessages contentType.
     * @member {Array.<number>} contentType
     * @memberof LoadRemoteMessages
     * @instance
     */LoadRemoteMessages.prototype.contentType=$util.emptyArray;/**
     * Creates a new LoadRemoteMessages instance using the specified properties.
     * @function create
     * @memberof LoadRemoteMessages
     * @static
     * @param {ILoadRemoteMessages=} [properties] Properties to set
     * @returns {LoadRemoteMessages} LoadRemoteMessages instance
     */LoadRemoteMessages.create=function create(properties){return new LoadRemoteMessages(properties);};/**
     * Encodes the specified LoadRemoteMessages message. Does not implicitly {@link LoadRemoteMessages.verify|verify} messages.
     * @function encode
     * @memberof LoadRemoteMessages
     * @static
     * @param {ILoadRemoteMessages} message LoadRemoteMessages message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */LoadRemoteMessages.encode=function encode(message,writer){if(!writer)writer=$Writer.create();$root.Conversation.encode(message.conversation,writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();writer.uint32(/* id 2, wireType 0 =*/16).int64(message.beforeUid);writer.uint32(/* id 3, wireType 0 =*/24).int32(message.count);if(message.contentType!=null&&message.contentType.length)for(var i=0;i<message.contentType.length;++i){writer.uint32(/* id 4, wireType 0 =*/32).int32(message.contentType[i]);}return writer;};/**
     * Encodes the specified LoadRemoteMessages message, length delimited. Does not implicitly {@link LoadRemoteMessages.verify|verify} messages.
     * @function encodeDelimited
     * @memberof LoadRemoteMessages
     * @static
     * @param {ILoadRemoteMessages} message LoadRemoteMessages message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */LoadRemoteMessages.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a LoadRemoteMessages message from the specified reader or buffer.
     * @function decode
     * @memberof LoadRemoteMessages
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {LoadRemoteMessages} LoadRemoteMessages
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */LoadRemoteMessages.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.LoadRemoteMessages();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.conversation=$root.Conversation.decode(reader,reader.uint32());break;case 2:message.beforeUid=reader.int64();break;case 3:message.count=reader.int32();break;case 4:if(!(message.contentType&&message.contentType.length))message.contentType=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.contentType.push(reader.int32());}}else message.contentType.push(reader.int32());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("conversation"))throw $util.ProtocolError("missing required 'conversation'",{instance:message});if(!message.hasOwnProperty("beforeUid"))throw $util.ProtocolError("missing required 'beforeUid'",{instance:message});if(!message.hasOwnProperty("count"))throw $util.ProtocolError("missing required 'count'",{instance:message});return message;};/**
     * Decodes a LoadRemoteMessages message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof LoadRemoteMessages
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {LoadRemoteMessages} LoadRemoteMessages
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */LoadRemoteMessages.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a LoadRemoteMessages message.
     * @function verify
     * @memberof LoadRemoteMessages
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */LoadRemoteMessages.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";{var error=$root.Conversation.verify(message.conversation);if(error)return"conversation."+error;}if(!$util.isInteger(message.beforeUid)&&!(message.beforeUid&&$util.isInteger(message.beforeUid.low)&&$util.isInteger(message.beforeUid.high)))return"beforeUid: integer|Long expected";if(!$util.isInteger(message.count))return"count: integer expected";if(message.contentType!=null&&message.hasOwnProperty("contentType")){if(!Array.isArray(message.contentType))return"contentType: array expected";for(var i=0;i<message.contentType.length;++i){if(!$util.isInteger(message.contentType[i]))return"contentType: integer[] expected";}}return null;};/**
     * Creates a LoadRemoteMessages message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof LoadRemoteMessages
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {LoadRemoteMessages} LoadRemoteMessages
     */LoadRemoteMessages.fromObject=function fromObject(object){if(object instanceof $root.LoadRemoteMessages)return object;var message=new $root.LoadRemoteMessages();if(object.conversation!=null){if((0,_typeof3.default)(object.conversation)!=="object")throw TypeError(".LoadRemoteMessages.conversation: object expected");message.conversation=$root.Conversation.fromObject(object.conversation);}if(object.beforeUid!=null)if($util.Long)(message.beforeUid=$util.Long.fromValue(object.beforeUid)).unsigned=false;else if(typeof object.beforeUid==="string")message.beforeUid=parseInt(object.beforeUid,10);else if(typeof object.beforeUid==="number")message.beforeUid=object.beforeUid;else if((0,_typeof3.default)(object.beforeUid)==="object")message.beforeUid=new $util.LongBits(object.beforeUid.low>>>0,object.beforeUid.high>>>0).toNumber();if(object.count!=null)message.count=object.count|0;if(object.contentType){if(!Array.isArray(object.contentType))throw TypeError(".LoadRemoteMessages.contentType: array expected");message.contentType=[];for(var i=0;i<object.contentType.length;++i){message.contentType[i]=object.contentType[i]|0;}}return message;};/**
     * Creates a plain object from a LoadRemoteMessages message. Also converts values to other types if specified.
     * @function toObject
     * @memberof LoadRemoteMessages
     * @static
     * @param {LoadRemoteMessages} message LoadRemoteMessages
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */LoadRemoteMessages.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.contentType=[];if(options.defaults){object.conversation=null;if($util.Long){var long=new $util.Long(0,0,false);object.beforeUid=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.beforeUid=options.longs===String?"0":0;object.count=0;}if(message.conversation!=null&&message.hasOwnProperty("conversation"))object.conversation=$root.Conversation.toObject(message.conversation,options);if(message.beforeUid!=null&&message.hasOwnProperty("beforeUid"))if(typeof message.beforeUid==="number")object.beforeUid=options.longs===String?String(message.beforeUid):message.beforeUid;else object.beforeUid=options.longs===String?$util.Long.prototype.toString.call(message.beforeUid):options.longs===Number?new $util.LongBits(message.beforeUid.low>>>0,message.beforeUid.high>>>0).toNumber():message.beforeUid;if(message.count!=null&&message.hasOwnProperty("count"))object.count=message.count;if(message.contentType&&message.contentType.length){object.contentType=[];for(var j=0;j<message.contentType.length;++j){object.contentType[j]=message.contentType[j];}}return object;};/**
     * Converts this LoadRemoteMessages to JSON.
     * @function toJSON
     * @memberof LoadRemoteMessages
     * @instance
     * @returns {Object.<string,*>} JSON object
     */LoadRemoteMessages.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return LoadRemoteMessages;}();$root.LoadLineMessages=function(){/**
     * Properties of a LoadLineMessages.
     * @exports ILoadLineMessages
     * @interface ILoadLineMessages
     * @property {number} line LoadLineMessages line
     * @property {Long} beforeUid LoadLineMessages beforeUid
     * @property {number} count LoadLineMessages count
     * @property {Array.<number>|null} [contentType] LoadLineMessages contentType
     *//**
     * Constructs a new LoadLineMessages.
     * @exports LoadLineMessages
     * @classdesc Represents a LoadLineMessages.
     * @implements ILoadLineMessages
     * @constructor
     * @param {ILoadLineMessages=} [properties] Properties to set
     */function LoadLineMessages(properties){this.contentType=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * LoadLineMessages line.
     * @member {number} line
     * @memberof LoadLineMessages
     * @instance
     */LoadLineMessages.prototype.line=0;/**
     * LoadLineMessages beforeUid.
     * @member {Long} beforeUid
     * @memberof LoadLineMessages
     * @instance
     */LoadLineMessages.prototype.beforeUid=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * LoadLineMessages count.
     * @member {number} count
     * @memberof LoadLineMessages
     * @instance
     */LoadLineMessages.prototype.count=0;/**
     * LoadLineMessages contentType.
     * @member {Array.<number>} contentType
     * @memberof LoadLineMessages
     * @instance
     */LoadLineMessages.prototype.contentType=$util.emptyArray;/**
     * Creates a new LoadLineMessages instance using the specified properties.
     * @function create
     * @memberof LoadLineMessages
     * @static
     * @param {ILoadLineMessages=} [properties] Properties to set
     * @returns {LoadLineMessages} LoadLineMessages instance
     */LoadLineMessages.create=function create(properties){return new LoadLineMessages(properties);};/**
     * Encodes the specified LoadLineMessages message. Does not implicitly {@link LoadLineMessages.verify|verify} messages.
     * @function encode
     * @memberof LoadLineMessages
     * @static
     * @param {ILoadLineMessages} message LoadLineMessages message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */LoadLineMessages.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.line);writer.uint32(/* id 2, wireType 0 =*/16).int64(message.beforeUid);writer.uint32(/* id 3, wireType 0 =*/24).int32(message.count);if(message.contentType!=null&&message.contentType.length)for(var i=0;i<message.contentType.length;++i){writer.uint32(/* id 4, wireType 0 =*/32).int32(message.contentType[i]);}return writer;};/**
     * Encodes the specified LoadLineMessages message, length delimited. Does not implicitly {@link LoadLineMessages.verify|verify} messages.
     * @function encodeDelimited
     * @memberof LoadLineMessages
     * @static
     * @param {ILoadLineMessages} message LoadLineMessages message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */LoadLineMessages.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a LoadLineMessages message from the specified reader or buffer.
     * @function decode
     * @memberof LoadLineMessages
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {LoadLineMessages} LoadLineMessages
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */LoadLineMessages.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.LoadLineMessages();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.line=reader.int32();break;case 2:message.beforeUid=reader.int64();break;case 3:message.count=reader.int32();break;case 4:if(!(message.contentType&&message.contentType.length))message.contentType=[];if((tag&7)===2){var end2=reader.uint32()+reader.pos;while(reader.pos<end2){message.contentType.push(reader.int32());}}else message.contentType.push(reader.int32());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("line"))throw $util.ProtocolError("missing required 'line'",{instance:message});if(!message.hasOwnProperty("beforeUid"))throw $util.ProtocolError("missing required 'beforeUid'",{instance:message});if(!message.hasOwnProperty("count"))throw $util.ProtocolError("missing required 'count'",{instance:message});return message;};/**
     * Decodes a LoadLineMessages message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof LoadLineMessages
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {LoadLineMessages} LoadLineMessages
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */LoadLineMessages.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a LoadLineMessages message.
     * @function verify
     * @memberof LoadLineMessages
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */LoadLineMessages.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.line))return"line: integer expected";if(!$util.isInteger(message.beforeUid)&&!(message.beforeUid&&$util.isInteger(message.beforeUid.low)&&$util.isInteger(message.beforeUid.high)))return"beforeUid: integer|Long expected";if(!$util.isInteger(message.count))return"count: integer expected";if(message.contentType!=null&&message.hasOwnProperty("contentType")){if(!Array.isArray(message.contentType))return"contentType: array expected";for(var i=0;i<message.contentType.length;++i){if(!$util.isInteger(message.contentType[i]))return"contentType: integer[] expected";}}return null;};/**
     * Creates a LoadLineMessages message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof LoadLineMessages
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {LoadLineMessages} LoadLineMessages
     */LoadLineMessages.fromObject=function fromObject(object){if(object instanceof $root.LoadLineMessages)return object;var message=new $root.LoadLineMessages();if(object.line!=null)message.line=object.line|0;if(object.beforeUid!=null)if($util.Long)(message.beforeUid=$util.Long.fromValue(object.beforeUid)).unsigned=false;else if(typeof object.beforeUid==="string")message.beforeUid=parseInt(object.beforeUid,10);else if(typeof object.beforeUid==="number")message.beforeUid=object.beforeUid;else if((0,_typeof3.default)(object.beforeUid)==="object")message.beforeUid=new $util.LongBits(object.beforeUid.low>>>0,object.beforeUid.high>>>0).toNumber();if(object.count!=null)message.count=object.count|0;if(object.contentType){if(!Array.isArray(object.contentType))throw TypeError(".LoadLineMessages.contentType: array expected");message.contentType=[];for(var i=0;i<object.contentType.length;++i){message.contentType[i]=object.contentType[i]|0;}}return message;};/**
     * Creates a plain object from a LoadLineMessages message. Also converts values to other types if specified.
     * @function toObject
     * @memberof LoadLineMessages
     * @static
     * @param {LoadLineMessages} message LoadLineMessages
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */LoadLineMessages.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.contentType=[];if(options.defaults){object.line=0;if($util.Long){var long=new $util.Long(0,0,false);object.beforeUid=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.beforeUid=options.longs===String?"0":0;object.count=0;}if(message.line!=null&&message.hasOwnProperty("line"))object.line=message.line;if(message.beforeUid!=null&&message.hasOwnProperty("beforeUid"))if(typeof message.beforeUid==="number")object.beforeUid=options.longs===String?String(message.beforeUid):message.beforeUid;else object.beforeUid=options.longs===String?$util.Long.prototype.toString.call(message.beforeUid):options.longs===Number?new $util.LongBits(message.beforeUid.low>>>0,message.beforeUid.high>>>0).toNumber():message.beforeUid;if(message.count!=null&&message.hasOwnProperty("count"))object.count=message.count;if(message.contentType&&message.contentType.length){object.contentType=[];for(var j=0;j<message.contentType.length;++j){object.contentType[j]=message.contentType[j];}}return object;};/**
     * Converts this LoadLineMessages to JSON.
     * @function toJSON
     * @memberof LoadLineMessages
     * @instance
     * @returns {Object.<string,*>} JSON object
     */LoadLineMessages.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return LoadLineMessages;}();$root.MultiCastMessage=function(){/**
     * Properties of a MultiCastMessage.
     * @exports IMultiCastMessage
     * @interface IMultiCastMessage
     * @property {string} fromUser MultiCastMessage fromUser
     * @property {IMessageContent} content MultiCastMessage content
     * @property {Array.<string>|null} [to] MultiCastMessage to
     * @property {number} line MultiCastMessage line
     *//**
     * Constructs a new MultiCastMessage.
     * @exports MultiCastMessage
     * @classdesc Represents a MultiCastMessage.
     * @implements IMultiCastMessage
     * @constructor
     * @param {IMultiCastMessage=} [properties] Properties to set
     */function MultiCastMessage(properties){this.to=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * MultiCastMessage fromUser.
     * @member {string} fromUser
     * @memberof MultiCastMessage
     * @instance
     */MultiCastMessage.prototype.fromUser="";/**
     * MultiCastMessage content.
     * @member {IMessageContent} content
     * @memberof MultiCastMessage
     * @instance
     */MultiCastMessage.prototype.content=null;/**
     * MultiCastMessage to.
     * @member {Array.<string>} to
     * @memberof MultiCastMessage
     * @instance
     */MultiCastMessage.prototype.to=$util.emptyArray;/**
     * MultiCastMessage line.
     * @member {number} line
     * @memberof MultiCastMessage
     * @instance
     */MultiCastMessage.prototype.line=0;/**
     * Creates a new MultiCastMessage instance using the specified properties.
     * @function create
     * @memberof MultiCastMessage
     * @static
     * @param {IMultiCastMessage=} [properties] Properties to set
     * @returns {MultiCastMessage} MultiCastMessage instance
     */MultiCastMessage.create=function create(properties){return new MultiCastMessage(properties);};/**
     * Encodes the specified MultiCastMessage message. Does not implicitly {@link MultiCastMessage.verify|verify} messages.
     * @function encode
     * @memberof MultiCastMessage
     * @static
     * @param {IMultiCastMessage} message MultiCastMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MultiCastMessage.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.fromUser);$root.MessageContent.encode(message.content,writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();if(message.to!=null&&message.to.length)for(var i=0;i<message.to.length;++i){writer.uint32(/* id 3, wireType 2 =*/26).string(message.to[i]);}writer.uint32(/* id 4, wireType 0 =*/32).int32(message.line);return writer;};/**
     * Encodes the specified MultiCastMessage message, length delimited. Does not implicitly {@link MultiCastMessage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MultiCastMessage
     * @static
     * @param {IMultiCastMessage} message MultiCastMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MultiCastMessage.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a MultiCastMessage message from the specified reader or buffer.
     * @function decode
     * @memberof MultiCastMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MultiCastMessage} MultiCastMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MultiCastMessage.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.MultiCastMessage();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.fromUser=reader.string();break;case 2:message.content=$root.MessageContent.decode(reader,reader.uint32());break;case 3:if(!(message.to&&message.to.length))message.to=[];message.to.push(reader.string());break;case 4:message.line=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("fromUser"))throw $util.ProtocolError("missing required 'fromUser'",{instance:message});if(!message.hasOwnProperty("content"))throw $util.ProtocolError("missing required 'content'",{instance:message});if(!message.hasOwnProperty("line"))throw $util.ProtocolError("missing required 'line'",{instance:message});return message;};/**
     * Decodes a MultiCastMessage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MultiCastMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MultiCastMessage} MultiCastMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MultiCastMessage.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a MultiCastMessage message.
     * @function verify
     * @memberof MultiCastMessage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */MultiCastMessage.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.fromUser))return"fromUser: string expected";{var error=$root.MessageContent.verify(message.content);if(error)return"content."+error;}if(message.to!=null&&message.hasOwnProperty("to")){if(!Array.isArray(message.to))return"to: array expected";for(var i=0;i<message.to.length;++i){if(!$util.isString(message.to[i]))return"to: string[] expected";}}if(!$util.isInteger(message.line))return"line: integer expected";return null;};/**
     * Creates a MultiCastMessage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MultiCastMessage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MultiCastMessage} MultiCastMessage
     */MultiCastMessage.fromObject=function fromObject(object){if(object instanceof $root.MultiCastMessage)return object;var message=new $root.MultiCastMessage();if(object.fromUser!=null)message.fromUser=String(object.fromUser);if(object.content!=null){if((0,_typeof3.default)(object.content)!=="object")throw TypeError(".MultiCastMessage.content: object expected");message.content=$root.MessageContent.fromObject(object.content);}if(object.to){if(!Array.isArray(object.to))throw TypeError(".MultiCastMessage.to: array expected");message.to=[];for(var i=0;i<object.to.length;++i){message.to[i]=String(object.to[i]);}}if(object.line!=null)message.line=object.line|0;return message;};/**
     * Creates a plain object from a MultiCastMessage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MultiCastMessage
     * @static
     * @param {MultiCastMessage} message MultiCastMessage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */MultiCastMessage.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.to=[];if(options.defaults){object.fromUser="";object.content=null;object.line=0;}if(message.fromUser!=null&&message.hasOwnProperty("fromUser"))object.fromUser=message.fromUser;if(message.content!=null&&message.hasOwnProperty("content"))object.content=$root.MessageContent.toObject(message.content,options);if(message.to&&message.to.length){object.to=[];for(var j=0;j<message.to.length;++j){object.to[j]=message.to[j];}}if(message.line!=null&&message.hasOwnProperty("line"))object.line=message.line;return object;};/**
     * Converts this MultiCastMessage to JSON.
     * @function toJSON
     * @memberof MultiCastMessage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */MultiCastMessage.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return MultiCastMessage;}();$root.RecallMultiMessage=function(){/**
     * Properties of a RecallMultiMessage.
     * @exports IRecallMultiMessage
     * @interface IRecallMultiMessage
     * @property {Long} messageId RecallMultiMessage messageId
     * @property {Array.<string>|null} [target] RecallMultiMessage target
     *//**
     * Constructs a new RecallMultiMessage.
     * @exports RecallMultiMessage
     * @classdesc Represents a RecallMultiMessage.
     * @implements IRecallMultiMessage
     * @constructor
     * @param {IRecallMultiMessage=} [properties] Properties to set
     */function RecallMultiMessage(properties){this.target=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * RecallMultiMessage messageId.
     * @member {Long} messageId
     * @memberof RecallMultiMessage
     * @instance
     */RecallMultiMessage.prototype.messageId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * RecallMultiMessage target.
     * @member {Array.<string>} target
     * @memberof RecallMultiMessage
     * @instance
     */RecallMultiMessage.prototype.target=$util.emptyArray;/**
     * Creates a new RecallMultiMessage instance using the specified properties.
     * @function create
     * @memberof RecallMultiMessage
     * @static
     * @param {IRecallMultiMessage=} [properties] Properties to set
     * @returns {RecallMultiMessage} RecallMultiMessage instance
     */RecallMultiMessage.create=function create(properties){return new RecallMultiMessage(properties);};/**
     * Encodes the specified RecallMultiMessage message. Does not implicitly {@link RecallMultiMessage.verify|verify} messages.
     * @function encode
     * @memberof RecallMultiMessage
     * @static
     * @param {IRecallMultiMessage} message RecallMultiMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RecallMultiMessage.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.messageId);if(message.target!=null&&message.target.length)for(var i=0;i<message.target.length;++i){writer.uint32(/* id 2, wireType 2 =*/18).string(message.target[i]);}return writer;};/**
     * Encodes the specified RecallMultiMessage message, length delimited. Does not implicitly {@link RecallMultiMessage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof RecallMultiMessage
     * @static
     * @param {IRecallMultiMessage} message RecallMultiMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RecallMultiMessage.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a RecallMultiMessage message from the specified reader or buffer.
     * @function decode
     * @memberof RecallMultiMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {RecallMultiMessage} RecallMultiMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RecallMultiMessage.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.RecallMultiMessage();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.messageId=reader.int64();break;case 2:if(!(message.target&&message.target.length))message.target=[];message.target.push(reader.string());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("messageId"))throw $util.ProtocolError("missing required 'messageId'",{instance:message});return message;};/**
     * Decodes a RecallMultiMessage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof RecallMultiMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {RecallMultiMessage} RecallMultiMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RecallMultiMessage.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a RecallMultiMessage message.
     * @function verify
     * @memberof RecallMultiMessage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */RecallMultiMessage.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.messageId)&&!(message.messageId&&$util.isInteger(message.messageId.low)&&$util.isInteger(message.messageId.high)))return"messageId: integer|Long expected";if(message.target!=null&&message.hasOwnProperty("target")){if(!Array.isArray(message.target))return"target: array expected";for(var i=0;i<message.target.length;++i){if(!$util.isString(message.target[i]))return"target: string[] expected";}}return null;};/**
     * Creates a RecallMultiMessage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof RecallMultiMessage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {RecallMultiMessage} RecallMultiMessage
     */RecallMultiMessage.fromObject=function fromObject(object){if(object instanceof $root.RecallMultiMessage)return object;var message=new $root.RecallMultiMessage();if(object.messageId!=null)if($util.Long)(message.messageId=$util.Long.fromValue(object.messageId)).unsigned=false;else if(typeof object.messageId==="string")message.messageId=parseInt(object.messageId,10);else if(typeof object.messageId==="number")message.messageId=object.messageId;else if((0,_typeof3.default)(object.messageId)==="object")message.messageId=new $util.LongBits(object.messageId.low>>>0,object.messageId.high>>>0).toNumber();if(object.target){if(!Array.isArray(object.target))throw TypeError(".RecallMultiMessage.target: array expected");message.target=[];for(var i=0;i<object.target.length;++i){message.target[i]=String(object.target[i]);}}return message;};/**
     * Creates a plain object from a RecallMultiMessage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof RecallMultiMessage
     * @static
     * @param {RecallMultiMessage} message RecallMultiMessage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */RecallMultiMessage.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.target=[];if(options.defaults)if($util.Long){var long=new $util.Long(0,0,false);object.messageId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.messageId=options.longs===String?"0":0;if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(typeof message.messageId==="number")object.messageId=options.longs===String?String(message.messageId):message.messageId;else object.messageId=options.longs===String?$util.Long.prototype.toString.call(message.messageId):options.longs===Number?new $util.LongBits(message.messageId.low>>>0,message.messageId.high>>>0).toNumber():message.messageId;if(message.target&&message.target.length){object.target=[];for(var j=0;j<message.target.length;++j){object.target[j]=message.target[j];}}return object;};/**
     * Converts this RecallMultiMessage to JSON.
     * @function toJSON
     * @memberof RecallMultiMessage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */RecallMultiMessage.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return RecallMultiMessage;}();$root.UpdateMessageContent=function(){/**
     * Properties of an UpdateMessageContent.
     * @exports IUpdateMessageContent
     * @interface IUpdateMessageContent
     * @property {Long} messageId UpdateMessageContent messageId
     * @property {IMessageContent} content UpdateMessageContent content
     * @property {number} distribute UpdateMessageContent distribute
     * @property {number|null} [updateTime] UpdateMessageContent updateTime
     *//**
     * Constructs a new UpdateMessageContent.
     * @exports UpdateMessageContent
     * @classdesc Represents an UpdateMessageContent.
     * @implements IUpdateMessageContent
     * @constructor
     * @param {IUpdateMessageContent=} [properties] Properties to set
     */function UpdateMessageContent(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * UpdateMessageContent messageId.
     * @member {Long} messageId
     * @memberof UpdateMessageContent
     * @instance
     */UpdateMessageContent.prototype.messageId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * UpdateMessageContent content.
     * @member {IMessageContent} content
     * @memberof UpdateMessageContent
     * @instance
     */UpdateMessageContent.prototype.content=null;/**
     * UpdateMessageContent distribute.
     * @member {number} distribute
     * @memberof UpdateMessageContent
     * @instance
     */UpdateMessageContent.prototype.distribute=0;/**
     * UpdateMessageContent updateTime.
     * @member {number} updateTime
     * @memberof UpdateMessageContent
     * @instance
     */UpdateMessageContent.prototype.updateTime=0;/**
     * Creates a new UpdateMessageContent instance using the specified properties.
     * @function create
     * @memberof UpdateMessageContent
     * @static
     * @param {IUpdateMessageContent=} [properties] Properties to set
     * @returns {UpdateMessageContent} UpdateMessageContent instance
     */UpdateMessageContent.create=function create(properties){return new UpdateMessageContent(properties);};/**
     * Encodes the specified UpdateMessageContent message. Does not implicitly {@link UpdateMessageContent.verify|verify} messages.
     * @function encode
     * @memberof UpdateMessageContent
     * @static
     * @param {IUpdateMessageContent} message UpdateMessageContent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */UpdateMessageContent.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.messageId);$root.MessageContent.encode(message.content,writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();writer.uint32(/* id 3, wireType 0 =*/24).int32(message.distribute);if(message.updateTime!=null&&message.hasOwnProperty("updateTime"))writer.uint32(/* id 4, wireType 0 =*/32).int32(message.updateTime);return writer;};/**
     * Encodes the specified UpdateMessageContent message, length delimited. Does not implicitly {@link UpdateMessageContent.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UpdateMessageContent
     * @static
     * @param {IUpdateMessageContent} message UpdateMessageContent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */UpdateMessageContent.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes an UpdateMessageContent message from the specified reader or buffer.
     * @function decode
     * @memberof UpdateMessageContent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UpdateMessageContent} UpdateMessageContent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */UpdateMessageContent.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.UpdateMessageContent();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.messageId=reader.int64();break;case 2:message.content=$root.MessageContent.decode(reader,reader.uint32());break;case 3:message.distribute=reader.int32();break;case 4:message.updateTime=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("messageId"))throw $util.ProtocolError("missing required 'messageId'",{instance:message});if(!message.hasOwnProperty("content"))throw $util.ProtocolError("missing required 'content'",{instance:message});if(!message.hasOwnProperty("distribute"))throw $util.ProtocolError("missing required 'distribute'",{instance:message});return message;};/**
     * Decodes an UpdateMessageContent message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UpdateMessageContent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UpdateMessageContent} UpdateMessageContent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */UpdateMessageContent.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies an UpdateMessageContent message.
     * @function verify
     * @memberof UpdateMessageContent
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */UpdateMessageContent.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.messageId)&&!(message.messageId&&$util.isInteger(message.messageId.low)&&$util.isInteger(message.messageId.high)))return"messageId: integer|Long expected";{var error=$root.MessageContent.verify(message.content);if(error)return"content."+error;}if(!$util.isInteger(message.distribute))return"distribute: integer expected";if(message.updateTime!=null&&message.hasOwnProperty("updateTime"))if(!$util.isInteger(message.updateTime))return"updateTime: integer expected";return null;};/**
     * Creates an UpdateMessageContent message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UpdateMessageContent
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UpdateMessageContent} UpdateMessageContent
     */UpdateMessageContent.fromObject=function fromObject(object){if(object instanceof $root.UpdateMessageContent)return object;var message=new $root.UpdateMessageContent();if(object.messageId!=null)if($util.Long)(message.messageId=$util.Long.fromValue(object.messageId)).unsigned=false;else if(typeof object.messageId==="string")message.messageId=parseInt(object.messageId,10);else if(typeof object.messageId==="number")message.messageId=object.messageId;else if((0,_typeof3.default)(object.messageId)==="object")message.messageId=new $util.LongBits(object.messageId.low>>>0,object.messageId.high>>>0).toNumber();if(object.content!=null){if((0,_typeof3.default)(object.content)!=="object")throw TypeError(".UpdateMessageContent.content: object expected");message.content=$root.MessageContent.fromObject(object.content);}if(object.distribute!=null)message.distribute=object.distribute|0;if(object.updateTime!=null)message.updateTime=object.updateTime|0;return message;};/**
     * Creates a plain object from an UpdateMessageContent message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UpdateMessageContent
     * @static
     * @param {UpdateMessageContent} message UpdateMessageContent
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */UpdateMessageContent.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.messageId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.messageId=options.longs===String?"0":0;object.content=null;object.distribute=0;object.updateTime=0;}if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(typeof message.messageId==="number")object.messageId=options.longs===String?String(message.messageId):message.messageId;else object.messageId=options.longs===String?$util.Long.prototype.toString.call(message.messageId):options.longs===Number?new $util.LongBits(message.messageId.low>>>0,message.messageId.high>>>0).toNumber():message.messageId;if(message.content!=null&&message.hasOwnProperty("content"))object.content=$root.MessageContent.toObject(message.content,options);if(message.distribute!=null&&message.hasOwnProperty("distribute"))object.distribute=message.distribute;if(message.updateTime!=null&&message.hasOwnProperty("updateTime"))object.updateTime=message.updateTime;return object;};/**
     * Converts this UpdateMessageContent to JSON.
     * @function toJSON
     * @memberof UpdateMessageContent
     * @instance
     * @returns {Object.<string,*>} JSON object
     */UpdateMessageContent.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return UpdateMessageContent;}();$root.FileRecord=function(){/**
     * Properties of a FileRecord.
     * @exports IFileRecord
     * @interface IFileRecord
     * @property {Long} messageId FileRecord messageId
     * @property {string} fromUser FileRecord fromUser
     * @property {IConversation|null} [conversation] FileRecord conversation
     * @property {string|null} [name] FileRecord name
     * @property {string} url FileRecord url
     * @property {number} size FileRecord size
     * @property {number|null} [downloadCount] FileRecord downloadCount
     * @property {Long} dt FileRecord dt
     *//**
     * Constructs a new FileRecord.
     * @exports FileRecord
     * @classdesc Represents a FileRecord.
     * @implements IFileRecord
     * @constructor
     * @param {IFileRecord=} [properties] Properties to set
     */function FileRecord(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * FileRecord messageId.
     * @member {Long} messageId
     * @memberof FileRecord
     * @instance
     */FileRecord.prototype.messageId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * FileRecord fromUser.
     * @member {string} fromUser
     * @memberof FileRecord
     * @instance
     */FileRecord.prototype.fromUser="";/**
     * FileRecord conversation.
     * @member {IConversation|null|undefined} conversation
     * @memberof FileRecord
     * @instance
     */FileRecord.prototype.conversation=null;/**
     * FileRecord name.
     * @member {string} name
     * @memberof FileRecord
     * @instance
     */FileRecord.prototype.name="";/**
     * FileRecord url.
     * @member {string} url
     * @memberof FileRecord
     * @instance
     */FileRecord.prototype.url="";/**
     * FileRecord size.
     * @member {number} size
     * @memberof FileRecord
     * @instance
     */FileRecord.prototype.size=0;/**
     * FileRecord downloadCount.
     * @member {number} downloadCount
     * @memberof FileRecord
     * @instance
     */FileRecord.prototype.downloadCount=0;/**
     * FileRecord dt.
     * @member {Long} dt
     * @memberof FileRecord
     * @instance
     */FileRecord.prototype.dt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new FileRecord instance using the specified properties.
     * @function create
     * @memberof FileRecord
     * @static
     * @param {IFileRecord=} [properties] Properties to set
     * @returns {FileRecord} FileRecord instance
     */FileRecord.create=function create(properties){return new FileRecord(properties);};/**
     * Encodes the specified FileRecord message. Does not implicitly {@link FileRecord.verify|verify} messages.
     * @function encode
     * @memberof FileRecord
     * @static
     * @param {IFileRecord} message FileRecord message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */FileRecord.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.messageId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.fromUser);if(message.conversation!=null&&message.hasOwnProperty("conversation"))$root.Conversation.encode(message.conversation,writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();if(message.name!=null&&message.hasOwnProperty("name"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);writer.uint32(/* id 5, wireType 2 =*/42).string(message.url);writer.uint32(/* id 6, wireType 0 =*/48).int32(message.size);if(message.downloadCount!=null&&message.hasOwnProperty("downloadCount"))writer.uint32(/* id 7, wireType 0 =*/56).int32(message.downloadCount);writer.uint32(/* id 8, wireType 0 =*/64).int64(message.dt);return writer;};/**
     * Encodes the specified FileRecord message, length delimited. Does not implicitly {@link FileRecord.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FileRecord
     * @static
     * @param {IFileRecord} message FileRecord message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */FileRecord.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a FileRecord message from the specified reader or buffer.
     * @function decode
     * @memberof FileRecord
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FileRecord} FileRecord
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */FileRecord.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.FileRecord();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.messageId=reader.int64();break;case 2:message.fromUser=reader.string();break;case 3:message.conversation=$root.Conversation.decode(reader,reader.uint32());break;case 4:message.name=reader.string();break;case 5:message.url=reader.string();break;case 6:message.size=reader.int32();break;case 7:message.downloadCount=reader.int32();break;case 8:message.dt=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("messageId"))throw $util.ProtocolError("missing required 'messageId'",{instance:message});if(!message.hasOwnProperty("fromUser"))throw $util.ProtocolError("missing required 'fromUser'",{instance:message});if(!message.hasOwnProperty("url"))throw $util.ProtocolError("missing required 'url'",{instance:message});if(!message.hasOwnProperty("size"))throw $util.ProtocolError("missing required 'size'",{instance:message});if(!message.hasOwnProperty("dt"))throw $util.ProtocolError("missing required 'dt'",{instance:message});return message;};/**
     * Decodes a FileRecord message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FileRecord
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FileRecord} FileRecord
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */FileRecord.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a FileRecord message.
     * @function verify
     * @memberof FileRecord
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */FileRecord.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.messageId)&&!(message.messageId&&$util.isInteger(message.messageId.low)&&$util.isInteger(message.messageId.high)))return"messageId: integer|Long expected";if(!$util.isString(message.fromUser))return"fromUser: string expected";if(message.conversation!=null&&message.hasOwnProperty("conversation")){var error=$root.Conversation.verify(message.conversation);if(error)return"conversation."+error;}if(message.name!=null&&message.hasOwnProperty("name"))if(!$util.isString(message.name))return"name: string expected";if(!$util.isString(message.url))return"url: string expected";if(!$util.isInteger(message.size))return"size: integer expected";if(message.downloadCount!=null&&message.hasOwnProperty("downloadCount"))if(!$util.isInteger(message.downloadCount))return"downloadCount: integer expected";if(!$util.isInteger(message.dt)&&!(message.dt&&$util.isInteger(message.dt.low)&&$util.isInteger(message.dt.high)))return"dt: integer|Long expected";return null;};/**
     * Creates a FileRecord message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FileRecord
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FileRecord} FileRecord
     */FileRecord.fromObject=function fromObject(object){if(object instanceof $root.FileRecord)return object;var message=new $root.FileRecord();if(object.messageId!=null)if($util.Long)(message.messageId=$util.Long.fromValue(object.messageId)).unsigned=false;else if(typeof object.messageId==="string")message.messageId=parseInt(object.messageId,10);else if(typeof object.messageId==="number")message.messageId=object.messageId;else if((0,_typeof3.default)(object.messageId)==="object")message.messageId=new $util.LongBits(object.messageId.low>>>0,object.messageId.high>>>0).toNumber();if(object.fromUser!=null)message.fromUser=String(object.fromUser);if(object.conversation!=null){if((0,_typeof3.default)(object.conversation)!=="object")throw TypeError(".FileRecord.conversation: object expected");message.conversation=$root.Conversation.fromObject(object.conversation);}if(object.name!=null)message.name=String(object.name);if(object.url!=null)message.url=String(object.url);if(object.size!=null)message.size=object.size|0;if(object.downloadCount!=null)message.downloadCount=object.downloadCount|0;if(object.dt!=null)if($util.Long)(message.dt=$util.Long.fromValue(object.dt)).unsigned=false;else if(typeof object.dt==="string")message.dt=parseInt(object.dt,10);else if(typeof object.dt==="number")message.dt=object.dt;else if((0,_typeof3.default)(object.dt)==="object")message.dt=new $util.LongBits(object.dt.low>>>0,object.dt.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a FileRecord message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FileRecord
     * @static
     * @param {FileRecord} message FileRecord
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */FileRecord.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.messageId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.messageId=options.longs===String?"0":0;object.fromUser="";object.conversation=null;object.name="";object.url="";object.size=0;object.downloadCount=0;if($util.Long){var long=new $util.Long(0,0,false);object.dt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.dt=options.longs===String?"0":0;}if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(typeof message.messageId==="number")object.messageId=options.longs===String?String(message.messageId):message.messageId;else object.messageId=options.longs===String?$util.Long.prototype.toString.call(message.messageId):options.longs===Number?new $util.LongBits(message.messageId.low>>>0,message.messageId.high>>>0).toNumber():message.messageId;if(message.fromUser!=null&&message.hasOwnProperty("fromUser"))object.fromUser=message.fromUser;if(message.conversation!=null&&message.hasOwnProperty("conversation"))object.conversation=$root.Conversation.toObject(message.conversation,options);if(message.name!=null&&message.hasOwnProperty("name"))object.name=message.name;if(message.url!=null&&message.hasOwnProperty("url"))object.url=message.url;if(message.size!=null&&message.hasOwnProperty("size"))object.size=message.size;if(message.downloadCount!=null&&message.hasOwnProperty("downloadCount"))object.downloadCount=message.downloadCount;if(message.dt!=null&&message.hasOwnProperty("dt"))if(typeof message.dt==="number")object.dt=options.longs===String?String(message.dt):message.dt;else object.dt=options.longs===String?$util.Long.prototype.toString.call(message.dt):options.longs===Number?new $util.LongBits(message.dt.low>>>0,message.dt.high>>>0).toNumber():message.dt;return object;};/**
     * Converts this FileRecord to JSON.
     * @function toJSON
     * @memberof FileRecord
     * @instance
     * @returns {Object.<string,*>} JSON object
     */FileRecord.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return FileRecord;}();$root.LoadFileRecordReq=function(){/**
     * Properties of a LoadFileRecordReq.
     * @exports ILoadFileRecordReq
     * @interface ILoadFileRecordReq
     * @property {IConversation|null} [conversation] LoadFileRecordReq conversation
     * @property {Long} messageId LoadFileRecordReq messageId
     * @property {number} count LoadFileRecordReq count
     * @property {string|null} [from] LoadFileRecordReq from
     * @property {number|null} [order] LoadFileRecordReq order
     *//**
     * Constructs a new LoadFileRecordReq.
     * @exports LoadFileRecordReq
     * @classdesc Represents a LoadFileRecordReq.
     * @implements ILoadFileRecordReq
     * @constructor
     * @param {ILoadFileRecordReq=} [properties] Properties to set
     */function LoadFileRecordReq(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * LoadFileRecordReq conversation.
     * @member {IConversation|null|undefined} conversation
     * @memberof LoadFileRecordReq
     * @instance
     */LoadFileRecordReq.prototype.conversation=null;/**
     * LoadFileRecordReq messageId.
     * @member {Long} messageId
     * @memberof LoadFileRecordReq
     * @instance
     */LoadFileRecordReq.prototype.messageId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * LoadFileRecordReq count.
     * @member {number} count
     * @memberof LoadFileRecordReq
     * @instance
     */LoadFileRecordReq.prototype.count=0;/**
     * LoadFileRecordReq from.
     * @member {string} from
     * @memberof LoadFileRecordReq
     * @instance
     */LoadFileRecordReq.prototype.from="";/**
     * LoadFileRecordReq order.
     * @member {number} order
     * @memberof LoadFileRecordReq
     * @instance
     */LoadFileRecordReq.prototype.order=0;/**
     * Creates a new LoadFileRecordReq instance using the specified properties.
     * @function create
     * @memberof LoadFileRecordReq
     * @static
     * @param {ILoadFileRecordReq=} [properties] Properties to set
     * @returns {LoadFileRecordReq} LoadFileRecordReq instance
     */LoadFileRecordReq.create=function create(properties){return new LoadFileRecordReq(properties);};/**
     * Encodes the specified LoadFileRecordReq message. Does not implicitly {@link LoadFileRecordReq.verify|verify} messages.
     * @function encode
     * @memberof LoadFileRecordReq
     * @static
     * @param {ILoadFileRecordReq} message LoadFileRecordReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */LoadFileRecordReq.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.conversation!=null&&message.hasOwnProperty("conversation"))$root.Conversation.encode(message.conversation,writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();writer.uint32(/* id 2, wireType 0 =*/16).int64(message.messageId);writer.uint32(/* id 3, wireType 0 =*/24).int32(message.count);if(message.from!=null&&message.hasOwnProperty("from"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.from);if(message.order!=null&&message.hasOwnProperty("order"))writer.uint32(/* id 5, wireType 0 =*/40).int32(message.order);return writer;};/**
     * Encodes the specified LoadFileRecordReq message, length delimited. Does not implicitly {@link LoadFileRecordReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof LoadFileRecordReq
     * @static
     * @param {ILoadFileRecordReq} message LoadFileRecordReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */LoadFileRecordReq.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a LoadFileRecordReq message from the specified reader or buffer.
     * @function decode
     * @memberof LoadFileRecordReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {LoadFileRecordReq} LoadFileRecordReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */LoadFileRecordReq.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.LoadFileRecordReq();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.conversation=$root.Conversation.decode(reader,reader.uint32());break;case 2:message.messageId=reader.int64();break;case 3:message.count=reader.int32();break;case 4:message.from=reader.string();break;case 5:message.order=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("messageId"))throw $util.ProtocolError("missing required 'messageId'",{instance:message});if(!message.hasOwnProperty("count"))throw $util.ProtocolError("missing required 'count'",{instance:message});return message;};/**
     * Decodes a LoadFileRecordReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof LoadFileRecordReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {LoadFileRecordReq} LoadFileRecordReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */LoadFileRecordReq.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a LoadFileRecordReq message.
     * @function verify
     * @memberof LoadFileRecordReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */LoadFileRecordReq.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.conversation!=null&&message.hasOwnProperty("conversation")){var error=$root.Conversation.verify(message.conversation);if(error)return"conversation."+error;}if(!$util.isInteger(message.messageId)&&!(message.messageId&&$util.isInteger(message.messageId.low)&&$util.isInteger(message.messageId.high)))return"messageId: integer|Long expected";if(!$util.isInteger(message.count))return"count: integer expected";if(message.from!=null&&message.hasOwnProperty("from"))if(!$util.isString(message.from))return"from: string expected";if(message.order!=null&&message.hasOwnProperty("order"))if(!$util.isInteger(message.order))return"order: integer expected";return null;};/**
     * Creates a LoadFileRecordReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof LoadFileRecordReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {LoadFileRecordReq} LoadFileRecordReq
     */LoadFileRecordReq.fromObject=function fromObject(object){if(object instanceof $root.LoadFileRecordReq)return object;var message=new $root.LoadFileRecordReq();if(object.conversation!=null){if((0,_typeof3.default)(object.conversation)!=="object")throw TypeError(".LoadFileRecordReq.conversation: object expected");message.conversation=$root.Conversation.fromObject(object.conversation);}if(object.messageId!=null)if($util.Long)(message.messageId=$util.Long.fromValue(object.messageId)).unsigned=false;else if(typeof object.messageId==="string")message.messageId=parseInt(object.messageId,10);else if(typeof object.messageId==="number")message.messageId=object.messageId;else if((0,_typeof3.default)(object.messageId)==="object")message.messageId=new $util.LongBits(object.messageId.low>>>0,object.messageId.high>>>0).toNumber();if(object.count!=null)message.count=object.count|0;if(object.from!=null)message.from=String(object.from);if(object.order!=null)message.order=object.order|0;return message;};/**
     * Creates a plain object from a LoadFileRecordReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof LoadFileRecordReq
     * @static
     * @param {LoadFileRecordReq} message LoadFileRecordReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */LoadFileRecordReq.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.conversation=null;if($util.Long){var long=new $util.Long(0,0,false);object.messageId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.messageId=options.longs===String?"0":0;object.count=0;object.from="";object.order=0;}if(message.conversation!=null&&message.hasOwnProperty("conversation"))object.conversation=$root.Conversation.toObject(message.conversation,options);if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(typeof message.messageId==="number")object.messageId=options.longs===String?String(message.messageId):message.messageId;else object.messageId=options.longs===String?$util.Long.prototype.toString.call(message.messageId):options.longs===Number?new $util.LongBits(message.messageId.low>>>0,message.messageId.high>>>0).toNumber():message.messageId;if(message.count!=null&&message.hasOwnProperty("count"))object.count=message.count;if(message.from!=null&&message.hasOwnProperty("from"))object.from=message.from;if(message.order!=null&&message.hasOwnProperty("order"))object.order=message.order;return object;};/**
     * Converts this LoadFileRecordReq to JSON.
     * @function toJSON
     * @memberof LoadFileRecordReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */LoadFileRecordReq.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return LoadFileRecordReq;}();$root.LoadFileRecordRes=function(){/**
     * Properties of a LoadFileRecordRes.
     * @exports ILoadFileRecordRes
     * @interface ILoadFileRecordRes
     * @property {Array.<IFileRecord>|null} [record] LoadFileRecordRes record
     *//**
     * Constructs a new LoadFileRecordRes.
     * @exports LoadFileRecordRes
     * @classdesc Represents a LoadFileRecordRes.
     * @implements ILoadFileRecordRes
     * @constructor
     * @param {ILoadFileRecordRes=} [properties] Properties to set
     */function LoadFileRecordRes(properties){this.record=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * LoadFileRecordRes record.
     * @member {Array.<IFileRecord>} record
     * @memberof LoadFileRecordRes
     * @instance
     */LoadFileRecordRes.prototype.record=$util.emptyArray;/**
     * Creates a new LoadFileRecordRes instance using the specified properties.
     * @function create
     * @memberof LoadFileRecordRes
     * @static
     * @param {ILoadFileRecordRes=} [properties] Properties to set
     * @returns {LoadFileRecordRes} LoadFileRecordRes instance
     */LoadFileRecordRes.create=function create(properties){return new LoadFileRecordRes(properties);};/**
     * Encodes the specified LoadFileRecordRes message. Does not implicitly {@link LoadFileRecordRes.verify|verify} messages.
     * @function encode
     * @memberof LoadFileRecordRes
     * @static
     * @param {ILoadFileRecordRes} message LoadFileRecordRes message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */LoadFileRecordRes.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.record!=null&&message.record.length)for(var i=0;i<message.record.length;++i){$root.FileRecord.encode(message.record[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified LoadFileRecordRes message, length delimited. Does not implicitly {@link LoadFileRecordRes.verify|verify} messages.
     * @function encodeDelimited
     * @memberof LoadFileRecordRes
     * @static
     * @param {ILoadFileRecordRes} message LoadFileRecordRes message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */LoadFileRecordRes.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a LoadFileRecordRes message from the specified reader or buffer.
     * @function decode
     * @memberof LoadFileRecordRes
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {LoadFileRecordRes} LoadFileRecordRes
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */LoadFileRecordRes.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.LoadFileRecordRes();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.record&&message.record.length))message.record=[];message.record.push($root.FileRecord.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a LoadFileRecordRes message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof LoadFileRecordRes
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {LoadFileRecordRes} LoadFileRecordRes
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */LoadFileRecordRes.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a LoadFileRecordRes message.
     * @function verify
     * @memberof LoadFileRecordRes
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */LoadFileRecordRes.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.record!=null&&message.hasOwnProperty("record")){if(!Array.isArray(message.record))return"record: array expected";for(var i=0;i<message.record.length;++i){var error=$root.FileRecord.verify(message.record[i]);if(error)return"record."+error;}}return null;};/**
     * Creates a LoadFileRecordRes message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof LoadFileRecordRes
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {LoadFileRecordRes} LoadFileRecordRes
     */LoadFileRecordRes.fromObject=function fromObject(object){if(object instanceof $root.LoadFileRecordRes)return object;var message=new $root.LoadFileRecordRes();if(object.record){if(!Array.isArray(object.record))throw TypeError(".LoadFileRecordRes.record: array expected");message.record=[];for(var i=0;i<object.record.length;++i){if((0,_typeof3.default)(object.record[i])!=="object")throw TypeError(".LoadFileRecordRes.record: object expected");message.record[i]=$root.FileRecord.fromObject(object.record[i]);}}return message;};/**
     * Creates a plain object from a LoadFileRecordRes message. Also converts values to other types if specified.
     * @function toObject
     * @memberof LoadFileRecordRes
     * @static
     * @param {LoadFileRecordRes} message LoadFileRecordRes
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */LoadFileRecordRes.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.record=[];if(message.record&&message.record.length){object.record=[];for(var j=0;j<message.record.length;++j){object.record[j]=$root.FileRecord.toObject(message.record[j],options);}}return object;};/**
     * Converts this LoadFileRecordRes to JSON.
     * @function toJSON
     * @memberof LoadFileRecordRes
     * @instance
     * @returns {Object.<string,*>} JSON object
     */LoadFileRecordRes.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return LoadFileRecordRes;}();$root.SearchFileRecordReq=function(){/**
     * Properties of a SearchFileRecordReq.
     * @exports ISearchFileRecordReq
     * @interface ISearchFileRecordReq
     * @property {string} keyword SearchFileRecordReq keyword
     * @property {IConversation|null} [conversation] SearchFileRecordReq conversation
     * @property {Long} messageId SearchFileRecordReq messageId
     * @property {number} count SearchFileRecordReq count
     * @property {string|null} [from] SearchFileRecordReq from
     * @property {number|null} [order] SearchFileRecordReq order
     *//**
     * Constructs a new SearchFileRecordReq.
     * @exports SearchFileRecordReq
     * @classdesc Represents a SearchFileRecordReq.
     * @implements ISearchFileRecordReq
     * @constructor
     * @param {ISearchFileRecordReq=} [properties] Properties to set
     */function SearchFileRecordReq(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * SearchFileRecordReq keyword.
     * @member {string} keyword
     * @memberof SearchFileRecordReq
     * @instance
     */SearchFileRecordReq.prototype.keyword="";/**
     * SearchFileRecordReq conversation.
     * @member {IConversation|null|undefined} conversation
     * @memberof SearchFileRecordReq
     * @instance
     */SearchFileRecordReq.prototype.conversation=null;/**
     * SearchFileRecordReq messageId.
     * @member {Long} messageId
     * @memberof SearchFileRecordReq
     * @instance
     */SearchFileRecordReq.prototype.messageId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * SearchFileRecordReq count.
     * @member {number} count
     * @memberof SearchFileRecordReq
     * @instance
     */SearchFileRecordReq.prototype.count=0;/**
     * SearchFileRecordReq from.
     * @member {string} from
     * @memberof SearchFileRecordReq
     * @instance
     */SearchFileRecordReq.prototype.from="";/**
     * SearchFileRecordReq order.
     * @member {number} order
     * @memberof SearchFileRecordReq
     * @instance
     */SearchFileRecordReq.prototype.order=0;/**
     * Creates a new SearchFileRecordReq instance using the specified properties.
     * @function create
     * @memberof SearchFileRecordReq
     * @static
     * @param {ISearchFileRecordReq=} [properties] Properties to set
     * @returns {SearchFileRecordReq} SearchFileRecordReq instance
     */SearchFileRecordReq.create=function create(properties){return new SearchFileRecordReq(properties);};/**
     * Encodes the specified SearchFileRecordReq message. Does not implicitly {@link SearchFileRecordReq.verify|verify} messages.
     * @function encode
     * @memberof SearchFileRecordReq
     * @static
     * @param {ISearchFileRecordReq} message SearchFileRecordReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SearchFileRecordReq.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.keyword);if(message.conversation!=null&&message.hasOwnProperty("conversation"))$root.Conversation.encode(message.conversation,writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();writer.uint32(/* id 3, wireType 0 =*/24).int64(message.messageId);writer.uint32(/* id 4, wireType 0 =*/32).int32(message.count);if(message.from!=null&&message.hasOwnProperty("from"))writer.uint32(/* id 5, wireType 2 =*/42).string(message.from);if(message.order!=null&&message.hasOwnProperty("order"))writer.uint32(/* id 6, wireType 0 =*/48).int32(message.order);return writer;};/**
     * Encodes the specified SearchFileRecordReq message, length delimited. Does not implicitly {@link SearchFileRecordReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SearchFileRecordReq
     * @static
     * @param {ISearchFileRecordReq} message SearchFileRecordReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SearchFileRecordReq.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a SearchFileRecordReq message from the specified reader or buffer.
     * @function decode
     * @memberof SearchFileRecordReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SearchFileRecordReq} SearchFileRecordReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SearchFileRecordReq.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.SearchFileRecordReq();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.keyword=reader.string();break;case 2:message.conversation=$root.Conversation.decode(reader,reader.uint32());break;case 3:message.messageId=reader.int64();break;case 4:message.count=reader.int32();break;case 5:message.from=reader.string();break;case 6:message.order=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("keyword"))throw $util.ProtocolError("missing required 'keyword'",{instance:message});if(!message.hasOwnProperty("messageId"))throw $util.ProtocolError("missing required 'messageId'",{instance:message});if(!message.hasOwnProperty("count"))throw $util.ProtocolError("missing required 'count'",{instance:message});return message;};/**
     * Decodes a SearchFileRecordReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SearchFileRecordReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SearchFileRecordReq} SearchFileRecordReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SearchFileRecordReq.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a SearchFileRecordReq message.
     * @function verify
     * @memberof SearchFileRecordReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */SearchFileRecordReq.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.keyword))return"keyword: string expected";if(message.conversation!=null&&message.hasOwnProperty("conversation")){var error=$root.Conversation.verify(message.conversation);if(error)return"conversation."+error;}if(!$util.isInteger(message.messageId)&&!(message.messageId&&$util.isInteger(message.messageId.low)&&$util.isInteger(message.messageId.high)))return"messageId: integer|Long expected";if(!$util.isInteger(message.count))return"count: integer expected";if(message.from!=null&&message.hasOwnProperty("from"))if(!$util.isString(message.from))return"from: string expected";if(message.order!=null&&message.hasOwnProperty("order"))if(!$util.isInteger(message.order))return"order: integer expected";return null;};/**
     * Creates a SearchFileRecordReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SearchFileRecordReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SearchFileRecordReq} SearchFileRecordReq
     */SearchFileRecordReq.fromObject=function fromObject(object){if(object instanceof $root.SearchFileRecordReq)return object;var message=new $root.SearchFileRecordReq();if(object.keyword!=null)message.keyword=String(object.keyword);if(object.conversation!=null){if((0,_typeof3.default)(object.conversation)!=="object")throw TypeError(".SearchFileRecordReq.conversation: object expected");message.conversation=$root.Conversation.fromObject(object.conversation);}if(object.messageId!=null)if($util.Long)(message.messageId=$util.Long.fromValue(object.messageId)).unsigned=false;else if(typeof object.messageId==="string")message.messageId=parseInt(object.messageId,10);else if(typeof object.messageId==="number")message.messageId=object.messageId;else if((0,_typeof3.default)(object.messageId)==="object")message.messageId=new $util.LongBits(object.messageId.low>>>0,object.messageId.high>>>0).toNumber();if(object.count!=null)message.count=object.count|0;if(object.from!=null)message.from=String(object.from);if(object.order!=null)message.order=object.order|0;return message;};/**
     * Creates a plain object from a SearchFileRecordReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SearchFileRecordReq
     * @static
     * @param {SearchFileRecordReq} message SearchFileRecordReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */SearchFileRecordReq.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.keyword="";object.conversation=null;if($util.Long){var long=new $util.Long(0,0,false);object.messageId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.messageId=options.longs===String?"0":0;object.count=0;object.from="";object.order=0;}if(message.keyword!=null&&message.hasOwnProperty("keyword"))object.keyword=message.keyword;if(message.conversation!=null&&message.hasOwnProperty("conversation"))object.conversation=$root.Conversation.toObject(message.conversation,options);if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(typeof message.messageId==="number")object.messageId=options.longs===String?String(message.messageId):message.messageId;else object.messageId=options.longs===String?$util.Long.prototype.toString.call(message.messageId):options.longs===Number?new $util.LongBits(message.messageId.low>>>0,message.messageId.high>>>0).toNumber():message.messageId;if(message.count!=null&&message.hasOwnProperty("count"))object.count=message.count;if(message.from!=null&&message.hasOwnProperty("from"))object.from=message.from;if(message.order!=null&&message.hasOwnProperty("order"))object.order=message.order;return object;};/**
     * Converts this SearchFileRecordReq to JSON.
     * @function toJSON
     * @memberof SearchFileRecordReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */SearchFileRecordReq.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return SearchFileRecordReq;}();$root.ConferenceRequest=function(){/**
     * Properties of a ConferenceRequest.
     * @exports IConferenceRequest
     * @interface IConferenceRequest
     * @property {Long|null} [sessionId] ConferenceRequest sessionId
     * @property {string} request ConferenceRequest request
     * @property {string|null} [data] ConferenceRequest data
     * @property {string|null} [roomId] ConferenceRequest roomId
     * @property {number|null} [advance] ConferenceRequest advance
     *//**
     * Constructs a new ConferenceRequest.
     * @exports ConferenceRequest
     * @classdesc Represents a ConferenceRequest.
     * @implements IConferenceRequest
     * @constructor
     * @param {IConferenceRequest=} [properties] Properties to set
     */function ConferenceRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ConferenceRequest sessionId.
     * @member {Long} sessionId
     * @memberof ConferenceRequest
     * @instance
     */ConferenceRequest.prototype.sessionId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ConferenceRequest request.
     * @member {string} request
     * @memberof ConferenceRequest
     * @instance
     */ConferenceRequest.prototype.request="";/**
     * ConferenceRequest data.
     * @member {string} data
     * @memberof ConferenceRequest
     * @instance
     */ConferenceRequest.prototype.data="";/**
     * ConferenceRequest roomId.
     * @member {string} roomId
     * @memberof ConferenceRequest
     * @instance
     */ConferenceRequest.prototype.roomId="";/**
     * ConferenceRequest advance.
     * @member {number} advance
     * @memberof ConferenceRequest
     * @instance
     */ConferenceRequest.prototype.advance=0;/**
     * Creates a new ConferenceRequest instance using the specified properties.
     * @function create
     * @memberof ConferenceRequest
     * @static
     * @param {IConferenceRequest=} [properties] Properties to set
     * @returns {ConferenceRequest} ConferenceRequest instance
     */ConferenceRequest.create=function create(properties){return new ConferenceRequest(properties);};/**
     * Encodes the specified ConferenceRequest message. Does not implicitly {@link ConferenceRequest.verify|verify} messages.
     * @function encode
     * @memberof ConferenceRequest
     * @static
     * @param {IConferenceRequest} message ConferenceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConferenceRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.sessionId!=null&&message.hasOwnProperty("sessionId"))writer.uint32(/* id 1, wireType 0 =*/8).int64(message.sessionId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.request);if(message.data!=null&&message.hasOwnProperty("data"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.data);if(message.roomId!=null&&message.hasOwnProperty("roomId"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.roomId);if(message.advance!=null&&message.hasOwnProperty("advance"))writer.uint32(/* id 5, wireType 0 =*/40).int32(message.advance);return writer;};/**
     * Encodes the specified ConferenceRequest message, length delimited. Does not implicitly {@link ConferenceRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ConferenceRequest
     * @static
     * @param {IConferenceRequest} message ConferenceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConferenceRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ConferenceRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ConferenceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ConferenceRequest} ConferenceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConferenceRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ConferenceRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.sessionId=reader.int64();break;case 2:message.request=reader.string();break;case 3:message.data=reader.string();break;case 4:message.roomId=reader.string();break;case 5:message.advance=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("request"))throw $util.ProtocolError("missing required 'request'",{instance:message});return message;};/**
     * Decodes a ConferenceRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ConferenceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ConferenceRequest} ConferenceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConferenceRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ConferenceRequest message.
     * @function verify
     * @memberof ConferenceRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ConferenceRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.sessionId!=null&&message.hasOwnProperty("sessionId"))if(!$util.isInteger(message.sessionId)&&!(message.sessionId&&$util.isInteger(message.sessionId.low)&&$util.isInteger(message.sessionId.high)))return"sessionId: integer|Long expected";if(!$util.isString(message.request))return"request: string expected";if(message.data!=null&&message.hasOwnProperty("data"))if(!$util.isString(message.data))return"data: string expected";if(message.roomId!=null&&message.hasOwnProperty("roomId"))if(!$util.isString(message.roomId))return"roomId: string expected";if(message.advance!=null&&message.hasOwnProperty("advance"))if(!$util.isInteger(message.advance))return"advance: integer expected";return null;};/**
     * Creates a ConferenceRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ConferenceRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ConferenceRequest} ConferenceRequest
     */ConferenceRequest.fromObject=function fromObject(object){if(object instanceof $root.ConferenceRequest)return object;var message=new $root.ConferenceRequest();if(object.sessionId!=null)if($util.Long)(message.sessionId=$util.Long.fromValue(object.sessionId)).unsigned=false;else if(typeof object.sessionId==="string")message.sessionId=parseInt(object.sessionId,10);else if(typeof object.sessionId==="number")message.sessionId=object.sessionId;else if((0,_typeof3.default)(object.sessionId)==="object")message.sessionId=new $util.LongBits(object.sessionId.low>>>0,object.sessionId.high>>>0).toNumber();if(object.request!=null)message.request=String(object.request);if(object.data!=null)message.data=String(object.data);if(object.roomId!=null)message.roomId=String(object.roomId);if(object.advance!=null)message.advance=object.advance|0;return message;};/**
     * Creates a plain object from a ConferenceRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ConferenceRequest
     * @static
     * @param {ConferenceRequest} message ConferenceRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ConferenceRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.sessionId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.sessionId=options.longs===String?"0":0;object.request="";object.data="";object.roomId="";object.advance=0;}if(message.sessionId!=null&&message.hasOwnProperty("sessionId"))if(typeof message.sessionId==="number")object.sessionId=options.longs===String?String(message.sessionId):message.sessionId;else object.sessionId=options.longs===String?$util.Long.prototype.toString.call(message.sessionId):options.longs===Number?new $util.LongBits(message.sessionId.low>>>0,message.sessionId.high>>>0).toNumber():message.sessionId;if(message.request!=null&&message.hasOwnProperty("request"))object.request=message.request;if(message.data!=null&&message.hasOwnProperty("data"))object.data=message.data;if(message.roomId!=null&&message.hasOwnProperty("roomId"))object.roomId=message.roomId;if(message.advance!=null&&message.hasOwnProperty("advance"))object.advance=message.advance;return object;};/**
     * Converts this ConferenceRequest to JSON.
     * @function toJSON
     * @memberof ConferenceRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ConferenceRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ConferenceRequest;}();$root.ConfInfo=function(){/**
     * Properties of a ConfInfo.
     * @exports IConfInfo
     * @interface IConfInfo
     * @property {string} roomId ConfInfo roomId
     * @property {string|null} [description] ConfInfo description
     * @property {string|null} [serverId] ConfInfo serverId
     * @property {string|null} [pin] ConfInfo pin
     * @property {number|null} [publishers] ConfInfo publishers
     * @property {number|null} [numPublisher] ConfInfo numPublisher
     * @property {number|null} [bitrate] ConfInfo bitrate
     * @property {number|null} [advance] ConfInfo advance
     * @property {number|null} [record] ConfInfo record
     * @property {number|null} [permanent] ConfInfo permanent
     *//**
     * Constructs a new ConfInfo.
     * @exports ConfInfo
     * @classdesc Represents a ConfInfo.
     * @implements IConfInfo
     * @constructor
     * @param {IConfInfo=} [properties] Properties to set
     */function ConfInfo(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ConfInfo roomId.
     * @member {string} roomId
     * @memberof ConfInfo
     * @instance
     */ConfInfo.prototype.roomId="";/**
     * ConfInfo description.
     * @member {string} description
     * @memberof ConfInfo
     * @instance
     */ConfInfo.prototype.description="";/**
     * ConfInfo serverId.
     * @member {string} serverId
     * @memberof ConfInfo
     * @instance
     */ConfInfo.prototype.serverId="";/**
     * ConfInfo pin.
     * @member {string} pin
     * @memberof ConfInfo
     * @instance
     */ConfInfo.prototype.pin="";/**
     * ConfInfo publishers.
     * @member {number} publishers
     * @memberof ConfInfo
     * @instance
     */ConfInfo.prototype.publishers=0;/**
     * ConfInfo numPublisher.
     * @member {number} numPublisher
     * @memberof ConfInfo
     * @instance
     */ConfInfo.prototype.numPublisher=0;/**
     * ConfInfo bitrate.
     * @member {number} bitrate
     * @memberof ConfInfo
     * @instance
     */ConfInfo.prototype.bitrate=0;/**
     * ConfInfo advance.
     * @member {number} advance
     * @memberof ConfInfo
     * @instance
     */ConfInfo.prototype.advance=0;/**
     * ConfInfo record.
     * @member {number} record
     * @memberof ConfInfo
     * @instance
     */ConfInfo.prototype.record=0;/**
     * ConfInfo permanent.
     * @member {number} permanent
     * @memberof ConfInfo
     * @instance
     */ConfInfo.prototype.permanent=0;/**
     * Creates a new ConfInfo instance using the specified properties.
     * @function create
     * @memberof ConfInfo
     * @static
     * @param {IConfInfo=} [properties] Properties to set
     * @returns {ConfInfo} ConfInfo instance
     */ConfInfo.create=function create(properties){return new ConfInfo(properties);};/**
     * Encodes the specified ConfInfo message. Does not implicitly {@link ConfInfo.verify|verify} messages.
     * @function encode
     * @memberof ConfInfo
     * @static
     * @param {IConfInfo} message ConfInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfInfo.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);if(message.description!=null&&message.hasOwnProperty("description"))writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);if(message.serverId!=null&&message.hasOwnProperty("serverId"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.serverId);if(message.pin!=null&&message.hasOwnProperty("pin"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.pin);if(message.publishers!=null&&message.hasOwnProperty("publishers"))writer.uint32(/* id 5, wireType 0 =*/40).int32(message.publishers);if(message.numPublisher!=null&&message.hasOwnProperty("numPublisher"))writer.uint32(/* id 6, wireType 0 =*/48).int32(message.numPublisher);if(message.bitrate!=null&&message.hasOwnProperty("bitrate"))writer.uint32(/* id 7, wireType 0 =*/56).int32(message.bitrate);if(message.advance!=null&&message.hasOwnProperty("advance"))writer.uint32(/* id 8, wireType 0 =*/64).int32(message.advance);if(message.record!=null&&message.hasOwnProperty("record"))writer.uint32(/* id 9, wireType 0 =*/72).int32(message.record);if(message.permanent!=null&&message.hasOwnProperty("permanent"))writer.uint32(/* id 10, wireType 0 =*/80).int32(message.permanent);return writer;};/**
     * Encodes the specified ConfInfo message, length delimited. Does not implicitly {@link ConfInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ConfInfo
     * @static
     * @param {IConfInfo} message ConfInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfInfo.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ConfInfo message from the specified reader or buffer.
     * @function decode
     * @memberof ConfInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ConfInfo} ConfInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfInfo.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ConfInfo();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.roomId=reader.string();break;case 2:message.description=reader.string();break;case 3:message.serverId=reader.string();break;case 4:message.pin=reader.string();break;case 5:message.publishers=reader.int32();break;case 6:message.numPublisher=reader.int32();break;case 7:message.bitrate=reader.int32();break;case 8:message.advance=reader.int32();break;case 9:message.record=reader.int32();break;case 10:message.permanent=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("roomId"))throw $util.ProtocolError("missing required 'roomId'",{instance:message});return message;};/**
     * Decodes a ConfInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ConfInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ConfInfo} ConfInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfInfo.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ConfInfo message.
     * @function verify
     * @memberof ConfInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ConfInfo.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.roomId))return"roomId: string expected";if(message.description!=null&&message.hasOwnProperty("description"))if(!$util.isString(message.description))return"description: string expected";if(message.serverId!=null&&message.hasOwnProperty("serverId"))if(!$util.isString(message.serverId))return"serverId: string expected";if(message.pin!=null&&message.hasOwnProperty("pin"))if(!$util.isString(message.pin))return"pin: string expected";if(message.publishers!=null&&message.hasOwnProperty("publishers"))if(!$util.isInteger(message.publishers))return"publishers: integer expected";if(message.numPublisher!=null&&message.hasOwnProperty("numPublisher"))if(!$util.isInteger(message.numPublisher))return"numPublisher: integer expected";if(message.bitrate!=null&&message.hasOwnProperty("bitrate"))if(!$util.isInteger(message.bitrate))return"bitrate: integer expected";if(message.advance!=null&&message.hasOwnProperty("advance"))if(!$util.isInteger(message.advance))return"advance: integer expected";if(message.record!=null&&message.hasOwnProperty("record"))if(!$util.isInteger(message.record))return"record: integer expected";if(message.permanent!=null&&message.hasOwnProperty("permanent"))if(!$util.isInteger(message.permanent))return"permanent: integer expected";return null;};/**
     * Creates a ConfInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ConfInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ConfInfo} ConfInfo
     */ConfInfo.fromObject=function fromObject(object){if(object instanceof $root.ConfInfo)return object;var message=new $root.ConfInfo();if(object.roomId!=null)message.roomId=String(object.roomId);if(object.description!=null)message.description=String(object.description);if(object.serverId!=null)message.serverId=String(object.serverId);if(object.pin!=null)message.pin=String(object.pin);if(object.publishers!=null)message.publishers=object.publishers|0;if(object.numPublisher!=null)message.numPublisher=object.numPublisher|0;if(object.bitrate!=null)message.bitrate=object.bitrate|0;if(object.advance!=null)message.advance=object.advance|0;if(object.record!=null)message.record=object.record|0;if(object.permanent!=null)message.permanent=object.permanent|0;return message;};/**
     * Creates a plain object from a ConfInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ConfInfo
     * @static
     * @param {ConfInfo} message ConfInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ConfInfo.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.roomId="";object.description="";object.serverId="";object.pin="";object.publishers=0;object.numPublisher=0;object.bitrate=0;object.advance=0;object.record=0;object.permanent=0;}if(message.roomId!=null&&message.hasOwnProperty("roomId"))object.roomId=message.roomId;if(message.description!=null&&message.hasOwnProperty("description"))object.description=message.description;if(message.serverId!=null&&message.hasOwnProperty("serverId"))object.serverId=message.serverId;if(message.pin!=null&&message.hasOwnProperty("pin"))object.pin=message.pin;if(message.publishers!=null&&message.hasOwnProperty("publishers"))object.publishers=message.publishers;if(message.numPublisher!=null&&message.hasOwnProperty("numPublisher"))object.numPublisher=message.numPublisher;if(message.bitrate!=null&&message.hasOwnProperty("bitrate"))object.bitrate=message.bitrate;if(message.advance!=null&&message.hasOwnProperty("advance"))object.advance=message.advance;if(message.record!=null&&message.hasOwnProperty("record"))object.record=message.record;if(message.permanent!=null&&message.hasOwnProperty("permanent"))object.permanent=message.permanent;return object;};/**
     * Converts this ConfInfo to JSON.
     * @function toJSON
     * @memberof ConfInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ConfInfo.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ConfInfo;}();$root.ConfInfos=function(){/**
     * Properties of a ConfInfos.
     * @exports IConfInfos
     * @interface IConfInfos
     * @property {Array.<IConfInfo>|null} [info] ConfInfos info
     *//**
     * Constructs a new ConfInfos.
     * @exports ConfInfos
     * @classdesc Represents a ConfInfos.
     * @implements IConfInfos
     * @constructor
     * @param {IConfInfos=} [properties] Properties to set
     */function ConfInfos(properties){this.info=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ConfInfos info.
     * @member {Array.<IConfInfo>} info
     * @memberof ConfInfos
     * @instance
     */ConfInfos.prototype.info=$util.emptyArray;/**
     * Creates a new ConfInfos instance using the specified properties.
     * @function create
     * @memberof ConfInfos
     * @static
     * @param {IConfInfos=} [properties] Properties to set
     * @returns {ConfInfos} ConfInfos instance
     */ConfInfos.create=function create(properties){return new ConfInfos(properties);};/**
     * Encodes the specified ConfInfos message. Does not implicitly {@link ConfInfos.verify|verify} messages.
     * @function encode
     * @memberof ConfInfos
     * @static
     * @param {IConfInfos} message ConfInfos message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfInfos.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.info!=null&&message.info.length)for(var i=0;i<message.info.length;++i){$root.ConfInfo.encode(message.info[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified ConfInfos message, length delimited. Does not implicitly {@link ConfInfos.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ConfInfos
     * @static
     * @param {IConfInfos} message ConfInfos message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfInfos.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ConfInfos message from the specified reader or buffer.
     * @function decode
     * @memberof ConfInfos
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ConfInfos} ConfInfos
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfInfos.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ConfInfos();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.info&&message.info.length))message.info=[];message.info.push($root.ConfInfo.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a ConfInfos message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ConfInfos
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ConfInfos} ConfInfos
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfInfos.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ConfInfos message.
     * @function verify
     * @memberof ConfInfos
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ConfInfos.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.info!=null&&message.hasOwnProperty("info")){if(!Array.isArray(message.info))return"info: array expected";for(var i=0;i<message.info.length;++i){var error=$root.ConfInfo.verify(message.info[i]);if(error)return"info."+error;}}return null;};/**
     * Creates a ConfInfos message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ConfInfos
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ConfInfos} ConfInfos
     */ConfInfos.fromObject=function fromObject(object){if(object instanceof $root.ConfInfos)return object;var message=new $root.ConfInfos();if(object.info){if(!Array.isArray(object.info))throw TypeError(".ConfInfos.info: array expected");message.info=[];for(var i=0;i<object.info.length;++i){if((0,_typeof3.default)(object.info[i])!=="object")throw TypeError(".ConfInfos.info: object expected");message.info[i]=$root.ConfInfo.fromObject(object.info[i]);}}return message;};/**
     * Creates a plain object from a ConfInfos message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ConfInfos
     * @static
     * @param {ConfInfos} message ConfInfos
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ConfInfos.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.info=[];if(message.info&&message.info.length){object.info=[];for(var j=0;j<message.info.length;++j){object.info[j]=$root.ConfInfo.toObject(message.info[j],options);}}return object;};/**
     * Converts this ConfInfos to JSON.
     * @function toJSON
     * @memberof ConfInfos
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ConfInfos.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ConfInfos;}();$root.ConfStream=function(){/**
     * Properties of a ConfStream.
     * @exports IConfStream
     * @interface IConfStream
     * @property {string} type ConfStream type
     * @property {string} mid ConfStream mid
     * @property {string} codec ConfStream codec
     *//**
     * Constructs a new ConfStream.
     * @exports ConfStream
     * @classdesc Represents a ConfStream.
     * @implements IConfStream
     * @constructor
     * @param {IConfStream=} [properties] Properties to set
     */function ConfStream(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ConfStream type.
     * @member {string} type
     * @memberof ConfStream
     * @instance
     */ConfStream.prototype.type="";/**
     * ConfStream mid.
     * @member {string} mid
     * @memberof ConfStream
     * @instance
     */ConfStream.prototype.mid="";/**
     * ConfStream codec.
     * @member {string} codec
     * @memberof ConfStream
     * @instance
     */ConfStream.prototype.codec="";/**
     * Creates a new ConfStream instance using the specified properties.
     * @function create
     * @memberof ConfStream
     * @static
     * @param {IConfStream=} [properties] Properties to set
     * @returns {ConfStream} ConfStream instance
     */ConfStream.create=function create(properties){return new ConfStream(properties);};/**
     * Encodes the specified ConfStream message. Does not implicitly {@link ConfStream.verify|verify} messages.
     * @function encode
     * @memberof ConfStream
     * @static
     * @param {IConfStream} message ConfStream message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfStream.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);writer.uint32(/* id 2, wireType 2 =*/18).string(message.mid);writer.uint32(/* id 3, wireType 2 =*/26).string(message.codec);return writer;};/**
     * Encodes the specified ConfStream message, length delimited. Does not implicitly {@link ConfStream.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ConfStream
     * @static
     * @param {IConfStream} message ConfStream message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfStream.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ConfStream message from the specified reader or buffer.
     * @function decode
     * @memberof ConfStream
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ConfStream} ConfStream
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfStream.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ConfStream();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.type=reader.string();break;case 2:message.mid=reader.string();break;case 3:message.codec=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});if(!message.hasOwnProperty("mid"))throw $util.ProtocolError("missing required 'mid'",{instance:message});if(!message.hasOwnProperty("codec"))throw $util.ProtocolError("missing required 'codec'",{instance:message});return message;};/**
     * Decodes a ConfStream message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ConfStream
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ConfStream} ConfStream
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfStream.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ConfStream message.
     * @function verify
     * @memberof ConfStream
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ConfStream.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.type))return"type: string expected";if(!$util.isString(message.mid))return"mid: string expected";if(!$util.isString(message.codec))return"codec: string expected";return null;};/**
     * Creates a ConfStream message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ConfStream
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ConfStream} ConfStream
     */ConfStream.fromObject=function fromObject(object){if(object instanceof $root.ConfStream)return object;var message=new $root.ConfStream();if(object.type!=null)message.type=String(object.type);if(object.mid!=null)message.mid=String(object.mid);if(object.codec!=null)message.codec=String(object.codec);return message;};/**
     * Creates a plain object from a ConfStream message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ConfStream
     * @static
     * @param {ConfStream} message ConfStream
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ConfStream.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.type="";object.mid="";object.codec="";}if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.mid!=null&&message.hasOwnProperty("mid"))object.mid=message.mid;if(message.codec!=null&&message.hasOwnProperty("codec"))object.codec=message.codec;return object;};/**
     * Converts this ConfStream to JSON.
     * @function toJSON
     * @memberof ConfStream
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ConfStream.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ConfStream;}();$root.ConfParticipant=function(){/**
     * Properties of a ConfParticipant.
     * @exports IConfParticipant
     * @interface IConfParticipant
     * @property {string} userId ConfParticipant userId
     * @property {number} publisher ConfParticipant publisher
     * @property {Array.<IConfStream>|null} [stream] ConfParticipant stream
     *//**
     * Constructs a new ConfParticipant.
     * @exports ConfParticipant
     * @classdesc Represents a ConfParticipant.
     * @implements IConfParticipant
     * @constructor
     * @param {IConfParticipant=} [properties] Properties to set
     */function ConfParticipant(properties){this.stream=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ConfParticipant userId.
     * @member {string} userId
     * @memberof ConfParticipant
     * @instance
     */ConfParticipant.prototype.userId="";/**
     * ConfParticipant publisher.
     * @member {number} publisher
     * @memberof ConfParticipant
     * @instance
     */ConfParticipant.prototype.publisher=0;/**
     * ConfParticipant stream.
     * @member {Array.<IConfStream>} stream
     * @memberof ConfParticipant
     * @instance
     */ConfParticipant.prototype.stream=$util.emptyArray;/**
     * Creates a new ConfParticipant instance using the specified properties.
     * @function create
     * @memberof ConfParticipant
     * @static
     * @param {IConfParticipant=} [properties] Properties to set
     * @returns {ConfParticipant} ConfParticipant instance
     */ConfParticipant.create=function create(properties){return new ConfParticipant(properties);};/**
     * Encodes the specified ConfParticipant message. Does not implicitly {@link ConfParticipant.verify|verify} messages.
     * @function encode
     * @memberof ConfParticipant
     * @static
     * @param {IConfParticipant} message ConfParticipant message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfParticipant.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.publisher);if(message.stream!=null&&message.stream.length)for(var i=0;i<message.stream.length;++i){$root.ConfStream.encode(message.stream[i],writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();}return writer;};/**
     * Encodes the specified ConfParticipant message, length delimited. Does not implicitly {@link ConfParticipant.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ConfParticipant
     * @static
     * @param {IConfParticipant} message ConfParticipant message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfParticipant.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ConfParticipant message from the specified reader or buffer.
     * @function decode
     * @memberof ConfParticipant
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ConfParticipant} ConfParticipant
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfParticipant.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ConfParticipant();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.userId=reader.string();break;case 2:message.publisher=reader.int32();break;case 3:if(!(message.stream&&message.stream.length))message.stream=[];message.stream.push($root.ConfStream.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("userId"))throw $util.ProtocolError("missing required 'userId'",{instance:message});if(!message.hasOwnProperty("publisher"))throw $util.ProtocolError("missing required 'publisher'",{instance:message});return message;};/**
     * Decodes a ConfParticipant message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ConfParticipant
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ConfParticipant} ConfParticipant
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfParticipant.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ConfParticipant message.
     * @function verify
     * @memberof ConfParticipant
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ConfParticipant.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.userId))return"userId: string expected";if(!$util.isInteger(message.publisher))return"publisher: integer expected";if(message.stream!=null&&message.hasOwnProperty("stream")){if(!Array.isArray(message.stream))return"stream: array expected";for(var i=0;i<message.stream.length;++i){var error=$root.ConfStream.verify(message.stream[i]);if(error)return"stream."+error;}}return null;};/**
     * Creates a ConfParticipant message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ConfParticipant
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ConfParticipant} ConfParticipant
     */ConfParticipant.fromObject=function fromObject(object){if(object instanceof $root.ConfParticipant)return object;var message=new $root.ConfParticipant();if(object.userId!=null)message.userId=String(object.userId);if(object.publisher!=null)message.publisher=object.publisher|0;if(object.stream){if(!Array.isArray(object.stream))throw TypeError(".ConfParticipant.stream: array expected");message.stream=[];for(var i=0;i<object.stream.length;++i){if((0,_typeof3.default)(object.stream[i])!=="object")throw TypeError(".ConfParticipant.stream: object expected");message.stream[i]=$root.ConfStream.fromObject(object.stream[i]);}}return message;};/**
     * Creates a plain object from a ConfParticipant message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ConfParticipant
     * @static
     * @param {ConfParticipant} message ConfParticipant
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ConfParticipant.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.stream=[];if(options.defaults){object.userId="";object.publisher=0;}if(message.userId!=null&&message.hasOwnProperty("userId"))object.userId=message.userId;if(message.publisher!=null&&message.hasOwnProperty("publisher"))object.publisher=message.publisher;if(message.stream&&message.stream.length){object.stream=[];for(var j=0;j<message.stream.length;++j){object.stream[j]=$root.ConfStream.toObject(message.stream[j],options);}}return object;};/**
     * Converts this ConfParticipant to JSON.
     * @function toJSON
     * @memberof ConfParticipant
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ConfParticipant.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ConfParticipant;}();$root.ConfParticipants=function(){/**
     * Properties of a ConfParticipants.
     * @exports IConfParticipants
     * @interface IConfParticipants
     * @property {Array.<IConfParticipant>|null} [participant] ConfParticipants participant
     *//**
     * Constructs a new ConfParticipants.
     * @exports ConfParticipants
     * @classdesc Represents a ConfParticipants.
     * @implements IConfParticipants
     * @constructor
     * @param {IConfParticipants=} [properties] Properties to set
     */function ConfParticipants(properties){this.participant=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ConfParticipants participant.
     * @member {Array.<IConfParticipant>} participant
     * @memberof ConfParticipants
     * @instance
     */ConfParticipants.prototype.participant=$util.emptyArray;/**
     * Creates a new ConfParticipants instance using the specified properties.
     * @function create
     * @memberof ConfParticipants
     * @static
     * @param {IConfParticipants=} [properties] Properties to set
     * @returns {ConfParticipants} ConfParticipants instance
     */ConfParticipants.create=function create(properties){return new ConfParticipants(properties);};/**
     * Encodes the specified ConfParticipants message. Does not implicitly {@link ConfParticipants.verify|verify} messages.
     * @function encode
     * @memberof ConfParticipants
     * @static
     * @param {IConfParticipants} message ConfParticipants message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfParticipants.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.participant!=null&&message.participant.length)for(var i=0;i<message.participant.length;++i){$root.ConfParticipant.encode(message.participant[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified ConfParticipants message, length delimited. Does not implicitly {@link ConfParticipants.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ConfParticipants
     * @static
     * @param {IConfParticipants} message ConfParticipants message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfParticipants.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ConfParticipants message from the specified reader or buffer.
     * @function decode
     * @memberof ConfParticipants
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ConfParticipants} ConfParticipants
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfParticipants.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ConfParticipants();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.participant&&message.participant.length))message.participant=[];message.participant.push($root.ConfParticipant.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a ConfParticipants message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ConfParticipants
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ConfParticipants} ConfParticipants
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfParticipants.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ConfParticipants message.
     * @function verify
     * @memberof ConfParticipants
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ConfParticipants.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.participant!=null&&message.hasOwnProperty("participant")){if(!Array.isArray(message.participant))return"participant: array expected";for(var i=0;i<message.participant.length;++i){var error=$root.ConfParticipant.verify(message.participant[i]);if(error)return"participant."+error;}}return null;};/**
     * Creates a ConfParticipants message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ConfParticipants
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ConfParticipants} ConfParticipants
     */ConfParticipants.fromObject=function fromObject(object){if(object instanceof $root.ConfParticipants)return object;var message=new $root.ConfParticipants();if(object.participant){if(!Array.isArray(object.participant))throw TypeError(".ConfParticipants.participant: array expected");message.participant=[];for(var i=0;i<object.participant.length;++i){if((0,_typeof3.default)(object.participant[i])!=="object")throw TypeError(".ConfParticipants.participant: object expected");message.participant[i]=$root.ConfParticipant.fromObject(object.participant[i]);}}return message;};/**
     * Creates a plain object from a ConfParticipants message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ConfParticipants
     * @static
     * @param {ConfParticipants} message ConfParticipants
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ConfParticipants.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.participant=[];if(message.participant&&message.participant.length){object.participant=[];for(var j=0;j<message.participant.length;++j){object.participant[j]=$root.ConfParticipant.toObject(message.participant[j],options);}}return object;};/**
     * Converts this ConfParticipants to JSON.
     * @function toJSON
     * @memberof ConfParticipants
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ConfParticipants.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ConfParticipants;}();$root.ConfRtpForwardReq=function(){/**
     * Properties of a ConfRtpForwardReq.
     * @exports IConfRtpForwardReq
     * @interface IConfRtpForwardReq
     * @property {string} roomId ConfRtpForwardReq roomId
     * @property {string} publisherId ConfRtpForwardReq publisherId
     * @property {string} host ConfRtpForwardReq host
     * @property {number|null} [audioPort] ConfRtpForwardReq audioPort
     * @property {number|null} [audioPt] ConfRtpForwardReq audioPt
     * @property {Long|null} [audioSsrc] ConfRtpForwardReq audioSsrc
     * @property {number|null} [videoPort] ConfRtpForwardReq videoPort
     * @property {number|null} [videoPt] ConfRtpForwardReq videoPt
     * @property {Long|null} [videoSsrc] ConfRtpForwardReq videoSsrc
     *//**
     * Constructs a new ConfRtpForwardReq.
     * @exports ConfRtpForwardReq
     * @classdesc Represents a ConfRtpForwardReq.
     * @implements IConfRtpForwardReq
     * @constructor
     * @param {IConfRtpForwardReq=} [properties] Properties to set
     */function ConfRtpForwardReq(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ConfRtpForwardReq roomId.
     * @member {string} roomId
     * @memberof ConfRtpForwardReq
     * @instance
     */ConfRtpForwardReq.prototype.roomId="";/**
     * ConfRtpForwardReq publisherId.
     * @member {string} publisherId
     * @memberof ConfRtpForwardReq
     * @instance
     */ConfRtpForwardReq.prototype.publisherId="";/**
     * ConfRtpForwardReq host.
     * @member {string} host
     * @memberof ConfRtpForwardReq
     * @instance
     */ConfRtpForwardReq.prototype.host="";/**
     * ConfRtpForwardReq audioPort.
     * @member {number} audioPort
     * @memberof ConfRtpForwardReq
     * @instance
     */ConfRtpForwardReq.prototype.audioPort=0;/**
     * ConfRtpForwardReq audioPt.
     * @member {number} audioPt
     * @memberof ConfRtpForwardReq
     * @instance
     */ConfRtpForwardReq.prototype.audioPt=0;/**
     * ConfRtpForwardReq audioSsrc.
     * @member {Long} audioSsrc
     * @memberof ConfRtpForwardReq
     * @instance
     */ConfRtpForwardReq.prototype.audioSsrc=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ConfRtpForwardReq videoPort.
     * @member {number} videoPort
     * @memberof ConfRtpForwardReq
     * @instance
     */ConfRtpForwardReq.prototype.videoPort=0;/**
     * ConfRtpForwardReq videoPt.
     * @member {number} videoPt
     * @memberof ConfRtpForwardReq
     * @instance
     */ConfRtpForwardReq.prototype.videoPt=0;/**
     * ConfRtpForwardReq videoSsrc.
     * @member {Long} videoSsrc
     * @memberof ConfRtpForwardReq
     * @instance
     */ConfRtpForwardReq.prototype.videoSsrc=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new ConfRtpForwardReq instance using the specified properties.
     * @function create
     * @memberof ConfRtpForwardReq
     * @static
     * @param {IConfRtpForwardReq=} [properties] Properties to set
     * @returns {ConfRtpForwardReq} ConfRtpForwardReq instance
     */ConfRtpForwardReq.create=function create(properties){return new ConfRtpForwardReq(properties);};/**
     * Encodes the specified ConfRtpForwardReq message. Does not implicitly {@link ConfRtpForwardReq.verify|verify} messages.
     * @function encode
     * @memberof ConfRtpForwardReq
     * @static
     * @param {IConfRtpForwardReq} message ConfRtpForwardReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfRtpForwardReq.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.publisherId);writer.uint32(/* id 3, wireType 2 =*/26).string(message.host);if(message.audioPort!=null&&message.hasOwnProperty("audioPort"))writer.uint32(/* id 4, wireType 0 =*/32).int32(message.audioPort);if(message.audioPt!=null&&message.hasOwnProperty("audioPt"))writer.uint32(/* id 5, wireType 0 =*/40).int32(message.audioPt);if(message.audioSsrc!=null&&message.hasOwnProperty("audioSsrc"))writer.uint32(/* id 6, wireType 0 =*/48).int64(message.audioSsrc);if(message.videoPort!=null&&message.hasOwnProperty("videoPort"))writer.uint32(/* id 7, wireType 0 =*/56).int32(message.videoPort);if(message.videoPt!=null&&message.hasOwnProperty("videoPt"))writer.uint32(/* id 8, wireType 0 =*/64).int32(message.videoPt);if(message.videoSsrc!=null&&message.hasOwnProperty("videoSsrc"))writer.uint32(/* id 9, wireType 0 =*/72).int64(message.videoSsrc);return writer;};/**
     * Encodes the specified ConfRtpForwardReq message, length delimited. Does not implicitly {@link ConfRtpForwardReq.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ConfRtpForwardReq
     * @static
     * @param {IConfRtpForwardReq} message ConfRtpForwardReq message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ConfRtpForwardReq.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a ConfRtpForwardReq message from the specified reader or buffer.
     * @function decode
     * @memberof ConfRtpForwardReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ConfRtpForwardReq} ConfRtpForwardReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfRtpForwardReq.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ConfRtpForwardReq();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.roomId=reader.string();break;case 2:message.publisherId=reader.string();break;case 3:message.host=reader.string();break;case 4:message.audioPort=reader.int32();break;case 5:message.audioPt=reader.int32();break;case 6:message.audioSsrc=reader.int64();break;case 7:message.videoPort=reader.int32();break;case 8:message.videoPt=reader.int32();break;case 9:message.videoSsrc=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("roomId"))throw $util.ProtocolError("missing required 'roomId'",{instance:message});if(!message.hasOwnProperty("publisherId"))throw $util.ProtocolError("missing required 'publisherId'",{instance:message});if(!message.hasOwnProperty("host"))throw $util.ProtocolError("missing required 'host'",{instance:message});return message;};/**
     * Decodes a ConfRtpForwardReq message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ConfRtpForwardReq
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ConfRtpForwardReq} ConfRtpForwardReq
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ConfRtpForwardReq.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a ConfRtpForwardReq message.
     * @function verify
     * @memberof ConfRtpForwardReq
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ConfRtpForwardReq.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.roomId))return"roomId: string expected";if(!$util.isString(message.publisherId))return"publisherId: string expected";if(!$util.isString(message.host))return"host: string expected";if(message.audioPort!=null&&message.hasOwnProperty("audioPort"))if(!$util.isInteger(message.audioPort))return"audioPort: integer expected";if(message.audioPt!=null&&message.hasOwnProperty("audioPt"))if(!$util.isInteger(message.audioPt))return"audioPt: integer expected";if(message.audioSsrc!=null&&message.hasOwnProperty("audioSsrc"))if(!$util.isInteger(message.audioSsrc)&&!(message.audioSsrc&&$util.isInteger(message.audioSsrc.low)&&$util.isInteger(message.audioSsrc.high)))return"audioSsrc: integer|Long expected";if(message.videoPort!=null&&message.hasOwnProperty("videoPort"))if(!$util.isInteger(message.videoPort))return"videoPort: integer expected";if(message.videoPt!=null&&message.hasOwnProperty("videoPt"))if(!$util.isInteger(message.videoPt))return"videoPt: integer expected";if(message.videoSsrc!=null&&message.hasOwnProperty("videoSsrc"))if(!$util.isInteger(message.videoSsrc)&&!(message.videoSsrc&&$util.isInteger(message.videoSsrc.low)&&$util.isInteger(message.videoSsrc.high)))return"videoSsrc: integer|Long expected";return null;};/**
     * Creates a ConfRtpForwardReq message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ConfRtpForwardReq
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ConfRtpForwardReq} ConfRtpForwardReq
     */ConfRtpForwardReq.fromObject=function fromObject(object){if(object instanceof $root.ConfRtpForwardReq)return object;var message=new $root.ConfRtpForwardReq();if(object.roomId!=null)message.roomId=String(object.roomId);if(object.publisherId!=null)message.publisherId=String(object.publisherId);if(object.host!=null)message.host=String(object.host);if(object.audioPort!=null)message.audioPort=object.audioPort|0;if(object.audioPt!=null)message.audioPt=object.audioPt|0;if(object.audioSsrc!=null)if($util.Long)(message.audioSsrc=$util.Long.fromValue(object.audioSsrc)).unsigned=false;else if(typeof object.audioSsrc==="string")message.audioSsrc=parseInt(object.audioSsrc,10);else if(typeof object.audioSsrc==="number")message.audioSsrc=object.audioSsrc;else if((0,_typeof3.default)(object.audioSsrc)==="object")message.audioSsrc=new $util.LongBits(object.audioSsrc.low>>>0,object.audioSsrc.high>>>0).toNumber();if(object.videoPort!=null)message.videoPort=object.videoPort|0;if(object.videoPt!=null)message.videoPt=object.videoPt|0;if(object.videoSsrc!=null)if($util.Long)(message.videoSsrc=$util.Long.fromValue(object.videoSsrc)).unsigned=false;else if(typeof object.videoSsrc==="string")message.videoSsrc=parseInt(object.videoSsrc,10);else if(typeof object.videoSsrc==="number")message.videoSsrc=object.videoSsrc;else if((0,_typeof3.default)(object.videoSsrc)==="object")message.videoSsrc=new $util.LongBits(object.videoSsrc.low>>>0,object.videoSsrc.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a ConfRtpForwardReq message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ConfRtpForwardReq
     * @static
     * @param {ConfRtpForwardReq} message ConfRtpForwardReq
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ConfRtpForwardReq.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.roomId="";object.publisherId="";object.host="";object.audioPort=0;object.audioPt=0;if($util.Long){var long=new $util.Long(0,0,false);object.audioSsrc=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.audioSsrc=options.longs===String?"0":0;object.videoPort=0;object.videoPt=0;if($util.Long){var long=new $util.Long(0,0,false);object.videoSsrc=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.videoSsrc=options.longs===String?"0":0;}if(message.roomId!=null&&message.hasOwnProperty("roomId"))object.roomId=message.roomId;if(message.publisherId!=null&&message.hasOwnProperty("publisherId"))object.publisherId=message.publisherId;if(message.host!=null&&message.hasOwnProperty("host"))object.host=message.host;if(message.audioPort!=null&&message.hasOwnProperty("audioPort"))object.audioPort=message.audioPort;if(message.audioPt!=null&&message.hasOwnProperty("audioPt"))object.audioPt=message.audioPt;if(message.audioSsrc!=null&&message.hasOwnProperty("audioSsrc"))if(typeof message.audioSsrc==="number")object.audioSsrc=options.longs===String?String(message.audioSsrc):message.audioSsrc;else object.audioSsrc=options.longs===String?$util.Long.prototype.toString.call(message.audioSsrc):options.longs===Number?new $util.LongBits(message.audioSsrc.low>>>0,message.audioSsrc.high>>>0).toNumber():message.audioSsrc;if(message.videoPort!=null&&message.hasOwnProperty("videoPort"))object.videoPort=message.videoPort;if(message.videoPt!=null&&message.hasOwnProperty("videoPt"))object.videoPt=message.videoPt;if(message.videoSsrc!=null&&message.hasOwnProperty("videoSsrc"))if(typeof message.videoSsrc==="number")object.videoSsrc=options.longs===String?String(message.videoSsrc):message.videoSsrc;else object.videoSsrc=options.longs===String?$util.Long.prototype.toString.call(message.videoSsrc):options.longs===Number?new $util.LongBits(message.videoSsrc.low>>>0,message.videoSsrc.high>>>0).toNumber():message.videoSsrc;return object;};/**
     * Converts this ConfRtpForwardReq to JSON.
     * @function toJSON
     * @memberof ConfRtpForwardReq
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ConfRtpForwardReq.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ConfRtpForwardReq;}();$root.RecallMultiCastMessageRequest=function(){/**
     * Properties of a RecallMultiCastMessageRequest.
     * @exports IRecallMultiCastMessageRequest
     * @interface IRecallMultiCastMessageRequest
     * @property {Long} messageId RecallMultiCastMessageRequest messageId
     * @property {Array.<string>|null} [receiver] RecallMultiCastMessageRequest receiver
     *//**
     * Constructs a new RecallMultiCastMessageRequest.
     * @exports RecallMultiCastMessageRequest
     * @classdesc Represents a RecallMultiCastMessageRequest.
     * @implements IRecallMultiCastMessageRequest
     * @constructor
     * @param {IRecallMultiCastMessageRequest=} [properties] Properties to set
     */function RecallMultiCastMessageRequest(properties){this.receiver=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * RecallMultiCastMessageRequest messageId.
     * @member {Long} messageId
     * @memberof RecallMultiCastMessageRequest
     * @instance
     */RecallMultiCastMessageRequest.prototype.messageId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * RecallMultiCastMessageRequest receiver.
     * @member {Array.<string>} receiver
     * @memberof RecallMultiCastMessageRequest
     * @instance
     */RecallMultiCastMessageRequest.prototype.receiver=$util.emptyArray;/**
     * Creates a new RecallMultiCastMessageRequest instance using the specified properties.
     * @function create
     * @memberof RecallMultiCastMessageRequest
     * @static
     * @param {IRecallMultiCastMessageRequest=} [properties] Properties to set
     * @returns {RecallMultiCastMessageRequest} RecallMultiCastMessageRequest instance
     */RecallMultiCastMessageRequest.create=function create(properties){return new RecallMultiCastMessageRequest(properties);};/**
     * Encodes the specified RecallMultiCastMessageRequest message. Does not implicitly {@link RecallMultiCastMessageRequest.verify|verify} messages.
     * @function encode
     * @memberof RecallMultiCastMessageRequest
     * @static
     * @param {IRecallMultiCastMessageRequest} message RecallMultiCastMessageRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RecallMultiCastMessageRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.messageId);if(message.receiver!=null&&message.receiver.length)for(var i=0;i<message.receiver.length;++i){writer.uint32(/* id 2, wireType 2 =*/18).string(message.receiver[i]);}return writer;};/**
     * Encodes the specified RecallMultiCastMessageRequest message, length delimited. Does not implicitly {@link RecallMultiCastMessageRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof RecallMultiCastMessageRequest
     * @static
     * @param {IRecallMultiCastMessageRequest} message RecallMultiCastMessageRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RecallMultiCastMessageRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a RecallMultiCastMessageRequest message from the specified reader or buffer.
     * @function decode
     * @memberof RecallMultiCastMessageRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {RecallMultiCastMessageRequest} RecallMultiCastMessageRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RecallMultiCastMessageRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.RecallMultiCastMessageRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.messageId=reader.int64();break;case 2:if(!(message.receiver&&message.receiver.length))message.receiver=[];message.receiver.push(reader.string());break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("messageId"))throw $util.ProtocolError("missing required 'messageId'",{instance:message});return message;};/**
     * Decodes a RecallMultiCastMessageRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof RecallMultiCastMessageRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {RecallMultiCastMessageRequest} RecallMultiCastMessageRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RecallMultiCastMessageRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a RecallMultiCastMessageRequest message.
     * @function verify
     * @memberof RecallMultiCastMessageRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */RecallMultiCastMessageRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.messageId)&&!(message.messageId&&$util.isInteger(message.messageId.low)&&$util.isInteger(message.messageId.high)))return"messageId: integer|Long expected";if(message.receiver!=null&&message.hasOwnProperty("receiver")){if(!Array.isArray(message.receiver))return"receiver: array expected";for(var i=0;i<message.receiver.length;++i){if(!$util.isString(message.receiver[i]))return"receiver: string[] expected";}}return null;};/**
     * Creates a RecallMultiCastMessageRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof RecallMultiCastMessageRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {RecallMultiCastMessageRequest} RecallMultiCastMessageRequest
     */RecallMultiCastMessageRequest.fromObject=function fromObject(object){if(object instanceof $root.RecallMultiCastMessageRequest)return object;var message=new $root.RecallMultiCastMessageRequest();if(object.messageId!=null)if($util.Long)(message.messageId=$util.Long.fromValue(object.messageId)).unsigned=false;else if(typeof object.messageId==="string")message.messageId=parseInt(object.messageId,10);else if(typeof object.messageId==="number")message.messageId=object.messageId;else if((0,_typeof3.default)(object.messageId)==="object")message.messageId=new $util.LongBits(object.messageId.low>>>0,object.messageId.high>>>0).toNumber();if(object.receiver){if(!Array.isArray(object.receiver))throw TypeError(".RecallMultiCastMessageRequest.receiver: array expected");message.receiver=[];for(var i=0;i<object.receiver.length;++i){message.receiver[i]=String(object.receiver[i]);}}return message;};/**
     * Creates a plain object from a RecallMultiCastMessageRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof RecallMultiCastMessageRequest
     * @static
     * @param {RecallMultiCastMessageRequest} message RecallMultiCastMessageRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */RecallMultiCastMessageRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.receiver=[];if(options.defaults)if($util.Long){var long=new $util.Long(0,0,false);object.messageId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.messageId=options.longs===String?"0":0;if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(typeof message.messageId==="number")object.messageId=options.longs===String?String(message.messageId):message.messageId;else object.messageId=options.longs===String?$util.Long.prototype.toString.call(message.messageId):options.longs===Number?new $util.LongBits(message.messageId.low>>>0,message.messageId.high>>>0).toNumber():message.messageId;if(message.receiver&&message.receiver.length){object.receiver=[];for(var j=0;j<message.receiver.length;++j){object.receiver[j]=message.receiver[j];}}return object;};/**
     * Converts this RecallMultiCastMessageRequest to JSON.
     * @function toJSON
     * @memberof RecallMultiCastMessageRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */RecallMultiCastMessageRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return RecallMultiCastMessageRequest;}();$root.MomentsMedia=function(){/**
     * Properties of a MomentsMedia.
     * @exports IMomentsMedia
     * @interface IMomentsMedia
     * @property {string} mediaUrl MomentsMedia mediaUrl
     * @property {string|null} [thumbUrl] MomentsMedia thumbUrl
     * @property {number|null} [width] MomentsMedia width
     * @property {number|null} [height] MomentsMedia height
     *//**
     * Constructs a new MomentsMedia.
     * @exports MomentsMedia
     * @classdesc Represents a MomentsMedia.
     * @implements IMomentsMedia
     * @constructor
     * @param {IMomentsMedia=} [properties] Properties to set
     */function MomentsMedia(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * MomentsMedia mediaUrl.
     * @member {string} mediaUrl
     * @memberof MomentsMedia
     * @instance
     */MomentsMedia.prototype.mediaUrl="";/**
     * MomentsMedia thumbUrl.
     * @member {string} thumbUrl
     * @memberof MomentsMedia
     * @instance
     */MomentsMedia.prototype.thumbUrl="";/**
     * MomentsMedia width.
     * @member {number} width
     * @memberof MomentsMedia
     * @instance
     */MomentsMedia.prototype.width=0;/**
     * MomentsMedia height.
     * @member {number} height
     * @memberof MomentsMedia
     * @instance
     */MomentsMedia.prototype.height=0;/**
     * Creates a new MomentsMedia instance using the specified properties.
     * @function create
     * @memberof MomentsMedia
     * @static
     * @param {IMomentsMedia=} [properties] Properties to set
     * @returns {MomentsMedia} MomentsMedia instance
     */MomentsMedia.create=function create(properties){return new MomentsMedia(properties);};/**
     * Encodes the specified MomentsMedia message. Does not implicitly {@link MomentsMedia.verify|verify} messages.
     * @function encode
     * @memberof MomentsMedia
     * @static
     * @param {IMomentsMedia} message MomentsMedia message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MomentsMedia.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.mediaUrl);if(message.thumbUrl!=null&&message.hasOwnProperty("thumbUrl"))writer.uint32(/* id 2, wireType 2 =*/18).string(message.thumbUrl);if(message.width!=null&&message.hasOwnProperty("width"))writer.uint32(/* id 3, wireType 0 =*/24).int32(message.width);if(message.height!=null&&message.hasOwnProperty("height"))writer.uint32(/* id 4, wireType 0 =*/32).int32(message.height);return writer;};/**
     * Encodes the specified MomentsMedia message, length delimited. Does not implicitly {@link MomentsMedia.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MomentsMedia
     * @static
     * @param {IMomentsMedia} message MomentsMedia message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MomentsMedia.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a MomentsMedia message from the specified reader or buffer.
     * @function decode
     * @memberof MomentsMedia
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MomentsMedia} MomentsMedia
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MomentsMedia.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.MomentsMedia();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.mediaUrl=reader.string();break;case 2:message.thumbUrl=reader.string();break;case 3:message.width=reader.int32();break;case 4:message.height=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("mediaUrl"))throw $util.ProtocolError("missing required 'mediaUrl'",{instance:message});return message;};/**
     * Decodes a MomentsMedia message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MomentsMedia
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MomentsMedia} MomentsMedia
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MomentsMedia.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a MomentsMedia message.
     * @function verify
     * @memberof MomentsMedia
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */MomentsMedia.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.mediaUrl))return"mediaUrl: string expected";if(message.thumbUrl!=null&&message.hasOwnProperty("thumbUrl"))if(!$util.isString(message.thumbUrl))return"thumbUrl: string expected";if(message.width!=null&&message.hasOwnProperty("width"))if(!$util.isInteger(message.width))return"width: integer expected";if(message.height!=null&&message.hasOwnProperty("height"))if(!$util.isInteger(message.height))return"height: integer expected";return null;};/**
     * Creates a MomentsMedia message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MomentsMedia
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MomentsMedia} MomentsMedia
     */MomentsMedia.fromObject=function fromObject(object){if(object instanceof $root.MomentsMedia)return object;var message=new $root.MomentsMedia();if(object.mediaUrl!=null)message.mediaUrl=String(object.mediaUrl);if(object.thumbUrl!=null)message.thumbUrl=String(object.thumbUrl);if(object.width!=null)message.width=object.width|0;if(object.height!=null)message.height=object.height|0;return message;};/**
     * Creates a plain object from a MomentsMedia message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MomentsMedia
     * @static
     * @param {MomentsMedia} message MomentsMedia
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */MomentsMedia.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.mediaUrl="";object.thumbUrl="";object.width=0;object.height=0;}if(message.mediaUrl!=null&&message.hasOwnProperty("mediaUrl"))object.mediaUrl=message.mediaUrl;if(message.thumbUrl!=null&&message.hasOwnProperty("thumbUrl"))object.thumbUrl=message.thumbUrl;if(message.width!=null&&message.hasOwnProperty("width"))object.width=message.width;if(message.height!=null&&message.hasOwnProperty("height"))object.height=message.height;return object;};/**
     * Converts this MomentsMedia to JSON.
     * @function toJSON
     * @memberof MomentsMedia
     * @instance
     * @returns {Object.<string,*>} JSON object
     */MomentsMedia.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return MomentsMedia;}();$root.MomentsFeed=function(){/**
     * Properties of a MomentsFeed.
     * @exports IMomentsFeed
     * @interface IMomentsFeed
     * @property {Long} feedId MomentsFeed feedId
     * @property {string} sender MomentsFeed sender
     * @property {number} type MomentsFeed type
     * @property {string|null} [text] MomentsFeed text
     * @property {Array.<IMomentsMedia>|null} [medias] MomentsFeed medias
     * @property {Array.<string>|null} [mentionedUsers] MomentsFeed mentionedUsers
     * @property {Array.<string>|null} [toUsers] MomentsFeed toUsers
     * @property {Array.<string>|null} [excludeUsers] MomentsFeed excludeUsers
     * @property {Long} serverTime MomentsFeed serverTime
     * @property {string|null} [extra] MomentsFeed extra
     * @property {Array.<IMomentsComment>|null} [comments] MomentsFeed comments
     * @property {number|null} [hasMore] MomentsFeed hasMore
     *//**
     * Constructs a new MomentsFeed.
     * @exports MomentsFeed
     * @classdesc Represents a MomentsFeed.
     * @implements IMomentsFeed
     * @constructor
     * @param {IMomentsFeed=} [properties] Properties to set
     */function MomentsFeed(properties){this.medias=[];this.mentionedUsers=[];this.toUsers=[];this.excludeUsers=[];this.comments=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * MomentsFeed feedId.
     * @member {Long} feedId
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.feedId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * MomentsFeed sender.
     * @member {string} sender
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.sender="";/**
     * MomentsFeed type.
     * @member {number} type
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.type=0;/**
     * MomentsFeed text.
     * @member {string} text
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.text="";/**
     * MomentsFeed medias.
     * @member {Array.<IMomentsMedia>} medias
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.medias=$util.emptyArray;/**
     * MomentsFeed mentionedUsers.
     * @member {Array.<string>} mentionedUsers
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.mentionedUsers=$util.emptyArray;/**
     * MomentsFeed toUsers.
     * @member {Array.<string>} toUsers
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.toUsers=$util.emptyArray;/**
     * MomentsFeed excludeUsers.
     * @member {Array.<string>} excludeUsers
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.excludeUsers=$util.emptyArray;/**
     * MomentsFeed serverTime.
     * @member {Long} serverTime
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.serverTime=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * MomentsFeed extra.
     * @member {string} extra
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.extra="";/**
     * MomentsFeed comments.
     * @member {Array.<IMomentsComment>} comments
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.comments=$util.emptyArray;/**
     * MomentsFeed hasMore.
     * @member {number} hasMore
     * @memberof MomentsFeed
     * @instance
     */MomentsFeed.prototype.hasMore=0;/**
     * Creates a new MomentsFeed instance using the specified properties.
     * @function create
     * @memberof MomentsFeed
     * @static
     * @param {IMomentsFeed=} [properties] Properties to set
     * @returns {MomentsFeed} MomentsFeed instance
     */MomentsFeed.create=function create(properties){return new MomentsFeed(properties);};/**
     * Encodes the specified MomentsFeed message. Does not implicitly {@link MomentsFeed.verify|verify} messages.
     * @function encode
     * @memberof MomentsFeed
     * @static
     * @param {IMomentsFeed} message MomentsFeed message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MomentsFeed.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.feedId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.sender);writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);if(message.text!=null&&message.hasOwnProperty("text"))writer.uint32(/* id 4, wireType 2 =*/34).string(message.text);if(message.medias!=null&&message.medias.length)for(var i=0;i<message.medias.length;++i){$root.MomentsMedia.encode(message.medias[i],writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();}if(message.mentionedUsers!=null&&message.mentionedUsers.length)for(var i=0;i<message.mentionedUsers.length;++i){writer.uint32(/* id 6, wireType 2 =*/50).string(message.mentionedUsers[i]);}if(message.toUsers!=null&&message.toUsers.length)for(var i=0;i<message.toUsers.length;++i){writer.uint32(/* id 7, wireType 2 =*/58).string(message.toUsers[i]);}if(message.excludeUsers!=null&&message.excludeUsers.length)for(var i=0;i<message.excludeUsers.length;++i){writer.uint32(/* id 8, wireType 2 =*/66).string(message.excludeUsers[i]);}writer.uint32(/* id 9, wireType 0 =*/72).int64(message.serverTime);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 10, wireType 2 =*/82).string(message.extra);if(message.comments!=null&&message.comments.length)for(var i=0;i<message.comments.length;++i){$root.MomentsComment.encode(message.comments[i],writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();}if(message.hasMore!=null&&message.hasOwnProperty("hasMore"))writer.uint32(/* id 12, wireType 0 =*/96).int32(message.hasMore);return writer;};/**
     * Encodes the specified MomentsFeed message, length delimited. Does not implicitly {@link MomentsFeed.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MomentsFeed
     * @static
     * @param {IMomentsFeed} message MomentsFeed message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MomentsFeed.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a MomentsFeed message from the specified reader or buffer.
     * @function decode
     * @memberof MomentsFeed
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MomentsFeed} MomentsFeed
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MomentsFeed.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.MomentsFeed();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.feedId=reader.int64();break;case 2:message.sender=reader.string();break;case 3:message.type=reader.int32();break;case 4:message.text=reader.string();break;case 5:if(!(message.medias&&message.medias.length))message.medias=[];message.medias.push($root.MomentsMedia.decode(reader,reader.uint32()));break;case 6:if(!(message.mentionedUsers&&message.mentionedUsers.length))message.mentionedUsers=[];message.mentionedUsers.push(reader.string());break;case 7:if(!(message.toUsers&&message.toUsers.length))message.toUsers=[];message.toUsers.push(reader.string());break;case 8:if(!(message.excludeUsers&&message.excludeUsers.length))message.excludeUsers=[];message.excludeUsers.push(reader.string());break;case 9:message.serverTime=reader.int64();break;case 10:message.extra=reader.string();break;case 11:if(!(message.comments&&message.comments.length))message.comments=[];message.comments.push($root.MomentsComment.decode(reader,reader.uint32()));break;case 12:message.hasMore=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("feedId"))throw $util.ProtocolError("missing required 'feedId'",{instance:message});if(!message.hasOwnProperty("sender"))throw $util.ProtocolError("missing required 'sender'",{instance:message});if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});if(!message.hasOwnProperty("serverTime"))throw $util.ProtocolError("missing required 'serverTime'",{instance:message});return message;};/**
     * Decodes a MomentsFeed message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MomentsFeed
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MomentsFeed} MomentsFeed
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MomentsFeed.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a MomentsFeed message.
     * @function verify
     * @memberof MomentsFeed
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */MomentsFeed.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.feedId)&&!(message.feedId&&$util.isInteger(message.feedId.low)&&$util.isInteger(message.feedId.high)))return"feedId: integer|Long expected";if(!$util.isString(message.sender))return"sender: string expected";if(!$util.isInteger(message.type))return"type: integer expected";if(message.text!=null&&message.hasOwnProperty("text"))if(!$util.isString(message.text))return"text: string expected";if(message.medias!=null&&message.hasOwnProperty("medias")){if(!Array.isArray(message.medias))return"medias: array expected";for(var i=0;i<message.medias.length;++i){var error=$root.MomentsMedia.verify(message.medias[i]);if(error)return"medias."+error;}}if(message.mentionedUsers!=null&&message.hasOwnProperty("mentionedUsers")){if(!Array.isArray(message.mentionedUsers))return"mentionedUsers: array expected";for(var i=0;i<message.mentionedUsers.length;++i){if(!$util.isString(message.mentionedUsers[i]))return"mentionedUsers: string[] expected";}}if(message.toUsers!=null&&message.hasOwnProperty("toUsers")){if(!Array.isArray(message.toUsers))return"toUsers: array expected";for(var i=0;i<message.toUsers.length;++i){if(!$util.isString(message.toUsers[i]))return"toUsers: string[] expected";}}if(message.excludeUsers!=null&&message.hasOwnProperty("excludeUsers")){if(!Array.isArray(message.excludeUsers))return"excludeUsers: array expected";for(var i=0;i<message.excludeUsers.length;++i){if(!$util.isString(message.excludeUsers[i]))return"excludeUsers: string[] expected";}}if(!$util.isInteger(message.serverTime)&&!(message.serverTime&&$util.isInteger(message.serverTime.low)&&$util.isInteger(message.serverTime.high)))return"serverTime: integer|Long expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";if(message.comments!=null&&message.hasOwnProperty("comments")){if(!Array.isArray(message.comments))return"comments: array expected";for(var i=0;i<message.comments.length;++i){var error=$root.MomentsComment.verify(message.comments[i]);if(error)return"comments."+error;}}if(message.hasMore!=null&&message.hasOwnProperty("hasMore"))if(!$util.isInteger(message.hasMore))return"hasMore: integer expected";return null;};/**
     * Creates a MomentsFeed message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MomentsFeed
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MomentsFeed} MomentsFeed
     */MomentsFeed.fromObject=function fromObject(object){if(object instanceof $root.MomentsFeed)return object;var message=new $root.MomentsFeed();if(object.feedId!=null)if($util.Long)(message.feedId=$util.Long.fromValue(object.feedId)).unsigned=false;else if(typeof object.feedId==="string")message.feedId=parseInt(object.feedId,10);else if(typeof object.feedId==="number")message.feedId=object.feedId;else if((0,_typeof3.default)(object.feedId)==="object")message.feedId=new $util.LongBits(object.feedId.low>>>0,object.feedId.high>>>0).toNumber();if(object.sender!=null)message.sender=String(object.sender);if(object.type!=null)message.type=object.type|0;if(object.text!=null)message.text=String(object.text);if(object.medias){if(!Array.isArray(object.medias))throw TypeError(".MomentsFeed.medias: array expected");message.medias=[];for(var i=0;i<object.medias.length;++i){if((0,_typeof3.default)(object.medias[i])!=="object")throw TypeError(".MomentsFeed.medias: object expected");message.medias[i]=$root.MomentsMedia.fromObject(object.medias[i]);}}if(object.mentionedUsers){if(!Array.isArray(object.mentionedUsers))throw TypeError(".MomentsFeed.mentionedUsers: array expected");message.mentionedUsers=[];for(var i=0;i<object.mentionedUsers.length;++i){message.mentionedUsers[i]=String(object.mentionedUsers[i]);}}if(object.toUsers){if(!Array.isArray(object.toUsers))throw TypeError(".MomentsFeed.toUsers: array expected");message.toUsers=[];for(var i=0;i<object.toUsers.length;++i){message.toUsers[i]=String(object.toUsers[i]);}}if(object.excludeUsers){if(!Array.isArray(object.excludeUsers))throw TypeError(".MomentsFeed.excludeUsers: array expected");message.excludeUsers=[];for(var i=0;i<object.excludeUsers.length;++i){message.excludeUsers[i]=String(object.excludeUsers[i]);}}if(object.serverTime!=null)if($util.Long)(message.serverTime=$util.Long.fromValue(object.serverTime)).unsigned=false;else if(typeof object.serverTime==="string")message.serverTime=parseInt(object.serverTime,10);else if(typeof object.serverTime==="number")message.serverTime=object.serverTime;else if((0,_typeof3.default)(object.serverTime)==="object")message.serverTime=new $util.LongBits(object.serverTime.low>>>0,object.serverTime.high>>>0).toNumber();if(object.extra!=null)message.extra=String(object.extra);if(object.comments){if(!Array.isArray(object.comments))throw TypeError(".MomentsFeed.comments: array expected");message.comments=[];for(var i=0;i<object.comments.length;++i){if((0,_typeof3.default)(object.comments[i])!=="object")throw TypeError(".MomentsFeed.comments: object expected");message.comments[i]=$root.MomentsComment.fromObject(object.comments[i]);}}if(object.hasMore!=null)message.hasMore=object.hasMore|0;return message;};/**
     * Creates a plain object from a MomentsFeed message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MomentsFeed
     * @static
     * @param {MomentsFeed} message MomentsFeed
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */MomentsFeed.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults){object.medias=[];object.mentionedUsers=[];object.toUsers=[];object.excludeUsers=[];object.comments=[];}if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.feedId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.feedId=options.longs===String?"0":0;object.sender="";object.type=0;object.text="";if($util.Long){var long=new $util.Long(0,0,false);object.serverTime=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.serverTime=options.longs===String?"0":0;object.extra="";object.hasMore=0;}if(message.feedId!=null&&message.hasOwnProperty("feedId"))if(typeof message.feedId==="number")object.feedId=options.longs===String?String(message.feedId):message.feedId;else object.feedId=options.longs===String?$util.Long.prototype.toString.call(message.feedId):options.longs===Number?new $util.LongBits(message.feedId.low>>>0,message.feedId.high>>>0).toNumber():message.feedId;if(message.sender!=null&&message.hasOwnProperty("sender"))object.sender=message.sender;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.text!=null&&message.hasOwnProperty("text"))object.text=message.text;if(message.medias&&message.medias.length){object.medias=[];for(var j=0;j<message.medias.length;++j){object.medias[j]=$root.MomentsMedia.toObject(message.medias[j],options);}}if(message.mentionedUsers&&message.mentionedUsers.length){object.mentionedUsers=[];for(var j=0;j<message.mentionedUsers.length;++j){object.mentionedUsers[j]=message.mentionedUsers[j];}}if(message.toUsers&&message.toUsers.length){object.toUsers=[];for(var j=0;j<message.toUsers.length;++j){object.toUsers[j]=message.toUsers[j];}}if(message.excludeUsers&&message.excludeUsers.length){object.excludeUsers=[];for(var j=0;j<message.excludeUsers.length;++j){object.excludeUsers[j]=message.excludeUsers[j];}}if(message.serverTime!=null&&message.hasOwnProperty("serverTime"))if(typeof message.serverTime==="number")object.serverTime=options.longs===String?String(message.serverTime):message.serverTime;else object.serverTime=options.longs===String?$util.Long.prototype.toString.call(message.serverTime):options.longs===Number?new $util.LongBits(message.serverTime.low>>>0,message.serverTime.high>>>0).toNumber():message.serverTime;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;if(message.comments&&message.comments.length){object.comments=[];for(var j=0;j<message.comments.length;++j){object.comments[j]=$root.MomentsComment.toObject(message.comments[j],options);}}if(message.hasMore!=null&&message.hasOwnProperty("hasMore"))object.hasMore=message.hasMore;return object;};/**
     * Converts this MomentsFeed to JSON.
     * @function toJSON
     * @memberof MomentsFeed
     * @instance
     * @returns {Object.<string,*>} JSON object
     */MomentsFeed.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return MomentsFeed;}();$root.MomentsFeeds=function(){/**
     * Properties of a MomentsFeeds.
     * @exports IMomentsFeeds
     * @interface IMomentsFeeds
     * @property {Array.<IMomentsFeed>|null} [feeds] MomentsFeeds feeds
     *//**
     * Constructs a new MomentsFeeds.
     * @exports MomentsFeeds
     * @classdesc Represents a MomentsFeeds.
     * @implements IMomentsFeeds
     * @constructor
     * @param {IMomentsFeeds=} [properties] Properties to set
     */function MomentsFeeds(properties){this.feeds=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * MomentsFeeds feeds.
     * @member {Array.<IMomentsFeed>} feeds
     * @memberof MomentsFeeds
     * @instance
     */MomentsFeeds.prototype.feeds=$util.emptyArray;/**
     * Creates a new MomentsFeeds instance using the specified properties.
     * @function create
     * @memberof MomentsFeeds
     * @static
     * @param {IMomentsFeeds=} [properties] Properties to set
     * @returns {MomentsFeeds} MomentsFeeds instance
     */MomentsFeeds.create=function create(properties){return new MomentsFeeds(properties);};/**
     * Encodes the specified MomentsFeeds message. Does not implicitly {@link MomentsFeeds.verify|verify} messages.
     * @function encode
     * @memberof MomentsFeeds
     * @static
     * @param {IMomentsFeeds} message MomentsFeeds message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MomentsFeeds.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.feeds!=null&&message.feeds.length)for(var i=0;i<message.feeds.length;++i){$root.MomentsFeed.encode(message.feeds[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified MomentsFeeds message, length delimited. Does not implicitly {@link MomentsFeeds.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MomentsFeeds
     * @static
     * @param {IMomentsFeeds} message MomentsFeeds message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MomentsFeeds.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a MomentsFeeds message from the specified reader or buffer.
     * @function decode
     * @memberof MomentsFeeds
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MomentsFeeds} MomentsFeeds
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MomentsFeeds.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.MomentsFeeds();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.feeds&&message.feeds.length))message.feeds=[];message.feeds.push($root.MomentsFeed.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a MomentsFeeds message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MomentsFeeds
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MomentsFeeds} MomentsFeeds
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MomentsFeeds.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a MomentsFeeds message.
     * @function verify
     * @memberof MomentsFeeds
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */MomentsFeeds.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.feeds!=null&&message.hasOwnProperty("feeds")){if(!Array.isArray(message.feeds))return"feeds: array expected";for(var i=0;i<message.feeds.length;++i){var error=$root.MomentsFeed.verify(message.feeds[i]);if(error)return"feeds."+error;}}return null;};/**
     * Creates a MomentsFeeds message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MomentsFeeds
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MomentsFeeds} MomentsFeeds
     */MomentsFeeds.fromObject=function fromObject(object){if(object instanceof $root.MomentsFeeds)return object;var message=new $root.MomentsFeeds();if(object.feeds){if(!Array.isArray(object.feeds))throw TypeError(".MomentsFeeds.feeds: array expected");message.feeds=[];for(var i=0;i<object.feeds.length;++i){if((0,_typeof3.default)(object.feeds[i])!=="object")throw TypeError(".MomentsFeeds.feeds: object expected");message.feeds[i]=$root.MomentsFeed.fromObject(object.feeds[i]);}}return message;};/**
     * Creates a plain object from a MomentsFeeds message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MomentsFeeds
     * @static
     * @param {MomentsFeeds} message MomentsFeeds
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */MomentsFeeds.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.feeds=[];if(message.feeds&&message.feeds.length){object.feeds=[];for(var j=0;j<message.feeds.length;++j){object.feeds[j]=$root.MomentsFeed.toObject(message.feeds[j],options);}}return object;};/**
     * Converts this MomentsFeeds to JSON.
     * @function toJSON
     * @memberof MomentsFeeds
     * @instance
     * @returns {Object.<string,*>} JSON object
     */MomentsFeeds.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return MomentsFeeds;}();$root.MomentsComments=function(){/**
     * Properties of a MomentsComments.
     * @exports IMomentsComments
     * @interface IMomentsComments
     * @property {Array.<IMomentsComment>|null} [comments] MomentsComments comments
     *//**
     * Constructs a new MomentsComments.
     * @exports MomentsComments
     * @classdesc Represents a MomentsComments.
     * @implements IMomentsComments
     * @constructor
     * @param {IMomentsComments=} [properties] Properties to set
     */function MomentsComments(properties){this.comments=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * MomentsComments comments.
     * @member {Array.<IMomentsComment>} comments
     * @memberof MomentsComments
     * @instance
     */MomentsComments.prototype.comments=$util.emptyArray;/**
     * Creates a new MomentsComments instance using the specified properties.
     * @function create
     * @memberof MomentsComments
     * @static
     * @param {IMomentsComments=} [properties] Properties to set
     * @returns {MomentsComments} MomentsComments instance
     */MomentsComments.create=function create(properties){return new MomentsComments(properties);};/**
     * Encodes the specified MomentsComments message. Does not implicitly {@link MomentsComments.verify|verify} messages.
     * @function encode
     * @memberof MomentsComments
     * @static
     * @param {IMomentsComments} message MomentsComments message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MomentsComments.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.comments!=null&&message.comments.length)for(var i=0;i<message.comments.length;++i){$root.MomentsComment.encode(message.comments[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified MomentsComments message, length delimited. Does not implicitly {@link MomentsComments.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MomentsComments
     * @static
     * @param {IMomentsComments} message MomentsComments message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MomentsComments.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a MomentsComments message from the specified reader or buffer.
     * @function decode
     * @memberof MomentsComments
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MomentsComments} MomentsComments
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MomentsComments.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.MomentsComments();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.comments&&message.comments.length))message.comments=[];message.comments.push($root.MomentsComment.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a MomentsComments message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MomentsComments
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MomentsComments} MomentsComments
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MomentsComments.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a MomentsComments message.
     * @function verify
     * @memberof MomentsComments
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */MomentsComments.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.comments!=null&&message.hasOwnProperty("comments")){if(!Array.isArray(message.comments))return"comments: array expected";for(var i=0;i<message.comments.length;++i){var error=$root.MomentsComment.verify(message.comments[i]);if(error)return"comments."+error;}}return null;};/**
     * Creates a MomentsComments message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MomentsComments
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MomentsComments} MomentsComments
     */MomentsComments.fromObject=function fromObject(object){if(object instanceof $root.MomentsComments)return object;var message=new $root.MomentsComments();if(object.comments){if(!Array.isArray(object.comments))throw TypeError(".MomentsComments.comments: array expected");message.comments=[];for(var i=0;i<object.comments.length;++i){if((0,_typeof3.default)(object.comments[i])!=="object")throw TypeError(".MomentsComments.comments: object expected");message.comments[i]=$root.MomentsComment.fromObject(object.comments[i]);}}return message;};/**
     * Creates a plain object from a MomentsComments message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MomentsComments
     * @static
     * @param {MomentsComments} message MomentsComments
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */MomentsComments.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.comments=[];if(message.comments&&message.comments.length){object.comments=[];for(var j=0;j<message.comments.length;++j){object.comments[j]=$root.MomentsComment.toObject(message.comments[j],options);}}return object;};/**
     * Converts this MomentsComments to JSON.
     * @function toJSON
     * @memberof MomentsComments
     * @instance
     * @returns {Object.<string,*>} JSON object
     */MomentsComments.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return MomentsComments;}();$root.MomentsComment=function(){/**
     * Properties of a MomentsComment.
     * @exports IMomentsComment
     * @interface IMomentsComment
     * @property {Long} feedId MomentsComment feedId
     * @property {Long} commentId MomentsComment commentId
     * @property {Long|null} [replyId] MomentsComment replyId
     * @property {string} sender MomentsComment sender
     * @property {number} type MomentsComment type
     * @property {string|null} [text] MomentsComment text
     * @property {string|null} [replyTo] MomentsComment replyTo
     * @property {Long} serverTime MomentsComment serverTime
     * @property {string|null} [extra] MomentsComment extra
     *//**
     * Constructs a new MomentsComment.
     * @exports MomentsComment
     * @classdesc Represents a MomentsComment.
     * @implements IMomentsComment
     * @constructor
     * @param {IMomentsComment=} [properties] Properties to set
     */function MomentsComment(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * MomentsComment feedId.
     * @member {Long} feedId
     * @memberof MomentsComment
     * @instance
     */MomentsComment.prototype.feedId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * MomentsComment commentId.
     * @member {Long} commentId
     * @memberof MomentsComment
     * @instance
     */MomentsComment.prototype.commentId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * MomentsComment replyId.
     * @member {Long} replyId
     * @memberof MomentsComment
     * @instance
     */MomentsComment.prototype.replyId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * MomentsComment sender.
     * @member {string} sender
     * @memberof MomentsComment
     * @instance
     */MomentsComment.prototype.sender="";/**
     * MomentsComment type.
     * @member {number} type
     * @memberof MomentsComment
     * @instance
     */MomentsComment.prototype.type=0;/**
     * MomentsComment text.
     * @member {string} text
     * @memberof MomentsComment
     * @instance
     */MomentsComment.prototype.text="";/**
     * MomentsComment replyTo.
     * @member {string} replyTo
     * @memberof MomentsComment
     * @instance
     */MomentsComment.prototype.replyTo="";/**
     * MomentsComment serverTime.
     * @member {Long} serverTime
     * @memberof MomentsComment
     * @instance
     */MomentsComment.prototype.serverTime=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * MomentsComment extra.
     * @member {string} extra
     * @memberof MomentsComment
     * @instance
     */MomentsComment.prototype.extra="";/**
     * Creates a new MomentsComment instance using the specified properties.
     * @function create
     * @memberof MomentsComment
     * @static
     * @param {IMomentsComment=} [properties] Properties to set
     * @returns {MomentsComment} MomentsComment instance
     */MomentsComment.create=function create(properties){return new MomentsComment(properties);};/**
     * Encodes the specified MomentsComment message. Does not implicitly {@link MomentsComment.verify|verify} messages.
     * @function encode
     * @memberof MomentsComment
     * @static
     * @param {IMomentsComment} message MomentsComment message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MomentsComment.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int64(message.feedId);writer.uint32(/* id 2, wireType 0 =*/16).int64(message.commentId);if(message.replyId!=null&&message.hasOwnProperty("replyId"))writer.uint32(/* id 3, wireType 0 =*/24).int64(message.replyId);writer.uint32(/* id 4, wireType 2 =*/34).string(message.sender);writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);if(message.text!=null&&message.hasOwnProperty("text"))writer.uint32(/* id 6, wireType 2 =*/50).string(message.text);if(message.replyTo!=null&&message.hasOwnProperty("replyTo"))writer.uint32(/* id 7, wireType 2 =*/58).string(message.replyTo);writer.uint32(/* id 8, wireType 0 =*/64).int64(message.serverTime);if(message.extra!=null&&message.hasOwnProperty("extra"))writer.uint32(/* id 9, wireType 2 =*/74).string(message.extra);return writer;};/**
     * Encodes the specified MomentsComment message, length delimited. Does not implicitly {@link MomentsComment.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MomentsComment
     * @static
     * @param {IMomentsComment} message MomentsComment message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */MomentsComment.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a MomentsComment message from the specified reader or buffer.
     * @function decode
     * @memberof MomentsComment
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MomentsComment} MomentsComment
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MomentsComment.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.MomentsComment();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.feedId=reader.int64();break;case 2:message.commentId=reader.int64();break;case 3:message.replyId=reader.int64();break;case 4:message.sender=reader.string();break;case 5:message.type=reader.int32();break;case 6:message.text=reader.string();break;case 7:message.replyTo=reader.string();break;case 8:message.serverTime=reader.int64();break;case 9:message.extra=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("feedId"))throw $util.ProtocolError("missing required 'feedId'",{instance:message});if(!message.hasOwnProperty("commentId"))throw $util.ProtocolError("missing required 'commentId'",{instance:message});if(!message.hasOwnProperty("sender"))throw $util.ProtocolError("missing required 'sender'",{instance:message});if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});if(!message.hasOwnProperty("serverTime"))throw $util.ProtocolError("missing required 'serverTime'",{instance:message});return message;};/**
     * Decodes a MomentsComment message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MomentsComment
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MomentsComment} MomentsComment
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */MomentsComment.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a MomentsComment message.
     * @function verify
     * @memberof MomentsComment
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */MomentsComment.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.feedId)&&!(message.feedId&&$util.isInteger(message.feedId.low)&&$util.isInteger(message.feedId.high)))return"feedId: integer|Long expected";if(!$util.isInteger(message.commentId)&&!(message.commentId&&$util.isInteger(message.commentId.low)&&$util.isInteger(message.commentId.high)))return"commentId: integer|Long expected";if(message.replyId!=null&&message.hasOwnProperty("replyId"))if(!$util.isInteger(message.replyId)&&!(message.replyId&&$util.isInteger(message.replyId.low)&&$util.isInteger(message.replyId.high)))return"replyId: integer|Long expected";if(!$util.isString(message.sender))return"sender: string expected";if(!$util.isInteger(message.type))return"type: integer expected";if(message.text!=null&&message.hasOwnProperty("text"))if(!$util.isString(message.text))return"text: string expected";if(message.replyTo!=null&&message.hasOwnProperty("replyTo"))if(!$util.isString(message.replyTo))return"replyTo: string expected";if(!$util.isInteger(message.serverTime)&&!(message.serverTime&&$util.isInteger(message.serverTime.low)&&$util.isInteger(message.serverTime.high)))return"serverTime: integer|Long expected";if(message.extra!=null&&message.hasOwnProperty("extra"))if(!$util.isString(message.extra))return"extra: string expected";return null;};/**
     * Creates a MomentsComment message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MomentsComment
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MomentsComment} MomentsComment
     */MomentsComment.fromObject=function fromObject(object){if(object instanceof $root.MomentsComment)return object;var message=new $root.MomentsComment();if(object.feedId!=null)if($util.Long)(message.feedId=$util.Long.fromValue(object.feedId)).unsigned=false;else if(typeof object.feedId==="string")message.feedId=parseInt(object.feedId,10);else if(typeof object.feedId==="number")message.feedId=object.feedId;else if((0,_typeof3.default)(object.feedId)==="object")message.feedId=new $util.LongBits(object.feedId.low>>>0,object.feedId.high>>>0).toNumber();if(object.commentId!=null)if($util.Long)(message.commentId=$util.Long.fromValue(object.commentId)).unsigned=false;else if(typeof object.commentId==="string")message.commentId=parseInt(object.commentId,10);else if(typeof object.commentId==="number")message.commentId=object.commentId;else if((0,_typeof3.default)(object.commentId)==="object")message.commentId=new $util.LongBits(object.commentId.low>>>0,object.commentId.high>>>0).toNumber();if(object.replyId!=null)if($util.Long)(message.replyId=$util.Long.fromValue(object.replyId)).unsigned=false;else if(typeof object.replyId==="string")message.replyId=parseInt(object.replyId,10);else if(typeof object.replyId==="number")message.replyId=object.replyId;else if((0,_typeof3.default)(object.replyId)==="object")message.replyId=new $util.LongBits(object.replyId.low>>>0,object.replyId.high>>>0).toNumber();if(object.sender!=null)message.sender=String(object.sender);if(object.type!=null)message.type=object.type|0;if(object.text!=null)message.text=String(object.text);if(object.replyTo!=null)message.replyTo=String(object.replyTo);if(object.serverTime!=null)if($util.Long)(message.serverTime=$util.Long.fromValue(object.serverTime)).unsigned=false;else if(typeof object.serverTime==="string")message.serverTime=parseInt(object.serverTime,10);else if(typeof object.serverTime==="number")message.serverTime=object.serverTime;else if((0,_typeof3.default)(object.serverTime)==="object")message.serverTime=new $util.LongBits(object.serverTime.low>>>0,object.serverTime.high>>>0).toNumber();if(object.extra!=null)message.extra=String(object.extra);return message;};/**
     * Creates a plain object from a MomentsComment message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MomentsComment
     * @static
     * @param {MomentsComment} message MomentsComment
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */MomentsComment.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){if($util.Long){var long=new $util.Long(0,0,false);object.feedId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.feedId=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.commentId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.commentId=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.replyId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.replyId=options.longs===String?"0":0;object.sender="";object.type=0;object.text="";object.replyTo="";if($util.Long){var long=new $util.Long(0,0,false);object.serverTime=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.serverTime=options.longs===String?"0":0;object.extra="";}if(message.feedId!=null&&message.hasOwnProperty("feedId"))if(typeof message.feedId==="number")object.feedId=options.longs===String?String(message.feedId):message.feedId;else object.feedId=options.longs===String?$util.Long.prototype.toString.call(message.feedId):options.longs===Number?new $util.LongBits(message.feedId.low>>>0,message.feedId.high>>>0).toNumber():message.feedId;if(message.commentId!=null&&message.hasOwnProperty("commentId"))if(typeof message.commentId==="number")object.commentId=options.longs===String?String(message.commentId):message.commentId;else object.commentId=options.longs===String?$util.Long.prototype.toString.call(message.commentId):options.longs===Number?new $util.LongBits(message.commentId.low>>>0,message.commentId.high>>>0).toNumber():message.commentId;if(message.replyId!=null&&message.hasOwnProperty("replyId"))if(typeof message.replyId==="number")object.replyId=options.longs===String?String(message.replyId):message.replyId;else object.replyId=options.longs===String?$util.Long.prototype.toString.call(message.replyId):options.longs===Number?new $util.LongBits(message.replyId.low>>>0,message.replyId.high>>>0).toNumber():message.replyId;if(message.sender!=null&&message.hasOwnProperty("sender"))object.sender=message.sender;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.text!=null&&message.hasOwnProperty("text"))object.text=message.text;if(message.replyTo!=null&&message.hasOwnProperty("replyTo"))object.replyTo=message.replyTo;if(message.serverTime!=null&&message.hasOwnProperty("serverTime"))if(typeof message.serverTime==="number")object.serverTime=options.longs===String?String(message.serverTime):message.serverTime;else object.serverTime=options.longs===String?$util.Long.prototype.toString.call(message.serverTime):options.longs===Number?new $util.LongBits(message.serverTime.low>>>0,message.serverTime.high>>>0).toNumber():message.serverTime;if(message.extra!=null&&message.hasOwnProperty("extra"))object.extra=message.extra;return object;};/**
     * Converts this MomentsComment to JSON.
     * @function toJSON
     * @memberof MomentsComment
     * @instance
     * @returns {Object.<string,*>} JSON object
     */MomentsComment.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return MomentsComment;}();$root.LockRequest=function(){/**
     * Properties of a LockRequest.
     * @exports ILockRequest
     * @interface ILockRequest
     * @property {string} lockId LockRequest lockId
     * @property {Long|null} [duration] LockRequest duration
     *//**
     * Constructs a new LockRequest.
     * @exports LockRequest
     * @classdesc Represents a LockRequest.
     * @implements ILockRequest
     * @constructor
     * @param {ILockRequest=} [properties] Properties to set
     */function LockRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * LockRequest lockId.
     * @member {string} lockId
     * @memberof LockRequest
     * @instance
     */LockRequest.prototype.lockId="";/**
     * LockRequest duration.
     * @member {Long} duration
     * @memberof LockRequest
     * @instance
     */LockRequest.prototype.duration=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new LockRequest instance using the specified properties.
     * @function create
     * @memberof LockRequest
     * @static
     * @param {ILockRequest=} [properties] Properties to set
     * @returns {LockRequest} LockRequest instance
     */LockRequest.create=function create(properties){return new LockRequest(properties);};/**
     * Encodes the specified LockRequest message. Does not implicitly {@link LockRequest.verify|verify} messages.
     * @function encode
     * @memberof LockRequest
     * @static
     * @param {ILockRequest} message LockRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */LockRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.lockId);if(message.duration!=null&&message.hasOwnProperty("duration"))writer.uint32(/* id 2, wireType 0 =*/16).int64(message.duration);return writer;};/**
     * Encodes the specified LockRequest message, length delimited. Does not implicitly {@link LockRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof LockRequest
     * @static
     * @param {ILockRequest} message LockRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */LockRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a LockRequest message from the specified reader or buffer.
     * @function decode
     * @memberof LockRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {LockRequest} LockRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */LockRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.LockRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.lockId=reader.string();break;case 2:message.duration=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("lockId"))throw $util.ProtocolError("missing required 'lockId'",{instance:message});return message;};/**
     * Decodes a LockRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof LockRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {LockRequest} LockRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */LockRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a LockRequest message.
     * @function verify
     * @memberof LockRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */LockRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.lockId))return"lockId: string expected";if(message.duration!=null&&message.hasOwnProperty("duration"))if(!$util.isInteger(message.duration)&&!(message.duration&&$util.isInteger(message.duration.low)&&$util.isInteger(message.duration.high)))return"duration: integer|Long expected";return null;};/**
     * Creates a LockRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof LockRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {LockRequest} LockRequest
     */LockRequest.fromObject=function fromObject(object){if(object instanceof $root.LockRequest)return object;var message=new $root.LockRequest();if(object.lockId!=null)message.lockId=String(object.lockId);if(object.duration!=null)if($util.Long)(message.duration=$util.Long.fromValue(object.duration)).unsigned=false;else if(typeof object.duration==="string")message.duration=parseInt(object.duration,10);else if(typeof object.duration==="number")message.duration=object.duration;else if((0,_typeof3.default)(object.duration)==="object")message.duration=new $util.LongBits(object.duration.low>>>0,object.duration.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a LockRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof LockRequest
     * @static
     * @param {LockRequest} message LockRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */LockRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.lockId="";if($util.Long){var long=new $util.Long(0,0,false);object.duration=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.duration=options.longs===String?"0":0;}if(message.lockId!=null&&message.hasOwnProperty("lockId"))object.lockId=message.lockId;if(message.duration!=null&&message.hasOwnProperty("duration"))if(typeof message.duration==="number")object.duration=options.longs===String?String(message.duration):message.duration;else object.duration=options.longs===String?$util.Long.prototype.toString.call(message.duration):options.longs===Number?new $util.LongBits(message.duration.low>>>0,message.duration.high>>>0).toNumber():message.duration;return object;};/**
     * Converts this LockRequest to JSON.
     * @function toJSON
     * @memberof LockRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */LockRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return LockRequest;}();$root.PresenceOnlineState=function(){/**
     * Properties of a PresenceOnlineState.
     * @exports IPresenceOnlineState
     * @interface IPresenceOnlineState
     * @property {number} platform PresenceOnlineState platform
     * @property {number} state PresenceOnlineState state
     * @property {Long|null} [lastSeen] PresenceOnlineState lastSeen
     *//**
     * Constructs a new PresenceOnlineState.
     * @exports PresenceOnlineState
     * @classdesc Represents a PresenceOnlineState.
     * @implements IPresenceOnlineState
     * @constructor
     * @param {IPresenceOnlineState=} [properties] Properties to set
     */function PresenceOnlineState(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PresenceOnlineState platform.
     * @member {number} platform
     * @memberof PresenceOnlineState
     * @instance
     */PresenceOnlineState.prototype.platform=0;/**
     * PresenceOnlineState state.
     * @member {number} state
     * @memberof PresenceOnlineState
     * @instance
     */PresenceOnlineState.prototype.state=0;/**
     * PresenceOnlineState lastSeen.
     * @member {Long} lastSeen
     * @memberof PresenceOnlineState
     * @instance
     */PresenceOnlineState.prototype.lastSeen=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new PresenceOnlineState instance using the specified properties.
     * @function create
     * @memberof PresenceOnlineState
     * @static
     * @param {IPresenceOnlineState=} [properties] Properties to set
     * @returns {PresenceOnlineState} PresenceOnlineState instance
     */PresenceOnlineState.create=function create(properties){return new PresenceOnlineState(properties);};/**
     * Encodes the specified PresenceOnlineState message. Does not implicitly {@link PresenceOnlineState.verify|verify} messages.
     * @function encode
     * @memberof PresenceOnlineState
     * @static
     * @param {IPresenceOnlineState} message PresenceOnlineState message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PresenceOnlineState.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.platform);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);if(message.lastSeen!=null&&message.hasOwnProperty("lastSeen"))writer.uint32(/* id 3, wireType 0 =*/24).int64(message.lastSeen);return writer;};/**
     * Encodes the specified PresenceOnlineState message, length delimited. Does not implicitly {@link PresenceOnlineState.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PresenceOnlineState
     * @static
     * @param {IPresenceOnlineState} message PresenceOnlineState message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PresenceOnlineState.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PresenceOnlineState message from the specified reader or buffer.
     * @function decode
     * @memberof PresenceOnlineState
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PresenceOnlineState} PresenceOnlineState
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PresenceOnlineState.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PresenceOnlineState();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.platform=reader.int32();break;case 2:message.state=reader.int32();break;case 3:message.lastSeen=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("platform"))throw $util.ProtocolError("missing required 'platform'",{instance:message});if(!message.hasOwnProperty("state"))throw $util.ProtocolError("missing required 'state'",{instance:message});return message;};/**
     * Decodes a PresenceOnlineState message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PresenceOnlineState
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PresenceOnlineState} PresenceOnlineState
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PresenceOnlineState.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PresenceOnlineState message.
     * @function verify
     * @memberof PresenceOnlineState
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PresenceOnlineState.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.platform))return"platform: integer expected";if(!$util.isInteger(message.state))return"state: integer expected";if(message.lastSeen!=null&&message.hasOwnProperty("lastSeen"))if(!$util.isInteger(message.lastSeen)&&!(message.lastSeen&&$util.isInteger(message.lastSeen.low)&&$util.isInteger(message.lastSeen.high)))return"lastSeen: integer|Long expected";return null;};/**
     * Creates a PresenceOnlineState message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PresenceOnlineState
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PresenceOnlineState} PresenceOnlineState
     */PresenceOnlineState.fromObject=function fromObject(object){if(object instanceof $root.PresenceOnlineState)return object;var message=new $root.PresenceOnlineState();if(object.platform!=null)message.platform=object.platform|0;if(object.state!=null)message.state=object.state|0;if(object.lastSeen!=null)if($util.Long)(message.lastSeen=$util.Long.fromValue(object.lastSeen)).unsigned=false;else if(typeof object.lastSeen==="string")message.lastSeen=parseInt(object.lastSeen,10);else if(typeof object.lastSeen==="number")message.lastSeen=object.lastSeen;else if((0,_typeof3.default)(object.lastSeen)==="object")message.lastSeen=new $util.LongBits(object.lastSeen.low>>>0,object.lastSeen.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a PresenceOnlineState message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PresenceOnlineState
     * @static
     * @param {PresenceOnlineState} message PresenceOnlineState
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PresenceOnlineState.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.platform=0;object.state=0;if($util.Long){var long=new $util.Long(0,0,false);object.lastSeen=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.lastSeen=options.longs===String?"0":0;}if(message.platform!=null&&message.hasOwnProperty("platform"))object.platform=message.platform;if(message.state!=null&&message.hasOwnProperty("state"))object.state=message.state;if(message.lastSeen!=null&&message.hasOwnProperty("lastSeen"))if(typeof message.lastSeen==="number")object.lastSeen=options.longs===String?String(message.lastSeen):message.lastSeen;else object.lastSeen=options.longs===String?$util.Long.prototype.toString.call(message.lastSeen):options.longs===Number?new $util.LongBits(message.lastSeen.low>>>0,message.lastSeen.high>>>0).toNumber():message.lastSeen;return object;};/**
     * Converts this PresenceOnlineState to JSON.
     * @function toJSON
     * @memberof PresenceOnlineState
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PresenceOnlineState.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PresenceOnlineState;}();$root.PresenceOnlineNotify=function(){/**
     * Properties of a PresenceOnlineNotify.
     * @exports IPresenceOnlineNotify
     * @interface IPresenceOnlineNotify
     * @property {string} userId PresenceOnlineNotify userId
     * @property {number} customState PresenceOnlineNotify customState
     * @property {string|null} [customText] PresenceOnlineNotify customText
     * @property {Array.<IPresenceOnlineState>|null} [state] PresenceOnlineNotify state
     *//**
     * Constructs a new PresenceOnlineNotify.
     * @exports PresenceOnlineNotify
     * @classdesc Represents a PresenceOnlineNotify.
     * @implements IPresenceOnlineNotify
     * @constructor
     * @param {IPresenceOnlineNotify=} [properties] Properties to set
     */function PresenceOnlineNotify(properties){this.state=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PresenceOnlineNotify userId.
     * @member {string} userId
     * @memberof PresenceOnlineNotify
     * @instance
     */PresenceOnlineNotify.prototype.userId="";/**
     * PresenceOnlineNotify customState.
     * @member {number} customState
     * @memberof PresenceOnlineNotify
     * @instance
     */PresenceOnlineNotify.prototype.customState=0;/**
     * PresenceOnlineNotify customText.
     * @member {string} customText
     * @memberof PresenceOnlineNotify
     * @instance
     */PresenceOnlineNotify.prototype.customText="";/**
     * PresenceOnlineNotify state.
     * @member {Array.<IPresenceOnlineState>} state
     * @memberof PresenceOnlineNotify
     * @instance
     */PresenceOnlineNotify.prototype.state=$util.emptyArray;/**
     * Creates a new PresenceOnlineNotify instance using the specified properties.
     * @function create
     * @memberof PresenceOnlineNotify
     * @static
     * @param {IPresenceOnlineNotify=} [properties] Properties to set
     * @returns {PresenceOnlineNotify} PresenceOnlineNotify instance
     */PresenceOnlineNotify.create=function create(properties){return new PresenceOnlineNotify(properties);};/**
     * Encodes the specified PresenceOnlineNotify message. Does not implicitly {@link PresenceOnlineNotify.verify|verify} messages.
     * @function encode
     * @memberof PresenceOnlineNotify
     * @static
     * @param {IPresenceOnlineNotify} message PresenceOnlineNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PresenceOnlineNotify.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.customState);if(message.customText!=null&&message.hasOwnProperty("customText"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.customText);if(message.state!=null&&message.state.length)for(var i=0;i<message.state.length;++i){$root.PresenceOnlineState.encode(message.state[i],writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();}return writer;};/**
     * Encodes the specified PresenceOnlineNotify message, length delimited. Does not implicitly {@link PresenceOnlineNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PresenceOnlineNotify
     * @static
     * @param {IPresenceOnlineNotify} message PresenceOnlineNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PresenceOnlineNotify.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PresenceOnlineNotify message from the specified reader or buffer.
     * @function decode
     * @memberof PresenceOnlineNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PresenceOnlineNotify} PresenceOnlineNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PresenceOnlineNotify.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PresenceOnlineNotify();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.userId=reader.string();break;case 2:message.customState=reader.int32();break;case 3:message.customText=reader.string();break;case 4:if(!(message.state&&message.state.length))message.state=[];message.state.push($root.PresenceOnlineState.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("userId"))throw $util.ProtocolError("missing required 'userId'",{instance:message});if(!message.hasOwnProperty("customState"))throw $util.ProtocolError("missing required 'customState'",{instance:message});return message;};/**
     * Decodes a PresenceOnlineNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PresenceOnlineNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PresenceOnlineNotify} PresenceOnlineNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PresenceOnlineNotify.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PresenceOnlineNotify message.
     * @function verify
     * @memberof PresenceOnlineNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PresenceOnlineNotify.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.userId))return"userId: string expected";if(!$util.isInteger(message.customState))return"customState: integer expected";if(message.customText!=null&&message.hasOwnProperty("customText"))if(!$util.isString(message.customText))return"customText: string expected";if(message.state!=null&&message.hasOwnProperty("state")){if(!Array.isArray(message.state))return"state: array expected";for(var i=0;i<message.state.length;++i){var error=$root.PresenceOnlineState.verify(message.state[i]);if(error)return"state."+error;}}return null;};/**
     * Creates a PresenceOnlineNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PresenceOnlineNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PresenceOnlineNotify} PresenceOnlineNotify
     */PresenceOnlineNotify.fromObject=function fromObject(object){if(object instanceof $root.PresenceOnlineNotify)return object;var message=new $root.PresenceOnlineNotify();if(object.userId!=null)message.userId=String(object.userId);if(object.customState!=null)message.customState=object.customState|0;if(object.customText!=null)message.customText=String(object.customText);if(object.state){if(!Array.isArray(object.state))throw TypeError(".PresenceOnlineNotify.state: array expected");message.state=[];for(var i=0;i<object.state.length;++i){if((0,_typeof3.default)(object.state[i])!=="object")throw TypeError(".PresenceOnlineNotify.state: object expected");message.state[i]=$root.PresenceOnlineState.fromObject(object.state[i]);}}return message;};/**
     * Creates a plain object from a PresenceOnlineNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PresenceOnlineNotify
     * @static
     * @param {PresenceOnlineNotify} message PresenceOnlineNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PresenceOnlineNotify.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.state=[];if(options.defaults){object.userId="";object.customState=0;object.customText="";}if(message.userId!=null&&message.hasOwnProperty("userId"))object.userId=message.userId;if(message.customState!=null&&message.hasOwnProperty("customState"))object.customState=message.customState;if(message.customText!=null&&message.hasOwnProperty("customText"))object.customText=message.customText;if(message.state&&message.state.length){object.state=[];for(var j=0;j<message.state.length;++j){object.state[j]=$root.PresenceOnlineState.toObject(message.state[j],options);}}return object;};/**
     * Converts this PresenceOnlineNotify to JSON.
     * @function toJSON
     * @memberof PresenceOnlineNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PresenceOnlineNotify.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PresenceOnlineNotify;}();$root.PresenceWatchRequest=function(){/**
     * Properties of a PresenceWatchRequest.
     * @exports IPresenceWatchRequest
     * @interface IPresenceWatchRequest
     * @property {number} type PresenceWatchRequest type
     * @property {Array.<string>|null} [target] PresenceWatchRequest target
     * @property {number|null} [duration] PresenceWatchRequest duration
     *//**
     * Constructs a new PresenceWatchRequest.
     * @exports PresenceWatchRequest
     * @classdesc Represents a PresenceWatchRequest.
     * @implements IPresenceWatchRequest
     * @constructor
     * @param {IPresenceWatchRequest=} [properties] Properties to set
     */function PresenceWatchRequest(properties){this.target=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PresenceWatchRequest type.
     * @member {number} type
     * @memberof PresenceWatchRequest
     * @instance
     */PresenceWatchRequest.prototype.type=0;/**
     * PresenceWatchRequest target.
     * @member {Array.<string>} target
     * @memberof PresenceWatchRequest
     * @instance
     */PresenceWatchRequest.prototype.target=$util.emptyArray;/**
     * PresenceWatchRequest duration.
     * @member {number} duration
     * @memberof PresenceWatchRequest
     * @instance
     */PresenceWatchRequest.prototype.duration=0;/**
     * Creates a new PresenceWatchRequest instance using the specified properties.
     * @function create
     * @memberof PresenceWatchRequest
     * @static
     * @param {IPresenceWatchRequest=} [properties] Properties to set
     * @returns {PresenceWatchRequest} PresenceWatchRequest instance
     */PresenceWatchRequest.create=function create(properties){return new PresenceWatchRequest(properties);};/**
     * Encodes the specified PresenceWatchRequest message. Does not implicitly {@link PresenceWatchRequest.verify|verify} messages.
     * @function encode
     * @memberof PresenceWatchRequest
     * @static
     * @param {IPresenceWatchRequest} message PresenceWatchRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PresenceWatchRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);if(message.target!=null&&message.target.length)for(var i=0;i<message.target.length;++i){writer.uint32(/* id 2, wireType 2 =*/18).string(message.target[i]);}if(message.duration!=null&&message.hasOwnProperty("duration"))writer.uint32(/* id 3, wireType 0 =*/24).int32(message.duration);return writer;};/**
     * Encodes the specified PresenceWatchRequest message, length delimited. Does not implicitly {@link PresenceWatchRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PresenceWatchRequest
     * @static
     * @param {IPresenceWatchRequest} message PresenceWatchRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PresenceWatchRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PresenceWatchRequest message from the specified reader or buffer.
     * @function decode
     * @memberof PresenceWatchRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PresenceWatchRequest} PresenceWatchRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PresenceWatchRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PresenceWatchRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.type=reader.int32();break;case 2:if(!(message.target&&message.target.length))message.target=[];message.target.push(reader.string());break;case 3:message.duration=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});return message;};/**
     * Decodes a PresenceWatchRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PresenceWatchRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PresenceWatchRequest} PresenceWatchRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PresenceWatchRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PresenceWatchRequest message.
     * @function verify
     * @memberof PresenceWatchRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PresenceWatchRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isInteger(message.type))return"type: integer expected";if(message.target!=null&&message.hasOwnProperty("target")){if(!Array.isArray(message.target))return"target: array expected";for(var i=0;i<message.target.length;++i){if(!$util.isString(message.target[i]))return"target: string[] expected";}}if(message.duration!=null&&message.hasOwnProperty("duration"))if(!$util.isInteger(message.duration))return"duration: integer expected";return null;};/**
     * Creates a PresenceWatchRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PresenceWatchRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PresenceWatchRequest} PresenceWatchRequest
     */PresenceWatchRequest.fromObject=function fromObject(object){if(object instanceof $root.PresenceWatchRequest)return object;var message=new $root.PresenceWatchRequest();if(object.type!=null)message.type=object.type|0;if(object.target){if(!Array.isArray(object.target))throw TypeError(".PresenceWatchRequest.target: array expected");message.target=[];for(var i=0;i<object.target.length;++i){message.target[i]=String(object.target[i]);}}if(object.duration!=null)message.duration=object.duration|0;return message;};/**
     * Creates a plain object from a PresenceWatchRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PresenceWatchRequest
     * @static
     * @param {PresenceWatchRequest} message PresenceWatchRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PresenceWatchRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.target=[];if(options.defaults){object.type=0;object.duration=0;}if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.target&&message.target.length){object.target=[];for(var j=0;j<message.target.length;++j){object.target[j]=message.target[j];}}if(message.duration!=null&&message.hasOwnProperty("duration"))object.duration=message.duration;return object;};/**
     * Converts this PresenceWatchRequest to JSON.
     * @function toJSON
     * @memberof PresenceWatchRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PresenceWatchRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PresenceWatchRequest;}();$root.PresenceWatchResult=function(){/**
     * Properties of a PresenceWatchResult.
     * @exports IPresenceWatchResult
     * @interface IPresenceWatchResult
     * @property {Array.<IPresenceOnlineNotify>|null} [notify] PresenceWatchResult notify
     *//**
     * Constructs a new PresenceWatchResult.
     * @exports PresenceWatchResult
     * @classdesc Represents a PresenceWatchResult.
     * @implements IPresenceWatchResult
     * @constructor
     * @param {IPresenceWatchResult=} [properties] Properties to set
     */function PresenceWatchResult(properties){this.notify=[];if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * PresenceWatchResult notify.
     * @member {Array.<IPresenceOnlineNotify>} notify
     * @memberof PresenceWatchResult
     * @instance
     */PresenceWatchResult.prototype.notify=$util.emptyArray;/**
     * Creates a new PresenceWatchResult instance using the specified properties.
     * @function create
     * @memberof PresenceWatchResult
     * @static
     * @param {IPresenceWatchResult=} [properties] Properties to set
     * @returns {PresenceWatchResult} PresenceWatchResult instance
     */PresenceWatchResult.create=function create(properties){return new PresenceWatchResult(properties);};/**
     * Encodes the specified PresenceWatchResult message. Does not implicitly {@link PresenceWatchResult.verify|verify} messages.
     * @function encode
     * @memberof PresenceWatchResult
     * @static
     * @param {IPresenceWatchResult} message PresenceWatchResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PresenceWatchResult.encode=function encode(message,writer){if(!writer)writer=$Writer.create();if(message.notify!=null&&message.notify.length)for(var i=0;i<message.notify.length;++i){$root.PresenceOnlineNotify.encode(message.notify[i],writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();}return writer;};/**
     * Encodes the specified PresenceWatchResult message, length delimited. Does not implicitly {@link PresenceWatchResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PresenceWatchResult
     * @static
     * @param {IPresenceWatchResult} message PresenceWatchResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */PresenceWatchResult.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a PresenceWatchResult message from the specified reader or buffer.
     * @function decode
     * @memberof PresenceWatchResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PresenceWatchResult} PresenceWatchResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PresenceWatchResult.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.PresenceWatchResult();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:if(!(message.notify&&message.notify.length))message.notify=[];message.notify.push($root.PresenceOnlineNotify.decode(reader,reader.uint32()));break;default:reader.skipType(tag&7);break;}}return message;};/**
     * Decodes a PresenceWatchResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PresenceWatchResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PresenceWatchResult} PresenceWatchResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */PresenceWatchResult.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a PresenceWatchResult message.
     * @function verify
     * @memberof PresenceWatchResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */PresenceWatchResult.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(message.notify!=null&&message.hasOwnProperty("notify")){if(!Array.isArray(message.notify))return"notify: array expected";for(var i=0;i<message.notify.length;++i){var error=$root.PresenceOnlineNotify.verify(message.notify[i]);if(error)return"notify."+error;}}return null;};/**
     * Creates a PresenceWatchResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PresenceWatchResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PresenceWatchResult} PresenceWatchResult
     */PresenceWatchResult.fromObject=function fromObject(object){if(object instanceof $root.PresenceWatchResult)return object;var message=new $root.PresenceWatchResult();if(object.notify){if(!Array.isArray(object.notify))throw TypeError(".PresenceWatchResult.notify: array expected");message.notify=[];for(var i=0;i<object.notify.length;++i){if((0,_typeof3.default)(object.notify[i])!=="object")throw TypeError(".PresenceWatchResult.notify: object expected");message.notify[i]=$root.PresenceOnlineNotify.fromObject(object.notify[i]);}}return message;};/**
     * Creates a plain object from a PresenceWatchResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PresenceWatchResult
     * @static
     * @param {PresenceWatchResult} message PresenceWatchResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */PresenceWatchResult.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.arrays||options.defaults)object.notify=[];if(message.notify&&message.notify.length){object.notify=[];for(var j=0;j<message.notify.length;++j){object.notify[j]=$root.PresenceOnlineNotify.toObject(message.notify[j],options);}}return object;};/**
     * Converts this PresenceWatchResult to JSON.
     * @function toJSON
     * @memberof PresenceWatchResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */PresenceWatchResult.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return PresenceWatchResult;}();$root.CreateSecretChatRequest=function(){/**
     * Properties of a CreateSecretChatRequest.
     * @exports ICreateSecretChatRequest
     * @interface ICreateSecretChatRequest
     * @property {string} userId CreateSecretChatRequest userId
     * @property {string} pubkey CreateSecretChatRequest pubkey
     * @property {string|null} [targetId] CreateSecretChatRequest targetId
     *//**
     * Constructs a new CreateSecretChatRequest.
     * @exports CreateSecretChatRequest
     * @classdesc Represents a CreateSecretChatRequest.
     * @implements ICreateSecretChatRequest
     * @constructor
     * @param {ICreateSecretChatRequest=} [properties] Properties to set
     */function CreateSecretChatRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * CreateSecretChatRequest userId.
     * @member {string} userId
     * @memberof CreateSecretChatRequest
     * @instance
     */CreateSecretChatRequest.prototype.userId="";/**
     * CreateSecretChatRequest pubkey.
     * @member {string} pubkey
     * @memberof CreateSecretChatRequest
     * @instance
     */CreateSecretChatRequest.prototype.pubkey="";/**
     * CreateSecretChatRequest targetId.
     * @member {string} targetId
     * @memberof CreateSecretChatRequest
     * @instance
     */CreateSecretChatRequest.prototype.targetId="";/**
     * Creates a new CreateSecretChatRequest instance using the specified properties.
     * @function create
     * @memberof CreateSecretChatRequest
     * @static
     * @param {ICreateSecretChatRequest=} [properties] Properties to set
     * @returns {CreateSecretChatRequest} CreateSecretChatRequest instance
     */CreateSecretChatRequest.create=function create(properties){return new CreateSecretChatRequest(properties);};/**
     * Encodes the specified CreateSecretChatRequest message. Does not implicitly {@link CreateSecretChatRequest.verify|verify} messages.
     * @function encode
     * @memberof CreateSecretChatRequest
     * @static
     * @param {ICreateSecretChatRequest} message CreateSecretChatRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */CreateSecretChatRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.pubkey);if(message.targetId!=null&&message.hasOwnProperty("targetId"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.targetId);return writer;};/**
     * Encodes the specified CreateSecretChatRequest message, length delimited. Does not implicitly {@link CreateSecretChatRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CreateSecretChatRequest
     * @static
     * @param {ICreateSecretChatRequest} message CreateSecretChatRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */CreateSecretChatRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a CreateSecretChatRequest message from the specified reader or buffer.
     * @function decode
     * @memberof CreateSecretChatRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CreateSecretChatRequest} CreateSecretChatRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */CreateSecretChatRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.CreateSecretChatRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.userId=reader.string();break;case 2:message.pubkey=reader.string();break;case 3:message.targetId=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("userId"))throw $util.ProtocolError("missing required 'userId'",{instance:message});if(!message.hasOwnProperty("pubkey"))throw $util.ProtocolError("missing required 'pubkey'",{instance:message});return message;};/**
     * Decodes a CreateSecretChatRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CreateSecretChatRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CreateSecretChatRequest} CreateSecretChatRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */CreateSecretChatRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a CreateSecretChatRequest message.
     * @function verify
     * @memberof CreateSecretChatRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */CreateSecretChatRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.userId))return"userId: string expected";if(!$util.isString(message.pubkey))return"pubkey: string expected";if(message.targetId!=null&&message.hasOwnProperty("targetId"))if(!$util.isString(message.targetId))return"targetId: string expected";return null;};/**
     * Creates a CreateSecretChatRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CreateSecretChatRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CreateSecretChatRequest} CreateSecretChatRequest
     */CreateSecretChatRequest.fromObject=function fromObject(object){if(object instanceof $root.CreateSecretChatRequest)return object;var message=new $root.CreateSecretChatRequest();if(object.userId!=null)message.userId=String(object.userId);if(object.pubkey!=null)message.pubkey=String(object.pubkey);if(object.targetId!=null)message.targetId=String(object.targetId);return message;};/**
     * Creates a plain object from a CreateSecretChatRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CreateSecretChatRequest
     * @static
     * @param {CreateSecretChatRequest} message CreateSecretChatRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */CreateSecretChatRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.userId="";object.pubkey="";object.targetId="";}if(message.userId!=null&&message.hasOwnProperty("userId"))object.userId=message.userId;if(message.pubkey!=null&&message.hasOwnProperty("pubkey"))object.pubkey=message.pubkey;if(message.targetId!=null&&message.hasOwnProperty("targetId"))object.targetId=message.targetId;return object;};/**
     * Converts this CreateSecretChatRequest to JSON.
     * @function toJSON
     * @memberof CreateSecretChatRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */CreateSecretChatRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return CreateSecretChatRequest;}();$root.CreateSecretChatResponse=function(){/**
     * Properties of a CreateSecretChatResponse.
     * @exports ICreateSecretChatResponse
     * @interface ICreateSecretChatResponse
     * @property {string} targetId CreateSecretChatResponse targetId
     * @property {number} line CreateSecretChatResponse line
     *//**
     * Constructs a new CreateSecretChatResponse.
     * @exports CreateSecretChatResponse
     * @classdesc Represents a CreateSecretChatResponse.
     * @implements ICreateSecretChatResponse
     * @constructor
     * @param {ICreateSecretChatResponse=} [properties] Properties to set
     */function CreateSecretChatResponse(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * CreateSecretChatResponse targetId.
     * @member {string} targetId
     * @memberof CreateSecretChatResponse
     * @instance
     */CreateSecretChatResponse.prototype.targetId="";/**
     * CreateSecretChatResponse line.
     * @member {number} line
     * @memberof CreateSecretChatResponse
     * @instance
     */CreateSecretChatResponse.prototype.line=0;/**
     * Creates a new CreateSecretChatResponse instance using the specified properties.
     * @function create
     * @memberof CreateSecretChatResponse
     * @static
     * @param {ICreateSecretChatResponse=} [properties] Properties to set
     * @returns {CreateSecretChatResponse} CreateSecretChatResponse instance
     */CreateSecretChatResponse.create=function create(properties){return new CreateSecretChatResponse(properties);};/**
     * Encodes the specified CreateSecretChatResponse message. Does not implicitly {@link CreateSecretChatResponse.verify|verify} messages.
     * @function encode
     * @memberof CreateSecretChatResponse
     * @static
     * @param {ICreateSecretChatResponse} message CreateSecretChatResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */CreateSecretChatResponse.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.line);return writer;};/**
     * Encodes the specified CreateSecretChatResponse message, length delimited. Does not implicitly {@link CreateSecretChatResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CreateSecretChatResponse
     * @static
     * @param {ICreateSecretChatResponse} message CreateSecretChatResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */CreateSecretChatResponse.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a CreateSecretChatResponse message from the specified reader or buffer.
     * @function decode
     * @memberof CreateSecretChatResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CreateSecretChatResponse} CreateSecretChatResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */CreateSecretChatResponse.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.CreateSecretChatResponse();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.targetId=reader.string();break;case 2:message.line=reader.int32();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("targetId"))throw $util.ProtocolError("missing required 'targetId'",{instance:message});if(!message.hasOwnProperty("line"))throw $util.ProtocolError("missing required 'line'",{instance:message});return message;};/**
     * Decodes a CreateSecretChatResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CreateSecretChatResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CreateSecretChatResponse} CreateSecretChatResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */CreateSecretChatResponse.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a CreateSecretChatResponse message.
     * @function verify
     * @memberof CreateSecretChatResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */CreateSecretChatResponse.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.targetId))return"targetId: string expected";if(!$util.isInteger(message.line))return"line: integer expected";return null;};/**
     * Creates a CreateSecretChatResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CreateSecretChatResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CreateSecretChatResponse} CreateSecretChatResponse
     */CreateSecretChatResponse.fromObject=function fromObject(object){if(object instanceof $root.CreateSecretChatResponse)return object;var message=new $root.CreateSecretChatResponse();if(object.targetId!=null)message.targetId=String(object.targetId);if(object.line!=null)message.line=object.line|0;return message;};/**
     * Creates a plain object from a CreateSecretChatResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CreateSecretChatResponse
     * @static
     * @param {CreateSecretChatResponse} message CreateSecretChatResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */CreateSecretChatResponse.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.targetId="";object.line=0;}if(message.targetId!=null&&message.hasOwnProperty("targetId"))object.targetId=message.targetId;if(message.line!=null&&message.hasOwnProperty("line"))object.line=message.line;return object;};/**
     * Converts this CreateSecretChatResponse to JSON.
     * @function toJSON
     * @memberof CreateSecretChatResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */CreateSecretChatResponse.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return CreateSecretChatResponse;}();$root.SecretChatInfo=function(){/**
     * Properties of a SecretChatInfo.
     * @exports ISecretChatInfo
     * @interface ISecretChatInfo
     * @property {string} targetId SecretChatInfo targetId
     * @property {string} from SecretChatInfo from
     * @property {string} to SecretChatInfo to
     * @property {number} state SecretChatInfo state
     * @property {Long} createDt SecretChatInfo createDt
     *//**
     * Constructs a new SecretChatInfo.
     * @exports SecretChatInfo
     * @classdesc Represents a SecretChatInfo.
     * @implements ISecretChatInfo
     * @constructor
     * @param {ISecretChatInfo=} [properties] Properties to set
     */function SecretChatInfo(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * SecretChatInfo targetId.
     * @member {string} targetId
     * @memberof SecretChatInfo
     * @instance
     */SecretChatInfo.prototype.targetId="";/**
     * SecretChatInfo from.
     * @member {string} from
     * @memberof SecretChatInfo
     * @instance
     */SecretChatInfo.prototype.from="";/**
     * SecretChatInfo to.
     * @member {string} to
     * @memberof SecretChatInfo
     * @instance
     */SecretChatInfo.prototype.to="";/**
     * SecretChatInfo state.
     * @member {number} state
     * @memberof SecretChatInfo
     * @instance
     */SecretChatInfo.prototype.state=0;/**
     * SecretChatInfo createDt.
     * @member {Long} createDt
     * @memberof SecretChatInfo
     * @instance
     */SecretChatInfo.prototype.createDt=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new SecretChatInfo instance using the specified properties.
     * @function create
     * @memberof SecretChatInfo
     * @static
     * @param {ISecretChatInfo=} [properties] Properties to set
     * @returns {SecretChatInfo} SecretChatInfo instance
     */SecretChatInfo.create=function create(properties){return new SecretChatInfo(properties);};/**
     * Encodes the specified SecretChatInfo message. Does not implicitly {@link SecretChatInfo.verify|verify} messages.
     * @function encode
     * @memberof SecretChatInfo
     * @static
     * @param {ISecretChatInfo} message SecretChatInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SecretChatInfo.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);writer.uint32(/* id 2, wireType 2 =*/18).string(message.from);writer.uint32(/* id 3, wireType 2 =*/26).string(message.to);writer.uint32(/* id 4, wireType 0 =*/32).int32(message.state);writer.uint32(/* id 5, wireType 0 =*/40).int64(message.createDt);return writer;};/**
     * Encodes the specified SecretChatInfo message, length delimited. Does not implicitly {@link SecretChatInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SecretChatInfo
     * @static
     * @param {ISecretChatInfo} message SecretChatInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */SecretChatInfo.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a SecretChatInfo message from the specified reader or buffer.
     * @function decode
     * @memberof SecretChatInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SecretChatInfo} SecretChatInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SecretChatInfo.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.SecretChatInfo();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.targetId=reader.string();break;case 2:message.from=reader.string();break;case 3:message.to=reader.string();break;case 4:message.state=reader.int32();break;case 5:message.createDt=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("targetId"))throw $util.ProtocolError("missing required 'targetId'",{instance:message});if(!message.hasOwnProperty("from"))throw $util.ProtocolError("missing required 'from'",{instance:message});if(!message.hasOwnProperty("to"))throw $util.ProtocolError("missing required 'to'",{instance:message});if(!message.hasOwnProperty("state"))throw $util.ProtocolError("missing required 'state'",{instance:message});if(!message.hasOwnProperty("createDt"))throw $util.ProtocolError("missing required 'createDt'",{instance:message});return message;};/**
     * Decodes a SecretChatInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SecretChatInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SecretChatInfo} SecretChatInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */SecretChatInfo.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a SecretChatInfo message.
     * @function verify
     * @memberof SecretChatInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */SecretChatInfo.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.targetId))return"targetId: string expected";if(!$util.isString(message.from))return"from: string expected";if(!$util.isString(message.to))return"to: string expected";if(!$util.isInteger(message.state))return"state: integer expected";if(!$util.isInteger(message.createDt)&&!(message.createDt&&$util.isInteger(message.createDt.low)&&$util.isInteger(message.createDt.high)))return"createDt: integer|Long expected";return null;};/**
     * Creates a SecretChatInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SecretChatInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SecretChatInfo} SecretChatInfo
     */SecretChatInfo.fromObject=function fromObject(object){if(object instanceof $root.SecretChatInfo)return object;var message=new $root.SecretChatInfo();if(object.targetId!=null)message.targetId=String(object.targetId);if(object.from!=null)message.from=String(object.from);if(object.to!=null)message.to=String(object.to);if(object.state!=null)message.state=object.state|0;if(object.createDt!=null)if($util.Long)(message.createDt=$util.Long.fromValue(object.createDt)).unsigned=false;else if(typeof object.createDt==="string")message.createDt=parseInt(object.createDt,10);else if(typeof object.createDt==="number")message.createDt=object.createDt;else if((0,_typeof3.default)(object.createDt)==="object")message.createDt=new $util.LongBits(object.createDt.low>>>0,object.createDt.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a SecretChatInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SecretChatInfo
     * @static
     * @param {SecretChatInfo} message SecretChatInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */SecretChatInfo.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.targetId="";object.from="";object.to="";object.state=0;if($util.Long){var long=new $util.Long(0,0,false);object.createDt=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.createDt=options.longs===String?"0":0;}if(message.targetId!=null&&message.hasOwnProperty("targetId"))object.targetId=message.targetId;if(message.from!=null&&message.hasOwnProperty("from"))object.from=message.from;if(message.to!=null&&message.hasOwnProperty("to"))object.to=message.to;if(message.state!=null&&message.hasOwnProperty("state"))object.state=message.state;if(message.createDt!=null&&message.hasOwnProperty("createDt"))if(typeof message.createDt==="number")object.createDt=options.longs===String?String(message.createDt):message.createDt;else object.createDt=options.longs===String?$util.Long.prototype.toString.call(message.createDt):options.longs===Number?new $util.LongBits(message.createDt.low>>>0,message.createDt.high>>>0).toNumber():message.createDt;return object;};/**
     * Converts this SecretChatInfo to JSON.
     * @function toJSON
     * @memberof SecretChatInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */SecretChatInfo.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return SecretChatInfo;}();$root.DeleteSecretChatMessage=function(){/**
     * Properties of a DeleteSecretChatMessage.
     * @exports IDeleteSecretChatMessage
     * @interface IDeleteSecretChatMessage
     * @property {IConversation} conversation DeleteSecretChatMessage conversation
     * @property {Long} messageId DeleteSecretChatMessage messageId
     * @property {Long} serverTimestamp DeleteSecretChatMessage serverTimestamp
     *//**
     * Constructs a new DeleteSecretChatMessage.
     * @exports DeleteSecretChatMessage
     * @classdesc Represents a DeleteSecretChatMessage.
     * @implements IDeleteSecretChatMessage
     * @constructor
     * @param {IDeleteSecretChatMessage=} [properties] Properties to set
     */function DeleteSecretChatMessage(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * DeleteSecretChatMessage conversation.
     * @member {IConversation} conversation
     * @memberof DeleteSecretChatMessage
     * @instance
     */DeleteSecretChatMessage.prototype.conversation=null;/**
     * DeleteSecretChatMessage messageId.
     * @member {Long} messageId
     * @memberof DeleteSecretChatMessage
     * @instance
     */DeleteSecretChatMessage.prototype.messageId=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * DeleteSecretChatMessage serverTimestamp.
     * @member {Long} serverTimestamp
     * @memberof DeleteSecretChatMessage
     * @instance
     */DeleteSecretChatMessage.prototype.serverTimestamp=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * Creates a new DeleteSecretChatMessage instance using the specified properties.
     * @function create
     * @memberof DeleteSecretChatMessage
     * @static
     * @param {IDeleteSecretChatMessage=} [properties] Properties to set
     * @returns {DeleteSecretChatMessage} DeleteSecretChatMessage instance
     */DeleteSecretChatMessage.create=function create(properties){return new DeleteSecretChatMessage(properties);};/**
     * Encodes the specified DeleteSecretChatMessage message. Does not implicitly {@link DeleteSecretChatMessage.verify|verify} messages.
     * @function encode
     * @memberof DeleteSecretChatMessage
     * @static
     * @param {IDeleteSecretChatMessage} message DeleteSecretChatMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */DeleteSecretChatMessage.encode=function encode(message,writer){if(!writer)writer=$Writer.create();$root.Conversation.encode(message.conversation,writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();writer.uint32(/* id 2, wireType 0 =*/16).int64(message.messageId);writer.uint32(/* id 3, wireType 0 =*/24).int64(message.serverTimestamp);return writer;};/**
     * Encodes the specified DeleteSecretChatMessage message, length delimited. Does not implicitly {@link DeleteSecretChatMessage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DeleteSecretChatMessage
     * @static
     * @param {IDeleteSecretChatMessage} message DeleteSecretChatMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */DeleteSecretChatMessage.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a DeleteSecretChatMessage message from the specified reader or buffer.
     * @function decode
     * @memberof DeleteSecretChatMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DeleteSecretChatMessage} DeleteSecretChatMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */DeleteSecretChatMessage.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.DeleteSecretChatMessage();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.conversation=$root.Conversation.decode(reader,reader.uint32());break;case 2:message.messageId=reader.int64();break;case 3:message.serverTimestamp=reader.int64();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("conversation"))throw $util.ProtocolError("missing required 'conversation'",{instance:message});if(!message.hasOwnProperty("messageId"))throw $util.ProtocolError("missing required 'messageId'",{instance:message});if(!message.hasOwnProperty("serverTimestamp"))throw $util.ProtocolError("missing required 'serverTimestamp'",{instance:message});return message;};/**
     * Decodes a DeleteSecretChatMessage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DeleteSecretChatMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DeleteSecretChatMessage} DeleteSecretChatMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */DeleteSecretChatMessage.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a DeleteSecretChatMessage message.
     * @function verify
     * @memberof DeleteSecretChatMessage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */DeleteSecretChatMessage.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";{var error=$root.Conversation.verify(message.conversation);if(error)return"conversation."+error;}if(!$util.isInteger(message.messageId)&&!(message.messageId&&$util.isInteger(message.messageId.low)&&$util.isInteger(message.messageId.high)))return"messageId: integer|Long expected";if(!$util.isInteger(message.serverTimestamp)&&!(message.serverTimestamp&&$util.isInteger(message.serverTimestamp.low)&&$util.isInteger(message.serverTimestamp.high)))return"serverTimestamp: integer|Long expected";return null;};/**
     * Creates a DeleteSecretChatMessage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DeleteSecretChatMessage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DeleteSecretChatMessage} DeleteSecretChatMessage
     */DeleteSecretChatMessage.fromObject=function fromObject(object){if(object instanceof $root.DeleteSecretChatMessage)return object;var message=new $root.DeleteSecretChatMessage();if(object.conversation!=null){if((0,_typeof3.default)(object.conversation)!=="object")throw TypeError(".DeleteSecretChatMessage.conversation: object expected");message.conversation=$root.Conversation.fromObject(object.conversation);}if(object.messageId!=null)if($util.Long)(message.messageId=$util.Long.fromValue(object.messageId)).unsigned=false;else if(typeof object.messageId==="string")message.messageId=parseInt(object.messageId,10);else if(typeof object.messageId==="number")message.messageId=object.messageId;else if((0,_typeof3.default)(object.messageId)==="object")message.messageId=new $util.LongBits(object.messageId.low>>>0,object.messageId.high>>>0).toNumber();if(object.serverTimestamp!=null)if($util.Long)(message.serverTimestamp=$util.Long.fromValue(object.serverTimestamp)).unsigned=false;else if(typeof object.serverTimestamp==="string")message.serverTimestamp=parseInt(object.serverTimestamp,10);else if(typeof object.serverTimestamp==="number")message.serverTimestamp=object.serverTimestamp;else if((0,_typeof3.default)(object.serverTimestamp)==="object")message.serverTimestamp=new $util.LongBits(object.serverTimestamp.low>>>0,object.serverTimestamp.high>>>0).toNumber();return message;};/**
     * Creates a plain object from a DeleteSecretChatMessage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DeleteSecretChatMessage
     * @static
     * @param {DeleteSecretChatMessage} message DeleteSecretChatMessage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */DeleteSecretChatMessage.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.conversation=null;if($util.Long){var long=new $util.Long(0,0,false);object.messageId=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.messageId=options.longs===String?"0":0;if($util.Long){var long=new $util.Long(0,0,false);object.serverTimestamp=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.serverTimestamp=options.longs===String?"0":0;}if(message.conversation!=null&&message.hasOwnProperty("conversation"))object.conversation=$root.Conversation.toObject(message.conversation,options);if(message.messageId!=null&&message.hasOwnProperty("messageId"))if(typeof message.messageId==="number")object.messageId=options.longs===String?String(message.messageId):message.messageId;else object.messageId=options.longs===String?$util.Long.prototype.toString.call(message.messageId):options.longs===Number?new $util.LongBits(message.messageId.low>>>0,message.messageId.high>>>0).toNumber():message.messageId;if(message.serverTimestamp!=null&&message.hasOwnProperty("serverTimestamp"))if(typeof message.serverTimestamp==="number")object.serverTimestamp=options.longs===String?String(message.serverTimestamp):message.serverTimestamp;else object.serverTimestamp=options.longs===String?$util.Long.prototype.toString.call(message.serverTimestamp):options.longs===Number?new $util.LongBits(message.serverTimestamp.low>>>0,message.serverTimestamp.high>>>0).toNumber():message.serverTimestamp;return object;};/**
     * Converts this DeleteSecretChatMessage to JSON.
     * @function toJSON
     * @memberof DeleteSecretChatMessage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */DeleteSecretChatMessage.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return DeleteSecretChatMessage;}();$root.AuthCodeRequest=function(){/**
     * Properties of an AuthCodeRequest.
     * @exports IAuthCodeRequest
     * @interface IAuthCodeRequest
     * @property {string} targetId AuthCodeRequest targetId
     * @property {number} type AuthCodeRequest type
     * @property {string} host AuthCodeRequest host
     *//**
     * Constructs a new AuthCodeRequest.
     * @exports AuthCodeRequest
     * @classdesc Represents an AuthCodeRequest.
     * @implements IAuthCodeRequest
     * @constructor
     * @param {IAuthCodeRequest=} [properties] Properties to set
     */function AuthCodeRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * AuthCodeRequest targetId.
     * @member {string} targetId
     * @memberof AuthCodeRequest
     * @instance
     */AuthCodeRequest.prototype.targetId="";/**
     * AuthCodeRequest type.
     * @member {number} type
     * @memberof AuthCodeRequest
     * @instance
     */AuthCodeRequest.prototype.type=0;/**
     * AuthCodeRequest host.
     * @member {string} host
     * @memberof AuthCodeRequest
     * @instance
     */AuthCodeRequest.prototype.host="";/**
     * Creates a new AuthCodeRequest instance using the specified properties.
     * @function create
     * @memberof AuthCodeRequest
     * @static
     * @param {IAuthCodeRequest=} [properties] Properties to set
     * @returns {AuthCodeRequest} AuthCodeRequest instance
     */AuthCodeRequest.create=function create(properties){return new AuthCodeRequest(properties);};/**
     * Encodes the specified AuthCodeRequest message. Does not implicitly {@link AuthCodeRequest.verify|verify} messages.
     * @function encode
     * @memberof AuthCodeRequest
     * @static
     * @param {IAuthCodeRequest} message AuthCodeRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */AuthCodeRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.targetId);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);writer.uint32(/* id 3, wireType 2 =*/26).string(message.host);return writer;};/**
     * Encodes the specified AuthCodeRequest message, length delimited. Does not implicitly {@link AuthCodeRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AuthCodeRequest
     * @static
     * @param {IAuthCodeRequest} message AuthCodeRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */AuthCodeRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes an AuthCodeRequest message from the specified reader or buffer.
     * @function decode
     * @memberof AuthCodeRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AuthCodeRequest} AuthCodeRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */AuthCodeRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.AuthCodeRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.targetId=reader.string();break;case 2:message.type=reader.int32();break;case 3:message.host=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("targetId"))throw $util.ProtocolError("missing required 'targetId'",{instance:message});if(!message.hasOwnProperty("type"))throw $util.ProtocolError("missing required 'type'",{instance:message});if(!message.hasOwnProperty("host"))throw $util.ProtocolError("missing required 'host'",{instance:message});return message;};/**
     * Decodes an AuthCodeRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AuthCodeRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AuthCodeRequest} AuthCodeRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */AuthCodeRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies an AuthCodeRequest message.
     * @function verify
     * @memberof AuthCodeRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */AuthCodeRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.targetId))return"targetId: string expected";if(!$util.isInteger(message.type))return"type: integer expected";if(!$util.isString(message.host))return"host: string expected";return null;};/**
     * Creates an AuthCodeRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AuthCodeRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AuthCodeRequest} AuthCodeRequest
     */AuthCodeRequest.fromObject=function fromObject(object){if(object instanceof $root.AuthCodeRequest)return object;var message=new $root.AuthCodeRequest();if(object.targetId!=null)message.targetId=String(object.targetId);if(object.type!=null)message.type=object.type|0;if(object.host!=null)message.host=String(object.host);return message;};/**
     * Creates a plain object from an AuthCodeRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AuthCodeRequest
     * @static
     * @param {AuthCodeRequest} message AuthCodeRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */AuthCodeRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.targetId="";object.type=0;object.host="";}if(message.targetId!=null&&message.hasOwnProperty("targetId"))object.targetId=message.targetId;if(message.type!=null&&message.hasOwnProperty("type"))object.type=message.type;if(message.host!=null&&message.hasOwnProperty("host"))object.host=message.host;return object;};/**
     * Converts this AuthCodeRequest to JSON.
     * @function toJSON
     * @memberof AuthCodeRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */AuthCodeRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return AuthCodeRequest;}();$root.ApplicationConfigRequest=function(){/**
     * Properties of an ApplicationConfigRequest.
     * @exports IApplicationConfigRequest
     * @interface IApplicationConfigRequest
     * @property {string} appId ApplicationConfigRequest appId
     * @property {number} appType ApplicationConfigRequest appType
     * @property {Long} timestamp ApplicationConfigRequest timestamp
     * @property {string} nonce ApplicationConfigRequest nonce
     * @property {string} signature ApplicationConfigRequest signature
     *//**
     * Constructs a new ApplicationConfigRequest.
     * @exports ApplicationConfigRequest
     * @classdesc Represents an ApplicationConfigRequest.
     * @implements IApplicationConfigRequest
     * @constructor
     * @param {IApplicationConfigRequest=} [properties] Properties to set
     */function ApplicationConfigRequest(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * ApplicationConfigRequest appId.
     * @member {string} appId
     * @memberof ApplicationConfigRequest
     * @instance
     */ApplicationConfigRequest.prototype.appId="";/**
     * ApplicationConfigRequest appType.
     * @member {number} appType
     * @memberof ApplicationConfigRequest
     * @instance
     */ApplicationConfigRequest.prototype.appType=0;/**
     * ApplicationConfigRequest timestamp.
     * @member {Long} timestamp
     * @memberof ApplicationConfigRequest
     * @instance
     */ApplicationConfigRequest.prototype.timestamp=$util.Long?$util.Long.fromBits(0,0,false):0;/**
     * ApplicationConfigRequest nonce.
     * @member {string} nonce
     * @memberof ApplicationConfigRequest
     * @instance
     */ApplicationConfigRequest.prototype.nonce="";/**
     * ApplicationConfigRequest signature.
     * @member {string} signature
     * @memberof ApplicationConfigRequest
     * @instance
     */ApplicationConfigRequest.prototype.signature="";/**
     * Creates a new ApplicationConfigRequest instance using the specified properties.
     * @function create
     * @memberof ApplicationConfigRequest
     * @static
     * @param {IApplicationConfigRequest=} [properties] Properties to set
     * @returns {ApplicationConfigRequest} ApplicationConfigRequest instance
     */ApplicationConfigRequest.create=function create(properties){return new ApplicationConfigRequest(properties);};/**
     * Encodes the specified ApplicationConfigRequest message. Does not implicitly {@link ApplicationConfigRequest.verify|verify} messages.
     * @function encode
     * @memberof ApplicationConfigRequest
     * @static
     * @param {IApplicationConfigRequest} message ApplicationConfigRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ApplicationConfigRequest.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).string(message.appId);writer.uint32(/* id 2, wireType 0 =*/16).int32(message.appType);writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);writer.uint32(/* id 4, wireType 2 =*/34).string(message.nonce);writer.uint32(/* id 5, wireType 2 =*/42).string(message.signature);return writer;};/**
     * Encodes the specified ApplicationConfigRequest message, length delimited. Does not implicitly {@link ApplicationConfigRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ApplicationConfigRequest
     * @static
     * @param {IApplicationConfigRequest} message ApplicationConfigRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */ApplicationConfigRequest.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes an ApplicationConfigRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ApplicationConfigRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ApplicationConfigRequest} ApplicationConfigRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ApplicationConfigRequest.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.ApplicationConfigRequest();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.appId=reader.string();break;case 2:message.appType=reader.int32();break;case 3:message.timestamp=reader.int64();break;case 4:message.nonce=reader.string();break;case 5:message.signature=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("appId"))throw $util.ProtocolError("missing required 'appId'",{instance:message});if(!message.hasOwnProperty("appType"))throw $util.ProtocolError("missing required 'appType'",{instance:message});if(!message.hasOwnProperty("timestamp"))throw $util.ProtocolError("missing required 'timestamp'",{instance:message});if(!message.hasOwnProperty("nonce"))throw $util.ProtocolError("missing required 'nonce'",{instance:message});if(!message.hasOwnProperty("signature"))throw $util.ProtocolError("missing required 'signature'",{instance:message});return message;};/**
     * Decodes an ApplicationConfigRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ApplicationConfigRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ApplicationConfigRequest} ApplicationConfigRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */ApplicationConfigRequest.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies an ApplicationConfigRequest message.
     * @function verify
     * @memberof ApplicationConfigRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */ApplicationConfigRequest.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!$util.isString(message.appId))return"appId: string expected";if(!$util.isInteger(message.appType))return"appType: integer expected";if(!$util.isInteger(message.timestamp)&&!(message.timestamp&&$util.isInteger(message.timestamp.low)&&$util.isInteger(message.timestamp.high)))return"timestamp: integer|Long expected";if(!$util.isString(message.nonce))return"nonce: string expected";if(!$util.isString(message.signature))return"signature: string expected";return null;};/**
     * Creates an ApplicationConfigRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ApplicationConfigRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ApplicationConfigRequest} ApplicationConfigRequest
     */ApplicationConfigRequest.fromObject=function fromObject(object){if(object instanceof $root.ApplicationConfigRequest)return object;var message=new $root.ApplicationConfigRequest();if(object.appId!=null)message.appId=String(object.appId);if(object.appType!=null)message.appType=object.appType|0;if(object.timestamp!=null)if($util.Long)(message.timestamp=$util.Long.fromValue(object.timestamp)).unsigned=false;else if(typeof object.timestamp==="string")message.timestamp=parseInt(object.timestamp,10);else if(typeof object.timestamp==="number")message.timestamp=object.timestamp;else if((0,_typeof3.default)(object.timestamp)==="object")message.timestamp=new $util.LongBits(object.timestamp.low>>>0,object.timestamp.high>>>0).toNumber();if(object.nonce!=null)message.nonce=String(object.nonce);if(object.signature!=null)message.signature=String(object.signature);return message;};/**
     * Creates a plain object from an ApplicationConfigRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ApplicationConfigRequest
     * @static
     * @param {ApplicationConfigRequest} message ApplicationConfigRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */ApplicationConfigRequest.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){object.appId="";object.appType=0;if($util.Long){var long=new $util.Long(0,0,false);object.timestamp=options.longs===String?long.toString():options.longs===Number?long.toNumber():long;}else object.timestamp=options.longs===String?"0":0;object.nonce="";object.signature="";}if(message.appId!=null&&message.hasOwnProperty("appId"))object.appId=message.appId;if(message.appType!=null&&message.hasOwnProperty("appType"))object.appType=message.appType;if(message.timestamp!=null&&message.hasOwnProperty("timestamp"))if(typeof message.timestamp==="number")object.timestamp=options.longs===String?String(message.timestamp):message.timestamp;else object.timestamp=options.longs===String?$util.Long.prototype.toString.call(message.timestamp):options.longs===Number?new $util.LongBits(message.timestamp.low>>>0,message.timestamp.high>>>0).toNumber():message.timestamp;if(message.nonce!=null&&message.hasOwnProperty("nonce"))object.nonce=message.nonce;if(message.signature!=null&&message.hasOwnProperty("signature"))object.signature=message.signature;return object;};/**
     * Converts this ApplicationConfigRequest to JSON.
     * @function toJSON
     * @memberof ApplicationConfigRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */ApplicationConfigRequest.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return ApplicationConfigRequest;}();$root.RouteRequestInternal=function(){/**
     * Properties of a RouteRequestInternal.
     * @exports IRouteRequestInternal
     * @interface IRouteRequestInternal
     * @property {Uint8Array} data RouteRequestInternal data
     * @property {string|null} [appKey] RouteRequestInternal appKey
     * @property {string|null} [appId] RouteRequestInternal appId
     *//**
     * Constructs a new RouteRequestInternal.
     * @exports RouteRequestInternal
     * @classdesc Represents a RouteRequestInternal.
     * @implements IRouteRequestInternal
     * @constructor
     * @param {IRouteRequestInternal=} [properties] Properties to set
     */function RouteRequestInternal(properties){if(properties)for(var keys=(0,_keys2.default)(properties),i=0;i<keys.length;++i){if(properties[keys[i]]!=null)this[keys[i]]=properties[keys[i]];}}/**
     * RouteRequestInternal data.
     * @member {Uint8Array} data
     * @memberof RouteRequestInternal
     * @instance
     */RouteRequestInternal.prototype.data=$util.newBuffer([]);/**
     * RouteRequestInternal appKey.
     * @member {string} appKey
     * @memberof RouteRequestInternal
     * @instance
     */RouteRequestInternal.prototype.appKey="";/**
     * RouteRequestInternal appId.
     * @member {string} appId
     * @memberof RouteRequestInternal
     * @instance
     */RouteRequestInternal.prototype.appId="";/**
     * Creates a new RouteRequestInternal instance using the specified properties.
     * @function create
     * @memberof RouteRequestInternal
     * @static
     * @param {IRouteRequestInternal=} [properties] Properties to set
     * @returns {RouteRequestInternal} RouteRequestInternal instance
     */RouteRequestInternal.create=function create(properties){return new RouteRequestInternal(properties);};/**
     * Encodes the specified RouteRequestInternal message. Does not implicitly {@link RouteRequestInternal.verify|verify} messages.
     * @function encode
     * @memberof RouteRequestInternal
     * @static
     * @param {IRouteRequestInternal} message RouteRequestInternal message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RouteRequestInternal.encode=function encode(message,writer){if(!writer)writer=$Writer.create();writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);if(message.appKey!=null&&message.hasOwnProperty("appKey"))writer.uint32(/* id 2, wireType 2 =*/18).string(message.appKey);if(message.appId!=null&&message.hasOwnProperty("appId"))writer.uint32(/* id 3, wireType 2 =*/26).string(message.appId);return writer;};/**
     * Encodes the specified RouteRequestInternal message, length delimited. Does not implicitly {@link RouteRequestInternal.verify|verify} messages.
     * @function encodeDelimited
     * @memberof RouteRequestInternal
     * @static
     * @param {IRouteRequestInternal} message RouteRequestInternal message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */RouteRequestInternal.encodeDelimited=function encodeDelimited(message,writer){return this.encode(message,writer).ldelim();};/**
     * Decodes a RouteRequestInternal message from the specified reader or buffer.
     * @function decode
     * @memberof RouteRequestInternal
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {RouteRequestInternal} RouteRequestInternal
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RouteRequestInternal.decode=function decode(reader,length){if(!(reader instanceof $Reader))reader=$Reader.create(reader);var end=length===undefined?reader.len:reader.pos+length,message=new $root.RouteRequestInternal();while(reader.pos<end){var tag=reader.uint32();switch(tag>>>3){case 1:message.data=reader.bytes();break;case 2:message.appKey=reader.string();break;case 3:message.appId=reader.string();break;default:reader.skipType(tag&7);break;}}if(!message.hasOwnProperty("data"))throw $util.ProtocolError("missing required 'data'",{instance:message});return message;};/**
     * Decodes a RouteRequestInternal message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof RouteRequestInternal
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {RouteRequestInternal} RouteRequestInternal
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */RouteRequestInternal.decodeDelimited=function decodeDelimited(reader){if(!(reader instanceof $Reader))reader=new $Reader(reader);return this.decode(reader,reader.uint32());};/**
     * Verifies a RouteRequestInternal message.
     * @function verify
     * @memberof RouteRequestInternal
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */RouteRequestInternal.verify=function verify(message){if((typeof message==="undefined"?"undefined":(0,_typeof3.default)(message))!=="object"||message===null)return"object expected";if(!(message.data&&typeof message.data.length==="number"||$util.isString(message.data)))return"data: buffer expected";if(message.appKey!=null&&message.hasOwnProperty("appKey"))if(!$util.isString(message.appKey))return"appKey: string expected";if(message.appId!=null&&message.hasOwnProperty("appId"))if(!$util.isString(message.appId))return"appId: string expected";return null;};/**
     * Creates a RouteRequestInternal message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof RouteRequestInternal
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {RouteRequestInternal} RouteRequestInternal
     */RouteRequestInternal.fromObject=function fromObject(object){if(object instanceof $root.RouteRequestInternal)return object;var message=new $root.RouteRequestInternal();if(object.data!=null)if(typeof object.data==="string")$util.base64.decode(object.data,message.data=$util.newBuffer($util.base64.length(object.data)),0);else if(object.data.length)message.data=object.data;if(object.appKey!=null)message.appKey=String(object.appKey);if(object.appId!=null)message.appId=String(object.appId);return message;};/**
     * Creates a plain object from a RouteRequestInternal message. Also converts values to other types if specified.
     * @function toObject
     * @memberof RouteRequestInternal
     * @static
     * @param {RouteRequestInternal} message RouteRequestInternal
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */RouteRequestInternal.toObject=function toObject(message,options){if(!options)options={};var object={};if(options.defaults){if(options.bytes===String)object.data="";else{object.data=[];if(options.bytes!==Array)object.data=$util.newBuffer(object.data);}object.appKey="";object.appId="";}if(message.data!=null&&message.hasOwnProperty("data"))object.data=options.bytes===String?$util.base64.encode(message.data,0,message.data.length):options.bytes===Array?Array.prototype.slice.call(message.data):message.data;if(message.appKey!=null&&message.hasOwnProperty("appKey"))object.appKey=message.appKey;if(message.appId!=null&&message.hasOwnProperty("appId"))object.appId=message.appId;return object;};/**
     * Converts this RouteRequestInternal to JSON.
     * @function toJSON
     * @memberof RouteRequestInternal
     * @instance
     * @returns {Object.<string,*>} JSON object
     */RouteRequestInternal.prototype.toJSON=function toJSON(){return this.constructor.toObject(this,$protobuf.util.toJSONOptions);};return RouteRequestInternal;}();module.exports=$root;

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = __webpack_require__(78);

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = __webpack_require__(79);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _assign = __webpack_require__(113);

var _assign2 = _interopRequireDefault(_assign);

var _getIterator2 = __webpack_require__(112);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _set2 = __webpack_require__(373);

var _set3 = _interopRequireDefault(_set2);

var _map = __webpack_require__(115);

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(55);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(122);

var _createClass3 = _interopRequireDefault(_createClass2);

var _long = __webpack_require__(81);

var _long2 = _interopRequireDefault(_long);

var _messageStatus = __webpack_require__(161);

var _messageStatus2 = _interopRequireDefault(_messageStatus);

var _conversation = __webpack_require__(164);

var _conversation2 = _interopRequireDefault(_conversation);

var _conversationInfo = __webpack_require__(172);

var _conversationInfo2 = _interopRequireDefault(_conversationInfo);

var _conversationType = __webpack_require__(165);

var _conversationType2 = _interopRequireDefault(_conversationType);

var _friendInfo = __webpack_require__(173);

var _friendInfo2 = _interopRequireDefault(_friendInfo);

var _nullGroupInfo = __webpack_require__(168);

var _nullGroupInfo2 = _interopRequireDefault(_nullGroupInfo);

var _nullUserInfo = __webpack_require__(169);

var _nullUserInfo2 = _interopRequireDefault(_nullUserInfo);

var _unreadCount = __webpack_require__(379);

var _unreadCount2 = _interopRequireDefault(_unreadCount);

var _userSettingScope = __webpack_require__(171);

var _userSettingScope2 = _interopRequireDefault(_userSettingScope);

var _mediaMessageContent = __webpack_require__(160);

var _mediaMessageContent2 = _interopRequireDefault(_mediaMessageContent);

var _NullChannelInfo = __webpack_require__(174);

var _NullChannelInfo2 = _interopRequireDefault(_NullChannelInfo);

var _messageConfig = __webpack_require__(159);

var _messageConfig2 = _interopRequireDefault(_messageConfig);

var _longUtil = __webpack_require__(124);

var _syncReadEntry = __webpack_require__(380);

var _syncReadEntry2 = _interopRequireDefault(_syncReadEntry);

var _persistFlag = __webpack_require__(162);

var _persistFlag2 = _interopRequireDefault(_persistFlag);

var _groupMemberType = __webpack_require__(167);

var _groupMemberType2 = _interopRequireDefault(_groupMemberType);

var _config = __webpack_require__(91);

var _config2 = _interopRequireDefault(_config);

var _friend = __webpack_require__(381);

var _friend2 = _interopRequireDefault(_friend);

var _userInfo = __webpack_require__(170);

var _userInfo2 = _interopRequireDefault(_userInfo);

var _channelInfo = __webpack_require__(163);

var _channelInfo2 = _interopRequireDefault(_channelInfo);

var _groupInfo = __webpack_require__(166);

var _groupInfo2 = _interopRequireDefault(_groupInfo);

var _aes = __webpack_require__(29);

var _groupSearchResult = __webpack_require__(382);

var _groupSearchResult2 = _interopRequireDefault(_groupSearchResult);

var _groupHeadEntry = __webpack_require__(383);

var _groupHeadEntry2 = _interopRequireDefault(_groupHeadEntry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WfcStore = function () {
    // groupId + line -> GroupHeadEntry
    // uid -> readEntries(Map)
    // uid -> friendInfo
    // groupId -> groupInfo
    function WfcStore(impl) {
        (0, _classCallCheck3.default)(this, WfcStore);
        this.users = new _map2.default();
        this.groups = new _map2.default();
        this.loadingUsers = new _set3.default();
        this.loadingGroups = new _set3.default();
        this.loadingGroupMembers = new _set3.default();
        this.favGroups = [];
        this.favUsers = [];
        this.channels = new _map2.default();
        this.groupMembers = new _map2.default();
        this.friends = new _map2.default();
        this.deliveries = new _map2.default();
        this.readEntries = new _map2.default();
        this.syncReadEntries = new _map2.default();
        this.groupHeadEntries = new _map2.default();
        this.friendRequests = [];
        this.messages = [];
        this.settings = [];
        this.conversationInfos = [];
        this.chatRoomMessageId = 100;
        this.messageId = 100;
        this.syncReadId = 100;
        this.impl = null;

        this.impl = impl;
    }

    /**
     *
     * @type {WfcImpl}
     */
    // key -> SyncReadEntry
    // uid -> delivery
    // groupId -> groupMembers[]
    // 正在从远程拉取的用户
    // uid -> userInfo


    (0, _createClass3.default)(WfcStore, [{
        key: "genConversationKey",
        value: function genConversationKey(conversation) {
            return conversation.type + '@' + conversation.target + '@' + conversation.line;
        }
    }, {
        key: "getUser",
        value: function getUser(userId) {
            var groupId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            //let userInfo = this.users.get(userId);
            var userInfo = this._get(this.users, 'u', userId, _userInfo2.default);
            if (!userInfo) {
                userInfo = new _nullUserInfo2.default(userId);
            } else {
                var friendAlias = this.getFriendAlias(userId);
                if (friendAlias && friendAlias !== '') {
                    userInfo.friendAlias = friendAlias;
                }
                if (groupId.length > 0) {
                    var member = this.getGroupMember(groupId, userId);
                    if (member && member.alias && member.alias !== '') {
                        userInfo.groupAlias = member.alias;
                    }
                }
            }

            return userInfo;
        }
    }, {
        key: "setUser",
        value: function setUser(userInfo) {
            //this.users.set(userInfo.uid, userInfo);
            this._set(this.users, 'u', userInfo.uid, userInfo);
        }
    }, {
        key: "getChannelInfo",
        value: function getChannelInfo(channelId) {
            // let info = this.channels.get(channelId);
            var info = this._get(this.channels, 'c', channelId, _channelInfo2.default);
            if (!info) {
                info = new _NullChannelInfo2.default(channelId);
            }
            return info;
        }
    }, {
        key: "setChannelInfo",
        value: function setChannelInfo(channelInfo) {
            if (channelInfo instanceof _NullChannelInfo2.default) {
                return;
            }
            // this.channels.set(channelInfo.channelId, channelInfo);
            this._set(this.channels, 'c', channelInfo.channelId, channelInfo);
        }
    }, {
        key: "getGroupInfo",
        value: function getGroupInfo(groupId) {
            //let groupInfo = this.groups.get(groupId);
            var groupInfo = this._get(this.groups, 'g', groupId, _groupInfo2.default);
            if (!groupInfo) {
                groupInfo = new _nullGroupInfo2.default(groupId);
            } else {
                var remarkSetting = this.getUserSetting(_userSettingScope2.default.GroupRemark, groupId);
                groupInfo.remark = remarkSetting ? remarkSetting.value : undefined;
            }
            return groupInfo;
        }
    }, {
        key: "setGroupInfo",
        value: function setGroupInfo(groupInfo) {
            // this.groups.set(groupInfo.target, groupInfo);
            this._set(this.groups, 'g', groupInfo.target, groupInfo);
        }
    }, {
        key: "getGroupMembers",
        value: function getGroupMembers(groupId) {
            var members = this.groupMembers.get(groupId);
            members = members ? members : [];
            members = members.filter(function (m) {
                return m.type !== _groupMemberType2.default.Removed;
            });
            return members;
        }
    }, {
        key: "getGroupMemberIds",
        value: function getGroupMemberIds(groupId) {
            var fresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var groupMembers = this.getGroupMembers(groupId, fresh);
            var groupMemberIds = [];
            groupMembers.forEach(function (e) {
                if (e.type !== _groupMemberType2.default.Removed) {
                    groupMemberIds.push(e.memberId);
                }
            });
            return groupMemberIds;
        }
    }, {
        key: "getGroupMemberMaxDt",
        value: function getGroupMemberMaxDt(groupId) {
            var maxDt = _long2.default.ZERO;
            var members = this.groupMembers.get(groupId);
            members = members ? members : [];
            members.forEach(function (e) {
                maxDt = (0, _longUtil.gt)(e.updateDt, maxDt) ? e.updateDt : maxDt;
            });
            return maxDt;
        }
    }, {
        key: "setGroupMembers",
        value: function setGroupMembers(groupId, members) {
            this.groupMembers.set(groupId, members);
        }
    }, {
        key: "removeGroupAndMembers",
        value: function removeGroupAndMembers(groupId) {
            // this.groups.delete(groupId);
            this._delete(this.groups, 'g', groupId);
            this.groupMembers.delete(groupId);
        }
    }, {
        key: "removeGroupMembers",
        value: function removeGroupMembers(groupId, memberIds) {
            var groupMembers = this.groupMembers.get(groupId);
            if (groupMembers) {
                groupMembers = groupMembers.filter(function (member) {
                    return memberIds.indexOf(member.memberId) === -1;
                });
                this.groupMembers.set(groupId, groupMembers);
            }
        }
    }, {
        key: "updateGroupMembers",
        value: function updateGroupMembers(groupId, members) {
            var groupMembers = this.groupMembers.get(groupId);
            if (groupMembers) {
                for (var i = 0; i < members.length; i++) {
                    var found = false;
                    for (var j = 0; j < groupMembers.length; j++) {
                        if (groupMembers[j].memberId === members[i].memberId) {
                            groupMembers[j] = members[i];
                            found = true;
                        }
                    }
                    if (!found) {
                        groupMembers.push(members[i]);
                    }
                }
            } else {
                this.groupMembers.set(groupId, members);
            }
        }
    }, {
        key: "updateGroupMemberMuteOrAllow",
        value: function updateGroupMemberMuteOrAllow(groupId, memberIds, setOrDelete, isAllow) {
            var _this = this;

            if (!memberIds) {
                return;
            }
            memberIds.forEach(function (memberId) {
                var groupMember = _this.getGroupMember(groupId, memberId);
                if (!groupMember) {
                    return;
                }
                if (isAllow) {
                    groupMember.type = setOrDelete ? _groupMemberType2.default.Allowed : 0;
                } else {
                    groupMember.type = setOrDelete ? _groupMemberType2.default.Muted : 0;
                }
            });
        }
    }, {
        key: "updateGroupMemberAlias",
        value: function updateGroupMemberAlias(groupId, memberId, alias) {
            var groupMember = this.getGroupMember(groupId, memberId);
            if (groupMember) {
                groupMember.alias = alias;
            }
        }
    }, {
        key: "updateGroupMemberExtra",
        value: function updateGroupMemberExtra(groupId, memberId, extra) {
            var groupMember = this.getGroupMember(groupId, memberId);
            if (groupMember) {
                groupMember.extra = extra;
            }
        }
    }, {
        key: "getGroupMember",
        value: function getGroupMember(groupId, memberId) {
            var members = this.groupMembers.get(groupId);
            if (!members) {
                return null;
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(members), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var member = _step.value;

                    if (memberId === member.memberId) {
                        return member;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return null;
        }
    }, {
        key: "getFriends",
        value: function getFriends() {
            var friends = [];
            this.friends.forEach(function (friendInfo, uid) {
                // userId;
                // alias;
                // extra;
                // timestamp;
                if (friendInfo.state === 0) {
                    var friend = new _friend2.default();
                    friend.userId = friendInfo.uid;
                    friend.alias = friendInfo.alias;
                    friend.extra = friendInfo.extra;
                    friend.extra = friendInfo.updateDt;

                    friends.push(friend);
                }
            });
            return friends;
        }
    }, {
        key: "getFriendIds",
        value: function getFriendIds() {
            var ids = [];
            this.friends.forEach(function (friend, uid) {
                if (friend.state === 0) {
                    ids.push(friend.uid);
                }
            });
            return ids;
        }
    }, {
        key: "getBlackList",
        value: function getBlackList() {
            var ids = [];
            this.friends.forEach(function (friend, uid) {
                if (friend.state === 2) {
                    ids.push(friend.uid);
                }
            });
            return ids;
        }
    }, {
        key: "isBlackListed",
        value: function isBlackListed(userId) {
            var friend = this.friends.get(userId);
            return friend.state === 2;
        }
    }, {
        key: "setBlackList",
        value: function setBlackList(userId, block) {
            var friend = this.friends.get(userId);
            friend.state = block ? 2 : 0;
        }
    }, {
        key: "isMyFriend",
        value: function isMyFriend(uid) {
            var friend = this.friends.get(uid);
            return friend && friend.state === 0 ? true : false;
        }
    }, {
        key: "isBlocked",
        value: function isBlocked(uid) {
            var friend = this.friends.get(uid);
            return friend && friend.state === 2;
        }
    }, {
        key: "insertFriend",
        value: function insertFriend(friendInfo) {
            var info = this.friends.get(friendInfo.uid);
            if (!info || friendInfo.updateDt.compare(info.updateDt) > 0) {
                this.friends.set(friendInfo.uid, (0, _assign2.default)(new _friendInfo2.default(), friendInfo));
            }
        }
    }, {
        key: "addFavGroup",
        value: function addFavGroup(groupId) {
            var index = this.favGroups.indexOf(groupId);
            if (index >= 0) {
                return;
            }
            this.favGroups.push(groupId);
        }
    }, {
        key: "removeFavGroup",
        value: function removeFavGroup(groupId) {
            this.favGroups = this.favGroups.filter(function (groupInfo) {
                return groupInfo.target !== groupId;
            });
        }
    }, {
        key: "getFavGroups",
        value: function getFavGroups() {
            return this.favGroups;
        }
    }, {
        key: "isFavGroup",
        value: function isFavGroup(groupId) {
            var index = this.favGroups.indexOf(groupId);
            return index >= 0;
        }
    }, {
        key: "getFavUsers",
        value: function getFavUsers() {
            return this.favUsers;
        }
    }, {
        key: "isFavUser",
        value: function isFavUser(userId) {
            var index = this.favUsers.indexOf(userId);
            return index >= 0;
        }
    }, {
        key: "getFavGroupInfos",
        value: function getFavGroupInfos() {
            var _this2 = this;

            var groupInfos = [];
            this.favGroups.map(function (groupId) {
                //let groupInfo = this.groups.get(groupId);
                var groupInfo = _this2._get(_this2.groups, 'g', groupId, _groupInfo2.default);
                groupInfos.push(groupInfo);
            });

            // TODO sort
            return groupInfos;
        }
    }, {
        key: "getFriendAlias",
        value: function getFriendAlias(uid) {
            var friend = this.friends.get(uid);
            var alias = friend ? friend.alias : '';
            return alias.length > 0 ? alias : null;
        }
    }, {
        key: "getFriendExtra",
        value: function getFriendExtra(uid) {
            var friend = this.friends.get(uid);
            var extra = friend ? friend.extra : '';
            return extra.length > 0 ? extra : null;
        }
    }, {
        key: "getFriendUserInfos",
        value: function getFriendUserInfos() {
            var _this3 = this;

            var userInfos = [];
            this.friends.forEach(function (friend, uid) {
                if (friend.state === 0) {
                    var userInfo = _this3.getUser(uid);
                    userInfos.push(userInfo);
                }
            });
            // TODO sort

            return userInfos;
        }
    }, {
        key: "getConversationInfo",
        value: function getConversationInfo(conversation) {
            var cs = this.conversationInfos.filter(function (info) {
                return info.conversation.equal(conversation);
            });
            if (cs && cs.length > 0) {
                return cs[0];
            }
            return null;
        }
    }, {
        key: "clearConversationUnreadStatus",
        value: function clearConversationUnreadStatus(conversation) {
            var info = this.getConversationInfo(conversation);
            var count = 0;
            if (info) {
                count = info.unreadCount.unread + info.unreadCount.unreadMention + info.unreadCount.unreadMentionAll;
                this.updateConversationUnreadStatus(conversation, info.timestamp);
            }
            // TODO FIXME
            // 请消息未读状态
            return count;
        }
    }, {
        key: "clearMessageUnreadStatus",
        value: function clearMessageUnreadStatus(messageId) {
            var cleared = false;
            for (var i = 0; i < this.messages.length; i++) {
                var msg = this.messages[i];
                if (msg.messageId === messageId && [_messageStatus2.default.Unread, _messageStatus2.default.Mentioned, _messageStatus2.default.AllMentioned].indexOf(msg.status) > -1) {
                    var info = this.getConversationInfo(msg.conversation);
                    if (info) {
                        switch (msg.status) {
                            case _messageStatus2.default.Unread:
                                info.unreadCount.unread -= 1;
                                break;
                            case _messageStatus2.default.Mentioned:
                                info.unreadCount.unreadMention -= 1;
                                break;
                            case _messageStatus2.default.AllMentioned:
                                info.unreadCount.unreadMentionAll -= 1;
                                break;
                            default:
                                break;
                        }
                        cleared = true;
                    }
                    msg.status = _messageStatus2.default.Readed;
                    break;
                }
            }
            return cleared;
        }

        // 对方是否已读，仅限于单聊会话
        // 已废弃

    }, {
        key: "updateConversationRead",
        value: function updateConversationRead(conversation, dt) {
            var _this4 = this;

            this.messages.forEach(function (message) {
                if (message.conversation.equal(conversation) && message.status === _messageStatus2.default.Sent && (0, _longUtil.lte)(message.timestamp, dt)) {
                    message.status = _messageStatus2.default.Readed;
                    _this4.log('--------- mark conversation message read', conversation, dt);
                }
            });
        }
    }, {
        key: "getConversationReadMaxDt",
        value: function getConversationReadMaxDt(conversation) {
            var maxDt = _long2.default.ZERO;
            this.messages.forEach(function (message) {
                if (message.conversation.equal(conversation)) {
                    maxDt = (0, _longUtil.gt)(message.timestamp, maxDt) ? message.timestamp : maxDt;
                }
            });
            return maxDt;
        }
    }, {
        key: "getUnreadMsgSenders",
        value: function getUnreadMsgSenders(conversation) {
            var senders = [];
            this.messages.forEach(function (msg) {
                if (msg.conversation.equal(conversation)) {
                    if (msg.status === _messageStatus2.default.Unread || msg.status === _messageStatus2.default.Mentioned || msg.status === _messageStatus2.default.AllMentioned) {
                        if (senders.indexOf(msg.from) === -1) {
                            senders.push(msg.from);
                        }
                    }
                }
            });
            return senders;
        }
    }, {
        key: "clearAllUnreadStatus",
        value: function clearAllUnreadStatus() {
            var _this5 = this;

            var count = 0;
            this.conversationInfos.forEach(function (info) {
                count += info.unreadCount.unread + info.unreadCount.unreadMention + info.unreadCount.unreadMentionAll;
                _this5.updateConversationUnreadStatus(info.conversation, info.timestamp);
            });
            return count;
        }
    }, {
        key: "updateConversationUnreadStatus",
        value: function updateConversationUnreadStatus(conversation, readDt) {
            var cMsgs = this.getConversationMessages(conversation);
            var cInfo = this.getConversationInfo(conversation);
            cInfo.unreadCount.unread = 0;
            cInfo.unreadCount.unreadMention = 0;
            cInfo.unreadCount.unreadMentionAll = 0;

            if ((0, _longUtil.gte)(readDt, cInfo.timestamp)) {
                cMsgs.forEach(function (m) {
                    if ((0, _longUtil.gte)(readDt, m.timestamp) && [_messageStatus2.default.Unread, _messageStatus2.default.AllMentioned, _messageStatus2.default.Mentioned].indexOf(m.status) > -1) {
                        m.status = _messageStatus2.default.Readed;
                    }
                });
            } else {
                cMsgs.forEach(function (m) {
                    if (m.direction === 0) {
                        return;
                    }
                    if ((0, _longUtil.gt)(m.timestamp, readDt) && _messageConfig2.default.getMessageContentPersitFlag(m.content.type) === _persistFlag2.default.Persist_And_Count) {
                        if (m.status === _messageStatus2.default.Unread) {
                            cInfo.unreadCount.unread += 1;
                        } else if (m.status === _messageStatus2.default.Mentioned) {
                            cInfo.unreadCount.unreadMention += 1;
                        } else if (m.status === _messageStatus2.default.AllMentioned) {
                            cInfo.unreadCount.unreadMentionAll += 1;
                        }
                    } else {
                        if ([_messageStatus2.default.Unread, _messageStatus2.default.AllMentioned, _messageStatus2.default.Mentioned].indexOf(m.status) > -1) {
                            m.status = _messageStatus2.default.Readed;
                        }
                    }
                });
            }
        }
    }, {
        key: "_getConversationInfos",
        value: function _getConversationInfos() {
            return this.conversationInfos;
        }
    }, {
        key: "getConversationList",
        value: function getConversationList(types, lines) {
            var filterConversations = this.conversationInfos.filter(function (ci) {
                if (types.indexOf(ci.conversation.type) === -1 || lines.indexOf(ci.conversation.line) === -1) {
                    return false;
                }
                var target = ci.conversation.target;
                var type = ci.conversation.type;

                // if (type === ConversationType.Single) {
                //     let userInfo = this.getUser(target, false);
                //     if (userInfo instanceof NullUserInfo) {
                //         return false;
                //     }
                // } else if (type === ConversationType.Group) {
                //     let groupInfo = this.getGroupInfo(target);
                //     if (groupInfo instanceof NullGroupInfo) {
                //         return false;
                //     }
                // }
                return true;
            });
            return filterConversations.sort(function (a, b) {
                if (a.top && !b.top) {
                    return 1;
                } else if (!a.top && b.top) {
                    return -1;
                } else if (a.top && b.top && a.top !== b.top) {
                    return a.top > b.top ? 1 : -1;
                } else {
                    return (0, _longUtil.compare)(a.timestamp, b.timestamp);
                }
            }).reverse();
        }
    }, {
        key: "searchFriends",
        value: function searchFriends(keyword) {
            var friendsInfo = this.getFriendUserInfos();
            return friendsInfo.filter(function (info) {
                return info.displayName.indexOf(keyword) >= 0;
            });
        }
    }, {
        key: "searchConversation",
        value: function searchConversation(keyword) {
            var _this6 = this;

            var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 1, 2, 3];
            var lines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 1];

            return this.conversationInfos.filter(function (info) {
                if (types.indexOf(info.conversation.type) < 0 || lines.indexOf(info.conversation.line) < 0) {
                    return false;
                }
                var displayName = void 0;
                var groupRemark = void 0;
                switch (info.conversation.type) {
                    case _conversationType2.default.Single:
                        var userinfo = _this6.getUser(info.conversation.target);
                        displayName = userinfo.displayName;
                        break;
                    case _conversationType2.default.Group:
                        var groupInfo = _this6.getGroupInfo(info.conversation.target);
                        displayName = groupInfo.displayName;
                        groupRemark = groupInfo.remark;
                        break;

                    default:
                        break;
                }

                if (displayName && displayName.indexOf(keyword) > -1 || groupRemark && groupRemark.indexOf(keyword) > -1) {
                    return true;
                }

                var msgs = _this6.searchConversationMessage(info.conversation, keyword);
                return msgs && msgs.length > 0;
            });
        }
    }, {
        key: "searchGroups",
        value: function searchGroups(keyword) {
            var _this7 = this;

            var result = [];
            if (!keyword || !keyword.trim()) {
                return result;
            }
            var groups = this.groups;
            keyword = keyword.toUpperCase();
            groups.forEach(function (groupInfo, groupId) {
                if ((0, _longUtil.lt)(groupInfo.memberUpdateDt, 0)) {
                    return;
                }
                var remarkSetting = _this7.getUserSetting(_userSettingScope2.default.GroupRemark, groupId);
                groupInfo.remark = remarkSetting ? remarkSetting.value : '';
                if (groupInfo.name.toUpperCase().indexOf(keyword) > -1 || groupInfo.remark && groupInfo.remark.toUpperCase().indexOf(keyword) > -1) {
                    result.push(groupInfo);
                }
            });
            return result.map(function (g) {
                var gsr = new _groupSearchResult2.default();
                gsr.groupInfo = g;
                gsr.matchType = 0;
                return gsr;
            });
        }
    }, {
        key: "loadPersistGroups",
        value: function loadPersistGroups() {
            if (this.groups.size > 0) {
                return;
            }
            var len = localStorage.length;
            for (var i = 0; i < len; i++) {
                var key = localStorage.key(i);
                if (key.startsWith(this.impl.userId + '-' + 'g')) {
                    var value = localStorage.getItem(key);
                    if (value) {
                        value = this.impl._Utf8ArrayToStr((0, _aes.AESDecrypt)(value, '', false, false));
                        if (value) {
                            var groupInfo = (0, _assign2.default)(new _groupInfo2.default(), JSON.parse(value));
                            var curGroupInfo = this.groups.get(groupInfo.target);
                            if (!curGroupInfo || (0, _longUtil.gt)(groupInfo.updateDt, curGroupInfo.updateDt)) {
                                this.groups.set(groupInfo.target, groupInfo);
                            }
                        }
                    }
                }
            }
        }
    }, {
        key: "_findConversationInfoIndex",
        value: function _findConversationInfoIndex(conversation) {
            for (var i = 0; i < this.conversationInfos.length; i++) {
                if (this.conversationInfos[i].conversation.equal(conversation)) {
                    return i;
                }
            }
            return -1;
        }
    }, {
        key: "removeConversation",
        value: function removeConversation(conversation) {
            var clearMsg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var index = this._findConversationInfoIndex(conversation);
            if (index > -1) {
                this.conversationInfos.splice(index, 1);
            }
            if (clearMsg) {
                this.messages = this.messages.filter(function (message) {
                    return !message.conversation.equal(conversation);
                });
            }
        }
    }, {
        key: "setConversationTop",
        value: function setConversationTop(conversation, top) {
            var info = this.getConversationInfo(conversation);
            if (info) {
                info.top = top;
            }
        }
    }, {
        key: "setConversationSilent",
        value: function setConversationSilent(conversation, silent) {
            var info = this.getConversationInfo(conversation);
            if (info) {
                info.isSilent = silent;
            }
        }
    }, {
        key: "setConversationDraft",
        value: function setConversationDraft(conversation, draft) {
            var info = this.getConversationInfo(conversation);
            if (info) {
                info.draft = draft;
            }
        }
    }, {
        key: "getUnreadCount",
        value: function getUnreadCount(types, lines) {
            var unreadCount = new _unreadCount2.default();
            this.conversationInfos.forEach(function (info) {
                if (types.indexOf(info.conversation.type) > -1 && lines.indexOf(info.conversation.line) > -1 && info.unreadCount) {
                    unreadCount.unread += info.unreadCount.unread;
                    unreadCount.unreadMention += info.unreadCount.unreadMention;
                    unreadCount.unreadMentionAll += info.unreadCount.unreadMentionAll;
                }
            });
            return unreadCount;
        }
    }, {
        key: "getConversationUnreadCount",
        value: function getConversationUnreadCount(conversation) {
            var i = this._findConversationInfoIndex(conversation);
            if (i > -1) {
                var info = this.conversationInfos[i];
                return info.unreadCount;
            }
            return null;
        }
    }, {
        key: "insertConversationMessages",
        value: function insertConversationMessages(messages) {
            var _messages;

            (_messages = this.messages).push.apply(_messages, (0, _toConsumableArray3.default)(messages));
            this.updateConversationLastMessage(messages[messages.length - 1]);
        }
    }, {
        key: "updateConversationLastMessage",
        value: function updateConversationLastMessage(message) {
            if (!message.messageId) {
                return;
            }
            var info = this.conversationInfos.find(function (c) {
                return c.conversation.equal(message.conversation);
            });
            if (!info) {
                var _setting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, message.conversation.conversationType + "-" + message.conversation.line + "-" + message.conversation.target);
                if (_setting && _setting.value && _setting.value.startsWith('-') && (0, _longUtil.gte)(-Number(_setting.value), message.timestamp)) {
                    this.log('conversation removed, drop conversation message', message);
                    return;
                }
                info = new _conversationInfo2.default();
                info.conversation = message.conversation;
                info.timestamp = message.timestamp;
                info.unreadCount = new _unreadCount2.default();
                this.conversationInfos.push(info);
            }
            var conversation = info.conversation;
            var setting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, conversation.conversationType + '-' + conversation.line + '-' + conversation.target);
            var readDt = 0;
            if (setting) {
                readDt = Number(setting.value);
            }
            if ((0, _longUtil.gte)(message.timestamp, info.timestamp)) {
                info.lastMessage = message;
                info.timestamp = message.timestamp;
            }
            if ((0, _longUtil.gt)(message.timestamp, readDt)) {
                if (message.direction === 1 && _messageConfig2.default.getMessageContentFlag(message.messageContent.type) === _persistFlag2.default.Persist_And_Count) {
                    if (message.status === _messageStatus2.default.Unread) {
                        info.unreadCount.unread += 1;
                    } else if (message.status === _messageStatus2.default.Mentioned) {
                        info.unreadCount.unreadMention += 1;
                    } else if (message.status === _messageStatus2.default.AllMentioned) {
                        info.unreadCount.unreadMentionAll += 1;
                    }
                }
            }
        }
    }, {
        key: "getConversationOldestMessage",
        value: function getConversationOldestMessage(conversation) {
            var oldestMsg = void 0;
            this.messages.forEach(function (message) {
                if (message.conversation.equal(conversation)) {
                    if (!oldestMsg) {
                        oldestMsg = message;
                    } else {
                        if ((0, _longUtil.gt)(oldestMsg.timestamp, message.timestamp)) {
                            oldestMsg = message;
                        }
                    }
                }
            });
            return oldestMsg;
        }
    }, {
        key: "getConversationMessages",
        value: function getConversationMessages(conversation) {
            var fromIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var before = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var withUser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';

            var fromMsg = null;
            if (fromIndex) {
                fromMsg = this.getMessageById(fromIndex);
            }
            var cmsgs = this.messages.filter(function (message) {
                if (fromMsg) {
                    if (before) {
                        return message.conversation.equal(conversation) && (0, _longUtil.lt)(message.timestamp, fromMsg.timestamp) && (withUser ? message.direction === 0 && (message.to === withUser || message.to === '') || message.from === withUser : true);
                    } else {
                        return message.conversation.equal(conversation) && (0, _longUtil.gt)(message.timestamp, fromMsg.timestamp) && (withUser ? message.direction === 0 && (message.to === withUser || message.to === '') || message.from === withUser : true);
                    }
                } else {
                    return message.conversation.equal(conversation);
                }
            });
            if (cmsgs && cmsgs.length > 0) {
                cmsgs = cmsgs.sort(function (m1, m2) {
                    return (0, _longUtil.compare)(m1.timestamp, m2.timestamp);
                });
            }

            if (count > 0) {
                if (before) {
                    cmsgs = cmsgs.slice(-count);
                } else {
                    cmsgs = cmsgs.slice(0, count);
                }
            }

            return cmsgs;
        }
    }, {
        key: "getConversationLastReceivedMessage",
        value: function getConversationLastReceivedMessage(conversation) {
            var cmsgs = this.messages.filter(function (message) {
                return message.conversation.equal(conversation) && message.direction === 1;
            });
            if (cmsgs && cmsgs.length > 0) {
                cmsgs = cmsgs.sort(function (m1, m2) {
                    return (0, _longUtil.compare)(m1.timestamp, m2.timestamp);
                });
                return cmsgs[cmsgs.length - 1];
            }
            return null;
        }
    }, {
        key: "setLastReceivedMessageUnread",
        value: function setLastReceivedMessageUnread(conversation, lastMsgUid, timestamp) {
            console.log('setLastReceivedMessageUnread', conversation, lastMsgUid);
            var msg = this.getConversationLastReceivedMessage(conversation);
            if (msg && msg.status > _messageStatus2.default.Unread) {
                msg.status = _messageStatus2.default.Unread;

                if ((0, _longUtil.eq)(timestamp, 0)) {
                    msg.timestamp = msg.timestamp.add(501);
                } else {
                    msg.timestamp = _long2.default.fromValue(timestamp);
                }
                var cinfo = this.getConversationInfo(conversation);
                cinfo.unreadCount.unread = 1;

                return msg.messageUid;
            }
            return 0;
        }
    }, {
        key: "getMessagesEx2",
        value: function getMessagesEx2(conversationTypes, lines, messageStatus, withUser) {
            var msgs = this.messages.filter(function (message) {
                var conversation = message.conversation;
                var result = conversationTypes.indexOf(conversation.conversationType) >= 0 && lines.indexOf(conversation.line) >= 0 && (messageStatus === _messageStatus2.default.All || message.status === messageStatus);

                if (!result) {
                    return false;
                }

                if (!withUser) {
                    return true;
                } else {
                    if (conversation.conversationType === _conversationType2.default.Single) {
                        return message.from === withUser || conversation.target === withUser;
                    } else {
                        return message.from === withUser || message.to === withUser;
                    }
                }
            });

            if (msgs && msgs.length > 0) {
                return msgs.sort(function (m1, m2) {
                    return (0, _longUtil.compare)(m1.timestamp, m2.timestamp);
                });
            }

            return msgs;
        }
    }, {
        key: "getMessagesEx",
        value: function getMessagesEx(conversationTypes, lines, contentTypes, withUser) {
            var msgs = this.messages.filter(function (message) {
                var conversation = message.conversation;
                var result = conversationTypes.indexOf(conversation.conversationType) >= 0 && lines.indexOf(conversation.line) >= 0 && (contentTypes.length === 0 || contentTypes.length > 0 && contentTypes.indexOf(_messageConfig2.default.getMessageContentType(message.messageContent)) >= 0);

                if (!result) {
                    return false;
                }

                if (!withUser) {
                    return true;
                } else {
                    if (conversation.conversationType === _conversationType2.default.Single) {
                        return message.from === withUser || conversation.target === withUser;
                    } else {
                        return message.from === withUser || message.to === withUser;
                    }
                }
            });

            if (msgs && msgs.length > 0) {
                return msgs.sort(function (m1, m2) {
                    return (0, _longUtil.compare)(m1.timestamp, m2.timestamp);
                });
            }

            return msgs;
        }
    }, {
        key: "getFirstUnreadMessage",
        value: function getFirstUnreadMessage(conversation) {
            var firstUnreadMessage = null;
            this.messages.forEach(function (message) {
                if (message.conversation.equal(conversation)) {
                    if ([_messageStatus2.default.Unread, _messageStatus2.default.Mentioned, _messageStatus2.default.AllMentioned].indexOf(message.status) > -1) {
                        if (!firstUnreadMessage) {
                            firstUnreadMessage = message;
                        } else {
                            if ((0, _longUtil.gt)(firstUnreadMessage.timestamp, message.timestamp)) {
                                firstUnreadMessage = message;
                            }
                        }
                    }
                }
            });
            return firstUnreadMessage;
        }
    }, {
        key: "clearConversationMessages",
        value: function clearConversationMessages(conversation, dt) {
            this.messages = this.messages.filter(function (message) {
                return !message.conversation.equal(conversation) || (0, _longUtil.gt)(message.timestamp, dt);
            });
            var conversationInfo = this.getConversationInfo(conversation);
            if (conversationInfo && conversationInfo.lastMessage && conversationInfo.lastMessage.timestamp && (0, _longUtil.lte)(conversationInfo.lastMessage.timestamp, dt)) {
                conversationInfo.lastMessage = null;
            }
        }
    }, {
        key: "clearConversationMessagesBeforeMessageUid",
        value: function clearConversationMessagesBeforeMessageUid(conversation, messageUid) {
            this.messages = this.messages.filter(function (message) {
                return !message.conversation.equal(conversation) || (0, _longUtil.gte)(message.messageUid, messageUid);
            });
            var conversationInfo = this.getConversationInfo(conversation);
            if (conversationInfo && conversationInfo.lastMessage && conversationInfo.lastMessage.messageUid && (0, _longUtil.lte)(conversationInfo.lastMessage.messageUid, messageUid)) {
                conversationInfo.lastMessage = null;
            }
        }
    }, {
        key: "searchMessage",
        value: function searchMessage(keyword) {
            return this.messages.filter(function (message) {
                return message.content && message.content.searchableContent && message.content.searchableContent.indexOf(keyword) > -1;
            });
        }
    }, {
        key: "searchConversationMessage",
        value: function searchConversationMessage(conversation, keyword, withUser) {
            var msgs = this.getConversationMessages(conversation);
            return msgs.filter(function (message) {
                if (withUser && message.from !== withUser) {
                    return false;
                }
                return message.content && message.content.searchableContent && message.content.searchableContent.indexOf(keyword) > -1;
            });
        }
    }, {
        key: "genChatRoomMessageId",
        value: function genChatRoomMessageId() {
            this.chatRoomMessageId++;
            return 0 - this.chatRoomMessageId;
        }
    }, {
        key: "genNormalMessageId",
        value: function genNormalMessageId() {
            return this.messageId++;
        }
    }, {
        key: "saveMessage",
        value: function saveMessage(message) {
            var msg = void 0;
            if (message.messageUid && message.messageUid !== -1) {
                msg = this.getMessageByUid(message.messageUid);
                if (msg) {
                    message.messageId = msg.messageId;
                    this.log('messageUid exist', message);
                    return false;
                }
            }
            // update message status
            var setting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, message.conversation.conversationType + '-' + message.conversation.line + '-' + message.conversation.target);
            var readDt = 0;
            if (setting) {
                readDt = Number(setting.value);
            }
            if (message.direction === 1 && (0, _longUtil.gte)(readDt, message.timestamp)) {
                message.status = _messageStatus2.default.Readed;
            }

            this.messages.push(message);
            return true;
        }
    }, {
        key: "updateMessageById",
        value: function updateMessageById(message) {
            if (!message.messageId) {
                return;
            }
            var i = -1;
            for (var index = 0; index < this.messages.length; index++) {
                var element = this.messages[index];
                if (element.messageId === message.messageId) {
                    i = index;
                    break;
                }
            }
            if (i !== -1) {
                this.messages[i] = message;
                var conversationInfo = this.getConversationInfo(message.conversation);
                if (conversationInfo && conversationInfo.lastMessage.messageId === message.messageId) {
                    conversationInfo.lastMessage = message;
                }
            }
        }
    }, {
        key: "deleteMessageById",
        value: function deleteMessageById(messageId) {
            var i = void 0;
            for (var index = 0; index < this.messages.length; index++) {
                var element = this.messages[index];
                if (element.messageId === messageId) {
                    i = index;
                    break;
                }
            }
            if (i) {
                var messages = this.messages.splice(i, 1);
                var msg = messages[0];
                this.onMessageDeleted(msg);
                return true;
            }
            return false;
        }
    }, {
        key: "deleteMessageByUid",
        value: function deleteMessageByUid(messageUid) {
            var i = void 0;
            for (var index = 0; index < this.messages.length; index++) {
                var element = this.messages[index];
                if (element.messageUid.compare(messageUid) === 0) {
                    i = index;
                    break;
                }
            }
            if (i) {
                var messages = this.messages.splice(i, 1);
                var msg = messages[0];
                this.onMessageDeleted(msg);
                return true;
            }
            return false;
        }
    }, {
        key: "onMessageDeleted",
        value: function onMessageDeleted(deletedMsg) {
            if (!deletedMsg) {
                return;
            }
            var msg = deletedMsg;
            var conversationInfo = this.getConversationInfo(msg.conversation);

            var setting = this.getUserSetting(_userSettingScope2.default.Conversation_Sync, msg.conversation.conversationType + '-' + msg.conversation.line + '-' + msg.conversation.target);
            var readDt = 0;
            if (setting) {
                readDt = Number(setting.value);
            }
            if ((0, _longUtil.gt)(msg.timestamp, readDt)) {
                if (msg.direction === 1) {
                    if (msg.status === _messageStatus2.default.Unread) {
                        conversationInfo.unreadCount.unread -= 1;
                    } else if (msg.status === _messageStatus2.default.Mentioned) {
                        conversationInfo.unreadCount.unreadMention -= 1;
                    } else if (msg.status === _messageStatus2.default.AllMentioned) {
                        conversationInfo.unreadCount.unreadMentionAll -= 1;
                    }
                }
            }

            if (conversationInfo.lastMessage && conversationInfo.lastMessage.messageId === msg.messageId) {
                var cmsgs = this.getConversationMessages(msg.conversation);
                if (cmsgs && cmsgs.length > 0) {
                    conversationInfo.lastMessage = cmsgs[cmsgs.length - 1];
                } else {
                    conversationInfo.lastMessage = null;
                }
            }
        }
    }, {
        key: "deleteFriend",
        value: function deleteFriend(friendId) {
            this.friends.delete(friendId);
        }
    }, {
        key: "getMessageById",
        value: function getMessageById(messageId) {
            var result = this.messages.filter(function (msg) {
                return msg.messageId === messageId;
            });
            if (result.length > 0) {
                return result[0];
            }
            return null;
        }
    }, {
        key: "getMessageByUid",
        value: function getMessageByUid(messageUid) {
            var messageUidLong = _long2.default.fromValue(messageUid);
            var result = this.messages.filter(function (msg) {
                return messageUidLong.compare(msg.messageUid) === 0;
            });
            if (result && result.length > 0) {
                return result[0];
            }
            return null;
        }
    }, {
        key: "setMediaMessagePlayed",
        value: function setMediaMessagePlayed(messageId) {
            var result = false;
            var msg = this.getMessageById(messageId);
            if (msg.messageContent instanceof _mediaMessageContent2.default && msg.direction === 1) {
                msg.status = _messageStatus2.default.Played;
                result = true;
            }
            return result;
        }

        // TODO 目前不需要
        // getMessages(conversation, fromIndex, before = true, count = 20, withUser = '') {
        //     let msgs = [];
        //     let msg;
        //     let timestamp;
        //     let tmpMsgs = this.messages.filter(message => {
        //         message.messageId === fromIndex;
        //     });
        //     if (tmpMsgs.length > 0) {
        //         timestamp = tmpMsgs[0].timestamp;
        //     } else {
        //         if (before) {
        //             timestamp = Number.MAX_SAFE_INTEGER;
        //         } else {
        //             timestamp = 0;
        //         }
        //     }


        //     if (before) {
        //         for (let i = this.messages.length - 1; i >= 0; i--) {
        //             msg = this.messages[i];
        //             if (msg.conversation.equal(conversation) && msg.timestamp < timestamp) {
        //                 if (withUser.length > 0 && (msg.direction === 0 && (msg.to === '' || msg.to === withUser))) {

        //                 } else {
        //                     msgs.push(msg);
        //                 }
        //             }

        //         }
        //     } else {

        //     }
        //     return msgs;
        // }

    }, {
        key: "updateUserSettings",
        value: function updateUserSettings(settings) {
            var _this8 = this;

            settings.sort(function (a, b) {
                return (0, _longUtil.compare)(a.updateDt, b.updateDt);
            });
            settings.forEach(function (setting) {
                if (!setting.updateDt) {
                    console.log('invalid setting', setting);
                    return;
                }
                var i = -1;
                for (var index = 0; index < _this8.settings.length; index++) {
                    var element = _this8.settings[index];
                    if (element.key === setting.key && element.scope === setting.scope) {
                        i = index;
                        break;
                    }
                }
                if (i >= 0) {
                    if (setting.value === '') {
                        _this8.settings.splice(i, 1);
                    } else {
                        _this8.settings[i] = setting;
                    }
                } else {
                    if (setting.value !== '') {
                        _this8.settings.push(setting);
                    }
                }

                if (setting.scope === _userSettingScope2.default.ConversationSilent || setting.scope === _userSettingScope2.default.ConversationTop || setting.scope === _userSettingScope2.default.Conversation_Sync || setting.scope === _userSettingScope2.default.UserSettingConversationReaded || setting.scope === _userSettingScope2.default.ConversationClearMessage || setting.scope === _userSettingScope2.default.ConversationDraft) {
                    var key = setting.key;
                    var index_0 = key.indexOf('-');
                    var index_1 = key.indexOf('-', index_0 + 1);
                    var type = parseInt(key.substring(0, index_0));
                    var line = parseInt(key.substring(index_0 + 1, index_1));
                    var target = key.substring(index_1 + 1);

                    var conversation = new _conversation2.default(type, target, line);
                    var info = _this8.getConversationInfo(conversation);
                    if (!info) {
                        // if (setting.scope === UserSettingScope.Conversation_Sync || setting.scope === UserSettingScope.UserSettingConversationReaded) {
                        var dt = Number(setting.value);
                        //消息的时间戳精度是毫秒，但数据库字段用的是timestamp格式，这样如果消息直接从缓存中取出来，精度是到毫秒的。如果是从数据库读取出来精度只能到秒。这样消息的时间最大会变大500毫秒。因此根据消息时间处理同步未读和已读就不准确了，处理方法就是把这个时间增加500毫秒。
                        dt = dt % 1000 < 500 ? dt : dt + (1000 - dt % 1000);
                        if (dt < 0 || dt > 0 && new Date().getTime() - dt >= (_config2.default.CONVERSATION_EXPIRE_TIME ? _config2.default.CONVERSATION_EXPIRE_TIME : 30) * 24 * 60 * 60 * 1000) {
                            return;
                        }
                        // }
                        if (setting.scope === _userSettingScope2.default.ConversationSilent && setting.value === '1' || _config2.default.DISABLE_GENERATE_CONVERSATION_FOR_SILENT_SETTING) {
                            return;
                        }

                        // if (setting.scope === UserSettingScope.ConversationTop && setting.value === '0') {
                        //     return;
                        // }

                        //if(setting.scope !== UserSettingScope.ConversationDraft){
                        info = _this8.genAndSaveDefaultConversationInfo(conversation);
                        info.timestamp = setting.updateDt;
                        //}
                    }
                    if (setting.scope === _userSettingScope2.default.ConversationSilent) {
                        info.isSilent = setting.value === '1';
                    } else if (setting.scope === _userSettingScope2.default.ConversationTop) {
                        info.top = Number(setting.value);
                    } else if (setting.scope === _userSettingScope2.default.Conversation_Sync) {
                        var _dt = Number(setting.value);
                        // 更新已读状态
                        if (_dt < 0) {
                            if ((0, _longUtil.lte)(info.timestamp, -_dt)) {
                                _this8.removeConversation(conversation, true);
                            }
                        } else {
                            _this8.updateConversationUnreadStatus(conversation, _dt);
                        }
                    } else if (setting.scope === _userSettingScope2.default.UserSettingConversationReaded) {
                        _this8.updateConversationRead(conversation, Number(setting.value));
                    } else if (setting.scope === _userSettingScope2.default.ConversationClearMessage) {
                        var _dt2 = Number(setting.value);
                        if (info && _dt2 > 0) {
                            _this8.impl.clearMessages(conversation, _dt2);
                        }
                    } else if (setting.scope === _userSettingScope2.default.ConversationDraft) {
                        var position = setting.value.indexOf('@@@');
                        if (position > 0) {
                            var clientId = setting.value.substring(0, position);
                            if (!clientId || clientId === _this8.impl.clientId || _this8.impl.isGlobalDisableDraftSync || _this8.impl.isDisableSyncDraft()) {
                                // this.log('invalid draft sync', setting)
                                return;
                            }
                            var draft = setting.value.substring(position + 3).trim();
                            // if(!info && draft){
                            //     info = this._genAndSaveDefaultConversationInfo(conversation);
                            //     info.timestamp = setting.updateDt;
                            // }
                            if (info && info.draft !== draft) {
                                _this8.impl.setConversationDraft(conversation, draft, false);
                            }
                        }
                    }
                } else if (setting.scope === _userSettingScope2.default.FavoriteGroup) {
                    var _index = _this8.favGroups.indexOf(setting.key);
                    if (setting.value === '1') {
                        if (_index < 0) {
                            _this8.favGroups.push(setting.key);
                        }
                    } else {
                        if (_index >= 0) {
                            _this8.favGroups.splice(_index, 1);
                        }
                    }
                } else if (setting.scope === _userSettingScope2.default.FavoriteUser) {
                    var _index2 = _this8.favUsers.indexOf(setting.key);
                    if (setting.value === '1') {
                        if (_index2 < 0) {
                            _this8.favUsers.push(setting.key);
                        }
                    } else {
                        if (_index2 >= 0) {
                            _this8.favUsers.splice(_index2, 1);
                        }
                    }
                }
            });
        }
    }, {
        key: "genAndSaveDefaultConversationInfo",
        value: function genAndSaveDefaultConversationInfo(conversation) {
            var index = this._findConversationInfoIndex(conversation);
            if (index !== -1) {
                return this.conversationInfos[index];
            }
            var info = new _conversationInfo2.default();
            info.conversation = conversation;
            info.timestamp = _long2.default.ZERO;
            info.unreadCount = new _unreadCount2.default();
            this.conversationInfos.push(info);
            return info;
        }
    }, {
        key: "updateDeliveries",
        value: function updateDeliveries(deliveries) {
            var _this9 = this;

            deliveries.forEach(function (d) {
                _this9.deliveries.set(d.fromUser, d.receiveTime);
            });
        }
    }, {
        key: "getUserDelivery",
        value: function getUserDelivery(userId) {
            return this.deliveries.get(userId);
        }
    }, {
        key: "getConversationDelivery",
        value: function getConversationDelivery(conversation) {
            var result = new _map2.default();
            if (conversation.type === 0) {
                var recvTime = this.getUserDelivery(conversation.target);
                if (recvTime) {
                    result.set(conversation.target, recvTime);
                }
            } else if (conversation.type === 1) {
                var groupMembers = this.getGroupMemberIds(conversation.target);
                this.deliveries.forEach(function (v, k) {
                    if (groupMembers.indexOf(k) >= 0) {
                        result.set(k, v);
                    }
                });
            }
            return result;
        }
    }, {
        key: "updateReads",
        value: function updateReads(readEntries) {
            var _this10 = this;

            readEntries.forEach(function (r) {
                if (r.conversation.type === 0) {
                    r.conversation.target = r.fromUser;
                }
                var convKey = _this10.genConversationKey(r.conversation);
                var convReadEntries = _this10.readEntries.get(convKey);
                if (!convReadEntries) {
                    convReadEntries = new _map2.default();
                    _this10.readEntries.set(convKey, convReadEntries);
                }
                convReadEntries.set(r.fromUser, r.readTime);
            });
        }
    }, {
        key: "saveSyncReadEntry",
        value: function saveSyncReadEntry(type, target, line, readDt, senders) {
            var syncReadId = this.syncReadId++;
            var entry = new _syncReadEntry2.default();
            entry.id = syncReadId;
            entry.type = type;
            entry.target = target;
            entry.line = line;
            entry.senders = senders;
            this.syncReadEntries.set(syncReadId, entry);
            return syncReadId;
        }
    }, {
        key: "deleteSyncReadEntry",
        value: function deleteSyncReadEntry(syncId) {
            this.syncReadEntries.delete(syncId);
        }
    }, {
        key: "getSyncReadEntries",
        value: function getSyncReadEntries() {
            return this.syncReadEntries;
        }
    }, {
        key: "loadSyncReadEntry",
        value: function loadSyncReadEntry() {
            return this.syncReadEntries.values().next().value;
        }
    }, {
        key: "_genSyncReadEntryKey",
        value: function _genSyncReadEntryKey(entry) {
            return entry.type + '@' + entry.target + '@' + entry.line;
        }
    }, {
        key: "getConversationRead",
        value: function getConversationRead(conversation) {
            var convKey = this._genSyncReadEntryKey(conversation);
            return this.readEntries.get(convKey);
        }
    }, {
        key: "getUserSetting",
        value: function getUserSetting(scope, key) {
            var settings = this.settings.filter(function (setting) {
                return setting.scope === scope && setting.key === key;
            });

            if (settings.length > 0) {
                return settings[settings.length - 1];
            }
            return null;
        }
    }, {
        key: "getUserSettings",
        value: function getUserSettings(scope) {
            return this.settings.filter(function (setting) {
                return setting.scope === scope;
            });
        }
    }, {
        key: "getFriendRequestMaxDt",
        value: function getFriendRequestMaxDt() {
            var maxDt = _long2.default.ZERO;
            this.friendRequests.forEach(function (f) {
                maxDt = (0, _longUtil.gt)(f.timestamp, maxDt) ? f.timestamp : maxDt;
            });
            return maxDt;
        }
    }, {
        key: "insertOrReplaceFriendRequest",
        value: function insertOrReplaceFriendRequest(friendRequest) {
            var i = -1;
            for (var index = 0; index < this.friendRequests.length; index++) {
                var element = this.friendRequests[index];
                if (element.direction === friendRequest.direction && element.target === friendRequest.target) {
                    i = index;
                    break;
                }
            }
            if (i >= 0) {
                this.friendRequests[i] = friendRequest;
            } else {
                this.friendRequests.push(friendRequest);
            }
        }
    }, {
        key: "getIncommingFriendRequest",
        value: function getIncommingFriendRequest() {
            return this.friendRequests.filter(function (friendRequest) {
                return friendRequest.direction === 1;
            });
        }
    }, {
        key: "getOutgoingFriendRequest",
        value: function getOutgoingFriendRequest() {
            return this.friendRequests.filter(function (friendRequest) {
                return friendRequest.direction === 0;
            });
        }
    }, {
        key: "getOneFriendRequest",
        value: function getOneFriendRequest(userId, incoming) {
            var requests = this.friendRequests.filter(function (friendRequest) {
                return friendRequest.target === userId && friendRequest.direction === (incoming ? 1 : 0);
            });
            return requests.length > 0 ? requests[0] : null;
        }
    }, {
        key: "getUnreadFriendRequestCount",
        value: function getUnreadFriendRequestCount() {
            var count = 0;
            this.friendRequests.forEach(function (friendRequest) {
                if (friendRequest.direction === 1 && friendRequest.readStatus === 0) {
                    count++;
                }
            });
            return count;
        }
    }, {
        key: "clearUnreadFriendRequestStatus",
        value: function clearUnreadFriendRequestStatus() {
            var count = 0;
            this.friendRequests.forEach(function (friendRequest) {
                if (friendRequest.direction === 1 && friendRequest.readStatus === 0) {
                    friendRequest.readStatus = 1;
                    count++;
                }
            });
            return count;
        }
    }, {
        key: "updateFriendRequestStatus",
        value: function updateFriendRequestStatus(targetId, status) {
            this.friendRequests.forEach(function (friendRequest) {
                if (friendRequest.target === targetId && friendRequest.direction === 1) {
                    friendRequest.status = status;
                }
            });
        }
    }, {
        key: "getUnreadFriendRequestMaxDt",
        value: function getUnreadFriendRequestMaxDt() {
            var maxDt = _long2.default.ZERO;
            this.friendRequests.forEach(function (friendRequest) {
                if (friendRequest.direction === 1 && friendRequest.readStatus === 0) {
                    maxDt = (0, _longUtil.gt)(friendRequest.timestamp, maxDt) ? friendRequest.timestamp : maxDt;
                }
            });
            return maxDt;
        }
    }, {
        key: "getGroupMessageHead",
        value: function getGroupMessageHead(target, line) {
            var entry = this.groupHeadEntries.get(target + "-" + line);
            if (entry) {
                return entry.head;
            } else {
                return _long2.default.ZERO;
            }
        }
    }, {
        key: "setGroupMessageHead",
        value: function setGroupMessageHead(target, line, head) {
            var key = target + "-" + line;
            var entry = this.groupHeadEntries.get(key);
            if (!entry) {
                entry = new _groupHeadEntry2.default();
                this.groupHeadEntries.set(key, entry);
            }
            entry.target = target;
            entry.line = line;
            entry.head = head;
        }
    }, {
        key: "setGroupMessageServerHead",
        value: function setGroupMessageServerHead(target, line, serverHead) {
            var key = target + "-" + line;
            var entry = this.groupHeadEntries.get(key);
            if (!entry) {
                entry = new _groupHeadEntry2.default();
                this.groupHeadEntries.set(key, entry);
            }
            entry.target = target;
            entry.line = line;
            entry.serverHead = serverHead;
        }
    }, {
        key: "getGroupMessageHeads",
        value: function getGroupMessageHeads() {
            var heads = [];
            this.groupHeadEntries.forEach(function (value, key) {
                if ((0, _longUtil.gt)(value.serverHead, value.head)) {
                    heads.push(value);
                }
            });
            return heads;
        }
    }, {
        key: "log",
        value: function log(message) {
            if (!_config2.default.DISABLE_LOG) {
                var _console;

                for (var _len = arguments.length, optionalParams = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    optionalParams[_key - 1] = arguments[_key];
                }

                (_console = console).log.apply(_console, [message].concat(optionalParams));
            }
        }
    }, {
        key: "_get",
        value: function _get(dataSource, type, key, targetClazz) {
            var value = dataSource.get(key);
            if (value) {
                return value;
            }
            if (_config2.default.ENABLE_INFO_PERSISTENCE) {
                var rkey = this.impl.userId + '-' + type + '-' + key;
                var _value = localStorage.getItem(rkey);
                if (_value) {
                    _value = this.impl._Utf8ArrayToStr((0, _aes.AESDecrypt)(_value, '', false, false));
                    if (_value) {
                        return (0, _assign2.default)(new targetClazz(), JSON.parse(_value));
                    }
                }
            }
            return null;
        }
    }, {
        key: "_set",
        value: function _set(dataSource, type, key, value) {
            dataSource.set(key, value);
            if (_config2.default.ENABLE_INFO_PERSISTENCE) {
                if (!value) {
                    value = '';
                } else {
                    value = (0, _stringify2.default)(value);
                }
                var rkey = this.impl.userId + '-' + type + '-' + key;

                value = (0, _aes.AESEncrypt)(value, '', false);
                localStorage.setItem(rkey, value);
            }
        }
    }, {
        key: "_delete",
        value: function _delete(dataSource, type, key) {
            dataSource.delete(key);
            if (_config2.default.ENABLE_INFO_PERSISTENCE) {
                var rkey = this.impl.userId + '-' + type + '-' + key;
                localStorage.removeItem(rkey);
            }
        }
    }]);
    return WfcStore;
}(); /*
      * Copyright (c) 2020 WildFireChat. All rights reserved.
      */

exports.default = WfcStore;

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(374), __esModule: true };

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(49);
__webpack_require__(26);
__webpack_require__(43);
__webpack_require__(375);
__webpack_require__(376);
__webpack_require__(377);
__webpack_require__(378);
module.exports = __webpack_require__(1).Set;


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(116);
var validate = __webpack_require__(80);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(117)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(2);

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(119)('Set') });


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(120)('Set');


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(121)('Set');


/***/ }),
/* 379 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__379__;

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = __webpack_require__(55);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2020 WildFireChat. All rights reserved.
 */

var SyncReadEntry = function SyncReadEntry() {
    (0, _classCallCheck3.default)(this, SyncReadEntry);
};

exports.default = SyncReadEntry;

/***/ }),
/* 381 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__381__;

/***/ }),
/* 382 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__382__;

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = __webpack_require__(55);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2022 WildFireChat. All rights reserved.
 */

var GroupHeadEntry = function GroupHeadEntry() {
    (0, _classCallCheck3.default)(this, GroupHeadEntry);
    this.line = 0;
    this.head = 0;
    this.serverHead = 0;
};

exports.default = GroupHeadEntry;

/***/ }),
/* 384 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__384__;

/***/ }),
/* 385 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__385__;

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Top level file is just a mixin of submodules & constants


var assign    = __webpack_require__(20).assign;

var deflate   = __webpack_require__(387);
var inflate   = __webpack_require__(390);
var constants = __webpack_require__(179);

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var zlib_deflate = __webpack_require__(388);
var utils        = __webpack_require__(20);
var strings      = __webpack_require__(177);
var msg          = __webpack_require__(95);
var ZStream      = __webpack_require__(178);

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = __webpack_require__(20);
var trees   = __webpack_require__(389);
var adler32 = __webpack_require__(175);
var crc32   = __webpack_require__(176);
var msg     = __webpack_require__(95);

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = __webpack_require__(20);

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var zlib_inflate = __webpack_require__(391);
var utils        = __webpack_require__(20);
var strings      = __webpack_require__(177);
var c            = __webpack_require__(179);
var msg          = __webpack_require__(95);
var ZStream      = __webpack_require__(178);
var GZheader     = __webpack_require__(394);

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== c.Z_OK) {
        throw new Error(msg[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);
    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 aligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = __webpack_require__(20);
var adler32       = __webpack_require__(175);
var crc32         = __webpack_require__(176);
var inflate_fast  = __webpack_require__(392);
var inflate_table = __webpack_require__(393);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__(20);

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;


/***/ }),
/* 395 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__395__;

/***/ }),
/* 396 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__396__;

/***/ }),
/* 397 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__397__;

/***/ }),
/* 398 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__398__;

/***/ }),
/* 399 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__399__;

/***/ }),
/* 400 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__400__;

/***/ }),
/* 401 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__401__;

/***/ }),
/* 402 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__402__;

/***/ }),
/* 403 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__403__;

/***/ }),
/* 404 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__404__;

/***/ }),
/* 405 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__405__;

/***/ })
/******/ ]);
});
//# sourceMappingURL=proto.min.js.map